,title,score,id,subreddit,url,num_comments,body,created,date_created
0,"Accidentally destroyed production database on first day of a job, and was told to leave, on top of this i was told by the CTO that they need to get legal involved, how screwed am i?",25956,6ez8ag,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6ez8ag/accidentally_destroyed_production_database_on/,4277,"Today was my first day on the job as a Junior Software Developer and was my first non-internship position after university. Unfortunately i screwed up badly. 

I was basically given a document detailing how to setup my local development environment. Which involves run a small script to create my own personal DB instance from some test data. After running the command i was supposed to copy the database url/password/username outputted by the command and configure my dev environment to point to that database. Unfortunately instead of copying the values outputted by the tool, i instead for whatever reason used the values the document had. 

Unfortunately apparently those values were actually for the production database (why they are documented in the dev setup guide i have no idea). Then from my understanding that the tests add fake data, and clear existing data between test runs which basically cleared all the data from the production database. Honestly i had no idea what i did and it wasn't about 30 or so minutes after did someone actually figure out/realize what i did.

While what i had done was sinking in. The CTO told me to leave and never come back. He also informed me that apparently legal would need to get involved due to severity of the data loss. I basically offered and pleaded to let me help in someway to redeem my self and i was told that i ""completely fucked everything up"". 

So i left. I kept an eye on slack, and from what i can tell the backups were not restoring and it seemed like the entire dev team was on full on panic mode. I sent a slack message to our CTO explaining my screw up. Only to have my slack account immediately disabled not long after sending the message. 

I haven't heard from HR, or anything and i am panicking to high heavens. I just moved across the country for this job, is there anything i can even remotely do to redeem my self in this situation? Can i possibly be sued for this? Should i contact HR directly? I am really confused, and terrified.

*EDIT* Just to make it even more embarrassing, i just realized that i took the laptop i was issued home with me (i have no idea why i did this at all). 

*EDIT 2* I just woke up, after deciding to drown my sorrows and i am shocked by the number of responses, well wishes and other things. Will do my best to sort through everything. ",1496491092.0,2017-06-03 07:58:12
1,I got fired over a variable name....,8355,dpcfns,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dpcfns/i_got_fired_over_a_variable_name/,744,"At my (now former) company, we use a metric called SHOT to track the performance within a portfolio. It's some in-house calculation no one else uses, but it's been around for like 20 years even though no one remembers what the acronym is supposed to mean. My task was to average it over a time period, with various user-defined smoothing parameters... to accumulate it, in essence.

So, I don't like long variable names like ""accumulated\_shot\_metric"" or ""sum\_of\_SHOT\_so\_far"" for what is ultimately just the cumulated SHOT value. So I gave it the short name, ""cumShot"", not thinking twice about it, and checked it into the code. Seeing that it passed all tests, I went home and forgot about it.

Two months later, today, my boss called me into a meeting with HR. I had no idea what was going on, but apparently, the ""cumShot"" variable had become a running joke behind my back. Someone had given a printout to the CEO, who became angry over my ""unprofessional humor"" and fired me. I didn't even know what anyone was talking about until I saw the printout. I use abbreviated variable names all the time, and I'm not a native speaker of English so I don't always know what slang is offensive. 

I live in California. Do I have any legal recourse? Also, how should I explain this in future job interviews?",1572496571.0,2019-10-31 00:36:11
2,Why did I spend 4 year getting a CS degree for Web Development when people doing coding bootcamp for a few weeks and are able to get same jobs?,6687,id1tug,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/id1tug/why_did_i_spend_4_year_getting_a_cs_degree_for/,1701,"What the hell?

Did I waste my time doing CS if I want to get into web dev?

Seem like CS is more for thing like embedded engineering, data engineering, etc.

What is point of CS degree if i want to become web dev???",1597918918.0,2020-08-20 06:21:58
3,"Applied to our main competitor, they told my boss about it",4786,9ptj1r,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9ptj1r/applied_to_our_main_competitor_they_told_my_boss/,427,"I was being underpaid and contacted the rival company, known for paying good salaries. It was my first time doing a hackerrank style interview and failed it. I obviously haven't told anyone about it so I'm positive their HR told my boss to create a toxic work environment for us, which they succeeded in doing. Not sure how to deal with this, I am quitting so it shouldn't matter but still left a bitter taste in my mouth",1540065041.0,2018-10-20 15:50:41
4,My CS story contradicts everything I’ve read on this subreddit,4761,cbkwp4,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cbkwp4/my_cs_story_contradicts_everything_ive_read_on/,712,"Ive browsed this subreddit for a couple years (diff accounts) and I always see the same thing: leetcode or you won’t get a job. Salary is the most important thing.

I’ve learned the exact opposite. I had two internships, 1 at a fortune 100, no leetcode asked. Only basic OOP concepts.

Now I have a job at a major defense contractor, a job everyone on this subreddit thinks is terrible. Asked no programming questions. Only questions about my past experiences. I get great benefits, Friday off every other week, CUBICLES (open offices suck), and a 75k starting salary. The work is incredibly chill and I am learning a lot while using mid-high level programming languages.

To everyone out there on this subreddit freaking out like I did for years: this subreddit is not reality. You don’t have to be the best programmer to get a basic job. There is hope for you if you just want to work 8 hours and go home. Salary is not the most important thing. Find what makes you happy and find a job that provides those criteria.  Mine were: cubicles, 70k+, no overtime, programming language I like. That’s it.",1562814258.0,2019-07-10 23:04:18
5,I've walked away from software development.,4664,kfcmbj,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/kfcmbj/ive_walked_away_from_software_development/,1533,"Throwaway for obvious reasons.

I've spent the last year planning my exit strategy. I moved to somewhere with a lower cost of living. I lowered my expenses. I prepared to live on a fraction of my income.

Then I quit my job as a Principal Software Engineer for a major tech company. They offered me a promotion, I said no. I have zero plans of ever getting another job in this industry.

I love coding. I love making software. I love solving complex problems. But I hate the industry and everything it's become. It's 99% nonsense and it manufactures stress solely for the sake of manufacturing stress. It damages people, mentally. It's abusive.

I'm sick of leetcode. I'm sick of coding interviews. I'm sick of everyone being on Adderall. I'm sick of wasting time writing worthless tests. I'm sick of fixing more tests than bugs. I'm sick of endless meetings and documents and time tracking tools. I'm sick of reorgs. I'm sick of how slow everyone moves. I'm sick of the corporate buzzwords. I'm sick of people talking about nebulous bullshit that means absolutely nothing. I'm sick of everyone above middle management having the exact same personality type. I'm sick of worrying about everyone's fragile ego. I'm sick of hissy fits. I'm sick of arrogance. I'm sick of political games. I'm sick of review processes that encourage backstabbing. I'm sick of harassment and discrimination. I'm sick and I'm tired.

And now I don't have to deal with it anymore.

I've never felt happier. It's as if I've been freed from prison.

I won't discourage anyone from pursuing a career in software, but I will encourage everyone who does to have an exit plan from day one. One day, you'll realize that you're rotting from the inside out.

**Edit**

I wasn't expecting this many responses, so I'll answer some questions here.

I'm in my early 40's and I've been doing this since college.

I didn't get a large sum of money, I simply moved to a small place in a small town where I'll be taking a part time job working outdoors. I was living in a tech center with a high cost of living.

I've worked at 7 companies, including Microsoft and Amazon. The startups were much nicer, but they become more corporate over time.

Finding a good company culture is mostly luck, and I'm tired.

&#x200B;",1608289149.0,2020-12-18 05:59:09
6,This sub infuriates me,4618,dqwwol,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dqwwol/this_sub_infuriates_me/,1090,"Before I get loads of comments telling me ""You just don't get it"" or ""You have no relevant experience and are just jealous"" I feel I have no choice but to share my credentials. I worked for a big N for 20 years, created a spin off product that I ran till an IPO, sold my stake, and now live comfortably in the valley. The posts on this sub depress me. I discovered this on a whim when I googled a problem my son was dealing with in his operating systems class. I continued to read through for a few weeks and feel comfortable in making my conclusions about those that frequent. It is just disgusting. Encouraging mere kids to work through thousands of algorithm problems for entry level jobs? Stressing existing (probably satisfied) employees out that they aren't making enough money? Boasting about how much money you make by asking for advice on offers you already know you are going to take? It depresses me if this is an accurate representation of modern computational science. This is an industry built around collaboration, innovation, and problem solving. This was never an industry defined by money, but by passion. And you will burn out without it. I promise that. Enjoy your lives, embrace what you are truly passionate for, and if that is CS than you will find your place without having to work through ""leetcode"" or stressing about whether there is more out there. The reality is that even if there exists more, it won't make up for you not truly finding fulfillment in your work. I don't know anyone in management that would prefer a code monkey over someone that genuinely cares. Please do not take this sub reddit as seriously as it appears some do. It is unnecessary stress.",1572792058.0,2019-11-03 09:40:58
7,Biden to give green cards to recent STEM PhDs,4522,jqegwx,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jqegwx/biden_to_give_green_cards_to_recent_stem_phds/,655,"> He will also exempt from any cap recent graduates of PhD programs in STEM fields in the U.S. who are poised to make some of the most important contributions to the world economy. Biden believes that foreign graduates of a U.S. doctoral program should be given a green card with their degree and that losing these highly trained workers to foreign economies is a disservice to our own economic competitiveness.  

[https://joebiden.com/immigration/](https://joebiden.com/immigration/)",1604881604.0,2020-11-08 19:26:44
8,"Reminder: ""we're a family here"" is bullshit",3971,hvuscm,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hvuscm/reminder_were_a_family_here_is_bullshit/,504,"I've been in the industry for a long time now. I have worked at 2 startups and both have pulled the ""we are a family here"" line on me. Well to any young job searcher reading this, I want you to know that this is the reddest of flags. Here is a story what I have experienced at my ""familiar"" company.

- CEO says we are stronger together at the beginning of COVID and that we can ride out the wave. 1 month later he lays off half the company without warning. There were two meetings you were invited to, if you were in 1 you stayed, if you were in another you were gone. No notice. Great way to treat ""family"" eh?

- Chat room was opened up for people to support each other in the times of COVID. Many people posted things like ""we can't be expected to be as productive when we have kids at home during a pandemic"" which is true. It just so happens that those same people are now gone.

- Came out that a manager was harassing some of his employees. When they went to HR they defended him and the employees left the company. The harassing manager is still there.

- People filled out ""anonymous"" surveys. 2 people who gave negative feedback were gone the next day.

Of course, my only family is my wife and children. I just wanted to share that some of the most toxic places I have ever worked spout this ""family"" nonsense. Watch out for it.",1595457054.0,2020-07-22 18:30:54
9,I am absolutely mortified and embarrassed beyond belief and I have zero idea what to do,3884,95dgrx,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/95dgrx/i_am_absolutely_mortified_and_embarrassed_beyond/,498,"Using a throw away account here. I just need to get this off my chest because I currently feel like Hitler. I haven't told anyone this irl yet because part of me is still hoping I'm asleep and this is a nightmare

I interviewed with a small start up in the city this morning. Phone screening went *incredibly* well, and I was feeling good about this place. They don't have a dedicated room for interviews, and the place was small enough that really all the engineers were just taking part of it

We were at the white board and I was drawing a diagram for a system design question. I didn't know they had an office dog. I didn't know the office dog was about 18 and the founders best friend since childhood. I didn't know the little guy (i'm talking super little, like squirrel small) liked to hang around peoples feet.

I took a step back from the board to take a look at something better and stepped on her. I don't mean stepped on her foot or something. I mean right on her proper. She gave out a heart shattering yelp and died after squirming a little bit.  I still can't fathom that this actually happened. The founder started to sob uncontrollably and I think everyone else was in just as great disbelief 

I don't know how to try and make something like that right. I don't think I could handle working there even if they did still want me. I just kind of apologized profusely and left. How do you even make up for something like that?",1533690310.0,2018-08-07 21:05:10
10,"Landed my dream job, Android developer, the employer and I just signed the job offer! Bought the plane ticket, gave my two weeks! then they rescinded my job offer.",3668,a3g13s,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/a3g13s/landed_my_dream_job_android_developer_the/,593,"[US]This is my dream job, Ive wanted to make Games and Apps  since i was played 64, and Apps as soon as the AppStore became a thing. I called my family, gave my two weeks, bought a plane ticket, etc. Then the employer said they changed their minds.

Edit: hey everyone just wanted to say thank you. Im surprised at all the support I've gotten. Great community here, if im being frank, I just needed a place to complain. It was a wildly frustrating day and I work in a service industry job so i had to be polite and friendly all day when i truthfully just wanted to pout. This post, and all of you, helped me get it out of my system. Thank you all 

Edit 2: what is this, r/wholesomememes? Thank you all so much for your kindness. It's really, truly helping.

Edit 3: not going to sue. Just going to keep on improving. Thank you all!

Edit 4: airline took care of the airplane ticket. We're okay!

Edit 5: gold?? This was totally worth it.",1544069316.0,2018-12-05 23:08:36
11,Remove CS and replace with Leetcode Engineering,3535,jsrmtw,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jsrmtw/remove_cs_and_replace_with_leetcode_engineering/,607,"Listen to my brilliant idea: We should create a new college major: Leetcode Engineering

Year 1: cover basic Python

Year 2: leetcode easy

Year 3: leetcode medium

Year 4: leetcode hard

Result? PROFIT?: Tech job at GoOglE


After a long and worthy prior post battle, I have decided it is best to create a new college major focused on Leetcoding 24/7 to guarantee entry into a top tech company since CS is just so useless right.

You have research experience? Scrap it

You have 30 side-projects? Scrap them

You are fluent in 4-5+ coding languages? Focus on Python

You are top rank of your CS university? Scrap it, drop out now.

Your key to success is to leetcode, leetcode.


Thoughts or questions are welcomed.",1605201292.0,2020-11-12 12:14:52
12,I FREAKING DID IT!!,3418,g7z78b,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/g7z78b/i_freaking_did_it/,360,"I'm so excited guys. After over 200 applications , 20+ interviews, and a lot of almost giving up, I GOT A OFFER WITH MY DREAM AEROSPACE COMPANY. Crazy thing is... I didn't even have to do a dumb ""code this"" technical interview. I get 60K starting off! with a bonus!! That's amazing starting off in the South. Crazy thing is someone who works there , while I was doing a internship, told me they wouldn't hire a black man straight out of college. I'm glad I kept trying. Shoutout to r/cscareerquestions for all the help in this process.

Edit: Thank you all for the kind support! It means a lot to me. Just to clear up a few things. I graduate with a Bachelors in CS in a few weeks so I'm not self taught. To address the lack of diversity in STEM, do your research. The data is out there, the accounts of what people go through are out there. Educate yourselves and fix the problem. Most of our jobs is googling so you can do it haha.

Edit 2 : Since people are asking, I'll go into a little bit of my background. I am graduating with a Bachelors in Computer Science W/ a minor in Mathematics in a few weeks. I have had a internship every summer of my undergrad which includes two summers at a really famous science institute and 1 at a REALLY famous space company. During my time at both companies and in undergrad, I built up a crazy professional network of people I could rely on for information and some for a recommendation. A awesome woman at said space company, recommended me to her friend on another team and I got the interview then the job. So what else did I do in terms of the crazy amount of interviews and applications? I did some Hackerrank, Leetcode, and messaging recruiters on LinkedIn which helped me get interviews. Polishing my LinkedIn helped me get way more traffic and I got a Google interview doing so. I also used organizations like NSBE & ACM to help me get interviews at conferences or find resources. My resume also went through numerous changes over the span of my applying to jobs (August - Now). In terms of job sites, I used everything. LinkedIn, USAJobs, Handshake, Hired.com, Indeed, Seen, etc.",1587870167.0,2020-04-25 23:02:47
13,"Scrum Master wants to visit each member of the project at home ""in order to understand the work from home experience for a developer.""",3354,g4viz4,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/g4viz4/scrum_master_wants_to_visit_each_member_of_the/,876,"She just told us in our daily standup that she wants to visit each member of the project at home in order to give advice on how to rearrange the interiour for more productivity, wants to talk with family to identify distractions and wants to sit right next to someone in order to see working from home. 
What should I do? That sounds really uncomfortable to me because I'm quite introverted and I don't think that this will help me.",1587427507.0,2020-04-20 20:05:07
14,This sub is getting weird,3230,61di57,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/61di57/this_sub_is_getting_weird/,273,"In light of the two recent posts on *creating fake [job](https://www.reddit.com/r/cscareerquestions/comments/61b5rf/i_posted_a_fake_job_listing_to_get_a_feel_for/)/[internship](https://www.reddit.com/r/cscareerquestions/comments/61cy7v/fake_internship_posting_absolutely_blown_away_by/) postings*, can we as a sub come together and just...stop? Please. *Stop.*

This shit is **weird**. Not ""interesting"", not ""deep"" or ""revealing about the tech industry"", not ""an unseen dataset"". It's **weird**. Nobody does this — nobody.

The main posts are bad enough – posting fake jobs to look at the applicants? This is *pathetic*. In the time you took to put up those posts, collect resumes, and review the submissions, you could have picked up a tutorial on learning a new framework.

The comments are doubly as terrifying. Questions about the applicants? There are so many ethical lines you're crossing by asking questions about school, portfolio, current employment, etc. These are *real people* whose data you solicited **literally without their consent** to treat like they're lab rats. It's **shameful**. It is neurotic. It is **sad** in every sense of the word.

Analyzing other candidates is a thin veil over your blatant insecurities. Yes, the field is getting more saturated (a consequence of computer science becoming more and more vital to the working world) — who gives a damn? Focus on yourself. Focus on getting good. Neuroticism is difficult to control once you've planted the seed, and it's not a good look at all.",1490439665.0,2017-03-25 07:01:05
15,"I (M,1), am having difficulty in finding jobs in my field of study.",3087,idqtgo,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/idqtgo/i_m1_am_having_difficulty_in_finding_jobs_in_my/,198,"Being a neonate, I often find that professional spaces tend to greatly discriminate against me - often times, I attend interviews, only to be vigorously patronized and coddled. 

Last week, I attended a virtual interview for a developer position at Goldman Sachs. For the upcoming months, I poured over ""Cracking the Coding Interview"" by Gayle Laakmann McDowell and completed MIT's 6.006 course. I wore my best slacks, but despite this, my interviewer dismissed me the moment I came onto the call. I have difficulty enunciating, as I have no teeth, and due to this lacking of mine, my interviewer began to coo at me, saying ""Who's a smart boy? Who's the cutest boy in the world?"". He then turned to someone off camera and said, ""I think someone just... left their kid at the computer and didn't show up for the interview...?"" Fools! How insulting.. my parents are gainfully employed. And I knew the answer to his query, ""who's the cutest boy"" was me, of course - my mother tells me as such daily, but what could I say to that clear repudiation of my technical skill? 

One interview, in particular, sticks out in my mind as being the worst instance of neonate-ism that I have experienced in my lifetime. I will not name names, but at this interview, I was bounced from lap to lap, fed liters of milk, and my suit was ruined by the slops of Gerber 2nd Food Tube Vegetable Beef Baby Meals! 

 I want to be taken seriously in my career, I have the skills. I'm an avid contributor to many JavaScript open source projects and I understand the ins and outs of neural networks. I am starting to believe that they don't want to test my coding skills after all... perhaps my fatal flaw is the lack of years of experience with each language. I feel as though my coding prowess itself is adequate, however, I have only been coding for the last five months, as that is when my fine motor skills had developed sufficiently for me to type. Prior to that, I was reading up on CS theory, discrete mathematics, and linear algebra. I suspect that my interviewers are seeking out employees with more months of experience. 

I'm wondering if others have experienced something similar in their travails in technical coding interviews. How do I overcome my deficient experience and showcase my skills?",1598016307.0,2020-08-21 09:25:07
16,I was humiliated because my undergrad is EE and not CS,2995,j14267,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/j14267/i_was_humiliated_because_my_undergrad_is_ee_and/,517,"This happened a few months ago. I was called by a HR person who told me that they were interested in my profile. After getting a perfect score in their easy leetcode questions I was scheduled a final interview with a mexican dev (I'm from Colombia).

And then it started. That guy didn't read my CV before the meeting and got angry when I told him that my undergrad was in EE and not CS. He spent almost 15 minutes berating me about it. ""Can you really program at all? what are you doing here? you won't be able to get anything done"". After his speech about how I didn't have the knowledge needed to get the job, he saw that I got a perfect score in their assessment. Then he gave me 5 minutes to talk about my experience and the interview ended. I thought about telling the HR person who started the process, but they ghosted me after this interview.

I'm quite angry about it, specially because I never applied. It was their HR staff who got in touch with me.",1601289671.0,2020-09-28 06:41:11
17,Hiring manager checking in - you're probably better than this sub makes you feel like you are,2865,blhdf7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/blhdf7/hiring_manager_checking_in_youre_probably_better/,862,"Sometimes I see people in this sub getting down about themselves and I wanted to share a perspective from the other side of the desk.

I'm currently hiring contractors for bug fix work.  It isn't fancy.  We're not in a tech hub.  The pay is low 6 figures.  

So far in the last 2 weeks, a majority of the candidates I've interviewed via phone (after reviewing their resume and having them do a simple coding test) are unable to call out the code for this:

> Print out the even numbers between 1 and 10 inclusive

They can't do it.  I'm not talking about getting semicolons wrong.  One simply didn't know where to begin.  Three others independently started making absolutely huge arrays of things for reasons they couldn't explain.  A fourth had a reason (not a good one) but then used map instead of filter, so his answer was wrong.  

By the way: The simple answer in the language I'm interviewing for is to use a for loop.  You can use an if statement and modulus in there if you want.  += 2 seems easier, but whatever.  I'm not sitting around trying to ""gotcha"" these folks.  I honestly just want this part to go by quickly so I can get to the interesting questions.  

These folks' resumes are indistinguishable from a good developer's resume.  They have references, sometimes a decade+ of experience, and have worked for companies you've heard of (not FANG, of course, but household names).  

So if you're feeling down, and are going for normal job outside of a major tech hub, this is your competition.  You're likely doing better than you think you are. 

Keep at it.  Hang in there.  Breaking in is the hardest part.  Once you do that, don't get complacent and you'll always stand out from the crowd. 

You got this.",1557204019.0,2019-05-07 00:40:19
18,Unpaid internship opportunities are actually useful and you should apply to them.,2701,bj7bg7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bj7bg7/unpaid_internship_opportunities_are_actually/,173,"You can use them to practice your interview skills. If you get an offer just tell them that you can't work for them because you got accepted for a paid internship.

&#x200B;

Not only do you get back at exploitive companies by wasting their time, but you will also be able to practice what you're going to say when interviewing at a real company.",1556680564.0,2019-04-30 23:16:04
19,Took risk negotiating salary.,2590,jrym0y,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jrym0y/took_risk_negotiating_salary/,187,"Got an offer at a new place.  In the original offer, total compensation would have been just about $100K.  

Previous employer had me at a base salary of $80K and literally no benefits besides health insurance and 401k.  So it was just literally $80K. 

At the new company, even though the total compensation was $100K, the base salary was only $75K. 

I sent HR an e-mail saying that I normally don't negotiate salaries but I would like to hopefully sort this out as I am very interested in the position.   I said $75K was a bit low.  They said they could try to get approval for more but I would have to justify it.   I said the justification is I'm making $80K and it's not cool to switch jobs and have a lower salary.  I specifically said a lower ""salary"", I never referenced total compensation.  So I didn't lie.  Their base salary really was lower.   

The next day they offered me $85K base, a $5K sign up bonus, and my bonuses/stocks actually went up because it's based on your salary.  So now I'm like at $113K total comp and got a nice sign up bonus for black Friday.",1605087560.0,2020-11-11 04:39:20
20,Not a question but a fair warning,2545,jb3nrf,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jb3nrf/not_a_question_but_a_fair_warning/,548,"I've been in the industry close to a decade now. Never had a lay off, or remotely close to being fired in my life. I bought a house last year thinking job security was the one thing I could count on. Then covid happened. 

I was developing eccomerce sites under a consultant company. ended up furloughed last week. Filed for unemployment. I've been saving for house upgrades and luckily didn't start them so I can live without a paycheck for a bit.

I had been clientless for several months ( I'm in consulting) so I sniffed this out and luckily was already starting the interview process when furloughed. My advice to everyone across the board is to live well below your means and SAVE like there's no tomorrow. Just because we have good salaries doesn't mean we can count on it all the time. Good luck out there and be safe.",1602720670.0,2020-10-14 20:11:10
21,"I trained an AI to generate /r/cscareerquestions post titles, and it said ""I am a self-taught developer at big Income.""",2427,abbgcv,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/abbgcv/i_trained_an_ai_to_generate_rcscareerquestions/,137,"Since another thread today was talking about certain trends in post titles, I figured it might be funny to train an AI on it (using [textgenrnn](https://github.com/minimaxir/textgenrnn)) and the results are pretty indicative of the subreddit.

Some highlights:

>How to go from senior devs that feeling like I'm the only way to do Our industry?  
>  
>Should I leave a CS graduate?  
>  
>Got the last mob job due to interviews?  
>  
>What is a reputation in an interview?  
>  
>Is it worth it to get a CS job?  
>  
>Does anybody have any experience with the job search?  
>  
>Does anyone else feel like a masters. What do I do?  
>  
>Is it worth it to get a job as a developer?  
>  
>I'm looking at a big company  
>  
>What makes a good manager salary bump in college?  
>  
>Best place to work in Career Fairs (Americans)  
>  
>Is it worth applying to many online coding challenges?  
>  
>Is it worth it to get a software job out of college?  
>  
>Is it worth taking a job in the field?  
>  
>PSA: I got a CS bachelors in CS and lack of job applications.  
>  
>Undergrad application process and I believe you enjoy it?  
>  
>I am a self-taught developer at big Income.  
>  
>Recruiter was just getting internships as a CS major?  
>  
>Graduating in December, American Salary  
>  
>Too early to be a software engineer?  
>  
>How do you deal with a day to day basis?  
>  
>Does anyone have any experience in the US?  
>  
>Just got a job offer after a company with a hackathon?  
>  
>Programmers who don't want to be a software engineer?  
>  
>First job out of college, and I have a bad boss... what can I do to get a job in the field?  
>  
>Can I apply for Full Time Jobs?  
>  
>Just got a raise before starting a new job?  
>  
>What’s the best way to land a job in a nightmare

More unused generated titles in this [5k title dump](https://pastebin.com/QBQTtqMx). (EDIT: [bonus 5k titles](https://pastebin.com/MSWkr8mv)!)

Good ones from the dumps:

>How should I properly struggle?  
>  
>Should I quit my job to have a chance to give up  
>  
>Is it normal to not be doing anyone else?  
>  
>Does anyone fall in the future.  
>  
>Computer science vs ethical path?",1546320490.0,2019-01-01 00:28:10
22,Master list of Free Resources,2388,e4v755,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/e4v755/master_list_of_free_resources/,85,"With the holidays coming up, I wanted to share some mostly free resources (well the books and some courses aren't free) that I've used for preparation in the past. If you have any resources that worked for you, let me know and I'll add it onto this list. My goal is to create a master list so everyone knows about which resources might be helpful.

Leetcode Question Sets:

* [https://leetcode.com/discuss/interview-question/352460/Google-Online-Assessment-Questions](https://leetcode.com/discuss/interview-question/352460/Google-Online-Assessment-Questions)
* [https://leetcode.com/discuss/interview-question/344650/Amazon-Online-Assessment-Questions](https://leetcode.com/discuss/interview-question/344650/Amazon-Online-Assessment-Questions)
* [https://www.teamblind.com/article/New-Year-Gift---Curated-List-of-Top-100-LeetCode-Questions-to-Save-Your-Time-OaM1orEU](https://www.teamblind.com/article/New-Year-Gift---Curated-List-of-Top-100-LeetCode-Questions-to-Save-Your-Time-OaM1orEU)
* [https://medium.com/@koheiarai94/60-leetcode-questions-to-prepare-for-coding-interview-8abbb6af589e](https://medium.com/@koheiarai94/60-leetcode-questions-to-prepare-for-coding-interview-8abbb6af589e)
* [https://h1ros.github.io/posts/coding/leetcode-top-100-problem-selection/](https://h1ros.github.io/posts/coding/leetcode-top-100-problem-selection/)
* [https://github.com/fterh/leetcode-curation-topical](https://github.com/fterh/leetcode-curation-topical)
* [https://github.com/liuchuo/LeetCode-Top100](https://github.com/liuchuo/LeetCode-Top100)

System Design:

* System design template - [https://leetcode.com/discuss/career/229177/My-System-Design-Template](https://leetcode.com/discuss/career/229177/My-System-Design-Template)
* [System Design Primer](https://github.com/donnemartin/system-design-primer)
* [Grokking the System Design Interview](https://www.educative.io/collection/5668639101419520/5649050225344512) \*this isn't free but widely used
* [https://www.youtube.com/watch?v=iJLL-KPqBpM](https://www.youtube.com/watch?v=iJLL-KPqBpM)

Behavioral/Deep-Dive:

* [https://www.youtube.com/watch?v=PJKYqLP6MRE](https://www.youtube.com/watch?v=PJKYqLP6MRE)
* Amazon's official interview guide - [https://www.amazon.jobs/en/landing\_pages/in-person-interview](https://www.amazon.jobs/en/landing_pages/in-person-interview)

General Interview Resources

* Careercup
* Glassdoor
* Catalog of all FAANG interview information on Rooftop Slushie [https://www.teamblind.com/article/Catalog-of-FAANG-interview-information-MRLji71n](https://www.teamblind.com/article/Catalog-of-FAANG-interview-information-MRLji71n)
* [https://www.freecodecamp.org/](https://www.freecodecamp.org/)

Books:

* Cracking the Coding Interview by Gayle Laakmann McDowell (6th edition) [https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/0984782850/](https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/0984782850/)
* Computer Science Distilled [https://www.amazon.com/Computer-Science-Distilled-Computational-Problems/dp/0997316020](https://www.amazon.com/Computer-Science-Distilled-Computational-Problems/dp/0997316020)
* [Distributed Systems for Fun and Profit](http://book.mixu.net/distsys/single-page.html) \- free book, 100 pages or so, but excellent content
* Designing Data Intensive Applications by Martin Kleppman - this is a more in-depth book, and you can get it on Amazon/libgen
* The Google Resume by Gayle Laakmann McDowell (1st edition)
* Programming Interviews Exposed"" by John Mongan, Noah Suojanen (3rd edition)
* Elements of Programming Interviews"" by Adnan Aziz, Tsung-Hsien Lee, and Amit Prakash (2nd edition)
* System Design Primer"" by Donne Martin
* Grokking Algorithms (free to read online) [https://www.manning.com/books/grokking-algorithms](https://www.manning.com/books/grokking-algorithms)

Courses

* [https://www.educative.io/courses/grokking-the-system-design-interview](https://www.educative.io/courses/grokking-the-system-design-interview) \*this isn't free but widely used
* [https://www.educative.io/courses/grokking-dynamic-programming-patterns-for-coding-interviews](https://www.educative.io/courses/grokking-dynamic-programming-patterns-for-coding-interviews) \*this isn't free but widely used
* [https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/)
* [https://www.youtube.com/watch?v=y62zj9ozPOM&list=PLhQjrBD2T3828ZVcVzEIhsHVgjANGZveu](https://www.youtube.com/watch?v=y62zj9ozPOM&list=PLhQjrBD2T3828ZVcVzEIhsHVgjANGZveu)

Blogs

* Netflix tech blog - [https://medium.com/netflix-techblog](https://medium.com/netflix-techblog)
* Uber - [https://eng.uber.com/](https://eng.uber.com/)
* Twitter - [https://blog.twitter.com/engineering/en\_us.html](https://blog.twitter.com/engineering/en_us.html)
* Airbnb - [https://medium.com/airbnb-engineering](https://medium.com/airbnb-engineering)
* Airbnb - [https://airbnb.io/](https://airbnb.io/)
* Here's a consolidated list of company-wise engineering blogs: [https://github.com/kilimchoi/engineering-blogs](https://github.com/kilimchoi/engineering-blogs)
* [https://medium.com/outco](https://medium.com/outco)
* [https://medium.com/@liyin2015](https://medium.com/@liyin2015)
* [https://medium.com/@sourabreddy](https://medium.com/@sourabreddy)
* [https://github.com/donnemartin/system-design-primer](https://github.com/donnemartin/system-design-primer)
* [https://www.geeksforgeeks.org/](https://www.geeksforgeeks.org/)
* [https://github.com/sindresorhus/awesome](https://github.com/sindresorhus/awesome)
* [https://github.com/liyin2015/Algorithms-and-Coding-Interviews](https://github.com/liyin2015/Algorithms-and-Coding-Interviews)
* [https://medium.com/leetcode-patterns](https://medium.com/leetcode-patterns)
* [https://hackernoon.com/14-patterns-to-ace-any-coding-interview-question-c5bb3357f6ed](https://hackernoon.com/14-patterns-to-ace-any-coding-interview-question-c5bb3357f6ed)
* [https://www.programcreek.com/2012/11/top-10-algorithms-for-coding-interview/](https://www.programcreek.com/2012/11/top-10-algorithms-for-coding-interview/)

Youtube channels/playlists that I found helpful:

* [Back to Back SWE](https://www.youtube.com/channel/UCmJz2DV1a3yfgrR7GqRtUUA) \- playlists [https://www.youtube.com/channel/UCmJz2DV1a3yfgrR7GqRtUUA/playlists](https://www.youtube.com/channel/UCmJz2DV1a3yfgrR7GqRtUUA/playlists)
* [Tushar Roy](https://www.youtube.com/user/tusharroy2525)
* [happygirlzt](https://www.youtube.com/channel/UCamg61pfZpRnTp5-L4XEM1Q)
* Nick White's Leetcode explanations - [https://www.youtube.com/playlist?list=PLU\_sdQYzUj2keVENTP0a5rdykRSgg9Wp-](https://www.youtube.com/playlist?list=PLU_sdQYzUj2keVENTP0a5rdykRSgg9Wp-)
* Tushar Roy - [https://www.youtube.com/user/tusharroy2525/playlists](https://www.youtube.com/user/tusharroy2525/playlists)
* mycodeschool - [https://www.youtube.com/user/mycodeschool/playlists](https://www.youtube.com/user/mycodeschool/playlists)
* Tech Dummies - [https://www.youtube.com/channel/UCn1XnDWhsLS5URXTi5wtFTA/playlists](https://www.youtube.com/channel/UCn1XnDWhsLS5URXTi5wtFTA/playlists)
* CS Dojo [https://www.youtube.com/channel/UCxX9wt5FWQUAAz4UrysqK9A/playlists](https://www.youtube.com/channel/UCxX9wt5FWQUAAz4UrysqK9A/playlists)
* Jeff Dean's talk at Stanford: [www.youtube.com/watch?v=modXC5IWTJI](http://www.youtube.com/watch?v=modXC5IWTJI)
* Building Billion user Load Balancer at Facebook: [www.youtube.com/watch?v=bxhYNfFeVF4](http://www.youtube.com/watch?v=bxhYNfFeVF4)
* Netflix Guide to Microservices: [www.youtube.com/watch?v=CZ3wIuvmHeM](http://www.youtube.com/watch?v=CZ3wIuvmHeM)
* Amazon DynamoDB deep dive: [www.youtube.com/watch?v=HaEPXoXVf2k](http://www.youtube.com/watch?v=HaEPXoXVf2k)
* [Abdul Bari’s Youtube Channel](https://www.youtube.com/channel/UCZCFT11CWBi3MHNlGf019nw)
* Derek Banas tutorials [https://www.youtube.com/user/derekbanas](https://www.youtube.com/user/derekbanas)

Intro to CS

* [https://github.com/ossu/computer-science](https://github.com/ossu/computer-science)
* [https://github.com/ForrestKnight/open-source-cs](https://github.com/ForrestKnight/open-source-cs)
* [https://upskillcourses.com/courses/essential-web-developer-course](https://upskillcourses.com/courses/essential-web-developer-course)

edit------

added some of the links/resources people commented. Put youtube channels at the bottom.",1575298126.0,2019-12-02 09:48:46
23,I finally got out of the kitchen.,2338,ih1coi,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ih1coi/i_finally_got_out_of_the_kitchen/,226,"I've been working in kitchens my whole life. I was expelled and dropped out of 4 high schools. I had a 9th grade education until I was 25. I've been in college(didn't finish, gotta work) or self-studying ever since. I turn 30 in January...

I just got a job as a Computer Technician.

I'm not a Software Developer yet...

But I finally got out of the kitchen.

No more asking to use the bathroom. No more being on the political whim of opinionated and equally uneducated managers. No more grown ass men (or young assholes) making inappropriate comments about underage coworkers, race, politics, or drugs; I'm an internet edgeboi, but even I know when to stfu and focus on my work. No more 135°F(57°C) kitchen with face masks. No more ""broken"" air conditioning that corporate can't ""fix"" or ""turn on remotely"".

I get to swap RAM, flash BIOS, and do general stuff a pc user with a sliver of curiosity could find out...

But I'm out of the kitchen.

I'm touching computers for a living. That's all I can ask for right now.

rants over...go code something!",1598485888.0,2020-08-26 19:51:28
24,As a new grad and students please don’t give job advice it’s so toxic,2328,a9zsq2,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/a9zsq2/as_a_new_grad_and_students_please_dont_give_job/,532,"I’ve been reading all this job advice from people on this subreddit. Don’t work at x company for y length...it will kill your resume/reputation or what not. I go on their comment history and low behold they are still taking classes in college and/or they just graduated. Why would you give advice? It’s so toxic. Like for the love of god can you stop? It doesn’t help anyone. Sorry for the shitpost/rant, but it’s caused me a lot of distress and I was stupid enough to turn down some offers/interviews as well because of these guys. I got a job now, but it’s like come on guys why. I’m basically done with this subreddit.

edit: so I wasn't expecting this much of a response...So I decided to respond myself.

To people saying I was an idiot rejecting offers based on what I read here. You guys are 100% right!!!! I was so fucking stupid, trust me my parents let me know too. Also, I have a job now so I mean luckily it worked out for me in the end. Others might not be so lucky, but that is on them.

I thought of a fix from a previous forum I used to use called Arenajunkies(RIP). It was a forum where certain subsections of it only junkies(gladiators in WoW top 1% pvpers of the current season or was it 2400 + current season and rank 1s were allowed to post)! Now you might say meadow that's a game we can't do that here and I say you are right...We can do the next best thing we can have an email confirmation of your workplace and for students their school email(make sure its a work email, not gmail/hotmail/aol...etc) and only those with confirmed work will be allowed to post in certain tags and have flairs (much like team blind/arenajunkies). I.E. Someone puts a flair on a post that says ""Senior"" only seniors are allowed to respond.

To the people that say new grads have a lot of good advice/sage knowledge about the recruiting process...Well you didn't read my post it was about job advice not the recruiting process although I guess its similar. Either way I looked up half of you and the majority of you were new grads/students go figure.

Either way I wish you guys all good luck and happy holidays. I don't expect to posting much here anymore.",1545950991.0,2018-12-27 17:49:51
25,Frustrated as a woman,2273,dysvud,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dysvud/frustrated_as_a_woman/,643,"I am currently at my first job as a software engineer, right out of college. It is one of those two-year rotational programs. I was given the opportunity to apply to this Fortune 500 company through a recruiter, who then invited me to a Woman's Superday they were having. I passed and was given an offer. 

A few months later, the company asked me and everyone else in my program to fill out a skills and interests survey so that they can match us up with teams. I was put on a team whose technology I had never used nor indicated an interest in. That is fine, and I am learning a lot. However, in a conversation I had with my manager's manager a few months into the job, he told me that I was picked for my team because I was a woman and they had not had one on their team before.

Finally, yesterday I was at a town hall and there was a question and answer session at the end. At the end, the speaker asked if no women had any questions, because I guess he wanted a question from a woman!

I am getting kind of frustrated at the feeling of only being wanted for my gender. I don't feel ""imposter syndrome"" - I am getting along great with my team and putting out good work for my experience. I think I am just annoyed with the amount of attention being placed on something I can't change. I wish I was invited to apply based on my developing ability, placed on my team because of my skillset and interests, asked for input because they wanted MY input, not a woman's.

Does anyone relate to what I am saying or am I just complaining to complain? I don't really know how to deal with this. Thanks for reading.

Edit: I am super shocked at the amount of replies and conversations this post has sparked. I have read thorough most of them and a lot were super helpful. I’m feeling a lot better about being a woman in technology. Also thanks for the gold :)",1574234918.0,2019-11-20 02:28:38
26,"As a minority/POC, I am tired of seeing ""woke"" changes by corporations but not actual changes to fight against racism.",2267,hcojjv,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hcojjv/as_a_minoritypoc_i_am_tired_of_seeing_woke/,891,"As a minority/POC, it does not affect me at all with the words ""master"" or ""slave"". 

To me what helps to solve racism is to show transparency with their process/company. 

For example, publish the salary differences of the ""Same Position"" of different races. Heck, publish everyone's salaries. i am tired of finding out my coworker of a different race gets paid more than me for the same work. Like I can understand like 10% difference but not more than 35%. Anecdotally i have heard this from several POCs but I can never know for sure until the companies provide the info. 

Or one action is to completely anonymize the resumes and applications. I personally have tested one of the popular studies where ""latino names"" gets fewer callbacks than ""white names"" and I was so surprised that it worked for myself too. Heck even my university completely anonymize my assignments and exams in order to prevent bias from grading. Why can't we do the same in jobs. 

Sorry i just wanted to rant. I am just tired of companies getting praised for ""linguistic changes"" and not calling them out for not doing actual company changes. I apologize if this is going against the rules but I just wanted to share my thoughts as a POC.

EDIT: Wow this blew up. I am so glad that we are having this discussion. 

Just wanted to add some following points. 

When i said that I am not bothered by the words ""Slave or master"" I do not mean that all POCs don't mind that. This was just a personal rant. I do not want to define what POCs want. 

And yes removing the slave or master is great and I am not particulary against it to be honest I am pretty indifferent to it. What I am specifically against that people will claim that these linguistic changes WILL LEAD to change. 

In my opinion, this will stop further changes because the corporations will think that they have done enough because the public opinion is happy about it. That is where I am frustrated on.",1592697229.0,2020-06-20 19:53:49
27,Is anyone else weirded out by Linkedin culture?,2244,d0pxx5,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d0pxx5/is_anyone_else_weirded_out_by_linkedin_culture/,391,"Probably a big yes from many of you and probably a dumb question, but I'm honestly not that familiar with it. I've just started getting some connections with people at the internship I was at. I've also gotten random people adding me.

What's up with this site? Why did someone I don't know congratulate me on a job update from like 3 months ago?

Then there's the generic post from a recruiter or something with a story about how the worker is all that matters, effectively pandering to everyone.

Someone made a post saying ""Thanks guys, I've just reached 5000 followers"" or something like that.

Then there's the posts of ""X years ago I failed my whatever exam, now I'm Google""

And to top it off, normal ass people I knew at my internship are liking posts like this. Why do people actually care? Do I have to partake in this shit to move up? Am I the one missing out?",1567849427.0,2019-09-07 05:43:47
28,"Is there anyone else who just works 8 hours a day, and doesn't do any leetcode or projects in their spare time?",2228,ifcc9e,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ifcc9e/is_there_anyone_else_who_just_works_8_hours_a_day/,382,"Title.

If I'm being honest, I got into CS because I do enjoy working with technology. However, I wouldn't exactly say it's something I'm passionate about.

For me, it was just a way to get a typical 8 hour office job that offers good work life balance and little stress. 

If I HAD to work in some field, CS would be it. But I wouldn't (and don't) do it in my spare time. I have other hobbies.

Is there anyone else like that here? Just works a super chill 8 hours per day and then forgets about work / CS / programming? someone who doesn't grind leetcode or do projects in their spare time?",1598248967.0,2020-08-24 02:02:47
29,Using an Indian buffet as a networking event,2225,9rolfi,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9rolfi/using_an_indian_buffet_as_a_networking_event/,205,"This is not meant to be a racist post. I am indian-american myself.

&#x200B;

I am searching for my first job or another internship. I ended up going to an indian buffet with my girlfriend for lunch. I went to a buffet and it was loaded. Naturally the majority of the individuals there were Indians, and they had their badges of the companies they represented. Paypal, HP, Apple, Amazon, McAffe, you name it , it was there. 

I took my chances in the buffet line looked at the badges and said oh hey you work for so and so, thats my dream company how do you like it there. I ended up walking out with 3 business cards with people willing to give me a referral.

&#x200B;

Something different, but best 13 bucks I spent for lunch ",1540616496.0,2018-10-27 01:01:36
30,Big M is letting employees work from home permanently,2199,j810n5,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/j810n5/big_m_is_letting_employees_work_from_home/,347,"From now on, all Microsoft employees can work from home for <50% of their work week or 100% if approved by their managers. 

Employees who opt for the permanent remote work option will give up their assigned office space, but still have options to use touchdown space available at Microsoft’s offices.

Employees will also be allowed to relocate domestically with approval, or even seek to move internationally if remote working is viable for their particular role. While Microsoft employees will be allowed to move across country for remote work, compensation and benefits will change and vary depending on the company’s own geopay scale.

[article](https://www.theverge.com/2020/10/9/21508964/microsoft-remote-work-from-home-covid-19-coronavirus)",1602286039.0,2020-10-09 19:27:19
31,Just so we're clear! Working remote during a pandemic isn't the same as working remote in principle!,2201,j2ilvu,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/j2ilvu/just_so_were_clear_working_remote_during_a/,118,"I saw a highly upvoted post where the theme of the post seems to be that, people enjoyed working at home in the beginning of the pandemic but now they feel depression, loneliness, lack of motivation.

I'm someone who not only greatly enjoys working from home, but also benefits from it personally due to having a newborn baby in my life.

But despite the fact that me enjoying working from home is somewhat biased, you should understand that right now you're not working from home because of company policy or because rent is expensive for an office. You're working from home because we are in the middle of a pandemic due to a respiratory disease carrying virus that has officially killed over 1 million people (probably more, realistically) that has no vaccine yet.

This means:

1. You typically can't go out as much as you could during normal times.
2. You don't see your friends as often as you normally would.
3. A lot of movies, TV shows and sports events have been cancelled.
4. People are terribly sick or their close family or friends have died from infection, therefore people are just generally down.
5. Fear has a huge impact on your well being.
6. A lot of slowdown in the economy, and the economy health has a direct impact on overall social morale.
7. Civil unrest because people aren't happy to be locked down or shelter in place, this civil unrest leads to political and social unrest and protesting.
8. The gym is considered a super spreading area, so a lot of people are going to the gym less and working out less. Physical exercise has a direct correlation with reduced depression.
9. Even if you have vacation days, borders to a lot of countries are closed so most people aren't traveling and instead just saving up vacation and not taking days off since they don't have anything to do with the time off.

During **normal times**, if you were allowed to work remote, you would be able to go to the gym, visit your friends, have parties, go to the movies, your favorite movies would actually be released, your favorite businesses would be open and healthy, you'd be able to eat out with your friends, socialize, go on dates, be in large crowds...

Right now, you are working remote as a form of staying SAFE, but not as a form of finding a healthy alternative to working in an office. This would be like hating basements because you're stuck in a basement during a tornado.

A lot of companies are taking solace in the fact that the pandemic has led them to realize how unnecessary expensive large offices are. And how wasteful they are. Time you spend on trains, buses or stuck in traffic is time you don't spend resting, enjoying your life, being with family or even just working while your energy is high.

Companies are hoping that they can find some new way of normal work life after this pandemic that is surviving and strong, something that won't just shut down if another pandemic happens. When the vaccine comes, I encourage you to try working from home again when times are normal and you have a normal social life.

I promise you, you'll enjoy it a lot more when it's not just ""work from home"" but also ""stay home as much as possible so grandma doesn't die"".

If you are feeling depressed during work from home/pandemic precautions:  

I encourage you to please do yourself a favor, take a day off and try to go somewhere where a crowd isn't large and try to relax and enjoy yourself for a day. Your mental health should come first over any decision about efficiency or ""saving your vacation for when the pandemic ends"". I took a week off even though we can't really travel and I played my favorite games, had a picnic on my balcony, went for a walk in a mostly empty park with my dog. I felt really good when it was over even though I didn't travel. ",1601485007.0,2020-09-30 12:56:47
32,"Once you have experience, don't let employers treat you like shit",2176,bwp6of,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bwp6of/once_you_have_experience_dont_let_employers_treat/,473,"I have a few years experience now as a SWE and I just want to remind everyone not to take shit from employers/prospective employers.

&#x200B;

I'll give you an example:

&#x200B;

I got a linkedin message from a recruiter, and as I am always open to new opportunities, I went ahead and applied to the job. I had a phone screen the next day and at the end I asked about salary. They told me the most they could do was about $30k under market. They then told me I would need to come in for 5 more interviews spread across 3 days. I thanked them and hung up the phone. It's actually pretty fucking absurd what some companies think they can get away with. Everything from making you jump through a million hoops to get a job, to shitty salaries and benefits, to incompetent managers.

&#x200B;

Good SWEs are in demand, so remember that and value yourself and fuck employers, they don't give a shit about you, so you owe them no loyalty.",1559686497.0,2019-06-04 18:14:57
33,"My self-taught (no degree) journey to a Big-N offer. Within 3.5 years, went from 50k to 256k.",2146,emu8oq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/emu8oq/my_selftaught_no_degree_journey_to_a_bign_offer/,324,"**Where**: Silicon Valley


**Highest Education**: High School


**Current Age**: 33


**Type of work**: Mobile (iOS)


**Salary Progression**:  
Job 1: (Age 27, Data Entry, 33k)  
Job 1: (Age 28, Manual QA, 40k)  
Job 1: (Age 29, Manual/Automated QA, 50k)  
(Age 31, Published a mobile app during Job 1, which helped me land Job 2)  
Job 2: (Age 31, Junior Software Engineer, 100k)  
Job 2: (Age 32, Software Engineer, 120k)  
Big-N: (Age 33, Software Engineer, 256k Total Comp), also received 40k signing, so 296k for first year  


**Story About me**: I've been so fortunate to fix my life in my early thirties.  I always wish I could have found success from my early 20's, but I was just a complete fuck up.  All I did in high school was play Starcraft, Counter Strike and Diablo 2 all day every day until 2-3 am most nights.  I was falling asleep in class most days and I almost got held back a year because my grades were so unsatisfactory.  I thought this was the worst of my addiction to computer games, but little did I know, that was actually nothing.  


When it comes time to start trying to get my education back on track through community college, I found a game called World of Warcraft (lol).  As you can tell that I started listing my salary progression at the age of 27.  Yeah, I didn't work until then because I was legit one of those people everyone meme'd about dudes living in mom's basement.  I became one of those elitist World of Warcraft raiders that was in a world top raiding guild.  I would practically be on WOW servers for 12+ hours every day and raiding for 6 out of 7 days.  This is all I did coming out of high school at 18 to 27.  I managed to get some good grades in some math classes in college (Math was the only subject I was naturally decent at) but everything else was an F or a D.  Funnily enough, through WOW, I did meet this one guy that knew how to code and would show me some of his work.  I was always very intrigued by some of the addon's and bots he created for some of the games we played.  When I eventually started to really learn programming, he was definitely one of the guys that would help me out understand some concepts, but he didn't have any real industry experience.


When I was around 27, I picked up a data entry job that paid close to minimum wage.  The company itself had a tech department as their main product was technology based and they had a website and mobile apps.  About 6-7 months in to my data entry job, I had some basic understanding of HTML, CSS, Javascript, mostly from videos and messing around in text editors.  It was around this time I emailed one of the managers, managers of the data entry department inquiring about entry level dev jobs.  The manager mentioned that at my level, quality assurance might be a decent role to start with, which I agreed with. 


Once I started the QA job (mostly manual testing) is when I first really started to understand how developers worked.  I was fortunate in the fact that most of the developers there were incredibly nice and were more than willing to show me what they were doing.  After about 6 months of manual QA work, I started to learn how to leverage Python and the Selenium framework to start building automated tests.  I ran in to a lot of road blocks in really refining the tests as most of the developers never really worked with Python in their day to day job and didn't have experience with Selenium, so I would be stuck trying to figure stuff out on my own.  This eventually ended up me leaving the automated tests behind.


I eventually got some renewed motivation learning coding again, but this time iOS development.  I think this was mainly because I had an iPhone and I already had really great relations with the iOS team (If I ever got stuck with concepts, I could poke them for some help).  I realized pretty quickly, despite me really grasping iOS development and even having pushed PR's to the production application, that I was not going to be able to officially slide to an iOS role naturally at my current job.  I took time at home to start developing an iOS game.  I really made sure to make sure that the game was refined and felt complete before publishing.  After about 4 months of development and publishing, I started to apply for junior iOS roles.  I also picked up Cracking the Coding Interview during this time to try and study.


I landed 2 different entry level interviews.  One with some referrals from an old co worker and another from a cold application.  I was pretty lucky in the fact that neither asked tough coding questions as at this time I could barely solve leetcode easy.  We mainly talked about my published iOS app and how I designed it and what were some of the technical challenges I had with it.  There was definitely a good bit of iOS specific knowledge testing as well.  Eventually chose the job that had a really great opportunity to build a brand new app from the ground up for an already successful company.  After about a year in to this job, I really started to get a lot of recruiters reaching out to me on Linkedin.  I only really entertained the unicorns/large tech.  I was OKAY at best with leetcode mediums (Probably solve them at a 50-60% rate), but I always tried to solve them even if I was not actively interviewing.  I knew this skill was the lifeline of getting another job once recruiters started reaching out to me.


Eventually, after failing a few other interviews, I was able to pass a Big-N interview and was given the 256k total comp offer.  I wouldn't say I was particularly great at leetcode.  I think there was definitely luck involved.  Some coding interviews I crushed while others I failed miserably.  This probably has to do with my comfort level of the types of questions being asked (ie. Array type questions vs graphs).  I will say this, I do not think I'm a shining light of technical capabilities, but I think I do come off as a person people would love to work with.  In general, I'm very polite, friendly, and fairly easy to talk to.


**Key Factors**:  


 - Having a mentor.  When initially learning, I got stuck on a lot of concepts.  I really tried my hardest to figure things out for myself as I generally do not like bothering other people, but sometimes it's just necessary to have someone there to just break down a wall for you


 - Educational content I went through that I will list below


 - Getting a published project out initially, so that prospective employers has something they can download and talk about with you


 - Networking.  Granted, I did have another junior dev offer from a job that was not from any networking, but the job I did choose was from co-workers I worked with when doing QA


 - Linkedin.  After about a year in to my junior dev role, recruiters from all sorts of large tech companies started reaching out to me.  At this rate, I do not think I'll have to cold apply to most of these guys ever again.


**Content I used to self teach (I recommend this in the order I list them for beginners)**


Harvard CS50: https://www.youtube.com/watch?v=y62zj9ozPOM&list=PLhQjrBD2T3828ZVcVzEIhsHVgjANGZveu  


(The only paid content I will list) Udemy Angela Yu (Honestly, any course by this instructor will be great.  Her iOS and web courses are amazing.  She is very enthusiastic about teaching, not boring to listen to and it is very refreshing): https://www.udemy.com/course/ios-13-app-development-bootcamp/   


Stanford CS192 (iOS): https://www.youtube.com/watch?v=71pyOB4TPRE&list=PLPA-ayBrweUzGFmkT_W65z64MoGnKRZMq   


Youtube channel Brian Voong (Brian creates some of the biggest iOS apps from scratch and shows you): https://www.youtube.com/channel/UCuP2vJ6kRutQBfRmdcI92mA/playlists  


For interview practice:


www.leetcode.com


This guy is AMAZING.  Helped me grasp a lot of algorithms https://www.youtube.com/channel/UCmJz2DV1a3yfgrR7GqRtUUA/videos


Sean Allen covers some iOS topics you will definitely see in iOS interviews: https://www.youtube.com/watch?v=56ZO6Gg68tw",1578706437.0,2020-01-10 20:33:57
34,I made an Chrome extension that adds Glassdoor ratings to companies on Linkedin to help you guys with your job search,2122,j608hq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/j608hq/i_made_an_chrome_extension_that_adds_glassdoor/,107,"[inDoors](https://chrome.google.com/webstore/detail/indoors-show-glassdoor-ra/eapcedpgnlmgkigiieacngkpdjikfgci?hl=en&authuser=0)  [repo](https://github.com/CalvinWu4/inDoors)

Screenshots: [https://imgur.com/gallery/Yb1rAbR](https://imgur.com/a/Yb1rAbR)

This has been done before; see [post](https://www.reddit.com/r/cscareerquestions/comments/3skxwd/linkedin_glassdoor_chrome_extension) that was posted here 4 years ago. But, I got it to work with the current LinkedIn UI and added more features than what was offered previously.

Good luck on the hunt!

EDIT: Due to popular demand, get your Firefox extension [here](https://addons.mozilla.org/en-US/firefox/addon/indoors/)

EDIT: Google for Jobs, Indeed, and Stack Overflow are now also supported!",1601994811.0,2020-10-06 10:33:31
35,Ouch. Failing a tech screen is painful.,2122,k6b8nw,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k6b8nw/ouch_failing_a_tech_screen_is_painful/,403,"Just went through it with Facebook. Did 100+ hours of prep. Tech problems at the start -- couldn't hear the interviewer at all. Got that sorted, but under interview pressure my wits and even my typing skills deserted me. :P

Got a nice email from the recruiter telling me not to be discouraged, and I can apply again in a year. Hey, I'm 55 -- I was surprised when she messaged me on LinkedIn. Surely I'm too old for Facebook. Probably fulfilled a quota to show they don't discriminate based on age. :D

I have to say it *is* discouraging to see the DS&A coding interview defended by people saying ""it's to see if you're smart enough."" Dude, I have a PhD in mathematics and 9 years of experience as a developer. Anyway, I have no real point to make except that I know I'm not the only one whose been through this, but it does feel kind of bad and I can't help doubting myself at least a little. And I actually love data structures and algorithms -- because it's all really mathematics!",1607075588.0,2020-12-04 04:53:08
36,Be the Change You Want To See: Start Refusing Unpaid Take-Home Coding Assignments,2092,jjqw74,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jjqw74/be_the_change_you_want_to_see_start_refusing/,660,"Some reasons why: 

1. Take-home coding assignments are grossly inaccurate at determining someone's actual ability to engineer software. They favor cookie-cutter solutions (less to incriminate) and say nothing in respect to your capabilities in a real-world coding environment.

1. It's virtually impossible to distinguish an authentic test from a honeypot, and completing a take-home in no way further guarantees an offer (they steal your time, your labor and your intellectual property).

2. Taking these assessments signals to companies that you are willing to do additional work without getting paid (untracked overtime, crunch, support and operations schedules).

3. These assessments work to set an industry standard where protracted, throwaway and overly-intensive interviewing processes are seen as okay.

Companies love to waste your time, because maintaining an arbitrarily negative hiring rate means that they don't have to invest in their interviews or workplace culture. Instead, they give you what is effectively an IQ test, one that comes with all of the same historical and cultural biases.

This is the status quo at it's finest.

Be the change you want to see: start refusing unpaid take-home coding assignments.",1603930942.0,2020-10-28 20:22:22
37,"I'm Steve Huffman, programmer and Reddit CEO. AMA.",2086,67bjm8,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/67bjm8/im_steve_huffman_programmer_and_reddit_ceo_ama/,257,"Hello r/cscareerquestions, I’m Steve Huffman, aka u/Spez. I founded both Reddit and Hipmunk (where I was CTO). Until about a year and a half ago, I was a full time engineer. I started programming as a kid, and worked as a developer through high school and college at Virginia (CS major). As some of you may know, u/kn0thing made a bet on Twitter with one of your mods that if you hit this subscriber milestone, I would answer all your CS career questions. Congratulations at hitting 100K subscribers, glad you’re on Reddit! And, yes, [we’re hiring](https://about.reddit.com/careers/)...

Update: I'm taking off for now. I'll check back in this evening for a few more questions. Thanks for the questions, and thanks to the moderators!",1493092836.0,2017-04-25 00:00:36
38,"A HR rep asked me if I had any experience with something called ""Fy-tin""...",2080,ayep7t,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ayep7t/a_hr_rep_asked_me_if_i_had_any_experience_with/,388,"I replied no and that I had never heard of it to be honest. She said that was unfortunate because most of their technology uses it. 

&#x200B;

I later realized she was mispronouncing Python, my main and most used language. Oh well. ",1552006129.0,2019-03-07 19:48:49
39,Shout out to all the companies that are pro-actively sending out emails to reassure new hires and interns.,2067,fmj3a8,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fmj3a8/shout_out_to_all_the_companies_that_are/,158,"Got an unprompted e-mail from Cisco. They told me that even if the office is out of commission for the next few months, they will still mail me a laptop so I can remote in and start my internship from home.

I've heard of other companies like Capital One sending out emails like this, reassuring people. Just really want to thank any companies that are doing this, really helps in this stressful time.",1584842343.0,2020-03-21 21:59:03
40,I'm 33. Starting my CS degree on Monday!,2060,ibtrox,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ibtrox/im_33_starting_my_cs_degree_on_monday/,343,"I posted around a year ago with one of those ""I'm older now, but I like computer, can I do this?"" essays. Just wanted to say thanks to everyone for being nice and offering lots of helpful advice.

I decided to go with boot camp at first. In preparation I did Udemy courses. Then the world locked down and I lost my job so I studied way more. Shortly after, my boot camp of choice Flatiron Atlanta decided to permanently close. I started feeling a little lost and wondering if trying to get hired anywhere in the next year made sense anymore.

So, I looked up my old college where I still have those 2 core credits under my belt (and 3 W's), and lo and behold they let my ass back in! We're going all the way from freshman to B.S. in C.S. and I can't fucking wait! My stomach is in knots because I don't remember how to do calculus or write papers but the smile on my face won't go away.

Hope this can inspire the next guy. Also I would so gladly welcome any amount of advice from people who have been in my place. Thanks Reddit. I'll post again in 5 years when I get hired.",1597751508.0,2020-08-18 07:51:48
41,Remote work is a nightmare for junior employees,2061,i0kdyd,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i0kdyd/remote_work_is_a_nightmare_for_junior_employees/,276,"Its very hard to get mentorship and learn from senior people if you are a junior who has a ton of questions when starting out their career and don't have experience handling a project end to end. Every question or doubt you have in mind now has to be either a meeting or a ping which can get annoying to the other person if done frequently over the course of the work day.

I am a junior who came into the workforce less than a year ago and finding it very hard to cope with deadlines as I am given new technologies to work with little mentorship.",1596137214.0,2020-07-30 15:26:54
42,"People who physically touch the screen and leave your slug trail from your greasy sausage fingers when pointing things out, why do you do this?",2057,ehwgmy,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ehwgmy/people_who_physically_touch_the_screen_and_leave/,188,"Junior or senior, I always have people that insist of physically touching my pristine, clean IPS panel when pointing things out during regular work flow. “Hey, the snippet of code executes HERE” *presses corn dog appendage onto screen, create IPS ripple, and draws grease halo around code piece*

Why? Why can’t you just leave your finger like 1cm away? Do you not realize the wake of destruction that leaves, both physical emotional? Do you also go up to peoples cars and draw smiley faces in the morning dew? Do you erase the whiteboard with your palm and not the provided eraser? You double dip honey mustard into bbq sauce? 

Uncultured savage barbarians",1577788462.0,2019-12-31 05:34:22
43,"People who complain about not finding jobs in this sub are too spoiled by the advertised salaries, think way too highly of their talents, and are obsessed with leetcode.",2047,ia8lnc,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ia8lnc/people_who_complain_about_not_finding_jobs_in/,609,"The majority of posts I’ve seen where people complain about jobs have the same kind of structure.

“I’m a new grad / boot camp grad and I have little-no experience with no projects and I can’t find a job. I’ve been grinding leet code for weeks / months and can do Hards but it’s not helping. I’ve only been applying to Fortune 500 companies and FAANG in the West/East coast and now I’m burnt out”

I graduated with a non CS degree, okay GPA, and a year worth of non-CS job experience. I applied for ~30 companies, got 2 interviews, and 1 offer. I didn’t get “lucky” I just applied to small companies in the Midwest. I didn’t even look at FAANG. I don’t have a stellar paycheck of $80k starting but I’m happy enough starting at $58k knowing I can find a new job with a years worth of experience that pays better. Also, a low paying job is better than no job. 

I have not once looked at any leetcode type website. My technicals were easy enough to problem solve through in those two interviews. I had 2 java based projects on my resume. Leetcode DOES NOT MATTER PRE-INTERVIEW. Even during the interview if you can reverse a linked list but botch your STAR interview questions you’ll flop. Projects to put on your resume that you can talk about are much more important. I’d venture to say the majority of SWE positions do not even do leetcode style programming day-to-day.

Stop grinding leet code. Stop only looking in densely populated areas. Stop only applying to large companies. Stop thinking you’re gonna start your CS career at $100k a year. Your career is a marathon and not a sprint. The company I got an offer from said they had 3 spots open for months, and I was the first eligible candidate to apply. The 2 other spots just got filled last week (so, ~6 months from job posting)

Edit: I guess people are still reading this post for the first time so I’ll address some common comments:

1) I said I had technicals for my interviews. This means leet code style problem and explaining space and time complexity. I didn’t need leet code to prepare for this. 

2)I’ll reiterate leet code is not important PRE-INTERVIEW. If you manage an interview with a company then it’s a great tool to brush up on your problem solving skill. Most posters I’ve seen on this subreddit do not manage to make the interview stage, making leetcode obsolete.

3)You can have dreams to work at a big company, and you should definitely work towards it. But if you don’t have the experience/gpa then stop burning yourself out with rejections from huge companies that can be picky with candidates. A smaller company that pays less can be a great stepping stone.

4) If you have been applying to bottom of the bucket jobs and still not having luck, I apologize for the post, this isn’t directed to you. Tune your resume and work on projects instead of leet coding if you can’t land interviews. 

5) I never said you had to move to the Midwest. There are small low paying tech jobs all over the states. These aren’t as good when in a HCOL area, but again, these are a stepping stone.

6) I went on indeed and looked up “computer science in “{Specific state in Midwest}, United States” and sent an application to anything asking for < 5 YOE. I tailored my resume to focus on my skill with Java, which landed me a back end java job.",1597531693.0,2020-08-15 18:48:13
44,Burn the bridge!,2032,jvw1re,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jvw1re/burn_the_bridge/,342,"So a few weeks ago I was asking on here if I should accept an offer from company A (don't like) while waiting for an offer from company B (like). From the comments, a lot of the people were telling me to not be an asshole and ask company A to wait 2 weeks, so I can hear back from company B instead of reneging on the offer from company A.

Anyway, because I didn't want to be an asshole, I did just that. I asked CompA if they could wait 2 weeks so I could hear back from CompB. They seemed really understanding, so I thought they were okay. Little did I know, they decided to rescind my offer and sent me an email saying they went with another candidate. Now, I'm still jobless and an offer from CompB is still uncertain.

I've learned my lesson. Always protect yourself first. F\*\*K the recruiter and the company. Can't blame anyone else but myself for this one  😞

Edit: Didn't get the job from Company B either, but I did get an offer from another company. The salary and benefits aren't good, but at least it's an SD job (I hope).",1605659390.0,2020-11-17 19:29:50
45,companies that arent cheap on tp,1991,e70k20,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/e70k20/companies_that_arent_cheap_on_tp/,334,"im taking my daily dump rn and I've just about had it. after chaffing my anus for the 1234th time I need to leave. A company that skimps on toilet paper is not one I want to work for. I dont need big n to be comfortable but I def need to be comfortable to take a big deuce. cscq, do your companies have at least 2-ply toilet paper? charmin? and if so tell me the name so I can apply please. thanks.",1575676674.0,2019-12-06 18:57:54
46,Your well being is more important than your job,1940,d8an41,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d8an41/your_well_being_is_more_important_than_your_job/,341,"I just learned that a Facebook employee, Qin Chen committed suicide due to job stress.

http://archive.fo/3al7b

It's so sad that a guy I would've looked up to was so unhappy and stressed with his job that he killed himself. I think about the pain and suffering he's gone through and that also pains me. I am angry that the company fostered such environment to let something like this happen. 

Then I thought about myself as well. I've been also working crazy hours, dealing with managers and execs who have 0 concern of care for me and I've been unhappy. And I think about what's in it for me? Sure, I get to keep the job and be paid, but that in no way can compensate the loss of health and sane mental state.

Thankfully, we are in a booming industry where we can jump the ship. We should use that. Fuck the current company that's screwing you and go to a better one that treats you fairly. Also actively let people know to steer clear of teams and orgs that fucks employees. See something? Say something. Please help people avoid the pain you've gone through, so your time there won't be wasted.

And finally, nothing should be more important to you than yourself. I know sometimes it feels hopeless, but there is always another way. Please choose life and happiness. Never be the victim of someone's conditioning of your environment. 

I'm so sorry, Qin. RIP.",1569292122.0,2019-09-23 22:28:42
47,5 pieces of advice I wish I had known before taking random CSCQ advice,1937,buezmv,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/buezmv/5_pieces_of_advice_i_wish_i_had_known_before/,259,"A very hypocritical short list by a new grad who is probably talking out of her ass.

1. **People don't know shit.** Everyone's situation is different, and if someone tells you to always follow some rule, or you have to do x y z,  they're idiots.

2. **Have a life outside of CS.** Seriously. Have hobbies (gaming! hiking! underwater basket weaving!), have friends (even - gasp - your coworkers can be your friends! If they're competitive then yeah dump them but yeesh). Have things that bring you joy, and preferably spend some time away from screens.

3. **Take care of yourself.** Mental health is so important especially since burnout seems to be more and more common. I worked myself into the ground during grad school and it is 10x harder to get out of a hole you've dug for yourself than it was to get there, at least in my experience. 

4. **Listen to audiobooks when you want to!** I've found it's great for forcing me to go outside if I only allow myself to listen to a good book if I'm going for a walk, run, etc. But like, you don't need to be constantly learning or improving yourself (unless you want to, and have the energy!), that's a recipe for burnout. No need to do a thousand leetcode problems a day. 

5. **Be good to one another.** Tech can be really toxic and competitive. Build people up, don't tear them down. Isn't that why we're all here on this sub? To help one another with our careers?",1559166992.0,2019-05-29 17:56:32
48,Success guide for beginner software developer/architect/engineer,1921,e5ouwi,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/e5ouwi/success_guide_for_beginner_software/,133,"The title might create an impression that I'm going to list a set of things that will guarantee success. It's not what this post is.

I thought I could share some advice for folks who start their path in the software development or IT infrastructure management and operation fields, starting with interviewing to actually doing your job. I constantly observe people missing opportunities and getting poor performance reviews because they're not following some of the advice below.

But who am I to give this advice? Well, it's Reddit/internet, I'm just an anonymous poster, so take any advice with a grain of salt. Including mine. If you're inclined to believe what I say, this advice is based on:

-	dozen years in software development and architecture in contributor and management roles
-	hundreds of interviews (as an interviewer) and dozens (as an interviewee)
-	tens of offers received over the past 10 years (when I was searching for jobs) for high-level IC and IC/management positions
-	love and passion for software development and desire for every professional out there to grow, develop and start mentoring

One thing worth mentioning: some (around 50%) advice I’m providing here was given to me by someone else at some point in my career. Some of it happened a long time ago, some - a couple of months ago. What I’m trying to say (take it as first piece of advice) - never stop learning and never think you know everything. People around you won’t stop surprising you.

Let’s just jump into the actual things I wanted to rant about. It’s not a complete list by any means. Some things you might even disagree with. I’m just trying to share the patterns/behaviors I believe to be the major contributors to my personal professional success and that of other people working with/under me.

1) Interviews.

-	Please come prepared. Read about the company. Ask questions.
-	If you’re doing remote interviews - be ready and check your audio/video in advance. Get a decent webcam and mic.
-	Look at your resume. Look at EACH WORD/technology. If I ask you right now “how did you use X?” or “why did you decide to implement Y?” are you able to answer in detail? If not - get it off your resume.
-	When you don’t understand the question - say so. Ask for an explanation. Stop inventing answers. Good interviewers are there not to evaluate your knowledge of every pattern or every algorithm (if that’s what they’re doing - you don’t want to work there), they’re there to understand how you think and how fast you adapt.
-	If you don’t know the answer - stop guessing, be honest. Let the interviewer know and ask if they would like you to try and guess/think about it.
-	Talk more during interviews. When you’re thinking about the problem - let the interviewer know what you’re thinking and where you’re going with it. Don’t sit there like a koala with mouthful of leaves. 
-	A lot of you read “resume best practices” online and now plug in numbers/percentages everywhere to tell how your work improved the business. Good for you. But please, if you have a number there, be ready to answer the “how did you measure that?” question.
-	Stop jumping to the code immediately. If you’re asked a technical question - talk abstract first. Synthesize the problem down to an abstract question. Think about real-life examples. Let’s assume you’re asked to “invert binary tree”. Don’t start writing pseudo (or real) code. Talk about it first. Draw the binary tree, demonstrate that you understand the question. Explain what inverting actually does to the binary tree.
-	Show interest in general, about the questions, the tech, the people. If you get a question that you were not able to answer - go home, research it, message (or email) the interviewer/recruiter (you can always ask for their LinkedIn to message) after the interview with answers, explanations.
-	If you got an offer ALWAYS negotiate (unless you’re 100% satisfied by it). Don’t be a jerk about it though. I’d recommend having at least two offers (or one offer and one close call) before negotiating. Then you can be honest - “I really like the company, I’d like to work with you because X, Y and Z but unfortunately the offer does not quite match my expectations/market and other offers I’ve received. Would it be possible to adjust the offer (by N dollars/with a specific benefit/add signing bonus/to match the market rate)?”

It’s worth mentioning that a lot of the interviews are, truly, bull feces and interviewers are asking questions they’ve googled minutes ago. It’s always going to happen once in a while - accept these interviews as “necessary evil”.

2) Work ethic

-	Never say that existing code/solutions/architecture is done wrong. It may be wrong/sub-optimal, but there may be reasons for it. Sometimes getting a piece of shitty code out is more financially relevant than making it nice, solid, testable. At the end of the day - everything we do is designed to make money for the company, one way or another. That’s the main goal. Not writing the best code or having the best coverage. Making money and preventing money loss.
-	Code reviews are great and necessary. If you think otherwise - fix your mindset. Read about why it’s important.
-	When starting work on something (new project/ticket/fix/build) always boil your work down to a problem statement (literally, 3-4 sentences; like a story) that you’re solving. Make sure that the problem statement is correct, run it by the requestor/peers/managers. Focus on solving just this problem
-	If you made a mistake - always admit it. Make sure that your “I was wrong” or “I made a mistake” is seen/heard by everyone involved with the issue. “I’m wrong” is one of the most used phrases in my vocabulary.
-	If you have a discussion (argument) with your peers about something (code correctness, architecture choice, solution design, etc.) - always politely defend your point until both parties agree. If your “opponent” convinces you that they’re correct - admit it. Explicitly, state “I was wrong, you’re right” and thank for explanation. If you think you’re almost never wrong - fix your mindset. To add:
-	At the same time never state your peer/colleague were wrong if that’s what the conclusion of your discussion is. Yes, technically they might’ve been wrong (there’s no argument with just one party in the wrong and you know it). Be thankful for their input and letting you to bounce your ideas off of them. Confirm that they agree with the solution, thank them and move on.
-	Keep your promises/deadlines. This is easy to say, I know. But if you promised to do something - do it. Whatever it takes. But most importantly - learn how NOT to promise. Get a habit of making every deadline you commit to at least 3x of the time you think you need to get it done. You’re probably still going to be late.
-	Learn to pick your battles (it’s personal for everyone, some people are always going “with the flow”, some people are always trying harder - figure out what works for you)
-	Do not jump to solutions/implementations. When you have a problem and know just the tool to solve it we tend to come into the conversation with it [the tool/pattern/etc] in mind. Stop doing it. Abstract the problem away and describe the solution in common language. Describe the “services” and “features” of the solution. Think about the interfaces. Only when everyone agrees on high-level approach start thinking about implementations and tools/patterns to solve each piece of the puzzle.
-	See something - say something. If you see something that might be incorrect/inefficient - let people know.

3) Software development/engineering recommendations

-	Above I said “Sometimes getting a piece of shitty code out is more financially relevant than making it nice, solid, testable”. That is true. But there are certain things that you should never do:
    - Stop putting secrets (passwords/keys) as clear-text in your code. Whether it’s your code at work or your personal repo on GitHub - stop it. Interviewers do look at personal GitHub repos linked in the resumes. If I see something like this in your personal repo that you decided to share with me - as an interviewer I will immediately prejudge you.
    - Stop hard-coding values that you might want to change in the future. Use configuration-supplied values and implement best practices for configuration management in your language/framework/tool.
    - Stop making useless code comments and unclear/random commit messages. It’s worth your time to provide concise and detailed comments and relevant commit messages.
-	If you decide to take a shortcut/not implement something/implement something in a “non-best practice” way - leave a comment. Explain why.
-	Document. Document everything. Write more documentation then code. *Edit: documentation is not necessarily code comments. Architecture docs, guides, best practices, meeting notes, interface annotations, endpoint descriptions - all of that falls under documentation. Basically the point I’m trying to make is: start with documentation, describe what your code/system/solution is supposed to do, why it’s needed, what types of problems it is solving (and what types of problems are out of scope); make sure to provide sufficient code documentation; write down discussion results and meeting notes to have a reference; if someone shares some insider expertise with you - don’t just use it, write it down and share it if it’s not shared already.*
-	Don’t assign blame. If you’re debugging/trying to fix an issue don’t ask “who did that?”. The only question worth answering: “how do we prevent this type of error from ever happening again?”
-	If you’re doing something similar (writing the same code/performing the same action/triggering the same process) manually for the 2nd time - something might be wrong. If you’re doing it for the 3rd time - something IS wrong. Stop right there. Automate it. Move on.
-	Think outside of the box. When solving a problem consider involving other teams/technologies. The number of times I’ve seen people spending ridiculous amounts of time to do something that is already solved is overwhelming. 
-	Do not reinvent the wheel. If there’s an open-source (that’s important) library/module that solves the problem for you - don’t hesitate to use it instead of implementing your own (as long as it aligns with company policy and security/compliance requirements). But (very important but) go through the 3rd-party code, write your own tests for it if possible and always be prepared to fork it and maintain it yourself (that’s why open-source is important). It’s almost always more time-consuming to write your own solution but if you have to - look at other open-source solutions first for inspiration. You might notice patterns/solutions used by the author(s) that are better than things you had in mind.
-	It’s a bit harder when the solution is a commercial product. Here you need to think twice about the cost, support cost, expertise and maintenance - think and consult with your peers, other teams, procurement team (if you have one) to determine whether it’s worth the money. Sometimes I’ve seen companies that choose to implement their own solution and spend a large amount of money/time on it to gain “freedom” down the road. Others pick commercial solutions because they value their time more than actual dollars. Each way has its time and place.

4) General

-	Learn source control (Git). Learn it very well.
-	Spend time on understanding HOW and WHY things work the way they work. If you’re learning a new language/framework/tool - read all the documentation you can find. 
-	If you’re reading documentation/book/article and see a word/concept/phrase you do not understand - learn what it is.
-	Learn general development principles. Learn what SOLID is. Learn what are the common software development patterns. Learn when to use and not to use them. Understand pros and cons of each. Even if you’re a sysadmin, learn it.
-	Read all the release notes for your main languages/frameworks/tools. Pay attention and understand major changes and improvements as well as reasons behind maintainers decisions to add a feature/function, use-cases for new features/functions and their limitations.
-	Take ownership of problems. If you need help/assistance from others to solve it - keep politely “bugging” people if they’re not getting back to you. Don’t just let things sit there and get forgotten.
-	If you don’t know how a certain thing works/might work - it’s very often more effective and time-efficient to just quickly test it. “What would happen if X occurs?” - instead of trying to figure the answer out by going through the code or trying to find it in documentation (unsuccessfully) - just try it. After trying it make sure you COMPLETELY understand WHY it happened. I like to say: you should be able to keep answering the “and how it does that?” type of question until you get to “and then the code is executed on the CPU” or “and then the system produces a result” type of answer. That’s when you’ve gone deep enough.
-	If you’re a developer, learn and understand the DevOps portion for your language/framework. Understand how your code is compiled, packaged, published, deployed and upgraded. If you’re a DevOps/sysadmin - learn and understand the development portion. Understand how devs pick what to work on, how they do reviews, what’s the branching policy.
-	For any new system/sub-system you work on ask yourself these questions: “what happens if the system it’s running on dies?”, “how is the system going to scale with 1000x more load/users”, “how are other users going to interact with my system?”.
-	Stop over-optimizing. If your code/system works fine - leave it be. Until you start noticing potential issues in your monitoring. Which leads to the next point:
-	Monitor everything you can. If you’re writing code - think about a way of monitoring its performance. From the very beginning. If you’re building systems - think about all the metrics you need to monitor. Again, from the start.
-	Backup everything you can. Code - back it up (and use source control!). Data - back it up. Settings - back it up.
-	Figure out the tools/IDEs you prefer using (or you’re required to use by the company), read the documentation and spend time going through the settings. Each single one. Understand what they do. Configure correctly. Export and backup the settings.
-	Always remember: you are easily replaceable. As talented as you might be, as knowledgeable in a niche area as you might be - there’s always someone better. Don’t try to “hoard” knowledge to ensure job security. It does not work long-term. Be honest and try to make it easy for whoever comes after you.
-	Always learn how something works until the “aha!” moment ;)

Edit: thanks for the gold, y’all. I’ll make sure to pass it down :)

Edit: added “(as long as it aligns with company policy and security/compliance requirements)”

Edit: added the “Read all the release notes” item",1575440720.0,2019-12-04 01:25:20
49,Shoutout to all the senior developers who really help and are patient with juniors,1928,bfdvyq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bfdvyq/shoutout_to_all_the_senior_developers_who_really/,100,"I know we often get in your way, and sometimes ask stupid questions. We know we're not as independent as we'd like to be. Just wanted to say we really appreciate your mentorship, and you've made us the developers who we are today. 

Sincerely,
Junior developers",1555805772.0,2019-04-20 20:16:12
50,"No, Palantir. Your internships are not worth 5 months, 8 interviews, dozens of emails, a flight to New York, and a drive down to Palo Alto. Get over yourself before you drain the company of all its tech talent.",1897,5ncqti,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/5ncqti/no_palantir_your_internships_are_not_worth_5/,271,"I recently decided to quit the recruiting process with Palantir after having first reached out in July of 2016 and having my first interview in October. Last summer I was really excited about the prospect of working at Palantir--cool tech, smart people, sick perks. After 2 phone screens, 3 onsites in NY, a hiring manager interviews and dozens of emails back and forth with recruiters I got a call offering me the ""opportunity"" to do even more onsites for the Forward Deployed Engineering role.

During this time I also found two separate internships, one at a breakout list company and another at Google. I took both offers (I had two off terms from school essentially) and am currently working at the breakout list company. Yet, here I am in January talking to Palantir still and being asked to do more interviews. Finally I said enough, no tech internship could possibly be worth what would be 8 interviews or more if I kept going.

This made me seriously consider though, how does Palantir get good talent if they have such a horrible recruiting process?

I'm asking this question because I thought maybe I was an outlier, but heard of several people with similar experiences. My perception of Palantir has been drastically reduced through this process. I told my recruiters via email about already finding internship, being stuck in the recruiting pipeline for nearly five months, and how I was not willing nor had the time to interview as I'm working now. She just recanted the same things as before about wanting to find a good fit for me, how that takes time, and asked me to do more interviews.

Not only is the recruiting process awful, but I think a company would have to be seriously delusional about its status to think that 5 months and 6 interviews later I'll take a day off of work from my current internship to take the CalTrain down to Palo Alto and do some brain teasers on a whiteboard so that maybe I can get another hiring manager interview for a role as a glorified customer support engineer that I didn't actually want in the first place.

How in the world does Palantir stay competitive thinking like this? Is there still any hype for Palantir from top engineering talent? 


I wholeheartedly regret even starting this process of applying to Palantir as it's been a huge time and energy investment and I have absolutely no closure--I didn't get rejected, I didn't get an offer, I just walked away. 

If you've had a similar experience with Palantir I'd love to hear about it and what you did. I'm also interested in what anyone who has had a positive experience being recruited or working at Palantir has to say. ",1484177155.0,2017-01-11 18:25:55
51,Leetcode style questions to ask in an adult film,1897,azpo3m,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/azpo3m/leetcode_style_questions_to_ask_in_an_adult_film/,124,"Not sure if this is the appropriate subreddit, but my friend and I were looking to make an adult film.  The premise of the film will be that someone is giving a white board interview to another person.  Does anyone have any ideas for some inappropriate leetcode questions, or just programming innuendos in general?  I apologies if this is the wrong subreddit for this question, and I swear I am not trolling.

&#x200B;

Edit: Thanks for the overwhelmingly positive response!  My friend was a little on the fence about doing this, but I sent her a link to this post and after seeing all your suggestions she is very excited to make the film (still couldn't get her on board with dp...but 3sum might be in the cards)  Since we are both students, we probably won't have time to make the film until spring break or after the semester, but I will try to update all of you when it is done.",1552312096.0,2019-03-11 09:48:16
52,Random Musings From An Experienced Developer And Reader Of This Sub,1886,ghyrjd,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ghyrjd/random_musings_from_an_experienced_developer_and/,331,"I'm a developer with 7-10 years of experience who works for one of the FANG. I've grown from working at a small shop to one of the largest in the world so I have experienced a wide range of what this profession and this industry has to offer.

I've seen a lot of angst and confusion on this subreddit so I thought I'd share my two cents on what I believe maybe attitudes/beliefs that will serve you well in your career.

**The idea of being passionate about your job can be used to exploit you**

A lot of us come into this industry with stars in our eyes and dreams of doing big things. There's a whole bunch of shady employers and hustlers out there who want to hood wink you into working for a  pittance or building some shitty idea. Maintain a healthy skepticism and do detailed research into the prevailing conditions / wages in your area and specialty.

Never hesitate to switch once you realize you are being exploited. And I can bet that atleast a few reading this are not aware that they are in fact underpaid. The word for passion in German means those who love to suffer. I would much rather look at it as learning to find what you enjoy and leaning into it which brings me to ...

**Enjoying the process of building software makes you happier and more successful in the industry**

I have seen enough people who struggle with the job because they simply do not enjoy the process of sitting in front of a screen to write code that makes pixels dance. Obviously this is not something everyone enjoys but those who do will always outperform those who don't. I'm surprised at how this can be so controversial.

It's worth it to take a minor pay cut to work on things you would enjoy than things you would have to force yourself to. If you don't enjoy the work look into saving aggressively and retiring early for your own mental health.

You also need to be constantly learning and relearning. I work much more than 8 hours a day maybe 10-12 if you count all my extra reading and tinkering also as work. If you don't like coding that is fine but these are the people you will be competing with and you should be aware of it.

I plan to do this for as long as someone will pay me to do so and this is viable because ...

**The tech industry is and will be the key driver of economic growth and innovation going forward.**

You might read a lot of gloom and doom in general but if you keep your software skills sharp you will always be in demand. The tech industry is an absolute rocket ship. There is a reason why the NASDAQ is up even in this pandemic. It's because tech will grow more than the rest. Entire sectors of the economy remain to be digitized like medicine, education along with newer opportunities like VR and massively social realtime online experiences (Zoom+Fortnite+Discord). There is yet more untapped potential in conversational interfaces and robotics. The convergence of all these will continue to deliver results.

Tech is very important in how the world functions which brings me to ..

**Get more serious about your field and what the stakes are**

We may still be writing shit HTML JS pages but what they do is now a lot more important. The consequences matter for our privacy our economy and daily lives. A lot of us still don't absorb the seriousness of our jobs. You may one day end up working on a payment system that processes millions of dollars an hour. You don't want to be your current self who rolls out of bed at 9 and goes into work stoned. And you can get there but ....

**A lot of you are passing up life changing opportunities because of an aversion to DS+Algos / Leetcode**

Algo+DS is a fascinating subject in its own right that also happens to be very rewarding financially. Its much easier than the online hand wringing would suggest and many of you are more than capable of learning it enough to pass a FANG interview in a few months. Its well worth the effort. I have also found my colleagues who have come through this process to be very good compared to most places I've worked at. So if nothing it doesn't fail atleast at FANGs.

Wanting to put in the effort leads me to ..

**Those who get ahead are those want to get ahead**

I remember the tale of my first company. My boss was there for 7 years and was said to have put in his resignation twice. His boss was there for 10 years and was said to have tried to resign 4 times. Those who get promoted have one thing in common - They ask for it a lot. They are not ashamed of asking for raises or negotiating their fair share. They actively maneuver themselves into the best projects and market themselves well. All this is not a lot of effort. Just a matter of emphasis. However its easy to get lost in all this and forget that ...

**Even if you win the rat race you're still a rat**

Do not ignore the long term factors in your well being like your health and finding good companions at both home and in life. If you mess this up your career will also suffer in turn which brings me to ..

**Use the current crisis to reset**

Develop - Better routines, exercise, sleep and work habits. Learn to keep notes and todos and work on sorting your life out in general which may allow you to ...

**Raise your ambitions**

Software skills have a lot of leverage. Some day you may make software that makes a real difference. Either on your own or at some company. We manipulate pure information which is free and storage is practically unlimited. Coding + any other skill = magic.

If you need any tips / guidance feel free to drop me a message. I'll try to get back when I have time. ",1589267338.0,2020-05-12 03:08:58
53,"I'm 22, I haven't applied to more than 20 companies in my life, and I have 6 SWE/intern positions under my belt, and I wanted to share some tips",1886,bgxgu6,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bgxgu6/im_22_i_havent_applied_to_more_than_20_companies/,419,"I read a lot about people applying to 300 jobs and getting like 2 callbacks, but I had a very different experience. I wanted to share some of my tips that I've learned.

1. I never applied a ton, I had connections. In college I joined a professional fraternity and 4 out of the 6 jobs I got were through people I knew who worked there. You get your resume handed right to the manager instead of through HR. I recommend making friends with people in your class, or finding somebody else with a strong network and free-loading off of theirs (and buy them lunch or something). Furthermore, people you know there can give you invaluable advice on what is going to be on the interview/what the hiring manager is like, etc.
2. I made friends with the ""CS gods"" who were role models in my class. Then, I just ask them for their resume, for them to look at mine, for their advice, their compensation and negotiation tactics, etc. It's not like the med field where other people want the competition to fail, I rarely meet any SWE who DOESN'T want to help others get a job.
3. Even when I cold apply, NEVER apply on the website, there's too many people that do that. Instead, I find a recruiter on Linkedin, I find their WORK EMAIL with this extension (https://connect.clearbit.com/), and I email them DIRECTLY with my resume, my interest, and a blurb showing that I've researched the company.
4. (only applies to US citizens) This sounds shitty, but if you have an asian sounding name and you ARE a citizen, put that you're a citizen on there. Some recruiters will toss resumes JUST because they're asian and the company can't sponsor, even if you are a citizen. I literally put ""US Citizen"" next to my phone number, linkedin, and github.
5. Interviewing is honestly all about confidence. You have to be a salesman. You can't just be good at coding and suck at talking, or vice versa. I don't really study that much the day before an interview (that's for the weeks before), I just go on walks, run, do jumping jacks, get my blood flowing so that I feel the most alive I can be before stepping in to the room.
6. credit to u/Chewbahka72, but if you don't have experience just apply to smaller companies, instead of FB/Apple/Google/MSFT. There's a reason those companies pay so well, it's cause everybody has tons of experience, it's ok to start at smaller companies where you can get good tech experience without the cool free food benefits and the company jerking you off while you work.

Let me know if you want me to take a look at your resume or anything!

**EDIT: RESUME TIPS:**

I got some PMs about resumes, I'll take a look at them but here are my tips for resumes:

1. Don't use Arial, Calibri, Times New Roman. I know this might be an unpopular opinion, but if you want to get a job (esp. in Silicon Valley), make it unique. DO put some interest in design. I'm not saying make the whole thing in LaTeX or get Elon Musk to lick it before applying, but try some different fonts and dear God learn to right justify text on the same line. (https://fonts.google.com/) (https://fontawesome.com/?from=io - for LinkedIn, github, email, phone# icons). I use Open Sans and Raleway
2. Use PROBLEM, SOLUTION, IMPACT. Indicate the PROBLEM you're trying to solve, then indicate how you SOLVED it (what language, framework, architecture, system, design), and then talk about IMPACT (financial - saved $42069k, operational - less people needed to do this task now, time - saved 20% time on this operation). Here's an example: ""Built a batch utility using Java, SQL, Hibernate to automate self-checking of the business's pricing processing system (SOLUTION), allowing the business to catch failed charges due to temporarily failed downstream services (PROBLEM mixed with a little bit of SOLUTION), which in one instance saved the company $2000 in revenue leak""
3. Split up your skills into LANGUAGES and FRAMEWORKS/TECHNOLOGIES. Languages: Java, SQL, Python. Frameworks/Technologies: React, Redux, git, AWS, Docker
4. Bold text that is important, make text lighter or smaller for text that is not important. IMPORTANT: Company names, Job title, headers. NOT AS IMPORTANT: employment durations, project times, company locations
5. Just find a good-looking CS resume online or from a friend and copy the formatting. MS Word is honestly enough for the vast majority of cases.

**EDIT 2: Here is my anonymized resume:**
https://i.imgur.com/VpPK5G3.png
Not all my experience is on there, I put what I thought were the most valuable ones. I want to highlight that my resume doesn't have the biggest names on there in terms of company names, but I do think it is a strong one due to formatting, design, and wording.

**EDIT 3:** I had 4 internships in school (1 per summer, 1 in part time) and 2 full-time positions already, sorry for the confusion",1556155876.0,2019-04-24 21:31:16
54,FINALLY GOT A JOB!!,1863,gvdyfu,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gvdyfu/finally_got_a_job/,140,"After about a year of applying, four months of religiously applying. Got in about 129 applications, I received 8 interviews, and got 1 offer. I’m so glad to say I finally got a f**king job. I will be working as a developer for the same company I worked with for my capstone project, and will be continuing to work on that same project. About damn time! If I can get a job, I damn well know anyone looking at this post can get a dev job.

Edit: I see this post got A LOT of traction, so I’ll answer some of the most asked questions I’ve read. Like I said, I am working with the company I worked with in my capstone project. I got super lucky with that. I never had any internships, had a 3.2-ish GPA. Some silly web apps as my projects. I’m not some A-grade Ivy Leaguer who created a new form of Facebook or anything. I’m just a basic simpleton who ended up with a job and got lucky. Like I said, if I can get a job offer, so can you. I guaren-F**KING-tee it. I have faith in all of you. Also if you have questions, please PM me bc I tend to ignore comments and don’t have notifications on them in case they blow up and my phone goes off for days.",1591154911.0,2020-06-02 23:28:31
55,Unpopular Opinion : Actual machine learning work is not nearly as fun as people think it is.,1862,j7gimm,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/j7gimm/unpopular_opinion_actual_machine_learning_work_is/,372,"The **results** of ML algorithms and software are really cool. But the actual work itself is nowhere near exciting as I thought it would be. I've completely shifted my focus from ML/AI to Data Infrastructure and although the latter is less flashy, the work is also much more fun.  


From my experience, a lot of ML work was about 75% Data Curation, about 5% building pipelines and designing systems, and about 20% tuning parameters to get better results. Imagine someone gave you a massive 10 GB excel sheet, and your job is to use the data to predict sales; the vast majority of your work is going to be trimming the data and documenting it, not actually building the model.  


Obviously this is only based on my opinion (you might have a much different experience). But as someone who has worked in multiple subfields including ML, infrastructure, embedded, I can very honestly say ML was my least favorite, while infrastructure was the most fun. The whole point of data infrastructure is to build systems, classes, and pipelines to maximize efficiency... so you're actually engineering things the whole day at work.  


But if you want a cool job to brag about at parties, then ""I work on artificial intelligence"" is basically unbeatable.

Edit : Clearly this is a popular opinion",1602204178.0,2020-10-08 20:42:58
56,"After seeing some posts about Computer Science no longer being something people do for ""Passion"", I want to give my 2 cents as a person who grew up impoverished.",1841,drk0cc,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/drk0cc/after_seeing_some_posts_about_computer_science_no/,303,"So, I have recently been seeing a few posts here and there by industry veterans that current students going into the CS/SWE field aren't doing it for their passion but rather for money. I wanted to give my input on this discussion as somebody who identifies as an immigrant, as person of color, a first-gen college student, and as someone who lived in poverty all of his life. 

Firstly, like any field, computer science education reaches more and more students every year. Back in the day, to study computer science you needed some sort of privilege (going to college, being able to afford a computer, ect). Nowadays, we have the opportunity to spread the knowledge of CS to everyone, even those at the lowest tier of the income bracket (don't get me wrong, we can still do better to providing STEM education to schools in poor districts, but luckily we are getting better everyday). 

For myself, my first exposure to computer science was in college, and while I thoroughly enjoyed the subject, I also quickly realized that computer science was also my way out. That is, my way out of poverty. My family's way out of poverty. Yes I studied it because I found it interesting, but I didn't have a 'passion' for it like I have a passion for politics or human rights.  I studied it because I knew it was the quickest way to get not only myself out of poverty, but also my family. 

This isn't even mentioning that today the CS Job market has grown incredibly competitive. CS has become the most popular major at many schools and it's not surprising since it is speculated that coding will be just as important as writing in the near future. 

&#x200B;

All in all I wrote all of this to try and shine some light on industry veterans who are disillusioned by this sub. A lot of us come from really hard backgrounds and we simply don't have the luxury to study our passions. Just be happy there are people working hard everyday to advance this field and make major contributions to it. 

&#x200B;

I apologize if this type of post doesn't belong here.",1572913761.0,2019-11-04 19:29:21
57,Introduction about what is it like being a large company programmer in China,1839,k2ngg6,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k2ngg6/introduction_about_what_is_it_like_being_a_large/,551,"I am a fresh graduate this year, working  for ByteDance (your know , the company behind TikTok).
My title is big data engineer, but almost every big data engineer writes sql queries all day, so this job can also be called 'data warehouse dev enginner', but i do data mining which is more interesting for me.
Chinese companies are not like USA companies, chinese companies put more emphasis on basic knowledge.
For example, they will ask you questions like ""Say what you know about 'tcp three way handshake four way handshake'"",
I was asked if i had read e.g. Apache Spark source code and answer how it runs. 
But thesedays algorithms are being valued, so we also use leetcode, but solving  the leetcode hot 100  bug free is enough.
I can get 60000 us dollars a year which is a very high salary in china, because other jobs are 7500 us dollers a year. 
Thanks for your reading! waiting for your reply！",1606598095.0,2020-11-28 16:14:55
58,Just a friendly reminder,1838,hfrlg1,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hfrlg1/just_a_friendly_reminder/,243,"The majority of us are currently working remote, and some of our companies have even begun hiring again. With this in mind, it's important to note that written communication is inherently received with a negative bias.

A simple message over Slack, especially to a new employee or employee in training, may be received with a negative tone. For example if a new Associate SWE asks you question and you reply with just a ""no"" or ""ok"", it may not be intentional negative but could be read that way.

I've seen this quite a bit with newer SWEs where they start off by asking a lot of questions, but if their mentor is very short with them, the questions start to slow down as they feel like they are negatively responding to them by being short.

Just a simple reminder to us all!",1593139354.0,2020-06-25 22:42:34
59,"Graduated with a 2.4 GPA 1 year ago. After studying my ass off, I now have offers from 3 of the Big X. Here’s how I did it, and perhaps how you could too. Detailed stats included.",1826,9i0pow,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9i0pow/graduated_with_a_24_gpa_1_year_ago_after_studying/,349,"******
Note: It's been brought to my attention that this post has been mentioned in a [Joma Tech video](https://www.youtube.com/watch?v=YGflHj1SjA4) on Youtube and it appears that Joma has gotten my post mixed up with the [2.9 GPA post](https://old.reddit.com/r/cscareerquestions/comments/6278bi/my_journey_and_tips_29_gpa_at_a_noname_liberal/) by u/elliotbot. Just wanted to clarify that we aren't the same person and the person being interviewed in the video is u/elliotbot and not me :)
******

When I graduated a year ago, I failed all my interviews with the Big X even after grinding through about 200 leetcode questions. So I decided to try something different with my new wave of studying a couple of months later while I was working as a software engineer at one of the companies I did get an offer from (enterprise software company). 

I started out by doing some research on how to effectively learn, and found a relatively well known and free online course called [Learning How to Learn](https://www.coursera.org/learn/learning-how-to-learn). The course is rather short and only took me about 8 hours to go through, but what I learned from it was a huge help.

After completing the course, I decided to use this free promo code for interviewcake that I got from a hackathon and went through about half of the problems on that website (did about 20 problems). Most of them problems were ones I’ve already seen on leetcode, so it was more of a warm up / review. One thing new thing I did was to write down each problem I did in a google sheets document along with the date I solved the problem (linked in the bottom). I would then review the problems I did for the past week to make sure I didn’t forget how to do them. This was a tip I picked up from the online course -- the power of recalling + spaced repetition.

Next, I grabbed a copy of Elements of Programming Interviews in Python (if you’re going to buy it, make sure to check [their website](http://elementsofprogramminginterviews.com/) to see how to get the latest version and also use their free command line judging tool to check your answers). I also learned python specifically for interviewing because of how concise the language is, meaning you could write your code much faster, which I think played a notable role in my interviews. I started going through EPI’s study guide mentioned in one of their intro chapters that had a list of recommended problems. I decided to go with EPI because I’ve already gone through 200 leetcode questions, but I wanted to read the more in depth explanations that EPI had and learn how the book explains the solutions to problems so that I could pull off something similar when explaining / solving problems in interviews. I ended up solving about 2/3s of the problems that were in the study guide.

By this point, I felt ready to start interviewing. At least for the little guys. So I started mass applying to companies that I was only mildly interested in, saving my top choices like the Big X for last, as I would be more prepared for those interviews after prepping more with both the practice problems and with actual interviews with the companies I am less interested in.

I got a massive number of rejections (see the second to last paragraph for stats). But every once in a while, I did get an interview too and I made sure to utilize them. I should mention that with one year of experience, I was applying to mostly entry level positions, but if a company didn’t list any entry level ones, I applied to more senior positions, whether or not I qualified for them. I did get a few interviews for those senior positions btw. I had about  2 or 3 interviews a week for a couple of weeks from this.

After doing about a dozen interviews, I started feeling more confident and was ready to start applying to my top choices. This is where I started using leetcode again. I got the leetcode premium subscription for a month to practice tagged questions for specific companies I was interviewing for.

Finally, it was time for the Big X interviews. I took two weeks off from work and scheduled all of my Big X interviews to take place in these two weeks. There were several leetcode questions of varying difficulties that were presented, some I recall from EPI as well, but also a go
od number of questions that I’ve never heard of. Nevertheless, after being exposed to so many problems and working through them, you’ll start to get a feel of how to approach most problems. I definitely didn’t ace every single interview. There were several interviews where there was plenty of room to improve my solutions, even some that I didn’t finish coding up the solution for. But I made sure to explain every detail of my thought process. Try to keep talking. Vocalize everything you are writing on the whiteboard. Draw examples. I’m sure you’ve seen a lot of these tips, but ultimately, the most important factor was just to practice enough to the point where you can tackle almost any problem thrown at you. Do a lot of different type of problems. Review them, and thoroughly understand them.

[Here are all the problems I worked on for this wave of studying](https://docs.google.com/spreadsheets/d/1ciClTiWWmrDL6sFnNWJj0dga2BC3x0l44tkvaAfkQo4/edit?usp=sharing), which I reviewed via recalling, religiously. Problems prefixed like “14.4 <problem name>” are from EPI chapter 14 problem 4 (mapping depends on book version). Problems prefixed like “128. <problem name>” are from leetcode. The others are from various sources, such as interview cake. 

In the end, I received 5 offers (3 from the Big X), and about 100 rejections (individual companies, if it was just applications then more like 300 rejections), including the companies I never heard back from. I did a total 11 onsites and 23 technical phone screens where I had to code. I also tracked every minute I spent studying and for this study wave, I spent 130 hours. For the previous wave about a year ago where I was primarily grinding leetcode, I spent 275 hours. 

Feel free to ask me any questions you have and I will try to get back to everyone, at least eventually. Hope this helps!",1537660575.0,2018-09-22 19:56:15
60,"For interns who just got cancelled: “It is possible to commit no mistakes and still lose. That is not a weakness, that is life.”",1816,fkt8ma,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fkt8ma/for_interns_who_just_got_cancelled_it_is_possible/,161,I know a lot of us have had our internships cancelled or are afraid of it happening. u/jpludens mentioned this quote in another thread and I felt like y’all should hear it. Getting cancelled is not your fault,1584580822.0,2020-03-18 21:20:22
61,The *REAL* advice I wish I known when I started my career,1795,e33snp,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/e33snp/the_real_advice_i_wish_i_known_when_i_started_my/,219,Don't believe everything you hear on this sub and keep trying your best! Happy thanksgiving yall.,1575001836.0,2019-11-28 23:30:36
62,A tip based on my experience: your interpersonal skills are probably more important than technical ability for career development,1798,c26zp4,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/c26zp4/a_tip_based_on_my_experience_your_interpersonal/,243,"Given the proliferation of Leetcode-style interviews that completely ignore soft skills, I think it's easy for many entry level folks to develop the notion that as an IC the most important thing for their career advancement is just their sheer technical ability and knowledge.

This is important, no doubt. However, based on my experience (7ish years), technical ability rapidly becomes outranked by your interpersonal skills, especially as you become more senior (either on an IC ladder or management ladder). Rarely have I seen someone be fired or seriously reprimanded because of their technical work. But I've seen people denied promotions, demoted, pushed out of important projects, stripped of a private office, or fired because they were hard to work with, had bad attitudes, relied way too much on institutional authority, or were just assholes.

""Interpersonal skills"" doesn't mean you need to be extroverted or that you need to go to every Happy Hour or stuff like that. It means you need to build a reputation as someone who's easy to work with, someone who gets important work done without causing drama, someone who uplifts others and is a positive presence in the room. This will help you regardless of whether you want to go into management. Senior technical engineers are leaders too and have to lead by example. If you're hard to work with, you'll set the example of what *not* to do, which is a great reason to not promote you or give you very visible work.",1560916586.0,2019-06-18 23:56:26
63,My journey and tips: 2.9 GPA at a no-name liberal arts college with 1 mediocre internship —> 4 FTE offers including FB,1784,6278bi,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6278bi/my_journey_and_tips_29_gpa_at_a_noname_liberal/,311,"Since I've gotten so much from this sub, I wanted to see if I could give back a little and share my story / random tips. Hopefully it helps some of you out there. There was also some interest in my [preparation strategy while employed](  https://www.reddit.com/r/cscareerquestions/comments/622ceq/employed_engineers_how_do_you_allocate_time_to/dfj7tj5/).

**TL;DR:** 

graduated from a no-name liberal arts college 2 years ago with a sub-3 GPA and 1 internship at a small local non-tech company; went to work for a large ""unprestigious"" fintech company, then an unknown startup; got a few hits from Big 4 recruiters but always fucked around preparation-wise and never converted an onsite; FB recruiter messages me in Feb. and I decide to go all-in; studied ~150 hrs in 1 month+ with a full-time job and landed 4 offers out of 8 onsites (didn't go to 3 onsites).

**Disclaimer:** 

I am not claiming that FB or any Big N or unicorn or w/e is the be-all end-all of companies. I'm not interested in debating whether they're overrated. This is aimed specifically at people who might be interested in pursuing these sorts of roles, and especially at people who don't think they can ""make it,"" because of background, etc. I'm also not claiming this is a fully general solution. This is just my journey and what worked for me—hopefully it will prove a little bit useful for you.

Edit: I want to reiterate that I realize my school and GPA didn't get me into FB, but that my experience and interviewing did. I got in *in spite of* my school and GPA. My title is phrased as it is because of all the questions people ask on this sub about whether not going to a target school and not having an impressive internship *forever* precludes you from working at a Big N or unicorn. Clearly, I don't think so and I aim to provide some context and motivation to those who can relate. If that's not you, then hopefully the resources and tips are otherwise helpful. (Also quibble with the idea that 2 years out of UG counts as that experienced.)

**On prestige whatever tf that means:**

I see a lot of questions on here about whether it's necessary to go to a top whatever school, or whether you're screwed if you go to a public school or a no-name school, or ""will i ever make it to GOOGLE if i don't go to Stanford!?"". The short answer is: no, it's clearly not necessary, but of course it helps. My school was so small (less than 10 CS majors in my graduating class) that we didn't even have a career fair, let alone tech company recruiters visiting.

What that means is that you kinda have to make your own path. You have to do the typical side project shit that's recommended here all the time, but may also have to do a bit extra in terms of networking (few of my classmates now work at a tech company, let alone a startup or big N), keeping up in tech (reading blogs, HN, etc.), learning (MOOCs, small exploratory side projects), and your resume/Linkedin/Github.

Other things I did to try to set myself apart were taking the initiative at work and putting myself on projects that worked on ""hot""/trendy techs (cloud, big data, ML) and maintaining a relatively polished resume and the like. Even when I didn't have an interesting project at work, I tried to keep myself busy with staying up-to-date and not letting my skills atrophy.

Re: Linkedin/Github, I got my previous job at a startup through Linkedin, as well as my current job at Facebook. Definitely don't underrate it. I also had an interviewer at a Microsoft onsite specifically mention checking out my Github.

**On imposter syndrome, learned helplessness, and failure:**

Last fall, I was contacted by Google and Amazon. I halfassed an absurdly optimistic study plan, lucked my way through to onsites, and then failed miserably. And I mean failed. I didn't even code a brute force solution to at least 3 problems. It was brutal.

The issue was, I was scared of failing. Scared that I might do my best, and yet still fail. It was a lethal combination of learned helplessness, imposter syndrome, fixed ([vs. growth](http://www.aaronsw.com/weblog/dweck)) mindset, and self-destructiveness. If I didn't *really* try, and failed, well, maybe if I had *actually* tried, I would've gotten it! My precious ego was protected. My self-identity was safe.

In practice, what that meant was that I skimmed CTCI, did a couple Hackerrank problems in an IDE, read up on some algorithms and data structures on Wikipedia, skipped any problems that looked scary or intimidating (all Leetcode mediums+ and literally every single graph or DP problem), and convinced myself that practicing whiteboarding was a waste of time.

Now, I know this sounds pretty dumb. But I also know this resonates with at least some of you. Don't fuck up like I did. If you truly want it, go after it and actually commit. Fuck being scared of failure. Don't preemptively discount yourself.

**On obsessive studying:**

In February, I got a message on Linkedin from a FB recruiter asking if I was interested in applying to a Data Engineer role. I said enough was enough and decided to go all-in. I wanted to see what I could do if I truly applied myself 100%. I didn't want to regret not having done all I could.

I wrote up a study plan and schedule, resolved to study about 3.5 hrs a weekday and 7 hrs a weekend day, read a bunch of motivational stories (like this one aspires to be), told my friends and SO that I'd be a shut-in for the next month, and hit the books. I kept track of [all the time I spent studying](http://i.imgur.com/vAtIJqp.png). I trusted the process. And it worked out.

As I expected, the first week was a struggle. I was getting lost with Leetcode easy problems. Wtf was a trie again? Etc. During this time, I also wanted to up the stakes and not ""waste"" my preparation, so I cold applied to a ton of roles. Probably over 150. I went through [the easy application list](https://github.com/j-delaney/easy-application), cmd-clicked every company I recognized, and applied to any and all relevant roles.

**On study materials and studying tips**:

DS&amp;A:

* Leetcode
* Interview Cake
* the Algorithm Design Manual
* [Arden Dertat's list](http://www.ardendertat.com/2012/01/09/programming-interview-questions/)

System Design:

* [High Scalability](http://highscalability.com/)
* [System Design Primer](https://github.com/donnemartin/system-design-primer)
* [Hired in Tech](https://www.hiredintech.com/classrooms/system-design/lesson/55)

SQL and data modeling:

* [Mode Analytics SQL tutorial](https://community.modeanalytics.com/sql/tutorial/introduction-to-sql/)
* [Kimball's The Data Warehouse Toolkit](https://www.amazon.com/Data-Warehouse-Toolkit-Definitive-Dimensional/dp/1118530802)

I did 76 problems on Leetcode, about 75% easy, 25% medium, and a few high frequency hards. Did all of the Interview Cake problems. Had already gone through CTCI, so just skimmed it. Whiteboarded ~25 problems in total in detail (drawing test cases, iterating through multiple solutions, talking out loud about algorithmic logic and time/space complexity, etc.). Did about 5 complete mock interviews with my GF (including the ""talk to me about your background"" elevator speech portion).

Interview Cake is pricey, but the cost/benefit analysis made sense for me. I focused a lot on quality over quantity, and it was a good fit there (big fan of the hints and iteration from brute force to ultra-optimized). The feedback from phone and onsite interviews was that I did a great job communicating my thought process and talking through efficiency and test cases.

Another thing I got good feedback on was my level of engagement. Prior to every interview, I looked up all my interviewers, any engineering blog posts, recent company news, etc. This made it easy to ask things like, ""I was looking at the recent announcement from [YOUR AMAZING COMPANY], how do you feel about it?"" or ""I saw that blog post your team did on BigQuery, what were some of the challenges you guys faced in refactoring your pipelines?"" I can't objectively back this up, but I do feel like this aspect is both overlooked and low-hanging fruit. (Plus, shouldn't you be curious about your future company?)

**On stats and other interviewing process details:**

First contacted by Facebook on January 18th. Signed their offer on March 28th.
148.5 hours spent studying from 2/10 to 3/18. Avg: 4.13 hrs/day.

8 onsites: FB, Microsoft, Yelp, Twitch, Venmo, Foursquare, Indiegogo, Capital One. Didn't go to onsites at Capital One (wasn't too interested), Yelp, and Twitch (latter 2 happened after FB offer). Converted 4 out of 5 (not Microsoft; was a general SDE role).

Overprepared for my onsites with the exception of Microsoft (should've done more Leetcode hards) and FB (should've practiced more on SQL window functions and pivot tables). If I had studied more efficiently, I probably could've gotten away with 50 hours. But it was worth the peace of mind, especially since I wouldn't get another try for at least half a year.

Traveled to 5 onsites in the span of a week ([schedule here](https://www.reddit.com/r/cscareerquestions/comments/61e0t1/how_do_people_get_so_many_offers_at_once/dfe3ra4/)).

Talked to / interviewed with about 20 companies at the ""peak."" Some ghosting on both sides, some rejections on both sides. (Somewhat funny, mostly infuriating ghosting story: AWS S3 recruiter wanted me to apply, we set up a phone coding interview, the day of the interview was the day of the S3 outage (:/), nobody called, recruiter said sorry they were super busy (understandable), some phone tag, I emailed another follow-up, complete radio silence.)

Received 3 takehome coding assignments. Didn't do 1, converted 1 of the remaining 2 into an onsite and offer. Spent about 20 hrs total on the assignments.

Negotiated my offers a little with the help of [Haseeb's blog posts](http://haseebq.com/my-ten-rules-for-negotiating-a-job-offer/). Added about $25k to my total comp. If I had another big N offer, I think I could've done better on this front with FB. Ended up with a package totaling ~$185k.

**On useful lists:**

When interviewers asked if I had any questions, I stuck with a bank of questions that I believe went over really well:

* What first attracted you to [AMAZING COMPANY] and what has helped keep you here over the years?
* What are some challenges your team is currently facing?
* What are you most excited about regarding the future direction of [AMAZING COMPANY]?
* Walk me through the development workflow/process: do you guys do scrum or standups? Pull requests? How are tasks determined and assigned?
* What are some projects I would work on in my first 90 or 180 days here? 
* What did you work on when you first got here, or alternatively, tell me about the project you're most proud of?
* (to hiring managers/VPs/directors) When you think of a successful software engineer at [AMAZING COMPANY], what are the most common traits that come to mind?

My mostly sorted list of heuristics I would go through when stuck on a problem:

* Always consider hash tables (dictionaries) with their O(1)-ness. (""Tip: using a dictionary is the most common way to get from a brute force approach to something more clever. It should always be your first thought."")
* If at all array-related, try sorting first.
* If search-related, consider binary search.
* Start with a brute force solution, look for repeat work in that solution, and modify it to only do that work once.
* Space-time trade-off! That is, for better time complexity, try using auxiliary data structures. E.g., do something in a single pass over an array—O(N) time—by using a hash table—O(N) space—vs. doing something in multiple passes—O(N ^ 2)—without using any extra space—O(1). What information can I store to save time? (Another example: O(1) get_max method for a Stack class stores extra information (the max at and below each element) to save time (instead of iterating through the stack O(N)).)
* Try a greedy solution:
Iterate through the problem space taking the optimal solution ""so far"" until the end.
(Optimal if the problem has ""optimal substructure,"" which means stitching together optimal solutions to subproblems yields an optimal solution.)
* Remember that I can use two pointers (e.g., to get the midpoint by having one pointer go twice as fast, or in a sum problem by having the pointers work inward from either end, or to test if a string is a palindrome).
* If the problem involves parsing or tree/graph traversal (or reversal in some way), consider using a stack.
* Does solving the problem for size (N – 1) make solving it for size N any easier? If so, try to solve recursively and/or with dynamic programming. (Using the max/min function can help a lot in recursive or dynamic programming problems.)
* A lot of problems can be treated as graph problems and/or use breadth-first or depth-first traversal.
* If you have a lot of strings, try putting them in a prefix tree / trie.
* Any time you repeatedly have to take the min or max of a dynamic collection, think heaps. (If you don’t need to insert random elements, prefer a sorted array.)

**On weird things I did:**

I used moda to help me stay focused and study. Wasn't necessary, but it did help (big YMMV disclaimer here). Didn't use it on the day of any interviews because I didn't want to make myself more nervous/anxious.

I copied over all the solutions I wrote for Interview Cake and most of the Leetcode mediums and high frequency / notable easy problems into a local directory and pushed it to Github. I then concatenated all these files and printed it out. Took the stack of solutions with me when I was traveling the final week and looked it over on flights, etc. Basically just priming my pattern recognition.

**On concluding:**

If you made it here, I'm impressed. I'm sure there's more I could write or that I forgot to include, but for now, that's it. Ask me any questions you have and I'll answer every one!

Also let me know if there's interest in my open-sourcing my pretty comprehensive Workflowy study guide.

**Edit:**

Overwhelmed by the response, and thank you very much for the gold! I will clean up my study guide a bit and link it here within the next day. 

Feel free to continue asking questions, and if I missed yours, definitely remind me! 

**Edit 2:**

My study guide is still quite messy, but I didn't want to procrastinate and let the perfect be the enemy of the good, so here it is: https://workflowy.com/s/wGqavcPQFm

Hope it helps, and if you have any improvements, please tell me.

Also, if people want to open-source it for real and somebody knows of an easy way to turn a Workflowy note(book) into a Github repo, please let me know :)

(Note: I don't use this account anymore and am not able to reply to all the messages I get, but if you need personalized advice or even coaching, you can try emailing me at suryc011 [at] gmail [dot] com.)",1490829302.0,2017-03-29 19:15:02
64,"Not going to lie, the greatest thing about being Experienced is being able to say no to Leetcode questions.",1787,im25q8,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/im25q8/not_going_to_lie_the_greatest_thing_about_being/,415,"Nothing really else to add.  It just feels pretty good to say that while the job sounds interesting, it's not worth it if I have to interview like that.  Just told two pretty prominent unicorns that I wasn't interesting in the interview process after their recruiters/hiring managers found jobs that I was pretty perfect for.

Funny thing is, I think they hear that a lot from other experienced folks.  There is no surprise on their part and they fully understood.

I'm gainfully employed in a good job with decent pay.  I'm too old and bitter for interview games right now.

EDIT:

I didn't realize that this would gain this much traction.  So, some clarifying points to deal with the questions/assumptions.

My current TC is around $330K - but my refreshers are really good - so it will soon be $370K and $410K the year after.   The company has the ideal culture, great WLB, and I have an absolutely awesome manager.  It's good, but I keep an ear open because I know I can do slightly better.  I have 20 years of experience, 13-15 years as dev (depends on what you call my startup experience), but I have no specialized skills - so no, I won't make $700K that some people are saying that is possible.  Possible for some, not me.  $500K-$550K is my max potential, which is still unbelievably awesome.

The companies I said no to were willing to get up to $500K, but these are non-public companies.  So, there's a risk that lowers the TC in my opinion to something not worth much more than my current job, and my WLB would be much worse.  And I'm not going to cram for LeetCode for a week to work for them.  Too much stress for too much randomness in the interview process.

And no, I don't have a blanket refusal on all LeetCode. I'm not stupid.  But if a company wants me to do LeetCode, I do expect a huge premium.  Most companies don't offer that premium, so I gleefully refuse.

An example of where I didn't refuse - I recently interviewed for the E6 track at Facebook, but failed (long story short, they asked for a 3rd round, got a bad System Design interviewer, and failed - I actually did well on the LeetCode surprisingly).  Anyway, that job would have $500K+ of non-paper money.  So, I will do LeetCode for that.  I also talked with Google.  Did the first round, and they only wanted me at an L5, which is not a huge raise.  That is not worth it to continue, so I refused.",1599195743.0,2020-09-04 01:02:23
65,Sharing a hiring manager's perspective,1748,ie27sd,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ie27sd/sharing_a_hiring_managers_perspective/,202,"I've been wanting to write a post like this for a while, but didn't have much time to sit down and organize my thoughts. However, I realized we're entering new grad / intern recruiting season, so I thought this might be helpful to some people in the near future. I also hit a milestone at work recently of having assessed 100 candidates -- primarily SWE and PM, but some other roles too -- and thought this might be a good way to commemorate it in a small way.

This post is aimed at SWEs, specifically coding, for new grad / junior / similar roles. However if there's enough interest I can do a similar one for system design, PM, and maybe even TPM roles.

By no means is this a definitive guide or guaranteed in any way, it's just my own anecdotal experience

Good luck!

**1. Do NOT jump directly into writing code or answering the question exactly the way it was asked**

In my opinion, the single biggest and most common mistake that candidates make is answering the question immediately. A lot of the time, the questions are worded ambiguously, and even if they seem completely defined, they're not. Usually the assessor wants to know more about the way you think rather than how you write code on a whiteboard/doc. Before writing any code, spend some time demonstrating that you're thinking about the problem holistically. Asking the right question sometimes demonstrates more about your technical knowledge than implementing the algorithm correctly, as strange as that sounds at first.

At a minimum, make sure you define the following before you write any code. You can ask outright or you can make a reasonable assumption (but make sure to explain them):

* Inputs and outputs
* How much validation or error handling you need to do on the input value
* Expected size of input. This informs runtime, so you can defend your choice of implementation.
* Whether there are any major constraints to space, time, etc.
* Test cases. Include some standard items, but also try to capture things you know might be edge cases (ex. size = 0 or 1 for an array, empty string, nullptr, etc.) and explain why you chose them. This is a huge differentiator.
* Any helper classes you need to solve the problem. For example, if it's a Tree/Graph/Linked-List problem, quickly sketch out the important methods/variables of the Node class you'll use.

Don't spend a ton of time here, maybe 2-3 minutes of discussion. Enough to show that you're competent, but not too much that it seems like you're trying to avoid getting to the coding portion.

**2. (Depending on problem complexity) diagram or pseudocode before you jump into actual implementation**

The average programming question is about 15-30 minutes depending on the difficulty. For more complex questions, it can be helpful to draw out the data flow or algorithm or even write pseudocode before moving to the actual class/function/program implementation. This helps to quickly convey your knowledge of the problem and confirm your logic with the test cases without also having to worry about the specific implementation syntax. There's nothing more frustrating to a candidate than getting 75% through a verbose Java function and realizing their fundamental logic was wrong.

Believe it or not, we don't want to come across as antagonistic or purely judgemental. We can't help you course correct early if you don't tell us where you're going and just start writing code without a clear plan. Also, in the case where you're not able to finish the final implementation, having diagrams or pseudocode will help me decide whether I think you could have gotten to the correct answer given more time, or whether you were completely lost.

Again, this should be maybe 2-3 minutes max. If the problem is simple enough, like a warmup exercise or initial technical screen, you may be able to skip this step. Use your judgement.

**3. Think out loud**

Another common mistake candidates make is silently facing the whiteboard while they write code for 5-15 minutes straight. I personally will never let it actually go on that long and will ask questions while the candidate is ""programming"" if they don't talk out loud, however some people will keep the awkward silence.

Benefits of talking through the code:

* You explain what you're trying to do as you write it, so the I know if you're on the right track and/or can course correct in real time
* You can explain tradeoffs and alternatives, demonstrating how deeply you're thinking about the problem. Ex: ""I'm using a for loop here, but you could also do..."". Or: ""I assume this is a single-threaded solution, but if we were to parallelize it, here is where you'd include the main concurrency logic."" This is a huge differentiator.
* In most cases we talk faster than we write, so I can get a lot more information from a candidate if they talk.

**4. When coding, syntax matters a bit, but other things matter more**

At all of the places I've worked, the candidate gets to pick their programming language. In this case, make sure you know the basic elements like where parenthesis and brackets go, what should/shouldn't be capitalized, where punctuation goes, etc. However, I don't really care if you miss a semicolon, forget to capitalize True/False in Python, swap null vs None, etc. UNLESS it's a pervasive issue to the point where I'm not convinced you know what you're doing. Knowing syntax perfectly is great, but I also know in any real-world situation your IDE/interpreter/compiler/etc. will catch this, so it's a relatively minor mistake.

In the grand scheme of things, the actual code is not the main focus. I care significantly more about you knowing the fundamental mechanics rather than formatting. Some common aspects that are more important than syntax, and are common mistakes as well:

* Do you know if strings are immutable or not?
* Do you know the limitations of ints, doubles, floats, etc.?
* Do you know how division works (int division vs. float division)?
* Do you know how to use data structures and pick the right one?
* Do you understand pointers/references and how they work?
* Do you understand types and typecasting?
* Do you know the difference between shallow and deep copy?

**5. Sanity check your answer after finishing implementation**

Remember the inputs/outputs and test cases defined in Step #1? Now is the time to revisit them and run through your implementation to make sure it works. This shows good testing/debugging practice to start doing it yourself. It's also a good way to catch some simple bugs yourself, which is also a positive outcome. Again, my primary goal is not to watch you write perfect working code on a whiteboard, it's to assess your knowledge, process, design, and finally code quality.

**6. (Optional) Discuss extensions**

If there is time, and you're not redirected to another question, you can discuss potential extensions to the work you just did. For example:

* How can you improve performance?
* How can you make the error handling more robust?
* How can you reduce complexity and space usage?
* How else might you have implemented this and what the tradeoffs might have been?

However, use judgement for this one. It's not always the best idea if you need to move on to the next question or you're approaching time.",1598062980.0,2020-08-21 22:23:00
66,"""Entry Level"" labeled jobs on LinkedIn are requiring 5+ years of experience in listing. What does Entry level even mean anymore?",1745,hsba3c,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hsba3c/entry_level_labeled_jobs_on_linkedin_are/,333,"I guess 8 years of experience is considered entry level now folks. 


I just wanted to rant during this depressing time of job searching as a recent college grad.",1594940884.0,2020-07-16 19:08:04
67,"Hate your job? Here's how to quit with nothing lined up, from my experience.",1734,9tkgt0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9tkgt0/hate_your_job_heres_how_to_quit_with_nothing/,241,"This gets asked every now and then and I think it'd be good to have a summary of advice that pops up when someone searches for it. This is specific to our industry, so if you're not in tech, this may not apply to you!

So first and foremost: **do not quit your job unless you have reached the absolute breaking point!** I reached this point when my manager put me in a surprise meeting with HR and handed me a warning for something asinine like I was a child caught in the hall without a hall pass.  I already hated my job and this was way more than I could handle without my mental health further deteriorating. 


That being said, **if the economy is not good, under no circumstance, bar illegal or severely unethical practices, should you quit your job**. I would not have put in notice if I didn't know I could get a job within a few months. If we were in recession, I'd have just bent over and taken it. **Its easier to get a job when you have a job.**

So, with that out of the way, here are my tips based off my experience:


1. **Ensure you have at least 2 - 3 months of expenses covered.** Ideally you want at least 6 months. This does not include any money you have in a retirement savings account, and ideally no investments or bonds. Of course these should be liquidated in an emergency, but that should not happen if you have enough saved up to begin with. *If you have a lot of money saved up*, I would take the advice below on a less urgent timescale, to reduce the chances of burnout, or ending up in another crappy company.


2. **The moment you give notice, you're basically unemployed.** Your income is limited. So act like it. Cut out all non-necessary expenditures.


3. **You're allowed to give more than two weeks notice** (though be aware they can kick you out anytime after you give notice). As much as I wanted to leave, I wanted to have a job while applying to jobs, because it's easier. I also wanted to have a bit more financial security. So I gave a month's notice. I figured that'd be enough time to find a job, and if not, at least I have an extra month of finances. **You're also allowed to quit on the spot and leave immediately**. (In an at-will employment region!) Just make sure you're financially prepared for that. Know that you will have a somewhat tougher job hunt.


4. **Apply to jobs like its your job.** I applied to ~50 jobs in the span of two days. My metrics we're: *Above a 3 on Glassdoor*, and, *I had at least a passing resemblance of qualification for the role* (and in NYC/NJ, where I'm based). If you don't live in a hub, be prepared to move, or lower your standards immensely. And if you don't have a wealth of money saved up, **you cannot be picky**. I took the first offer that came, which luckily was at a great place.


5. **If you still have your job, do not mention you already gave notice!** This should be obvious, but do not tell anyone you already put in notice. That's a ""later"" problem. If your job ends and you're still in the process with others, tell them. At least you'll have your foot in the door already.


6. **Study like crazy.** You can't really afford to fail interviews. You will! But try to reduce that chance. I didn't grind leetcode but I studied every gotcha in the book for Java and JavaScript, and knocked down all the fundamentals for any frameworks listed under ""Advanced"" on my resume. Essentially, I could answer most questions about any language or framework I claimed to know well, and trust me, it paid off. If you're aiming for places with more Google-like interview processes, sorry but you'll need to grind leetcode and brush up on CS101 concepts. That's just a fact. There are plenty of places that won't ask you about data structures and algorithms, or give you 'fun' riddles to solve. There are plenty that will. Also, when entering a technical or behavioral interview, make sure you study enough to at least understand everything they've put on the job listing. For example, you may not know what R is, and no, you don't need to become an expert overnight, but you should have an idea of its purpose. Companies understand candidates don't know everything, and you shouldn't pretend to, but it's better to at least say ""Never used it, but I know it's for this"" than ""I have no clue what that is"".


7. **What are they gonna do, fire you? Your full-time job is on the backburner if you still have it.** Schedule those interviews during the day. Disappear for ""doctor appointments"" or ""long lunches"". You'll need your laptop and I hope you know how to enable mobile hotspot on your phone. Know the quiet rooms in your office and book them. Obviously *don't completely disregard your work*, unless you hate your teammates as well, then, go ahead. On my busiest days I did 1 hour of actual work, and 7 hours of interviews and phone screens, with a 15-30 min break between each. When I had an onsite, I just used my time-off. If you don't have time-off, then sadly you will need to use sick days or unpaid time-off. **If you're unemployed already you'll have even more time to handle interviews.** Ideally from 9pm - 6pm every weekday should have at least one interview or phone screen scheduled.


8. **Managing take-homes.** Take-homes have become more common. Unfortunately it seems some companies do not realize candidates applied to more than one job. Some take-homes take an hour, others could take 12+ hours. Inform companies that you need more time if they give a deadline you can't do. If you're drowning in take-homes (I was!), take a break in applying, and schedule interviews further apart, so you have time to complete them. You aren't in a position to reject take-homes, so you'll need to find some system that works for you to handle them. If you're feeling ballsy, ask if theres an alternative to a take-home, like a round of code-pairing.


9. **Take breathers.** This sounds counter-productive, but you will burn out if you don't give yourself time to relax. I nearly burned out after having back-to-back interviews and doing a take home that took three days of spare time. You need to have energy to do interviews, so burning out needs to be avoided. I also took breaks from applying, as I was already getting enough hits in my email.

10. [EDIT!] Big tip: If you quit your job for what could be construed as constructive dismissal, or due to some form of discrimination, you can be entitled to unemployment. Just because you quit does not automatically mean you're disqualified. Look into your region's policies on applying for unemployment.


Aside from those, I was applying to Frontend, Full-Stack, Backend, and General Software Engineer positions. Of the applications I sent, I got a phone screen from about ~40%. This would probably have been higher if I had been at my current job for longer than 6 months. It also may be higher or lower depending on your current/most current role. I secured a job in two weeks, which honestly, is shockingly fast. I would expect closer to 4-8 weeks. **But you should expect to be unemployed for at least 3 months** even if, realistically, you should be able to find a job in about a month.


In the end, I would say that doing this was ultra-stressful for me. But it was also relieving because I could finally leave my hell of a job. I really stress that you should not quit your job unless you are absolutely at wits end.  You > Others, but more importantly: You not in poverty > You in your hell hole job.


That's all. **If anyone else has done this, please add on to it! What was your experience like? How did it go? What else would you tell people who are thinking of leaving without another job lined up?**",1541196950.0,2018-11-02 18:15:50
68,Always write a clear README if you want to find a coding job,1729,h17blk,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/h17blk/always_write_a_clear_readme_if_you_want_to_find_a/,207,"In this article, I would like to share with you my little observations on how many developers failed to convince me to hire them by not putting a README to their repositories.

### What is README?

Usually, README is a file in the repository of software/project that briefly explains it. 

**README file is there to pitch your work.**

README is not your documentation (unless it can be fitted into one page).

&#x200B;

### Why should you make it? 

If you make your repository public, you most likely will be judged by it. Especially, when you apply for a new job with your GitHub/GitLab account in your resume. 

I have been involved in hiring interns/junior software engineering positions a few times throughout my career. On average, I saw only 1 out of 7 candidates to mention their profiles on GitHub/GitLab. **Very few of those candidates would have a README attached to their repositories.** 

I assume that those people attaching their GitHub profiles think that recruiters/recruiting engineers will dig into the code to figure out what is going on over there. **That does not happen.** The main reasons for that are:

1. They do not have time for that
2. They are not technical
3. Even if they are technical, they might not know the language/structure of the code that you have written

>As a result, you might have strong coding skills and a decent project in your portfolio, but no one will know that without a README that would explain what happens.

#### Drawbacks of not having a clear README

As a technical person, when I see no-README repositories of people applying for a job I question their soft skills’ level. At least, I will think that **you are OK to leave your work undocumented**. Obviously, it does not help you to pass to the next processing level.

#### Drawbacks of having a poor README

You tried to explain what it is all about in your README, but it is hard to understand (to me). I would count you a point if you apply for a junior-level position, but it would be a problem if you want to be a senior. 

Soft skills are critical for senior-level engineers. Communicate the task, and explain your work might be even more important than your coding skills. 

Senior-level engineers have to be able to clearly explain what they have built.

#### Advantages of having a good README (for your resume)

1. You look professional
2. Anyone in the hiring loop can evaluate your efforts
3. You are able to clearly explain what you built

&#x200B;

### How to make a good README?

0. Make a short self-explanatory repository name

Yes, I want to be able to guess what is inside just by a name. 

Usually, it is not possible to explain all you did in just your repository name. Instead, you should pick only one feature, and try to use it as a repository name.

1. Concise one-liner

**One-liners are hard.** In the startup world, one-liners are the beginning of your pitch. So,  it has to attract the listener’s attention. 

Same thing with your README. Try to impress your reader with 60 characters. 

Your task here is to make me think something like:

>“Interesting, how did she do that? I want to investigate her repository further”

2. Demo it

Show me what it does.

4.  Explain which purpose it serves

Oh yes. We do not code just to code. We code to resolve the problems. We code to bring value to our companies. So, even if you did it just because you liked it. **I want you to explain the value it brings to a specific type of person/company.** 

5. Promote it

Now, when you have a clear README, try to get someone’s attention. Get some feedback. Get some stars. 

Other things that are good to have in your README:

1. How to install
2. Quick Start
3. Mention libraries which you used to produce your work
4. LICENSE

### 

### Conclusion

Searching for your first coding job with repositories that have a well-crafted README will make you a top 1% at the screening stage. 

The bitter truth here is that you have to do a lot of non-coding work to make someone check your code. And that is how it usually works. ",1591936173.0,2020-06-12 00:29:33
69,"I'm a liberal arts major who received a full-time SWE job offer, my experience breaking into tech",1723,khrsw5,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/khrsw5/im_a_liberal_arts_major_who_received_a_fulltime/,143,"I was starting my last year of completing my liberal arts degree when I decided to teach myself how to code in Python. I took my first CS class later that year and fell in love with it, and decided I wanted to pursue software engineering.

I had a lot of cards stacked against me, I was a recently homeless woman of color in a low-income, single-parent household, and it was too late for me to pursue a CS degree. I decided to take as many CS classes as possible and decided to teach myself everything else along the way. I knew my tech skills weren't the strongest, but I had professional work experience and always excelled at soft-skills. I was able to find a tech-adjacent job and that job helped me land more formal CS experience. I took a lot of advice from this subreddit; I went to hackathons, did Leetcode, and contributed to open-source projects. Unfortunately I ended up graduating into a COVID recession, but after 3 months of applying aggressively (close to 800 applications), screwing up technical interviews, etc. I finally landed \*one\* full-time software engineering job offer. It's not FAANG or a tech company for that matter, and the location is not ideal, but the salary is great and I know it will open a lot of doors for me.

I wanted to share my experience to show that you can succeed in this field with an unconventional background. Tech skills are important but your soft skills are indispensable - I'm certain that my soft skills are what helped me land this job. I'm happy to answer any questions or hear from other people with a similar background/experience.

Edit: Wow thank you for all the awards and positive comments! I noticed there is some confusion about my timeline in the comments, so I wanted to clarify that I ended up taking another year of college to take as many CS classes as possible. I have a little over 2 years of programming experience now.",1608618232.0,2020-12-22 01:23:52
70,RIP,1712,jpe1q1,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jpe1q1/rip/,481,"~120 applications...
~17 first round HR/Leets...
~6 final round interviews... 

Just received a phone call from one of my top choices... 5min of the recruiter telling me how great my scores were and how much everyone enjoyed talking with me (combined 13hrs of Zoom personality/white board style interviews for this one position)... after fluffing me up, he unfortunately says, “I am sorry, but we can not rationalize giving you the position over an applicant with a PhD.  In normal times we would have offered you the position in a heart beat.  But we are finding the applicant pools are becoming stronger than we have ever seen.” 

Can I get a RIP in the chat friends? 

PS... I still have 4 more of the final round interviews to complete, so I am still extremely grateful for the opportunities to atleast interview.  But I am feeling extremely defeated after putting nearly ~40hrs into that single companies application process.

EDIT:  Thanks for all the support friends!  I really just needed to let it out.  Thank you for refreshing my spirits!",1604727503.0,2020-11-07 00:38:23
71,"You're a software engineer with years of experience, but the absolute must-know thing about you is can you solve this dynamic programming puzzle in less than 30 minutes",1712,9iu0su,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9iu0su/youre_a_software_engineer_with_years_of/,619,"Title says it all. I think I'm having a hard time coming to grips with the current very broken state of interviewing for programming jobs. It sounds like no matter what level of programmer interview, the phone screen is all about tricky algorithm (""leetcode-style"") problems. I conduct interviews on-site for candidates at my company, and we want to see if they can code, but we don't use this style of question. Frankly, as someone who is going to be working with this person, I feel the fact someone can solve a leetcode-style problem tells me almost nothing about them. I much rather want to know that they are a careful person, collaborative, can communicate about a problem clearly, solve problems together, writes understandable code more than tricky code, and writes tests for their code. I also want them to understand why it's better to get feedback on changes sooner, rather than throwing things into production. 

So why is the industry like this? It seems to me that we're creating a self-fulfilling prophecy: an industry full of programmers who know how to apply topological sort to a certain kind of problem, but cannot write robust production code for the simple use cases we actually have such as logging a user in, saving a user submission without screwing up the time zone in the timestamp, using the right character sets, etc.",1537924190.0,2018-09-25 21:09:50
72,This is it; I've finally used BFS at work,1709,ixflgu,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ixflgu/this_is_it_ive_finally_used_bfs_at_work/,305,I'm proud to say I've finally used BFS at work. All that leetcode prep has finally prepared me for this moment to write 30 lines of code. Now let's see how many more years it'll take me before I use DP at work,1600773476.0,2020-09-22 07:17:56
73,Nobody talks about how hard leaving a job is,1696,j4t0j6,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/j4t0j6/nobody_talks_about_how_hard_leaving_a_job_is/,225,"I recently left my first job out of college after being there for two years, and it was truly one of the most difficult things I’ve ever had to do. When you spend 8 hours a day with your coworkers, you form strong bonds. These people became like my family. I left the job because I wasn’t getting the career growth that I wanted, but I adored my coworkers. I’m not really sure what the point of this post is, but I wish people talked about this aspect of job hopping more. I only ever see people talking about interviews/job hopping to increase TC, but nobody talks about this aspect of it. Maybe my relationships with my coworkers just meant more to me than than it does to other people on this sub, but curious to hear what other people think about this.",1601814276.0,2020-10-04 08:24:36
74,"I'm 32 years old. I'm a recovering drug addict with a 3.92 GPA, 4 great internships, and have worked my ass off to be successful. If I can do it, any of you can.",1694,ccxtvc,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ccxtvc/im_32_years_old_im_a_recovering_drug_addict_with/,117,"Hey, everyone. I just wanted to post this because based on what I see, people seem to be so hyperfocused on the small details in CS that won't actually affect them in life. I'm here to tell you that if I can do it, you can too.

I started going back to school at the age of 30. I had most of my gen eds completed from the first time I went to school. I dropped out because of a massive alcohol and cocaine addiction I developed. That continued until I was about 26. I never thought I would truly amount to anything. I met a wonderful woman who supported the shit out of me, we got married and I went back to school.

I'll be honest, school was not as easy the second time around. My short term memory is really damaged from years of drug use. But I didn't let that stop me. I knew I made those choices when I was younger, so I need to work on fixing them now. So I just worked harder. Harder than anyone I knew. And it paid off.


I had my first internship doing basic web development. I learned some things and it was alright. My second internship was at a startup doing full stack development. I learned a ton there and it was a great experience. My 3rd internship was at the US's leading national research lab, where I am currently at. Next month I will be going to a Fortune 100 company to do a Fall internship while I finish my last two classes remotely to graduate.

My message to people who were like me: we made our lives the way they were with our bad decisions. However, there is no reason that we can't fix it. Work hard. Harder than anyone you know. I busted my ass. I'm not smarter than your average CS student, but you damn well better believe I have a stronger work ethic.

I worked my ass off, and you can, too. And if you have addiction issues and want to make a better life for yourself then PLEASE PM me. I would love to talk to you and help you move forward in life.",1563100201.0,2019-07-14 06:30:01
75,"A Tiny Guide To ""Grinding"" Leetcode Problems",1688,avf528,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/avf528/a_tiny_guide_to_grinding_leetcode_problems/,94,"Hey all,

&#x200B;

I'm still pretty young and only in my 2nd year of college so I often can't really contribute to this subreddit in terms of raw experience...but I wanted to make a post for those of you who are studying ""Leetcode"" type problems to pass interviews at Big N companies.

&#x200B;

I have done about 250 Leetcode problems in all problem categories and read the fantastic book ""Elements of Programming Interviews"" by Adnan Aziz, Tsung-Hsien Lee, and Amit Prakash about 5 times and skimmed it 3 times.

&#x200B;

Really really really recommend EPI over CTCI but that is personal preference. EPI dives very very deep into the reasoning behind how we go from brute force solutions for each problem, to the optimal solution but it is less beginner friendly since it is more intellectually rigorous. It instills an apparatus of thinking that no other resource I have found does.

&#x200B;

I want to make a small guide answering questions people often have about these problems as well as things to watch out for.

# An Exhaustive List of Topics You'll Need To Know Well

* **Fundamentals of Computers** (just a general knowing how computers store information etc.)
   * This is just a basal thing. Knowing how binary works, how memory is managed in a program (stack & heap), etc.
* **Big O Time & Space Complexity Computation**
   * Know asymptotic bounds. If you can be flexible in how you analyze a solution you come up with (lower bounding it, upper bounding, exact bounding) it can help you see whether you can do better and make an improved algorithm
* **Arrays**
   * This is pretty straightforward. Often questions that work within arrays will be solved in linear time ( O(n) ) for the most part and that linear time solution will be tricky.
* **Primitives**
   * Things like bit shifting. This is more rare and I don't think this is as important since it doesn't test real thinking abilities since it mixes with one's abilities to bit shift which is an esoteric skill.
* **Strings**
   * These are problems that often deal with strings like permutations, backtracking problems that have use take an exhaustive approach in producing decompositions of a string to search a possibility space (which is often a brute force way of solving a problem since it will be exponential in time), etc etc. String problems are often solved most optimally in O(n) time or O(s1 + s2) time (linear with respect to each string) if we are given 2 strings...whatever the problem may be.
* **Dynamic Programming**
   * One of the most difficult subjects. This is the key: subproblems. If you can identify the subproblem, you have cracked the problem. Because from there it is all about memoization to cache and leverage previous solutions.
* **Recursion / Backtracking**
   * This is a comfort thing. The more of these you do, the better you get. At some point you will naturally think of solutions in a recursive manner (if backtracking could be a possible approach used). Problems that use backtracking often say...""generate all""...""compute every""....this indicates an expression of exhaustively expressing all the possibilities of a decision space. Recursion is beautiful for this.
* **Graphs**
   * Know DFS & BFS. DFS uses a stack (either implicit with the call stack and recursion or explicit if we create our own stack) & BFS uses a queue.
* **Greedy Algorithms**
   * These are algorithms that take the locally most optimal solution to achieve a global optimal. In contrast to problems that use dynamic programming (which is characterized by caching previous subproblems to find a global optimum), greedy algorithms take locally optimal choices.
   * Not all greedy approaches one comes up with will work 100% of the time so it hinges on being able to use deductive logic to prove that a given approach will always work
* **Hashtables**
   * Very very very common in mid-level interviews. This is a must know. It is pretty simple, when our time complexity is too high, we can often reduce time and increase space by using some sort of auxiliary structure to cache work. Hashtables are often that auxiliary structure.
* **Linked Lists**
   * A tricky structure to work with. It is hard because we can't index into items. It gets easier with time but always remain tricky.
* **Sorting**
   * Know the fundamental sorting algorithms. Bubble, Insertion, Selection, Merge, Quick, Heap, ...etc
* **Searching**
   * If an array is sorted. IMMEDIATELY know that that is a strong hint that the optimal solution will use binary search and stay to the order of O(log(n))
* **Min/Max Heaps**
   * Heaps are really cool. Just know...if you see ""find the LARGEST""...or ... ""find the SMALLEST""...anything to do with size...think heap. Min or max. If we want larger items we use a min heap since we can throw away small items (to leave the large ones behind). And vice versa for when we want the smaller items
* **Stacks**
   * LIFO structures. Know how to implement a stack inside out. it is fairly easy so don't fear it. I'd suggest knowing how to implement all data structures stated here. Why not?
* **Queues**
   * FIFO structures. Used for Breadth First Search.
* **Trees, Binary Trees, & Binary Search Trees**
   * Trees are connected, acyclic, graphs. You can do DFS and BFS on them. Print all the characters in the tree in this order? Does it look like DFS? You can do that. Traverse the tree level by level? Looks like BFS. (BFS goes out level by level).
* **System and OO design Principles (sometimes)**
   * Some compaines ask Object Oriented questions. A great great resource for this is the book ""Clean Architecture"" by Robert C. Martin. I also highly recommend his book ""Clean Code"" but it won't help you for interviews (but will make you a better programmer)

# An Approach To Preparation

1. Find your weak topics. For me those were trees, backtracking, dynamic programming, and linked lists.
2. Start with easys. My first Leetcode problem was Jewels & Stones (you can search it) and it took me 30 minutes......it was just 2 for loops. Am I dumb? ... maybe ... but these problems are so far divorced from daily programming tasks that it was difficult for me.
3. Easys will be very difficult when you just start...then they will start getting...easy...hmmmm...onto the mediums.
4. Your summer internship interviews will be medium difficulty questions. Full-time roles will be upper medium questions sprinkled with a few hard questions. Stay rooted in the fundamentals above and you can survive.
5. Go onto hards if you want...but don't get lost on esoteric problems that require ""special"" tricks. This is all about getting ready to pass an interview for a job, not so much to have bragging rights.
6. Top it all off with polishing your delivery. [pramp.com](https://pramp.com) interviews helped me immensely. I did about 8 in person interviews this past season.

# F.A.Q.

**How many Leetcode until I'm ready?**

There is no finite amount. Every person comes to the table with their own weaknesses in all topics above. You will know when you are ready. You will see a problem and say...""Oh...yeah I know what principle to apply here"". The more you get that spark, the higher the chances you pass.

&#x200B;

**Should I time myself?**

Yes and no. Time is critical. Speed is critical. But timing yourself is useless if you are very uncomfortable with a specific problem class. I suggest solving many problems (peeping the solutions often is fine...just gain comfort) in your weak points. Then when you get sick of jumping to answers you will soon take the leap and just solve the problem yourself because you will become familiar with the techniques required for the approach. (this is how backtracking was for me. I went from total confusion to it becoming a default way of thinking.)

&#x200B;

**What should I focus my studying on?**

Weak points. And then popular problems. Find a list of problems the company you are interviewing at asks. No idea whether this is a myth or not (and CTCI addressed this as false...that companies repeat questions from a list) but I have friends that told me of getting exactly questions from these lists. It isn't critical but it can help.

&#x200B;

**Reading books vs. Leetcode/HackerRank?**

Books give you theory. Coding gives you the memory in your fingers and the necessary practice. Like...if I know a problem will use BFS, how fast can I put the logic in place for a basic search? If I know that a problem may use a heap...how fast can I throw up a priority queue with the right comparator (if it is a max or min heap...Java defaults to a min heap without a comparator)

&#x200B;

Hope this helps someone...or made any sense...I typed it up quickly.

&#x200B;

I'm honestly not THAT good...like problems still stump me...but I've come a long way so my experiences may help someone else.

&#x200B;

I'll make more posts if people want more small tips.

&#x200B;

**Edit:** Holy crap. That is a lot of upvotes....um....yeah. Hey.",1551312768.0,2019-02-27 19:12:48
76,"If this subreddit gives you anxiety, depression, or thoughts of suicide, then it's time to take a break from r/CSCQ.",1654,78bxq9,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/78bxq9/if_this_subreddit_gives_you_anxiety_depression_or/,267,"**National Suicide Prevention Hotline:** 1-800-273-8255


I've been reading (sometimes daily) messages on the stickied discussion posts about people struggling to wake up everyday or on the verge of ending their lives because of how miserable they feel from the rejections that come with the job search.

I'm here to tell you that putting your sole identity in whether or not you have a job (especially at a Big N) is going to fail you. Every earthly thing can and will fail you. You **cannot** let this define you. There is so much more to life than the cookie-cutter shape you put yourself into when you think like that.

Getting a job at your dream place doesn't suddenly get rid of those crippling thoughts that you may have. You will continue to experience them, even if you suddenly got that six-figure job in your dream city.

Work on yourself first, then work on your career. Stay away from this subreddit for a while; it can be very toxic to your well-being, if you allow it to control you.",1508831645.0,2017-10-24 03:54:05
77,I have decided to give up and just be happy with what I have in life.,1653,epdkbd,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/epdkbd/i_have_decided_to_give_up_and_just_be_happy_with/,651,"I work as a Software Engineer at a scaling start up in San Francisco.

I'm single (unmarried) and living in the East Bay making $100k base, $125 total comp. 

I know it isn't much (many here will say it's peanuts), but I get to work remote a day or two a week. There are perks like free food, we get to travel on occasion, and I like my coworkers. I also like the work and tech stack, and I learn more at my own pace.

I've been studying and leetcoding for over a year trying to get into any bigger, best/well known company. Any of them.

I've gotten interviews, but it's never enough. I know how to code, but I fail their challenges.

So I've recently decided to give up and just be happy with where I am. I'm coming up on a year at my current job in a couple of months and may get a raise. 

I'm just tired of the anxiety and the rat race. I'm tired of leetcode. I'm tired of the gamble I take with my self esteem every time I take a chance with these companies.

I do okay for myself and I have a simple life. I don't spend much, so I don't need much. My happiness is worth more than this never ending stress... Where does it end?

Does anyone else feel like they are getting interviews just to fill the interviewers time? I honestly feel like most of these people know if they want to hire you before you even go in.

Anyway, that's my rant. I just want to know if anyone else feels this way. Thanks.",1579174223.0,2020-01-16 06:30:23
78,Well it has happened for me!,1642,jfg4q3,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jfg4q3/well_it_has_happened_for_me/,372,"Job apps: 650

1st interviews: 12

2nd interviews: 3

Job offer: 1

Don't give up everyone! I graduated in May 2020 BSCS with no internship experience...and I finally got full time employment that I'm starting tomorrow :)

It is IT support... but I am gonna be working with SQL so I'll be getting back end experience! I'm happy with it.

My advice is if you're like me... and you graduated during one of the worst years ever AND you don't have any professional experience be okay with broadening your job search a bit. For most of the time I was trying to be picky with the job title/description which is probably why I sent out my first 400 apps without getting any responses... every interview I've gotten has been in the past month.

With the job market right now... getting a job that isn't necessarily the pay or work that you want is better than a big gap of unemployment... you can re evaluate later once you get some experience and the job market isn't the way it is now. 

I've been lurking here for my entire search and I know there a lot of you out there. Thank you for the support and the info during this time.",1603326302.0,2020-10-21 20:25:02
79,"I made a database of software remote jobs across Loom, Zapier, Binance & 2750+ remote companies, totally free. Will continue to add new jobs as I discover more.",1639,kbrhxz,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/kbrhxz/i_made_a_database_of_software_remote_jobs_across/,51,"All jobs are free listings, none are payed to promote.

Link: https://remotists.com/subs/software-engineering-remote-jobs/

I have been working on this since august as i was laid off due to covid. Still continuing to do it with some friends. 

I am thinking of adding a sort feature moving ahead. Apart from that, If there is any more feedback, do share. :)

Thanks.",1607817827.0,2020-12-12 19:03:47
80,"Once you land a developer job, I strongly recommend you take up a hobby that involves more social interaction.",1626,dmirx5,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dmirx5/once_you_land_a_developer_job_i_strongly/,388,"I’m not saying that developers don’t interact with others ever. It’s just that the socializing is more related to coding, debugging, application design, etc. 

And such topics aren’t appealing when you interact with your non techie friends..

I recommend you do more activities that involve people skills in various different ways. 

Good examples

Organize a charity event. 

Volunteer with your local community in a way that sharpens your people skills- tutor underprivileged kids, be a mentor, etc. 

Be active in improv classes. 

Be active in toastmasters.

These activities will give you a broader perspective and might even give you more interesting topics to bring up when you are around several people.",1571962957.0,2019-10-24 20:22:37
81,[Motivational Success Story] How I got a $170k job as an Asian male with 2.3 GPA from a public university,1625,i03i39,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i03i39/motivational_success_story_how_i_got_a_170k_job/,444,"**Intro:**

Hey everyone,

I've been seeing a lot of negative posts on here recently, and it kinda sucks since a lot of how I moved up has been partially due to the resources and inspiring stories I've seen on here. Like most of you, I have also been laid off early on as a direct result of covid-19 hiring freeze/workforce cut, but then I ended up with a very good role at a Big N company. With that said, I want to give back to this community and hopefully inspire/help some of you who are struggling to find jobs in this rough time by sharing a story of how I ""made"" it.

**Background:**

A brief background of myself is that I am a 23 year old asian male who graduated from a public university (it is quite reputable though) with a \~2.3 GPA in CS. I also graduated a semester late due to failing one of my final upper-level class on my final year, which definitely hurt my job-hunting prospect a bit since it was difficult to explain this to my potential employers. Given my stats, it seemed like I had little to no chance of landing a role, let alone a role at a Big N company, and yet, here I am. With that said, here is my story and how I did it.

**First Job-Hunt:**

Unsurprisingly, job-hunting as a senior was quite difficult due to my low GPA compared to my peers. I also lacked the knowledge/skill-set/experience that a lot of companies were expecting new-grads to gain since I only had one relevant internship at a non-tech company. The first job I took was a contractor position where I was paid $25/hr, which was fairly comfortable given my cost of living. It was the only offer I received out of the countless applications I sent out during my senior year, and even that job was very hard for me to obtain. After doing well on the on-site interview, I was asked for my transcript and to complete a take-home coding assignment, I was almost ghosted due to my GPA, and I had to keep emailing the director in regards to the position. After many weeks of exchanging emails, he finally agreed to hire me as a temporary worker after seeing my take-home coding assignment (yes, those are actually worth doing if you really need the job).

**Second Job-Hunt:**

As my contract was nearing the end, I went back on the job-hunt again. I had a conversation with my manager and he thought I did well enough to convert to full-time. However, when covid started happening, I knew I was at risk of being let go, and sure enough, it happened the day before my interview with my current company (not within my manager's control). Despite the bad timing, I didn't let it get to my head and performed well on the interview. This was also my only offer out of the hundreds of applications I sent out, and it's better than anything I thought I'd ever get, given my background. I didn't even bother negotiating as I was very happy with the 300% salary increase and it was already a very generous offer compared to the others at my level at the same company.

**Steps I took:**

First and foremost, I reviewed my data structures and algorithm. I went through a study guide that has since then been taken down (unfortunately), but the second best guide would be the Crack the Coding Interview. I read this mostly for the lessons it provided on each topics.

Edit:  [https://workflowy.com/s/study-guide/RD5kZ682pWX5oxiE](https://workflowy.com/s/study-guide/RD5kZ682pWX5oxiE) is the link to the study guide, shoutout to u/throwinaway101010 for finding it!

Once I was brushed up on my DS+A, I started networking. I reached out to a lot of my friends, family friends, family friend coworkers, strangers on discord (shout out to CS Career Hackers) and recruiters. I asked them questions like what they look for in candidates, what do I need to improve on and if they can refer me. I used those feedback to improve myself to the point where I'm at right now. In fact, my current role came from a referral from a stranger on discord, so definitely try to leverage as much networking as you can, even if there's a slim chance of it working out!

Another important thing was to keep improving my resume. I listed my skills, work experience/accomplishments, education (no GPA lol), 2 side projects (one was a hackathon app and another was a game I created with my friends). I also asked many friends and strangers to review my resume and built up on the feedback they provided, and it eventually paid off as I got to the stage where more recruiters were giving me callbacks.

Finally, I did a lot of mock interviews. I tried to schedule about 2-3 mock interviews a week, and slowly ramped up as my final interview was coming up. This only took about 1-2 hours a day, which wasn't much for me since it just meant 2-3 less games of league. Again, I mocked with as many of my relevant connections as I knew, as well as the people on discord. I built up on the feedback I received to improve my interviewing skills. I became better at communicating my thought process, handling edge cases, coming up with near-optimal solutions to problems I haven't seen before and asking clarifying questions. I am very grateful for their time as I felt this was my biggest contributing factor to how I did well for the interview. By the time I reached my on-site interview, it just felt like another mock interview at that point. I also reviewed the company values and came up with 5-6 stories prepared that demonstrated those values in a clear, concise manner. I highly recommend people do more mock interviews instead of just solo leetcode, as it'll give you exposure to how other people answer questions and what you're lacking in.

**Conclusion:**

Please don't be discouraged when applying for jobs. I know how it felt, I was literally in that spot a couple months ago, but I never gave up. I kept improving myself and I achieved what I didn't think was possible for me in the past. There are companies that are still hiring new talents, you just have to keep looking.

Also, don't get obsessed over the Big N hype either (don't think that any job that isn't Big N is worthless). I wasn't primarily targeting Big N, but when I saw someone recruiting for it on discord, I just went for it. I was very much comfortable at my old job and content with the amount I was making, but the circumstance forced me to job hop, unfortunately.

Keep moving forward, and don't get too let down by rejections, I've faced many rejections from companies I got call-backs from and I just brush if off and keep applying/trying.

Also, keep in mind that this is a marathon, not a sprint. As long as you consistently improve, you will eventually be where you want to be in due time, whether it's a position at a new company or a promotion at your current one.

In conclusion, if I, an Asian male with a 2.3 GPA at a public university, can land a job at a Big N company through perseverance , then I'm sure all of you can find something you'll be happy with by not giving up.

Thank you for reading,

Roy

**Note:**

The main reason behind my low GPA is mostly due to my inability to do well on exams, but I firmly believe that exam-taking holds no weight on how good of an employee the student will be. I did well on projects and assignments that were more relevant to real world work experience. However, that's a discussion for another time, lol.",1596068474.0,2020-07-29 20:21:14
82,This sub is scaring me,1626,f4qda7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/f4qda7/this_sub_is_scaring_me/,404,"I started working in that industry last year and I've never done anything that gets mentioned here on a daily basis. I never opened Leetcode in my browser, never went to a meetup and I only code at work. And you know what? I'm super happy with that because I have a normal life outside of work and I can pursue great hobbys where coding is not a part of. Should I be worried about my future. I don't see the point in grinding programming problems for several hours or  excluding everything out of my life except CS. 
How do you guys handle the pressure that you get here?",1581886937.0,2020-02-16 16:02:17
83,A list of questions I was asked at top tech companies,1617,apu3ni,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/apu3ni/a_list_of_questions_i_was_asked_at_top_tech/,181,"I interviewed onsite for ***senior software engineer*** roles at seven top tech companies like Apple and Twitter in August through November of 2018. The interviews were always at least 4 hours long. It was pretty typical to have 2 or more coding sessions, with one behavioral round sometimes, and one system design round sometimes. These are all the questions that are on leetcode, that I experienced either in the phone screen or at the onsite.

It's probably important to mention that most of the time, the actual question was just a pretext to talk about larger issues. For example, once solved and implemented on the whiteboard, the interviewer always had follow-up questions around possible alternatives, what to do if there's too much data to fit in memory, what if this or that assumption changed, etc. 

&#x200B;

**Easies**

* [First Unique Character in a String](https://leetcode.com/problems/first-unique-character-in-a-string/) (received from two different companies)
* [Closest Binary Search Tree Value](https://leetcode.com/problems/closest-binary-search-tree-value)
* [Merge Two Sorted Lists](https://leetcode.com/problems/merge-two-sorted-lists/)

**Mediums**

* [Basic Calculator II](https://leetcode.com/problems/basic-calculator-ii/)
* [Word Search](https://leetcode.com/problems/word-search/)
* [Number of Islands](https://leetcode.com/problems/number-of-islands/)
* [Unique Paths II](https://leetcode.com/problems/unique-paths-ii/)
* [Binary Tree Level Order Traversal](https://leetcode.com/problems/binary-tree-level-order-traversal/)
* [Add and Search Word](https://leetcode.com/problems/add-and-search-word-data-structure-design/)
* [Course Schedule II](https://leetcode.com/problems/course-schedule-ii/)
* [Palindromic Substrings](https://leetcode.com/problems/palindromic-substrings/)

**Hards**

* [Merge K Sorted Lists](https://leetcode.com/problems/merge-k-sorted-lists/) (received from two different companies)
* [LRU Cache](https://leetcode.com/problems/lru-cache/) (received from two different companies)",1550012020.0,2019-02-12 17:53:40
84,"Is it just me, or is Glassdoor becoming less and less useful?",1623,kaiyoa,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/kaiyoa/is_it_just_me_or_is_glassdoor_becoming_less_and/,221,"I have known Glassdoor to be a little suspect in terms of its usefulness, but this year it seems to have gone off the deep end. This year my company laid off a large portion of its staff and subsequent reviews showed up on Glassdoor giving them (justified) 1 star reviews for the way they handled the situation. As of this writing ALL of them are gone, like magic.

Last week I attempted to write an interview review for a company that I spoke to, and a major problem was that they wanted me in the office while COVID is raging in my state. When I submitted the review it wasn't allowed to go through because it didn't meet the guidelines. To my surprise, it was because I had the word ""covid"" in the review body which is a very important discussion to have right now, but Glassdoor won't allow it.

With layoffs and employee health being massive issues in 2020, it seems that Glassdoor is siding with employers rather than providing candidates with useful information. Are you experiencing the same thing with how useful Glassdoor is?",1607648103.0,2020-12-10 19:55:03
85,Anyone else really sick of the triplebyte ads?,1590,d2u3wf,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d2u3wf/anyone_else_really_sick_of_the_triplebyte_ads/,191,"i see these things close to 30 times a day. some of them are very cringey. 

> irritating triplebyte_guy explains to you...

please stop

edit: my first gold, relief at last! thanks!",1568253172.0,2019-09-11 21:52:52
86,"Name and Shame: Epic Systems, for Unnecessarily Increasing Risk of COVID Transmission",1581,i3n1cy,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i3n1cy/name_and_shame_epic_systems_for_unnecessarily/,318,"Just as an FYI to anybody looking into working here:

The healthcare organization Epic Systems is pushing over 2,000 software developers to be back on campus by August 24th, and will have all of it's **10,000** employees on campus by **September 21st**, even though many of our employees have successfully been working remotely for the past 3 or 4 months. Anybody at increased risk for COVID will have to be back by November 2nd.

They did a recent [interview](https://www.youtube.com/watch?v=EwQCVIXmJok) with CBS on this recently, although I have no idea why they agreed to this.

Honestly, before this COVID response I really enjoyed my time at Epic. The tech stack was a bit outdated, sure, but I was given lots of responsibility and was given lots of chances to grow. Unfortunately, the company's push to have its employees work on campus *(for the sake of ""culture"" according to our CEO)*, combined with the fact that this increases the risk of a COVID outbreak in Madison, has made me lose a lot of respect for our company as a healthcare organization.",1596589071.0,2020-08-04 20:57:51
87,Indeed says it's seen a 35% overall decrease in Software Engineer job listings since the onset of COVID-19.,1580,hydubo,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hydubo/indeed_says_its_seen_a_35_overall_decrease_in/,385,"[https://media.thinknum.com/articles/faang-software-engineering-jobs-have-been-slashed-since-covid-19/](https://media.thinknum.com/articles/faang-software-engineering-jobs-have-been-slashed-since-covid-19/)

I quit my job last year to use my GI Bill for a Bachelors in CS and transition to software engineering. Talk about bad timing.",1595823139.0,2020-07-27 00:12:19
88,My leetcode study guide,1578,eb1e2b,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/eb1e2b/my_leetcode_study_guide/,181,"I interviewed at Google, FB, Microsoft, Uber and was never tested on a concept that I have not seen before.

# Step 0 - You know how to code. (You can solve some Leetcode Easy Questions)

Credits: u/keanwood


Prereqs: You are comfortable with programming in general, and you can flesh out your thoughts via code.
Go to codewars.com and do a few of their easiest problems (lv8 and lv7)

### If you can't solve any Leetcode easy just keep revising easy questions. Easy questions do not require any algorithms except linear traversals and the likes. 


# Step 1 - Algo MOOC or book  

  This is what I used:  https://runestone.academy/runestone/books/published/pythonds/index.html

or this if you have time (avoid network flows):
https://www.coursera.org/learn/algorithms-part1
https://www.coursera.org/learn/algorithms-part2



Just get to solving the actual questions as soon as you can. MOOC take a lot of time to complete and If you know the basic data structures and traversals, start step-2. If you do not know how to solve it (Which will be the case), look it up and upsolve.

I already knew my way around basic data structures and traversals so I stared from step 2. 

For me BFS/DFS is basic while Dijkstra's is not.

# Step 2 - Coderust

https://www.educative.io/courses/coderust-hacking-the-coding-interview

### Do not buy educative. Search the questions on leetcode.
I was not able to do most of them so please look at the answer and upsolve.  This will give you a great base to solve other similar questions. 


### This should be enough for Tier 2 companies.


### FAANG/BIG N

# Step 3 - Teamblind List

https://www.teamblind.com/article/New-Year-Gift---Curated-List-of-Top-75-LeetCode-Questions-to-Save-Your-Time-OaM1orEU

### In leetcode list format: [https://leetcode.com/list/xoqag3yj/](https://leetcode.com/list/xoqag3yj/)

# Step 4 - A week before the interview

Company specific leetcode explore questions  
Company tagged leetcode discuss

#

The hardest part for me was to come up with a proper plan as there are just so many questions and it's easy to get lost. Also please look at the solution if you can't solve it in 30 mins.  
  
Followed this for 3 months and received internship offers from FB, Uber and Microsoft. Hope this helps you as well.  

Good luck!


EDIT 1: Added a more descriptive step 0

EDIT 2:
# My LC count is 160.",1576458269.0,2019-12-15 20:04:29
89,Verbal Offer Rescinded due to GPA,1570,a1xqeo,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/a1xqeo/verbal_offer_rescinded_due_to_gpa/,538,"Went through the whole process with a Big N company, passed HC and matched with a team. I was extended a verbal offer before my recruiter said she was submitting my package for an official offer. 2 days after that I was asked to write a statement justifying my lower than usual gpa (2.6) and a week later i was informed that the offer committee was unable to give me an offer.

I just find it really messed up. I turned down offers after I was matched with a team. They've had my unofficial transcript since the beginning of the process and no issues were brought up until the end of the process.

I don't know why I am making this post at this point, I am just really confused and sad. Really thought it was a sure thing at the very end.

&#x200B;

Edit 1: Since a lot of you guys asked, this is an SWE internship in the summer. Which is why its a little more difficult for me to re accept my other offers as you guys know internship hiring cycle is a ticking clock, the other offers have expiration dates, and this company strung me along for 2.5 months in the prime of hiring cycle. 

I am no stranger to rejections, and I am not against private companies holding a standard for what kind of people they hire. I am just confused and depressed because they have had this information since the beginning of the hiring process, right after the code screen they have had my unofficial transcript. I think its kind of a shitty thing to do to a candidate in university, because I used a lot of the precious time I could've used to look for another job this summer. 

As of the verbal offer thing, here is what happened. My recruiter told me that I was successfully matched with a team, and the intern host is excited to bring me on. She said ""I will submit the offer right now, you should receive it within 1-2 business days. Congratulations!"". ",1543649693.0,2018-12-01 02:34:53
90,Positioning yourself to take advantage of good fortune is a required skill to advance your career,1560,j9zfgd,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/j9zfgd/positioning_yourself_to_take_advantage_of_good/,157,"I was recently promoted to Director of Engineering and, after taking some time to reflect this weekend, I realized that it looked like my career trajectory was basically entirely luck. I called and messaged an odd dozen of my friends in the industry and, oddly enough, it seems to be that way for a lot of people. I realized there had to be more to it.

Here’s a bullet list of my career history:

• June 2011 - In grad school (for stats), I got a job as a Systems Analyst at $22/hr. At first this was just doing analytics in R, but I learned SQL. The DBA in that department left and I took on a few of his projects, optimizing stored procedures and fixing issues here-and-there in the database. 

• December 2013 - I was laid off. I had now graduated, so I had no insurance. It soon became apparent that rent and student loans were gonna burn through whatever savings I had pretty quickly. In February, I took the hit to my ego, moved back to my hometown (which was a lot cheaper CoL), got certified as an MCSA in SQL Server, and started going to local database meetups, looking for jobs.

• March 2014 - I got an interview for a job from one of the people I met at the meetup I was attending. I got it, making 55k as a DBA, partially off the back of my prior experience and the certification, but mostly by asking good questions and selling myself. This was a pretty laid back job, SLAs were not very tight so I got to spend time learning by trying to make our backend systems more efficient and resilient. I started reading about DevOps and quickly became enamored by the concepts. I built automated deployment pipelines for our database schema changes. I started writing tooling and automation around our compliance requirements. I got experience with AWS when we migrated our relatively simple setup there. I spent 5 years at this job, getting cost of living raises every year while desperately trying to pay off student loans. They could afford to pay me more, but they didn’t, so I eventually got fed up and left.

• April 2019 – One of the people I met networking in the local DevOps meetups had an opening for an SRE at his company, and asked me to apply. I interviewed there, and it seemed like a great group. The company was a startup division of much larger firm. The interviews were laid back, we just talked shop for an hour. They asked me how much I was making and I said “It wouldn’t make sense for me to move for less than 115k”. This was, of course, complete horseshit, but not technically a lie. I defined what “made sense for me” after all. They offered me 115k + bonus, and I took it.

• September 2020 – By now, I realized that, while I loved the team I worked with, this job was basically the logical opposite of my last job. It was fast-paced, frenetic, and we had to work hard and be really creative in order to hit milestones. I was learning a ton, and had been promoted, but I had started to feel the beginnings of burnout. In addition to my job, I had been leading brown-bags to teach people how to use the self-service platforms we were building, and consulting internally on other projects. My boss quit suddenly, and I was asked to take his position in the interim. I did, and after taking a crash course on corporate accounting and doing two jobs for a month from hell, I was asked to take the position permanently. I’m now doing a lot better, things have started to stabilize and we’re working on several projects to improve our workflow, which are a lot of fun.

This cannot be overstated: soft skills are key! While continuous learning is required for any career advancement, it wont help you get lucky. Soft skills enable you to put yourself in a position to take advantage of opportunities you would not be able to otherwise. I got my SRE position easily because the company was in a really tough spot and needed the expertise then and there, and I had gotten to know someone working there who fought for me. I got a promotion off the back of an unexpected departure because the company needed someone now, and I had developed relationship with upper management by offering to volunteer to do internal consulting and knowledge sharing for other product groups. I had realized that the reason I did not get a significant raise or promotion at my second job was because a lot of my work was not visible, just tinkering in the database layer and automating the boring parts of my job, and I wasn’t going to make that same mistake again.

I learned to speak clearly with confidence by pacing around my room at home and practicing presentations, doing mock conversations, even practicing joke delivery. It might sound odd, but none of this comes naturally to me, so I had to learn somehow.

This had the knock-on effect of giving me some real confidence, when I realized that people were actually listening to me. I pushed to make as much of my work visible to upper management as possible, and where that wasn’t possible, I started going out of my way to do stuff that was more public; teaching, mentoring, organizing internal knowledge-sharing communities, etc. Helping other people is genuinely one of the best things you can do for yourself.

You never know when an opportunity will come your way. If you care about advancing your career, you should be prepared to seize it. Network, practice your soft skills, and deliver as much visible value as you can.

EDIT: upvoting all the r/humblebrag comments since they make me giggle. This sub helped me out a few years ago when I was bored and frustrated at my last job. I’m just paying it forward.",1602565118.0,2020-10-13 00:58:38
91,Why I stopped giving companies my references,1541,cjzbfv,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cjzbfv/why_i_stopped_giving_companies_my_references/,207,"While I was job hunting a few months ago, I stumbled across a job opening on LinkedIn posted by ""Robert Half"". After applying, I was invited to interview with Robert Half's VP of Software & Applications. But before my interview, He requested 2 of my professional references which I happily gave him. After that, the Skype interview went great.

The next day, my reference called me telling me he spoke to Robert Half & that he said he talked me up good & that he thinks I'll get the job.

I never even heard back from Robert Half. However, my reference did. They called him 3 more times for reasons unrelated to my job search! For the past few months, he received calls from Robert Half in which they were trying to get their software developers to work on his company.

I find it very unprofessional that they used my references for their own gains without even having the decency to write me an email telling me that I didn't get the job. Unbelievable.

Edit: Thanks for all of the up-votes everyone. This was actually my first ever Reddit post.  
I made a youtube video about the situation: [https://www.youtube.com/watch?v=MOlbqn5saww](https://www.youtube.com/watch?v=MOlbqn5saww)",1564554965.0,2019-07-31 02:36:05
92,"Learnings from a ""successful"" cs career",1544,ju6qgt,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ju6qgt/learnings_from_a_successful_cs_career/,216,"I wanted to counter some of the selection bias on this sub by telling a bit about what I consider to be a successful cs career.

A little about me

* Went to an OK school (uva undergrad), got OK grades (2.95)
* Never ground leetcode
* Applied to only a few jobs after school, nothing crazy.
* Entry salary was 50k as a new grad at a no-name government contractor

Outcomes several years later:

* 300k total comp
* 250k in the bank / investments
* 100% remote position (even before covid)
* Own a home in Santa Cruz county.
* Early employee at a tech startup which was acquired recently

The prevailing view on this sub seems to be that in order to have a successful career you need to:

* graduate from a top tier school with a high gpa
* get into a big-n, unicorn, or fintech company with 100k base salary directly out of school
* Grind leetcode all day until you can do hards without thinking

I'd like to provide my career as a counter-example, which doesn't seem too rare among most software engineers that I know.

My learnings:

* Start small and work up. Software companies want experience first, not necessarily good grades or algorithms chops. Since it's your work history that stands out, work on that first. Sure, apply to google, but also apply to that non-tech shop that needs software engineering. Stick around long enough to learn something before moving on. When you are done or if your wage is stagnating, apply somewhere else.
* Lose the ego and be friendly. Learn to work well with other people. My best references now are people I've worked with amicably.
* Improve yourself over time. If you aren't learning what you want to on the job, learn about stuff out of the job. Always be learning. If you aren't learning at work, go to tech meetups, use online courses, and hack for fun. If you can, go back to school. Pick up a Masters degree and specialize in something you are _interested_ in.
* At some point, work at a small startup, and really invest your time and energy. You will have significant equity, which means you will have a chance for a large payout if the company is acquired, and the harder you work the more value you are creating. Do your diligence to find the right company for you: good, savvy leadership, in a promising field. This is a gamble of course, but even if the company goes under, it's an incredible learning experience.
* demonstrate your value, and draw on that to ask for what you want. Get involved in projects, and be do your best to be integral to their success. Another way to demonstrate value is to apply elsewhere and get offers. Remember once you have some experience, you will be in much higher demand. If you can demonstrate value, you can ask for things you want for your career, e.g. cooler projects, better pay, better title, better benefits, remote work.

This has been my experience. Hopefully it gives some hope to other people who may feel like their grades or resume isn't stellar. Tldr: get any job programming, do awesome at it, get better yourself, jump to better jobs every so often, and build your resume.

Edit: a lot of people are asking about timeline. I graduated in 2006. I realize this may change the tone of my post for some, as the tech job market has changed somewhat since then. I hope that the pointers are helpful anyway!

Edit: formatting",1605407681.0,2020-11-14 21:34:41
93,"Have you ever wondered what the hiring process was 20 years ago compared to today? Probably not, but I'll tell you anyway.",1538,brjexy,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/brjexy/have_you_ever_wondered_what_the_hiring_process/,298,"I have searched tech jobs twice in my life.  Once as a new grad in 1999, and just now.  For those that are just curious, or for those that are older and am curious about the current recruitment process, let me explain what I saw.

1999:

Jobs were super easy to get.  It was a weird time when non-tech folks were in charge of tech folks.  Also, the amount of technology used wasn't as massive and varied as it is now.  No one asked for 12 years of Python Experience with Computer Vision with Jenkins within a Docker container or whatever because that shit didn't exist back then.  It was a much simpler time.  It was kind of Development of System Admin as the major pillars back then. 

This meant that often times, it was behavioral and simple questions, as many hiring managers were just general people managers and not Engineering managers.  

In terms of tech questioning, whiteboarding of useless problems was the only way to test really.  But it wasn't that complicated.  And if you were decent, and communicated well, you got the job.  I think I ended up with 10 offers out of 10 second round interviews (I got rejected by one, but another one gave me two offers).  But since I just finished undergrad, silly algo / data structure problems were all I knew, it was super easy for me.  Sure, the first time I saw vi I was scared and had to ask a colleague what this was, but I could traverse a graph on whiteboard like a motherfucker.

Recruiting was also different.  It was put your resume in a resume database and kind of wait.  job fairs were the best way to do that.  The massive recruiting teams that large employers have now were definitely not at today's scale. This meant that you got fewer requests for jobs, but you also weren't competing against 100 other people for that one position.  Essentially, if you were contacted, there was a much better chance you were getting the job due to limited HR resources.  It saved a lot of time.

Also, there were no tiered awesome companies with great pay.  It was pretty standard for a new grad.  I got $62K and a few piddly stock options at the time at the most awesome company ever, a company that would never run out of ideas and dominate the industry forever.  That company was Sun Microsystems.  So, yeah, don't count on me for any gambling advice.  Pretty much ever company was the within $10K of that, with varying degrees of stock options. 

All that being said, the fallout of the dot-com bust (one year later) was dramatic.  All those people who were hired with limited credentials and skills suddenly got canned and things got tight.  Suddenly, knowing HTML didn't make you a coder anymore.  I know a lot of people who were plain screwed.  There were no bootcamps back then, but equivalent were the people that learned to code with the ""Learn Java in 21 Days"" books were assed out at the end of the day.  A lot of them went it to Real Estate, so, yeah, you can put two and two together on what the next downturn was.


2019:

First thing first.  Holy fucking shit job searches are annoying.  You need to match all these random technologies.  Then, even if you have that, you have to memorize all those leetcode tricks (that's right, not skills, but tricks).  Sure, I know loops and trees and the like, but dang, I didn't remember the trick to get the consecutive subset of numbers to equal a passed in sum efficiently (mine was inefficient) - so yeah, even though I matched pretty darn well with the job requirements, I did not get that coding parlor trick, so I'm out.  This was for a partner engineering position BTW, which in no way shape or form would require any sort of algorithmic knowledge. 

In my undergrad days, I would say I memorized 80% of those tricks out there.  Today, I know about 40%.  So, I was immediately knocked out of like 60% of interviews.  I didn't realize that the leetcode monkey dance would be so prevalent.  Next job search, I know what to study for - this last one I was ill-prepared.  Anyway, I think most people felt the algo / data structures problems were outdated 20 years ago - but man, they are even worse now.  But knowing the trick basically got me an in as well.  So yeah, it's completely fucking random whether I impress people or not.  One company thinks I'm an idiot and nother thought I was God because of the random selection of leetcode-esqe questions.  

On the opposite end - holy fucking shit does this pay well.  MY. FUCKING. GOD.  5 years ago, those that got $300K were lucky to jump in the right company at the right time with the right options, were a super genius, someone who is some major thought leader, or some Senior Director.  Now a schmuck like me can get near $300K.  This is crazy.  I joined a company for $180K in 2017 in total. compensation, and I was ecstatic.  In 2012, I think I was rightly paid at $120K or something like that.  Now I just accepted an offer for $280K.  This is nice, but also a bit scary.  I've been through 2 different downturns.  What's going to happen if there's another downturn and these crazy salaries whither away?

Let me put it another way.  For the early to mid 2010s, my wife and I were paid the same though she's way smarter than me.  But since she does supply chain and not tech, she's gotten about a 30% increase in pay in the last 4 years (pretty good), and my pay has roughly doubled. 

I'm also amazed that some companies out there think that it is still 2015 and offer those salaries.  Most non-tech companies are completely flabbergasted in terms of my desired salary.  Many of them came back later with a substantial increase because they couldn't find anyone qualified, but I still had to say it wasn't enough.  

Recruiting is also way different.  LinkedIn is awesome, because I know how Yakov Smirnoff feels when he talks about Soviet Russia.  On LinkedIn...Jobs come to you!  Of course, since it is LinkedIn, you got to wade through all these useless intros.  It's a full time job.  I think the first week I said I was actively looking, I got 30 pings.  Everyone wanted a half hour conversation.  Many of them didn't bother reading my requirements.  No, I am not a front-end engineer and no I don't want to move to Seattle - why do you want to talk?  Many just plain ghosted me after I replied with something like, ""I am interested and I would like to know more.""  Like, what did you want, me to show a picture of myself jerking off to Tim Cook or something or in order to get a reply back from you?

Most recruiters who do talk to you basically tell you are God's gift to employers, then either say something like, you were not a match to the job I said you were a match to, or send me to another person who grills me.  It's a huge bi-polar emotional rollercoaster of validation and rejection.  I was mentally drained from all this.  Like my ex-girlfriend is God of job applications or something.

Also, the pillars are way different.  You don't have simple pillars like Development or System Admin, it gets way more fragmented.  You have DevOps/SRE, you got Web Development, ML/AI/Data Science, and way more high level pillars.  This is cool in that you can be more sure of what you want, but not cool in that once you are in one, it takes some effort to get out. 

In terms of those pillars - DevOps/SRE is the hottest thing out there right now. I actually just got a Masters in CS with a specialization in ML and some minor ML experience.  No one gives a flying fuck. But because I can spell Kubernetes, I got DevOps / SRE requests left and right (this is the job I essentially took BTW)

Anyway, 2019 is similar and different in many ways.  But damn, I do not want to go through this job search again.  FUCK. THAT.

...............

Anyway, for us old farts who walked uphill both ways in the snow, I wanted to share a few tricks along the way and would totally do my job search differently.  Here's what I l learned. 

1) Leetcode algo / data structure memorization is key.  Sure, they don't know if you are older, but it's the easiest way to have age discrimination.  Very few 41 year olds are going to remember what they did in college at age 20 - the perfect way to filter out the gray hairs and those with a family.

2) I always ask for salary.  Weed out those that say, ""it depends.""  Depends on what?  My experience?  The exact same experience that you can see on LinkedIn as we are talking right now?

3) Ask a question that only a hiring manager can answer.  If the recruiter can't do that, the recruiter is just gathering resumes and has no idea if you ""perfect for the job"" as he or she states.  Time is limited with the relentless amount of pings you'll get - this is a great way to make sure that they are serious about you being a candidate.

4) Ensure that you are the only person interviewing for that position if possible.  I got a semi-offer from a company because they loved me, and wanted me to wait for another rec to open, but they hired someone with Azure experience and explicitly saying Azure experience is not a requirement.  I wasn't going to wait and it was a complete waste of my time.  I found that there are companies that have like 5 people interview for one position, and those that interview one at a time and will fill it if you are good.  The latter is the key because you are the only variable.  Ask for flexibility in terms of interviewing.  If they are interviewing a whole bunch of candidates, they want you in a 3 day window.  If they are just checking you out exclusively, they'll be really flexible.

...............

Anyway, enough my pointless rant.  Now you little fucking whippersnappers can get off my lawn!",1558521862.0,2019-05-22 06:44:22
94,I just got my first offer,1531,jo49l2,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jo49l2/i_just_got_my_first_offer/,195,"I’m honestly shocked

I didn’t think I’d get here... I know no one in the company, it’s far away (Austin TX, I’m in very rural NC), and I’m an average student without anything like research or anything on my resume. I just have a couple small projects up on my GitHub. 

I got an offer with General Motors, and while the pay seems low-ish at first, the benefits, relocation, advancement, and frequent raises seem to make it look worthwhile. 

I just wanted to share this for other December graduates who feel average and afraid about the future. There’s still stuff out there, best of luck

Edit: sorry to ghost! I’m trying to cook and reply to a lot of DMs but I will come around and interact in the comments as soon as I can",1604550437.0,2020-11-04 23:27:17
95,"A hiring manager actually went through my github projects, complimented them and logged into them..",1529,bne0q3,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bne0q3/a_hiring_manager_actually_went_through_my_github/,114,"Title. I’m a self taught person, aside from a few college classes I took, but it feels good that a company (I know most don’t have time) went through my resume and GitHub and didn’t just toss my resume out for not having a CS degree.

I don’t think I’ll get that job, but that was the best interview I ever had. I was using google analytics and they were looking through my portfolio multiple times.

Also, when I didn’t know something, they didn’t just move on, they  explained the concepts to me. I have never had an interview where someone (hiring manager) actually looked through my projects (only had 5-7 interviews out of maybe 100 applications), most of them ended up showing me the door and saying “thank you”. I’m probably ‘very junior’ in some aspects, but man, I wish all companies would provide that type of mentorship, even if it’s just in the interview.",1557621366.0,2019-05-11 20:36:06
96,"Overworked Chinese developers gather on Github to protest ""996"" work schedule",1527,b8t8cc,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/b8t8cc/overworked_chinese_developers_gather_on_github_to/,245,"[The repo,](https://github.com/996icu/996.ICU) now with 150K+ stars, is the fastest growing repo in the Github history. Big names like Huawei, Alibaba, and Ant Financial are all on the blacklist. It just really saddens me that such toxic work hours is the norm in my homeland and I'm worried that if this continues to blow up the gov will eventually ban Github in China. Maybe I'm being overly dramatic but some major Chinese browsers are starting to blocking the repo page.",1554292668.0,2019-04-03 07:57:48
97,"Experience with non-tech coworkers asking to ""learn to code""?",1517,jz5x7j,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jz5x7j/experience_with_nontech_coworkers_asking_to_learn/,469,"I am just wondering if anyone else has had these experiences.

Basically, I am a developer that works for a non-tech company.  (I am the only one.)  Basically outside of the IT staff, I am surrounded by people who majored in the humanities and social sciences at non-profit human services organization.

It is well known that I have a substantially higher salary than everyone else.  I frequently (at least once every two weeks) had a coworker say something like ""I wish I majored in CS!"" or ""I wish I knew how to code!"".

For a long time, I just brushed it off.  However, I had a few coworkers who constantly asked me to help them ""learn to code"" because they wanted desperately to increase their salary and go into a new line of work.  (For a long time, I basically mean over 1-3 years time.)  Basically, I just ignored it.  Then, I started to feel like they were cool people, so I decided this year that, if asked, I would dedicate a little time to at least get them started and point them to resources to further learn.  (i.e. teach them variables, conditional logic, loops, etc.)

So, here we are at the end of the year.  Over the course of this year, everyone of them asked to ""learn to code"".  (Six coworkers total that I can think of.)  I told each of them that I would dedicate some time to teach them the basics of coding.  Four of the six IMMEDIATELY declined to learn \*after having asked me multiple times over the span of months/years\* to teach them.

Two of them took me up on the offer.  One of them sat down with me and we started writing some basic code as I explained it to him.  I had him typing.  We did a console writeline of ""hello world"".  Then I started to explain the concepts of variables and had him declare an integer.  At that point, he looked at me, smiled, and got up and walked away.  (We were like 5 minutes into starting ""learning to code"".)  It was weird and awkward as hell.

The other one got through the basic explanation of variables then told me this wasn't for him and he was done.

I have not since had any of them ask to learn to code.

I have to say, I didn't expect this at all....  It was kind of eye opening and dumbfounding at the same time.

So, I am just wondering if anyone else has had similar experiences?  And, I guess, the moral of this story is that if you have non-tech coworkers asking you to teach them to code, just agree to do it, and they'll never ask again....",1606116018.0,2020-11-23 02:20:18
98,[Advice] Be an easy employee to manage,1518,efh2ei,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/efh2ei/advice_be_an_easy_employee_to_manage/,157,"I manage a team of around 10 engineers. Here's my advice on how to be an easy employee to manage and hopefully it'll help improve your relationship with your direct reports. Some of this might be controversial in this sub but heck why not go with the holiday spirit :)

1. **Be predictable and consistent** \- It is hard to manage someone who is a super-star one day, but loses motivation the next day. As an employee learn to ""average"" yourself out a bit. Don't put yourself on a burner and burn out. Manage your work life balance so you can stay consistent and predictable in your output.  This way I can trust and estimate your deadlines a lot better. It is also much easier to put all your positive work forward during review time, instead of having to highlight the few negatives.


2. **Train your boss with communication** \- Do you have a micro-manager? This is for you. You need to train your boss so he or she knows you're predictable and consistent. You do this by over-communicating at first, and then slowly dial it down. When you first start, detail your implementation ideas during scrums. Send update notes in emails and again, be consistent. Then slowly shorten and generalize your updates. This trains your boss to learn to take your word and trust you. This is not about being as fast and efficient as possible. It is about being as consistent and as true to your word as possible.


3. **Push back** \- In order to even have a chance at doing 1,2 well you gotta push back. This means pushing back deadlines you know you can't meet. Give yourself some wiggle room. Pushing back is one of the best ways you build trust with your boss because it lets him/her know that you have a good grasp of estimates and actually \*care\* about deadlines. Counter-intuitive isnt it? Time estimates is one of the most difficult tasks for any engineer. Take that burden away from your boss by being involved in estimation process and put your skin in the game. You become the owner. Your boss will be happy to communicate your reasons to his boss/clients because it is your head. And you just bought yourself the time you needed and the respect you deserve.


4. **Don't have surprises** \- Again, this is in addition to the other points. Do not surprise anyone. It is often not possible to meet the deadlines even if you set them yourself. Nobody can be that predictable and consistent. This is why it is important to communicate a delay or a blocker \*as soon as possible\*. Also just own up to it. Tell people you have under or overestimated a certain task and tell them about a lesson learned.


5. **Don't personalize** \- Okay, this is cheesy. If the code is in master, no matter who it is written by it is ""our code."" You are not blocked by a certain employee not answering a problem, but blocked by the problem itself. You're not angry at a teammate for screwing up a deliverable and failing to meet a deadline, but you're competing against the deadline itself. You don't hate the person who introduced a bug, but the bug itself. Utilize your teammates to tackle these intangibles and build camaraderie around that.


Middle managers have one of the crappiest jobs. They are still junior in a sense that theyre still expected to be boots on the ground and fight fire as needed. They are not far from the implementation details and tasked with teaching junior resources. However a lot of their review is based on elements they cannot fully control - their reports. This lack of control often leads some new mid managers to try to micro-manage. Nobody loves to micro-manage. Every middle manager wants an employee he or she can trust and be a straight shooter.

Happy holidays!",1577312937.0,2019-12-25 17:28:57
99,I got a job!!,1508,j22ycm,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/j22ycm/i_got_a_job/,150,"It still does not feel real to be typing this, especially given that I have not finished school and amidst a pandemic, but I got my first FT SWE job! I was very fortunate to have interned at this same place and made a lot of connections that helped make this happen. As a result, I can directly attest to the fact that it really is WHO you know sometimes. People always told me this and I knew it to be true, but this is the first time I have gotten a GOOD job because of it. The recruiter did all the work for me - meeting with managers, discussing logistics, and even got me the TOP of the salary range. I did not even have to interview again or do any leetcode. But by far, I think the most freeing thing is not having to hustle anymore for an internship for next summer. Feels good man.",1601426602.0,2020-09-29 20:43:22
100,How to get out of the 9 to 5 rat race in CS? Have worked at top companies and still miserable,1505,i2wp8y,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i2wp8y/how_to_get_out_of_the_9_to_5_rat_race_in_cs_have/,758,"TL;DR:

\- Absolutely hate the soul sucking experience that is the 9 to 5 / 40 hour work week. Spending my prime years making someone else rich, so I can retire and ""enjoy"" my free time when I'm old and frail? No thanks

\- Have worked at different top companies but still hated it, even if the work was interesting

\- Can do FIRE, but even then I'd be retiring at 40 - 45, basically near the end of my prime years of life. 

Is there a way out of this grind? I always thought software engineering was the coolest shit when I was younger, now that I've been in the industry for a few years I see that everyone is miserable. Life is too short for this shit boys.",1596488820.0,2020-08-03 17:07:00
101,"If an employer doesn't have a remote policy ""after"" COVID, I won't work for them",1496,i8gkbg,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i8gkbg/if_an_employer_doesnt_have_a_remote_policy_after/,442,"I have been doing some job searching and interviews off and over the past months and I am seeing a theme in my area: employers want you in the office 5 days a week after COVID is over. 

I just talked to a company whose entire office is working from home right now and their profits went up 11% last month. When I asked what their remote policy would be if/when COVID calms down they said you would have to be in the office five days a week.

To that I say, fuck that. No one knows what the state of the US will be with disease and social unrest at that point. If you can get all the work done and actually have an increase in profit what's the point of having archaic remote policies? Why not have it flexible for those who want to be in office part time? Not to mention companies save money with having remote employees, there is less traffic and pollution, and there is less demand on America's aging infrastructure.

I'm at the point where if there is no remote policy for companies that are already remote then they are not worth my time. It shows there is no regard for employees right from the start.

Am I being unreasonable here?",1597277497.0,2020-08-12 20:11:37
102,I was promoted to Senior Software Engineer today at a tech unicorn. Wanted to share my experience!,1488,ir489p,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ir489p/i_was_promoted_to_senior_software_engineer_today/,218,"**Company:** Airbnb  
**No. of engineers:** \~2000  
**Experience:** 5 years in total  
**Location:** San Francisco (not that it matters now, WFH until August 2021)

Context on my background: I'm a self-taught Software Engineer with an unrelated STEM B.S. undergrad degree. I started out working for some eCommerce companies part-time on their UI, then I  got a job as a full-stack web developer at a small enterprise SAAS startup (10 engineers total). I got my job at Airbnb a little over 2 years go and was delighted that I got to choose my team.

I decided to try out working on infrastructure instead of product features (I wanted to learn more about it). I became completely obsessed with developer productivity and quality tooling. I work mainly with tools/languages like Go, Docker, K8s, & Typescript -- my official title is Senior Software Engineer, Infrastructure.

I had a tough time adjusting to a larger company -- I thought if I worked really hard and delivered everything that management asked for, I would get promoted. Boy was I wrong. I think it finally hit me that I needed to go out of my way to convince others that I was good enough. I basically worked my ass off and got an opportunity to set the pace for my whole organization. I took the opportunity and delivered and was backed by leadership.

I was finally put up for a promotion this quarter, which I'm so excited about! Hooray! But I'm lukewarm about it too because since the company is in crisis mode thanks to COVID. I don't think my compensation increase was that worthwhile. I might have gotten more if I left the company. But I'm grateful to still have a job in these times.

Thanks for coming to my TED talk. Happy to answer any questions about anything!

Edit: levels.fyi info on compensation is very accurate for Airbnb. Mine at L5 is $210k base salary, $135k in RSUs/year which was much higher before covid. I didn’t get a stock refresh at this mid year promo, apparently those are granted at EOY.

Edit2: oh wow thanks for the awards! It’s 9am here and I just woke up, I’ll try and answer a few more Qs.

Also stop calling me “he” lol, I’m a woman, I go by she/her pronouns.",1599905565.0,2020-09-12 06:12:45
103,How I went from 2.4 GPA and unemployed to my dream job.,1480,6ndohd,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6ndohd/how_i_went_from_24_gpa_and_unemployed_to_my_dream/,120,"Long-post inc.

First of all, I would like to tell you guys that I was unemployed for 8 months after I finished college. I interviewed everywhere, from Amazon to dinky and sketchy startups. I've taken advice and encouragements from this reddit as I pushed forward. On the other hand, I've been discouraged by this reddit when the ""annual salary"" or ""what internship did everyone get"" threads started popping up. I looked at people on this reddit and thought that someone like me with barely any projects, zero (real) internships, and a whopping 2.4 GPA would never land a good job.

I kept pushing. I used to not get even an email back from companies. Then I slowly got phone interviews.. in which I failed. I guess it's time to go back to reading reddit, time to start working on leetcode and oh, I guess I'll get that Cracking the Coding Interview book. Phone interview started to lead to on-site. Let me tell you, I was not ready for those long 4-5 hour onsite grinds.

Eventually, my hard work paid off.

And here's the thing. I thought the company I accepted the offer from was going to suck. It's not the Big 4, no one has heard of it. It's just a medium sized tech company that gave me a job as a ""junior devops."" I hesitated because I didn't work hard just to be a devops, I wanted to be a dev. I wanted an above average salary, not just ""junior rates."" Nonetheless, I accepted quickly because a job's a job. (I didn't even negotiate.)

A year down the line, I love this job. I love it so much that I wouldn't leave it for any of the big 4. (except maybe Google). I make average salary in my city but I didn't expect work life balance to be this great.

Here are some of the cool things I appreciate from working at a “random” company : 30-40 hour work week, free food/beer, go to work 11am-5pm, unlimited paid sick days, amazing manager who really pushes me to climb up the ladder (our first one on one, he wanted me to eventually take his job.) and of course, being a devops. I learned more in this past year than I could have ever imagined. I learned big data(hadoop, mesosphere)  ,CD/CI (ansible/docker) , AWS (lambda, ec2, cloudformation, batch, elasticsearch, cloudwatch) and became an SME (subject matter expert) at centralized logging (ELK, nagios, splunk). I also learned like 5% of bash, which basically made me four times as fast when writing scripts compared to school-taught languages like java and c++. I wear many different hats even though the company is about a couple thousand people. I’ve been a product owner, release engineer, and am currently in multiple different teams (multiple scrums a day).

**In the end, all these cool things that are associated with my job did not come from a Big 4. It didn’t even come from a well-known tech company (you probably haven’t heard of it). It was given to me even though I have a crappy GPA. How I got a job was just based on tenacity and persistence, how I kept the job was because I took initiative and actually wanted to “at least learn devops so I know both path)”. You guys can do it, no matter how depressing being unemployed can be. No matter how bad the job looks compared to /r/cscareerquestions kiddos’ job. This industry is amazing and I wouldn’t give up computer science for any other subject in the world. Thanks /r/cscareerquestions!**",1500116246.0,2017-07-15 06:57:26
104,Would you be interested in videos where I teach how to solve a whiteboard problem in a real interview setting?,1479,7109k5,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/7109k5/would_you_be_interested_in_videos_where_i_teach/,175,"I organize programming meetups in SF and in one of the recent meetups, I held a working session for folks to solve problems on the whiteboard. And I was surprised how difficult it was for most of them.

In feedback, I got a lot of requests to show them how to approach a real interview scenario with whiteboard problems.

I really wish I could hold more of such workshops, but I'm limited on time.

So I'm thinking of making whiteboard videos where I solve problems on the whiteboard in a real interview setting. My wife is also a software engineer, so she play as the interviewer. 

We can do it such that I would be seeing the problem for the first time, so it'll be very much like a real interview.

If I make sure the videos are high quality and full of value, with some interview analysis at the end...

... would any of you be interested in such videos?


**Edit**:
Thanks for the responses, I wasn't expecting it to be this many! I'd hate to keep you all waiting, so I'll release the **first video tomorrow (Wednesday)**! Please look out for it, would love to get your feedback.

---------------------------------------------------------------

**UPDATE**: 
I was overwhelmed with the number of responses, and couldn't make you wait any longer!

So without further ado - Introducing **Whiteboard Wednesday**
https://www.youtube.com/watch?v=P_YMAJWEK3Q&list=PLs2vRLhtciEt46Fg-uz1LQxb4xSW-KMGa

**Whiteboard Wednesday** will be a weekly series where I solve an interview problem on a whiteboard. 

The first video is fairly easy because I want you to focus on the process rather than the problem itself. 

There are so many learnings I could break down in this video alone, but I limit it to just 3 due to limited time. I'll cover more in the next videos. 

I'm very glad that this will be of value to you. I plan to go into more data structures and algorithms in the next videos, but I also want your feedback. 
So please comment on the video about:
- What you liked about the video
- What you learned or found interesting
- What other problems you'd like to see

Also feel free to criticize, that's how we learn :)

I have put in a good amount of effort to make it high quality. So I would love to see it benefit a lot more people. So **here is my request to you:**
Please share this video right now with at least one person that you think would benefit. It'll really make my day.

Thanks, and I look forward to the feedback!

",1505819902.0,2017-09-19 07:18:22
105,Has anyone noticed startups becoming more arrogant in our current economy?,1465,j50drk,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/j50drk/has_anyone_noticed_startups_becoming_more/,402,"I have interviewed with several startups over the past few months or so and I have noticed a very annoying trend. Startups are becoming more arrogant in their hiring practices and recruiting for what I can only assume is due to the current economic conditions. Here are some of the things I have witnessed:

- FAANG-like interviews and/or assessments. I'm sorry company with 5 Glassdoor reviews established in 2018, you are NOT Google and you don't pay like them. Thus, putting people through the same type of gauntlets is going to turn them away. 

- Acting like joining their organization is some prestigious opportunity. I was contacted by a very arrogant recruiter for a company that only had a splash page and a careers page, and that was the only info I could find on them. He acted like the job was super important and I should kiss their ass for it. Sorry but I DON'T EVEN KNOW WHAT YOUR COMPANY DOES

- Asking for free work. Had a company talk about an ""assessment"" that was basically an MVP for their actual product.

- Promising to pay in equity. This has always been a red flag but with COVID ruining the economy it feels like a sick joke on the candidate

Have you experienced this? I am seeing this more and more.",1601852789.0,2020-10-04 19:06:29
106,For the love of god please stop Peeing in the talent pool!,1439,4xfkc7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/4xfkc7/for_the_love_of_god_please_stop_peeing_in_the/,508,"Listen, these code tests are getting ridiculous, I've now had in one week my second ""Opportunity"" where they wanted about 8 hours worth of work to see how well I code.  The only reason companies dare to pull shit like this is because you guys are willing to complete these tests.  I dare you to call 5 plumbers up, tell them they each need to spend a full day completing some sort of complex plumbing task and whoever does it the best gets to install a toilet.  I know ""Developer"" and ""Assertive"" are two things that generally don't go hand in hand, but dear god as a community I implore you to please stop agreeing to this ridiculous stuff.  Furthermore I find the code tests will resolve around some barely used shit, like .net full stack developer, and then the code test revolves around knockout js or some other stupid buzzword framework.  There are so many jobs out there for us, don't be afraid to tell them to take a flying leap through a flaming hoop.  

tl;dr
Please stop agreeing to 8 hour code tests, it's ruining the job market.  Code tests are a great way to cause devs to develop a sunk cost fallacy and accept jobs for less pay than they should (because they don't want to go through the process again).  Code tests are collectively bad for the profession and you need to stop agreeing to ridiculous ones.  It's ruining it for all of us.
/rant

Edit:  Downvotes Galore from Recruiters and Hiring mangers.  Yay!",1471061400.0,2016-08-13 00:10:00
107,"Had a one way video !nterview with a company. Recruiter told me they ""didn't like my look"". I'm a minority.",1433,jsbmyq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jsbmyq/had_a_one_way_video_nterview_with_a_company/,358,"I'm a senior developer who lives out on the west coast. I've currently employed but I have been looking for work because my company's financials aren't doing so well. A few weeks ago a recruiter reached out to me about a remote job and it looked like it was a good opportunity. It was for a family run company that was located in rural Ohio who was just recently getting into the idea of remote workers.

Recruiter was very open and honest and said this was an ""old school"" company. I thought I knew what that meant, but man there was a whole other side to that statement. So I had a few screening interviews with the recruiter and she told me that they wanted me to do a 1 way video !nterview (I have to format that word that way or else this post will be auto filtered out). 

For those of you that are unfamiliar, these are one of those shitty ""audition"" type !nterviews where you get asked questions and record your answer to the camera. There is no other person on the other side, so you don't get to learn anything about the company culture or anything. I was told to dress up for it despite it being in my own house, which again was weird as hell. So I shaved, put on a nice shirt, and did this thing in my own home.

Recruiter got back to me the next week and said they weren't going forward. She said the feedback was ""they didn't like your look or poise"". Not my technical skills or my experience.... my look. I should point out that I'm latino, and I have a latino name. This fucking INFURIATED me but I hid it from the recruiter. I looked up the town's demographics and it's 99% white and the county went 80% for a certain presidential candidate. I didn't even think about any of this until I got the news that I was denied because of my ""look and poise"".

I know this topic can be uncomfortable, but it's something I felt I should share. I'm shocked that this kind of thing is still going on. I'm not going to name and shame them in case I decide to escalate this, but I had to share. Have you ever experienced anything like this? Is this kind of an unspoken thing that people still experience in the Midwest or elsewhere? I would never expected this coming from the West Coast.",1605142148.0,2020-11-11 19:49:08
108,Name and Shame: Home Depot,1436,ejkd01,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ejkd01/name_and_shame_home_depot/,144,"This was for data analytics/business analytics in the corporate office. Was contacted by a recruiter after applying that they wanted a phone interview. Had the interview (purely behavioral) and it went great. They told me they wanted to fly me to Atlanta. Awesome! 

In the coming days they set up a flight hotel room etc. Everything went great. Had two interviews (both 45 minutes) with two people. First went pretty well (7/10) second one went really well (9/10). I was told they would get back to me within a few weeks. 

A few days later I receive an email from the head recruiter saying that my recruiter will send feedback next week. Great- this is it. I then open my email one morning- for her to tell me to wait a few more weeks. Great. 

At this point I have a final round interview with a telecom company. I let Home Depot know and they told me to notify them if I get an offer. They ended up giving me an offer and I let Home Depot know. My recruiter said we would be in contact soon. 

7 days later and I still haven’t heard from them and I told my recruiter I might have to sign my current offer. She said she wanted to call me. We talked and she recommended I sign my current offer and if I get Home Depot to renege. I was admittedly surprised she said this. I never want to renege on an offer and at this points it’s been quite a while.  (2+ weeks) 

About 10 days later I was contacted and she wanted to speak with me- finally. She then calls me to tell me to wait until Mid January. Keep in mind this was mid December when she told me this. I was floored. But I decided to wait. 

Finally, I emailed my recruiter yesterday. She wanted to call me. She called me today to tell me that I did great in the interview and the hiring managers liked me but a returning intern accepted a returning offer- and thus they couldn’t offer me a position. After almost nearly two months of waiting and being strung along I was declined. 

I’m not upset- I’m actually really excited about my current offer. But I was shocked a Fortune 500 company could be so disorganized. Furthermore, it shouldn’t take nearly two months- for a rejection. 

Just my two cents",1578108637.0,2020-01-03 22:30:37
109,Why does this field have so much ego?,1426,f5ttn6,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/f5ttn6/why_does_this_field_have_so_much_ego/,505,"Seriously. I mean its filled with people who have such inflated egos that you cant even ask a simple question. Barely anyone in this field is humble and the people are textbook know it alls who are the type to say “You seriously don’t know that? Thats so easy!” and make fun of you when you miss a question or dont know something. Idk about you guys, but the more I learn the dumber I feel so I try not to present myself as a know it all misunderstood genius",1582070077.0,2020-02-18 18:54:37
110,Looking to start a personal project? Here's some data from my 150+ applications this spring,1422,g9zcdu,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/g9zcdu/looking_to_start_a_personal_project_heres_some/,109,"Like many of you, graduating soon and all of my interview processes have been cancelled and/or frozen for the time being. So, back to scouring through LinkedIn for new grad or junior software engineering positions. I decided to collect some data as I went through the applications to help me formulate my next personal project.

**Here's what I found (in order of most wanted by hiring companies):**

**Most commonly asked** for is knowing at least **ONE** of **Java, JavaScript, Python, C/C++, or C#**. I compared the amount of times these languages were mentioned among each other.

* **JavaScript** **(31.89%)**
   * Plain JS (32.2%)
   * React (32.2%)
   * Node (18.64%)
   * Angular (15.25%)
   * Vue (1.69%)
* **Java** **(23.78%)**
   * Plain Java (84.1%)
   * Spring (9.1%)
   * Kotlin (6.82%)
* **Python (22.16%)**
* **C/C++ (16.76%)**
* **C# (5.41%)**

**Second most commonly** asked for is knowledge of **queries and databases**. Here's how they compare against each other:

* **SQL (81.08%)**
   * Not specified (66.67%)
   * MySQL (16.67%)
   * PostgreSQL (10%)
   * SQL Server (6.67%)
* **NoSQL (10.81%)**
   * Not specified (50%)
   * MongoDB (50%)
* **GraphQL (6.82%)**

**Third most commonly** asked for is knowledge of **cloud computing and technologies**:

* **AWS** (53.57%)
* **Azure** (21.43%)
* **Not specified** (14.29%)
* **GCP** (10.71%)

**Fourth most commonly** asked is knowledge of **other languages and frameworks** outside of the most common languages listed above. Here is how they compared among each other:

* Golang (32.65%)
* Ruby (22.45%)
* .Net (12.24%)
* Scala (8.16%)
* Spark (8.16%)
* Perl (4.08%)
* R (4.08%)
* Hadoop (4.08%)
* PHP (4.08%)

**Fifth most commonly** asked for is knowledge of **containerization:**

* No surprise here, only technologies mentioned are **Docker** and **Kubernetes.**

**Sixth most commonly** asked for is kind of weird to me because I didn't think it much mattered, but these were specifically mentioned in many applications. That being of using a specific **operating system**:

* Linux/Unix (56.25%)
* Windows (43.75%)
   * Typically specified for companies using Azure, SQL Server or .NET/C#

**Seventh most commonly** asked for is knowledge of **Testing, Automation or Build Tools:**

* Maven (25%)
* Jenkins (25%)
* Junit (25%)
* Travis CI (12.5%)
* Jest (12.5%)

**8th:** Knowledge of **Agile/Scrum**

**9th:** Knowledge of **Microservices**

**10th:** Knowledge of **JSON/XML**

&#x200B;

**Notes:**

* Remember, these are ordered by the amount of times these technologies are specifically mentioned by 185+ companies in their job applications. Not trying to say any of these tools or technologies are any better than each other, just the data I found while applying.
* Compared to my internship/job searches last year, the things most emerging are more specific mentions of **Golang, Cloud Services, and Containerization**
* While I just kept track of specific technologies, many applications just ask for general knowledge of object oriented programming, algorithms/data structures, testing and the software development process without mentioning specific languages, tools or frameworks.

Hope this helps some of you in planning some technologies to leverage while planning your personal projects! I'm putting together some diagrams and mock-ups at the moment and plan on incorporating as much as I can.",1588149287.0,2020-04-29 04:34:47
111,It's so much less stress when you're not pursuing major companies in big cities with 6 figure salaries.,1427,fcgxnw,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fcgxnw/its_so_much_less_stress_when_youre_not_pursuing/,194,"I graduated a year ago and I applied to many jobs. I tried really hard to get interviews at the Big N companies. I had dreams of moving to a major city, working for Google or Amazon and thinking about all the pride and glory I could have to say I worked for [insert Big N here]. Eventually I realized I wasn't as good as I thought I was. Those leetcode problems didn't stick with me. Trying to memorize all those algorithms and data structures were stressing me out. I really didn't like programming as much as I thought I did. I realized I was mediocre.

I started applying to jobs at random companies I've never heard of that I would normally ignore. In small cities near that weren't ""tech hubs"". I got a phone interview at a small company nearby that did hardware and had a small 6 person web/IT team. I was dreading the idea of working there. But I went in and met the people and I flipped completely. Everyone was *so nice*. The boss seemed to really care about all their employees. Everyone was a family and I felt immediately welcome. I got along great with everyone and their interview process went smoothly, I felt like I actually connected with real people for the first time.

This was a huge contrast to the awful, stressful, interviews I had at tech companies in bigger cities where everyone felt cold and like they couldn't care less about talking to me. People who drilled me, were snarky, and got visibly annoyed when I didn't know something. I had quite a few ghosts and interviewers who bailed and recruiters who were awful and sent me wrong information. The interviewers seemed to barely glance at my resume. At this company, people I never met were genuinely excited to talk to me about small details about myself.

Also? There was practically no technical parts of the interview. I got casually asked a basic array question that would be CS101 and that was it. The rest was personality and half the interview process was me shooting the shit with people about life, music, hobbies, etc. What a relief!

As far as pay, it's not amazing and it's not 6 figures, but it's livable while also being relatively comfortable in this non-major city. There's no overtime and rarely ever will you get called outside of work. I can easily afford rent, utilities, food, etc. while also having a few hundred to save and few hundred for recreational spending. And that's fine by me. I don't think I'd be any happier with more money. I can work relatively stress-free and enjoy my hobbies outside of work. There's no pool table or free snacks or a Nintendo Switch with Smash Bros in the break room, but who cares. I'm there to work. I can have fun at home.

Honestly I'm relieved. I wish I stopped trying so hard earlier and beating myself down not realizing I just didn't have the aptitude for this stuff. It's not a company anyone has heard of, I can't wear it like a badge of pride, but I'm making rent and I'm happy. I realized I just wanted the pride of working for a company like Google, so I could tell people and they would be impressed, but that's all superficial. It was a vicious cycle of thinking I needed to be great, being unable to achieve what I wanted to achieve, and emotionally feeling like shit afterwards. Genuinely the last year of my life has been the worst I've ever felt mental health wise.

By all means, shoot for the big companies and salaries, but if it's destroying you mentally, I found giving up and enjoying being ""mediocre"" to be the way to go.

Just wanted to share my story after reading this sub for the last ~2 years and feeling like if I didn't make 6 figures in a major city at a company people have heard of, I was worthless. If anything, I feel the most worth at this small company than I did interviewing at bigger, more well known, companies.",1583204229.0,2020-03-02 21:57:09
112,Get caught doing Leetcode during lunchtime,1427,ecvjz6,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ecvjz6/get_caught_doing_leetcode_during_lunchtime/,439,"Join the company last month and I still keep doing Leetcode in my free time for the future. Last week my manager saw me was doing Leetcode while having lunch, she brought me to her room and questioned me a lot that if I'm not happy with the company, the project or teammates, etc.

I did tell her that I just do it for fun (I want to join Google but well, it's my plan for the next 2 years, currently I'm very happy with my company) but she keeps treating me like I will leave next month.

What should I do?",1576801855.0,2019-12-19 19:30:55
113,"I have 7 years of professional experience as a software developer. Yesterday, I got rejected from my dream job",1414,iycxd4,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/iycxd4/i_have_7_years_of_professional_experience_as_a/,215,"I share this for people starting and for letting them know that failure and rejection can also come for ""experienced"" developers.

I have been working remotely for US companies since about 2 years ago, before that all my work was on local (Guatemala) companies. I started looking for relocation jobs at the end of August, because I really wanted to grow my career and also improve my quality of life. My first go to was New Zealand or where ever in Europe, since the visa sponsorship paperwork and so on is way easier than for US o Canada.

Given that I've worked in a little bit of everything in a lot of side projects, I applied to Python (6 years of experience), Data Engineering (2 years of experience) and React jobs (1.5 years of experience). I only received positive replies from 3 companies, one from Netherlands (React), one from NZ (Python) and one from Germany (Python/Django). By far the one that excited me the most was the Django one, since I worked with it for about 4 years and really loved the framework.

That company set a very open 7 steps hiring process, which included everything from code challenges, questions and pair programming. I really liked their openness and culture they seemed to have just by talking with the guys from the hiring process. I prepared as much as I could, given that I haven't worked with Django in the last year and a half at this point. I had 2 hours to complete the code challenge part, but I got a bit too nervous and miss understood the instructions for one question. That held me back and I almost didn't make it to the end with the other. In the end, I only finished 4 out of 5 challenges.

After reviewing, they replied back saying they were not going forward with my applications given my performance on the challenge. The guy who was guiding me through the process was very kind and gave me general feedback about what I could have done better and what other key points I missed. It turned out I miss way more than I thought (around 4 key aspects), so it made sense for they not to choose me.

Still, I am very disappointed on myself and it really, really sucks. I just wanted to share this with the community because failure and growing still comes even after you have been doing this for a while. I will go back to the training grounds and try to get better in order to land that dream job that allows me to relocate.

Best of luck to everyone looking for that job.

Edit: For clarification, I got rejected in the 4th step of the process and it was just one challenge with 5 different questions / tasks. I honestly don't feel like the company had a bad process, given that the things they looked for on the feedback were not there and it wasn't like ""you have to finish 5 out 5 and that's it"".

Then, it wasn't just like ""You didn't make it, better luck next time"". The guy reviewing actually took the time to give deeper feedback with links and references on how to improve. In the end, I am by no means mad at the company, just a bit mad at my self lol.",1600905714.0,2020-09-23 20:01:54
114,"I got a job, I actually got a job.",1414,dvmcwu,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dvmcwu/i_got_a_job_i_actually_got_a_job/,186,"Hey guys, I finally got a job. I graduated 7 months ago and I got a job with a salary of 65K. Throughout those 7 months I was getting rejected and rejected and had many sleepless nights. Throughout my time I kept comparing myself to my friends/ classmates (which made me furious because some of them cheated their way to get their degree). I kept telling myself that my friends and classmates helped me and I truly didn’t know anything (and At one point I started learning programming all
Over again because I thought I forgot everything or missed something ) and thought that my life was over. My family members  kept asking me “Do you have a job yet “ and I said no, feeling like a failure. After all this I would like to share some things I’ve done to those who are in a similar situation. 
1) Worry about yourself, not others. Do not compare yourself to others otherwise you’ll be stuck in a hole and will never climb out of it with that attitude.
2) Apply to jobs: Quantity > Quailty. Once I graduated I was applying to a couple jobs that seemed perfect for me and wasn’t getting calls. Eventually I realized I can’t picky considering this will
Be my first job so I started applying like a madman and got many interviews and ended up getting calls, making it to the final interview. Also this is sooooo important, just because you made it to the final interview and did a good job at the end  ,doesn’t mean you got the job. Your in competition with other people who applied for the same position and the company is going to pick the one person who feel is the best. My point is, if that happens, you’ll have other interviews and won’t be as upset as much because you have another chance with another company 
3) Keep your skills fresh. As much as I hate to say this, study those coding/hackerrank questions. Because at the end of the day, those are going to determine whether you move forward into the interview process.  Also do the things you like, like for me it was creating web applications. 

If anyone needs some guidance or something, message me because I could’ve used someone’s help back then but all I had was myself.

Edit: wow I didn’t think this was going to blow up, as promised I’m going to answer your messages/ comments but it’s going to take a bit of time lol. Thanks for all the support guys",1573647998.0,2019-11-13 07:26:38
115,Tech is magical: I make $500/day,1404,dlsew1,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dlsew1/tech_is_magical_i_make_500day/,562,"I'd like to flex a little bit with a success story. I graduated with a nontech bachelor's from a no-name liberal arts college into the Great Recession. Small wonder I made $30,000/year and was grateful. Then I got married, had a kid, and I had a hard time seeing how I'd ever earn more than $50k at some distant peak of my career. My spouse stayed home to watch the baby and I decided to start a full-time master's in computer science. Money was really tight. But after graduating with a M.S. and moving to a medium cost of living city, software engineering got me $65k starting, then data science was at $100k and I'm now at $125k. That's $500 a day. I know it's not Silicon Valley riches but in the Upper Midwest it's a gold mine. That just blows my mind. We're paying down student loans, bought a house, and even got a new car. And I love my work and look forward to it. I'm still sort of shocked. Tech is magical.

Edit to answer some of the questions in the comments: I learned some BASIC in 9th grade but forgot pretty much everything until after college when I wanted to start making websites. I bought a PHP book from Barnes & Noble and learned PHP, HTML, and CSS on my own time. The closest I got to a tech job was product manager for an almost broke startup that hired me because I could also do some programming work for them. After they went bankrupt I decided I needed a CS degree to be taken seriously by more stable companies. And with a kid on the way, the startup's bankruptcy really made our family's financial situation untenable and we wanted to take a much less risky path. So I found a flagship public university halfway across the country that offered graduate degrees in computer science in the exact subfield I preferred. We moved a thousand miles with an infant. My spouse left their job so we had no full-time income. I had assistantships and tuition assistance. I found consulting opportunities that paid $100/hr which were an *enormous* help. I got a FAANG internship in the summer between my two years. The combination of a good local university name and that internship opened doors in this Upper Midwest city and I didn't have any trouble finding an entry level software engineering job. Part of my master's education included machine learning, and when my company took on a contract that included data science work, I asked to transfer roles internally. Thankfully my company decided to move me into the data scientist title, rather than posting a new role and spending the resources to hire and train a new person. That also allowed us to make a really fast deadline on this contract. I spent three years as a data scientist and am now moving into management. The $125,000/year level was my final year as a data scientist. I don't know what my manager pay will be yet.

A huge part of my success is marketing myself. I spend a lot of time thinking about how to tell my story. Social skills, communication with managers and skip-level managers, learning how to discover other people's (or the business's) incentives and finding how you can align your own goals with theirs: all of these are critical to career growth. The degree opened doors and programming skills are important, but growth comes from clear communication of my value to others, as well as being a good listener and teammate.",1571824477.0,2019-10-23 05:54:37
116,"I created a mind map of nearly all the concepts to study for the tech interview, which helped me land my dream job",1404,6tc4uw,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6tc4uw/i_created_a_mind_map_of_nearly_all_the_concepts/,166,"A little background:

I've always dreamed of working in Silicon Valley, so last year I decided to quit my software engineer job and move to the Bay Area. For 6 months, I spent 8-10 hours almost everyday studying or interviewing for my next job. I applied at over ~120 mid-sized/large tech companies, (phone/onsite) interviewed with ~70 of them, and was rejected by or failed almost every single one. Needless to say, I was terribly bad at interviewing...

Eventually, after hundreds of hours spent studying/practicing interview problems, and a lot of failed interviews (and learning from every one), I was able to land my dream job at a top tech/big N-type company!

I've lurked /r/cscareerquestions for years, and it's been both helpful and inspirational in my goal to work in Silicon Valley. 

I created this comprehensive mind map of data structures, algorithms, and system design concepts to help me study for the interviews. As a thank you to this subreddit, I hope that this can help you in your studying and interviewing as well!

Image of the mind map: http://i.imgur.com/JbVwvxo.jpg

Mind map Link: https://www.mindmeister.com/936304672/algorithms-data-structures-computer-science-math

",1502613948.0,2017-08-13 04:45:48
117,"A quote from a popular CS professor at Illinois: ""If your computer science major isn’t difficult, or it doesn’t have a high workload, ask for your money back. You are being scammed.""",1406,8lz489,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8lz489/a_quote_from_a_popular_cs_professor_at_illinois/,387,"I read this on Quora today and it made me think of all the people who said they never had an internship or were struggled to find a job out of college despite sending hundreds of applications, and even those who said their college removed Discrete Math from their CS curriculum. As someone who has been in a top CS program and a shitty one, I can say that the gap is fucking huge. 

Edit: some of you might be interested in this. His website, http://algorithms.wtf, has some really good notes on algorithm concepts. I really liked the DP and graph one. Check it out. 

Edit 2: I'm not Jeff himself, but I don't think his intention was to tell everyone to go to top schools. I think it's mostly that there are a number of crappy ones out there. Those are two different things. So look out for yourself. Also, he did not say anything about being hardworking or anything, so please keep that in mind. 

Edit 3: so Jeff has entered the battle. He is u/jeffgerickson, and he seems to be answering/clarifying stuff. Sorry if this has brought you some unwanted attention, and thank you for caring about us, and help making CS@Illinois great! ",1527252253.0,2018-05-25 08:44:13
118,Being a team player with a good attitude goes a lot further than being a brilliant jerk.,1371,jl1sjj,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jl1sjj/being_a_team_player_with_a_good_attitude_goes_a/,186,"I realize there seems to be a trend lately for the past six years where hiring managers tend to look for any sign of weakness as a sign to reject a candidate. 

So what has become more common? Being a know it all jerk with a similar personality to dr house or Sheldon cooper

I’ll take working with a decent engineer who has a good attitude and is pleasant to work with than some genius who is a condescending jerk...even if that genius is as accomplished as Stephen hawking. 

What do you guys think?",1604109664.0,2020-10-30 22:01:04
119,"As a student graduating in a year, this subreddit is one of the most disheartening, depressing things for me to read through",1371,huqkn9,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/huqkn9/as_a_student_graduating_in_a_year_this_subreddit/,451,"This subreddit seems to be plagued by one of two things at any time. 1) students looking for advice on how to get into the career field (which I have no problem with) and 2) people who have jobs who are consistently unhappy with either their current job or career field, whether it’s a feeling of unworthiness, working long hours basically all weeks of the year, etc. It’s incredibly disheartening and makes me wonder if I chose the right major and career field. 

I have a couple questions that I’m hoping some of you can answer with some brutal honesty as I come to this crossroad in my own life and decide where to go from here. 

1) *Is there anyone out there who DOESNT work long hours and have their life completely taken over by this career field?* I’ve always told myself that I wouldn’t care working 40 hours a week in a job that isn’t all flashing lights and rainbows, but what I’m getting from this subreddit is that these careers often end up being a huge time investment outside of the office as well with constant studying and learning as you try to stay relevant in the field. I simply cannot imagine working 40 hours and then coming home to my future wife and kids only to have to lock myself in my room to study more. 

2) *Does anyone here actually ENJOY their job?* Does anyone actually look forward to going into work? Would anyone use the word fun or fulfilling to describe their job? This isn’t as important to me because like I said I have no problem working 40 hours at work if I can enjoy my life outside of work, but am genuinely curious. 

I’m afraid I won’t like the answers I get but I’m looking for honesty here.",1595298176.0,2020-07-20 22:22:56
120,I fucking love our field.,1369,coac0f,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/coac0f/i_fucking_love_our_field/,305,"Just sitting here stoned after a nice hard week at work, appreciating how great our field is. Don't get me wrong, there are occasional times where I want to rip my hair out, but most of the time it feel so fucking enjoyable solving problems all day. I love how we're all making pretty good money too! It's times like this that I can say there's simply no better field than this, and that for all our bitching about the day-to-days of work, our field is actually pretty damn great.",1565422255.0,2019-08-10 03:30:55
121,an opinion: this sub is slowly turning to a StackOverflow jerk circle.,1370,a1i10u,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/a1i10u/an_opinion_this_sub_is_slowly_turning_to_a/,278,"I have noticed in the last few months that there is an increase in the passive aggressive *vibe* and the unnecessary sarcastic comments either for people asking such *dumb* questions or beginners just asking newbees questions.

Which is sad because this sub use to be such a helpful positive community to get advice and help, and actual **answers** for questions instead of sarcastic answers for people fishing for likes.

I am comparing it to StackOverflow because that's one place where everyone is an a-hole with a chip on their shoulder.",1543532316.0,2018-11-29 17:58:36
122,Got my first job offer!,1370,i7y2rl,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i7y2rl/got_my_first_job_offer/,147,"Got my first job offer at a Fortune 500 company today and I couldn’t be more happy! I applied to endless jobs(200+) and got a few interviews but no offer. I basically felt like I was in a loop going nowhere and had my life on hold.

A little about me:
Graduated in May. Although I did not have no previous software internship, I did work at a start-up(5 employees)while I’m school basically working on hardware and manufacturing. It was here that I went out of my way to solve a problem we had and developed a project management tool. This was the project that I can say got me this job. So to those that have no experience, work on project and be sure you can talk about it!",1597202193.0,2020-08-11 23:16:33
123,Don't trust the extremes.,1347,6tista,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6tista/dont_trust_the_extremes/,133,"This subreddit has a whole bunch of extremes. If you see folks posting about being rejected 70 times or what not, it's best to ignore it. Be happy with a person's eventual success and use their tools and paths they've laid out for you, but realize that it's not you.

The vast majority of folks (even the ones at a Big N company) don't post on this sub. They don't post because they don't have any particular story or feat they've accomplished. They haven't studied for 18 hours a day for 80 days in the desert with no food or drink while being hunted by assassins.

Most people just apply and get a job. Some people do some stuff on the side. Many people do a bit of studying before they go into an interview. But pretty much everybody ends up with a job. 

Seriously, chill out folks. The people that you're reading about aren't the norm because the norm doesn't post.

Edit: But like really, most people don't even realize this subreddit exists. ",1502697869.0,2017-08-14 04:04:29
124,"I landed the ""dream job"" and I couldn't be more miserable.",1350,daqj5f,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/daqj5f/i_landed_the_dream_job_and_i_couldnt_be_more/,278,"I've been trying to keep a positive attitude and turn things around but I feel like my life has gotten out of control.

&#x200B;

I graduated school and landed a cushy 6 figure job in the Pacific Northwest. I have a nice apartment, I'm learning more about good software development everyday, and my work life balance is great.

&#x200B;

I'm just miserable. I feel like my life is a trainwreck. On paper everything sounds perfect, but I'm so lonely. I find myself developing weird anxious ticks and falling into destructive habits. I moved away from all my friends and family in pursuit of my career.

&#x200B;

I've been exercising, picking up hobbies in the area, practicing positive mindfulness, etc. 

&#x200B;

I've started muttering things to myself in my apartment. I find myself saying how much I hate my life everyday. Then I feel guilty for not being happier with all the things I have. I can't tell my family because I'm the only kid who hasn't completely fucked up their life. 

&#x200B;

I don't know what to do. I'm scared that I'm going crazy and I keep putting off seeking help. None of this was worth it.",1569759579.0,2019-09-29 08:19:39
125,Anyone else NOT productive at home?,1337,geqjvr,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/geqjvr/anyone_else_not_productive_at_home/,256,"I see all these posts about how stay at home orders have proven we can all be productive at home, but I can’t relate at all.

* I roll out of bed 5 min before my morning meetings, splash some water and do my hair before my video call. 

* Forget to eat half the time (breakfast at 12pm...). 

* Go to bed super late because I don’t have to drive. 

* And the worst - get distracted by everything around me (electronics, staring out the window, etc).",1588821641.0,2020-05-06 23:20:41
126,The idea of WFH becoming the new norm depresses me,1342,gfi0yl,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gfi0yl/the_idea_of_wfh_becoming_the_new_norm_depresses_me/,343,"I like going to the office. Being around people, face to face communication, lunch with colleagues are invaluable for my mental health. Furthermore, meetings are more effective, and casual chats/networking is beneficial for my career.

But I believe this will be a thing of the past. Companies saw that people can work productively at home, and the benefit of cutting office space cost will be appealing for many.

I understand that some of you enjoy working from home, but after 6 weeks of lockdown I still haven't got used to it, it actually got worse. Don't get me wrong, there are benefits as well (sleeping more is one of them). But it's not for me, the downsides overcome the benefits by far. Before COVID-19 I used to work from home sometimes (3-5 days/year), and that was great. The problem would be to do it permanently.

Anyone in the same position? How are you coping with it?",1588923819.0,2020-05-08 03:43:39
127,"Is anyone else just tired of the ""Silicon Valley Experience""?",1337,9rf4sn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9rf4sn/is_anyone_else_just_tired_of_the_silicon_valley/,431,"I'm about to graduate from a top 5 CS school with a degree in CS in May 2019. I'm on track to get a solid six figure salary with good stock options and bonus as a 22 year old. All my friends will be living in the same area as me after graduation and we'll probably live together. In the grand scheme of things, there is nothing wrong with my life and it's a position that a lot of the younger people on this thread really are shooting for. I'm not happy though. I feel like Silicon Valley is so cold and unfeeling. Everyone here is looking at the bottom line for themselves. There is no real community outreach or integration into the area people live. There's widespread entitlement and a tendency to throw money at problems until they disappear. There's liberalism in name only here but very few people are willing to put their money where their mouth is. There's obvious classism and racism out here. I'm fairly progressive when it comes to politics but I find the people out here tiresome when it comes to disagreements especially since the extent that they engage in controversial topics is just lip service. I used to talk about how LA is superficial and cold but I don't think The Bay is that different from that anymore. It's all about where you work, who you know, and how much you make. Not that there's anything bad about that, but it really just feels like a bunch of people living in an ivory tower surrounded by a large, well protected gate while there are starving masses outside that are really just trying to survive. 

&#x200B;

I grew up upper middle class but was best friends with a lot of people who were just above the poverty line (east coast). Most my friends were latino or black growing up (I'm Indian-American) and it really bothers me that such a large portion of this Asian/Indian/White dominated area looks at those demographics so poorly. There are so many social issues here that we, as members of the tech community, are contributing to but refuse to acknowledge past the point of talk. I'm sick and tired of it. Everyone is out here asking questions like ""how do I get past interviews at companies like FAANG?"" and ""how much is the starting salary for someone with {my skillset}?"" But in the end aren't most of these people just looking for run of the mill backend or frontend jobs? Won't we all just be building CRUD applications for the Ubers, Lyfts, Googles, and Amazons of the world while enjoying the toys that we're given with these nice compensation packages but in the grand scheme of things, we're really not doing anything fulfilling with our lives? We're all just in the pursuit of more money. Idk, maybe I'm just ranting right now (I absolutely am). I'm just becoming more and more disenchanted from this life as I get closer and closer to graduation. I'm not super keen on the idea of watching the world burn while we build cool (and often useful things) that will stay confined to the wealthy for most of the foreseeable future and cost of living for all of us shoots up dramatically. 

&#x200B;

Thoughts? ",1540536159.0,2018-10-26 02:42:39
128,Growing within the same company is.....a joke,1329,fyahcd,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fyahcd/growing_within_the_same_company_isa_joke/,341,"I see some people talk about whether they should work long hours or not to keep management happy and get a raise or whatever. I'm here to tell you that you should put yourself first, that keeping management happy is a joke when they are abusive, and that whatever opinion they hold of you will be completely insignificant after you get your next job. You are at your current company to acquire enough experience to be able to get your resume looked at by companies that didn't look at it before. Besides, the promotion you work so hard for? It will be nothing in comparison to hopping into a higher tier company, one where the people aren't so mediocre, where people understand that productivity is maxed when you have good work-life balance. And if they don't understand that, well, at least they'll pay you more! As long as you keep your skills sharp this will be true, which leads me to another point: do your work well because it benefits you, not because it benefits the company.

Save enough money so that you are not afraid of losing your job. Finding your next job becomes so much easier than when you searched for your current one, especially after you go from 0 experience to 6 months...1 year...or more.

Every job you have is a stepping stone into a better job. Make jobs work for you to stay, not the other way around. And make friends with the other developers, they will be your network, they are on the same maze that you are, they are your comrades, unlike your manager.

I'm just some angry ""junior"" developer, but I'm on my way to my third job after being used as a scapegoat by my last manager, even though I gave them a lot of unpaid extra-effort thinking it would be recognized. Next job is 100% remote for a change though.

Thanks for coming to my Ted Talk

---

**Edit**: I am a simple man, if you scratch my back, I scratch yours. This isn't about chasing money, this isn't about being angry forever, this is about having the freedom to demand to be treated with dignity, and that if you step on some toes while you do that, know that you and your career will be fine, actually, you will be better off. And also loyalty doesn't exist, people have to prove to you that they care.",1586530580.0,2020-04-10 10:56:20
129,Loyalty is overrated,1328,est9wj,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/est9wj/loyalty_is_overrated/,333,"I came to a realization some time ago that I'd like to share with you all. 

Loyalty is overrated (In business relationships. You better fucking be loyal in your personal relationships). 

IDK about you all, but I was always sold the idea of being loyal to a company. I was told to work hard, work long, and do whatever it takes and I would be fairly compensated. However in practice this hasn't been the case. Let's take my first gig for example:

I worked at an agency who actively BRAGGED about how over worked their team was. They saw working till 10pm on a Tuesday and all weekend as a badge of honor. They expected their employees to drop anything personal and prioritize work. One morning after staying up till 6am working on a project, and having to drive 2 hrs for a kick off meeting at 9am, the client mentioned that I looked really tired. My boss, didn't let me asnwer and said, ""Yeah he is! We had him working all night. We always do what it takes to get the job done, no excuses. He hasn't slept all week probably!"" and started  laughing while the client looked very uncomfortable. 

 Ultimately I realized that the harder I worked, the more money my boss made, and the less time I had, the less money i made per hour, etc. They made it feel like a family, they bought us all food, got close to us as friends, etc. All in all, it was a fantastic way to exploit their employees. I still keep in touch with a guy working there who will NOT leave after being treated like shit for years, because he doesn't want to ""let everyone down"" and ""screw everyone over"". Loyalty has basically made it that he's making 18/hr in one of the highest cost of living cities in the US while working as a senior Drupal guy. 

That is the wrong mentality. 

I started thinking of myself more as a mercenary. I'm a skilled specialist that get's called when something needs to get completed within my skillset. I do not care what side of the war we're on, I'm getting paid to do a job. 

This has greatly helped me in my career. When I see a new opportunity that would benefit me, I don't think about my current job or team, I go for it. This may sound callous, but I stand by it. If your team is so mismanaged and overworked that losing one person would collapse everything, that reflects more on the management than it does on you being a dick for leaving. If your team mates start being negative towards you, then they're not your friends. They should be happy for you finding new opportunities. Even in my first job where I was overworked as fuck, and someone leaving meant it would fall on me, I was always happy for anyone who could get out. 

Ultimately, we should all remember this is a JOB. It's a transaction. You're being paid for your time with money. That's it. Don't let your emotions cloud your judgement about what is best for YOU. Whether you're chasing a higher dollar figure, or looking for a more interesting project/team, don't let loyalty get in the way of doing what is best for YOU.",1579815744.0,2020-01-23 16:42:24
130,I'm a software developer but I'm not a good one. How can I get better?,1333,jbq9dp,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jbq9dp/im_a_software_developer_but_im_not_a_good_one_how/,181,"I've been working in software development for the past 5 years and I've been at my current company, a large bank, for 2 years. I work on web-based apps used internally by staff. I've had no formal education in computer science so I lack the foundational knowledge others have. I've basically only got by so far by abusing Google and ripping off other, existing code. I feel very inadequate in comparison to my colleagues and that I only got the job because I'm a woman. 

I've tried to learn about data algorithms and design patterns but I struggle to put these into practice. If someone gives me a design task, I haven't got a clue how to get started. We have to move onto AWS soon and I'm dreading that I'm going to cause some massive security or cost issue. We also have to do extra tasks that we propose ourselves in order to improve our processes and keep on top of emerging tech, but I know so little as it is that I don't have anything to contribute.

By the end of the day I'm exhausted and feel like I've accomplished nothing. I've started waking up in the middle of the night thinking about work. It has sapped all motivation from me to the point I can't concentrate properly and I'll procrastinate to avoid tasks I'm stuck on. I'm trying to learn in my spare time but nothing seems to stick. We're buying a house soon, I'm the main earner and I can't afford to lose this job.

Sorry for the rant, I think I just really need a win to get out of this negative mentality I've ended up in. Does anyone know any good techniques for learning the foundations? What's a basic project I can realistically get done in a weekend? How can I learn AWS without getting charged a fortune?

Edit: Thank you to everyone who has replied or sent me a message. I've been having a bad couple of weeks professionally so I feel a lot better knowing I'm not alone and probably not as bad as I think I am. I've compiled a list of all the sources and will check them out. I've also written out a study timetable and I'm going to start going on walks at lunch time to get away from the screen and for some fresh air. Hopefully in a couple month's time I'll be sharing some finished projects with you all!",1602806230.0,2020-10-15 19:57:10
131,I made a post a year ago about applying to 500 places with no response and wanted to let you know what happened.,1334,b23axy,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/b23axy/i_made_a_post_a_year_ago_about_applying_to_500/,158,"I made a post a long time ago on this subreddit about being homeless after the house I lived in was condemned and sleeping in my car and having no where to go and no where to turn to. Shortly after that post things went from bad to worse as I feel into a deep deep depression and I decided to end it all and tried to kill myself by jumping off a bridge, I chickened out and left my car and and all of my possessions in the car and just ran away from everything.

I basically was an actual hobo for about 5 months and made my way to Chicago with what little money I had left and just sat around there begging for change, eating out of the trash, wishing i could die. Eventually one thing led to another and I called and talked to my family for the first time in what seems like forever over the phone and they drove out and picked me up and drove me home. I stayed with them for a few months until I was moderately better, one of my old friends messaged me that he started a painting business and he wanted me to work for him so I went and I am currently working for. I make $19/hr and I live in a studio apartment now. I realize I only ever did CompSci as a major because I wanted a high paying job and was never passionate or good at it and coasted off the work of others through college. I'm probably never going to have a CompSci job, but I'm okay with that. For now I'm just happy to have a good paying job and have heat, shelter, food, and internet. My insomnia is getting better with medication and my depression occasionally flares up, but I'm doing a lot better

https://www.reddit.com/r/cscareerquestions/comments/73nyjr/ive_applied_to_over_500_jobs_and_not_a_single/",1552841807.0,2019-03-17 12:56:47
132,Why do companies expect you to care beyond a pay cheque?,1334,kb4ucj,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/kb4ucj/why_do_companies_expect_you_to_care_beyond_a_pay/,487,"Not trolling, serious question.  


We have a lot of meetings where company execs like to boast their accomplishments and growth projections. I'm happy for the company but beyond the fact that it's surviving covid, it has little impact on me.",1607729268.0,2020-12-11 18:27:48
133,My Experience with H1-B as a POC,1325,hefnfm,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hefnfm/my_experience_with_h1b_as_a_poc/,513,"I think I have a much different experience with tech then a lot of the posters on here. I am a person of color with a tough start to life, I never went to a great high school, I grew up in a shitty neighborhood, I am in a single parent household, I had a lot of shit not go my way. Luckily I have a good head on my shoulders and a good moral compass.  I was able to go to college after high school. I graduated college with a STEM degree but it was not comp-sci. After graduation I was working doing data entry for minimum wage.  I wanted to make a change and pursued a career as a software developer. I had to teach myself how to code, I busted my ass 3 hours a day after my work and commute and 8 hours on weekends working on personal projects and applying everywhere as a junior developer. I never got any calls back until I put my resume out on Dice. I started getting bombarded by staffing companies mostly owned by Indians. I HAD to take these jobs because nobody would take a chance on me. You know those shitty emails you guys get and go in your spam folder? That shitty 3 month contract in the middle of nowhere? I WORKED that job. That job that list 10 skills and 8 years of experience for 20 bucks an hour? I WORKED that job. I did everything I could to get my foot in the door of software development. 

Because of this the majority of the people I have worked with have been H1-B visa holders. We were all hired by staffing firms to work on projects for huge clients. I worked in giant buildings with 2000 people every single one on this Visa except for me. I became good friends with many of my co workers. For many of them I was their first American friend. I picked up on their culture and they got used to things here. I learned Telugu words and they picked up slang. I showed them Instagram dances and they got me doing Pakka Local. I even have Lungi my friend gifted me after I flew 10 hours and drove another 3 to get to his wedding in India. 

But despite this positive personal experience I wanted to tell you the truth because I always believed that what is right is right and what is wrong is wrong. The majority of the jobs I have worked at over the past 6 years have been clear signs of H1-B abuse. Almost every job I worked at could have been done by an American. Hell it could have been done by a junior developer who just needs a little bit of training. Because of this I began to research the program extensively. 

Its strange that when we bring up H1-B the first thing everybody says is the Cinderella story where a company tries so hard to find a good American candidate, they cant because us Americans all too stupid or lazy and are forced to bring in a foreign worker at a great risk to them. But in my exprience this is simply a nonsensical fallacy. The majority of H1-B visas go to tech staffing companies. These guys are the likes of Cognizant, Wipro, Tata and Infosys. Do you know what city in America has the most H1-B visas granted? Is it Mountain View CA? Is it Seattle? Is it NYC? NOPE Its College Station Texas, the home of Cognizant. The number 2 city is Richardson Texas the home of several other staffing companies. These staffing companies abuse the system terribly. They underpay their workers, they know they have their workers by the neck so they make them work 12 weeks 6 days a week because if the workers quit they get DEPORTED. They pay their workers WAYYY less then what they would pay an American. There is some myth here that an H1-B worker has to make more then their American counterpart. That is simply not true for the majority of the H1-B candidates. There is a loophole in the law that says if all the companies workers are making an average of $60,000 or more or if they all have masters then they are exempt from the salary minimum. Look at all the big tech staffing companies. Average salary at Infosys is 80,000 a year. This is the salary of a contractor who has to pay his own payroll taxes and healthcare. All the big tech staffing companies have average salaries below 90,000. Many American companies do not even bother with the old fad of putting up job postings and pretending Americans are not applying. The staffing firms handle everything for them. They just fire their local devs put up a contract for the same work and just watch one of the staffing firms take on the project for half the price of hiring local.     

Now imagine all these candidates working in some of the most expensive cities in the US for 80,000 a year. You realize how hard life is for them.That is if you are lucky enough to find a job from the big staffing companies! I had friends working at smaller staffing firms that were abused and used. They had to give cash kickbacks to their staffing company. They had to work overtime every day. They had to rent houses with other candidates they had to lease vehicles from companies owned by the staffing agency. They did all of this because they were to scared that if they spoke up they would get fired and deported. 

The H1-B visa is freaking indentured servitude visa. Even the person who originally drafted it Bruce Morrison, the senator who wrote the dam bill is out here campaigning against it. It is not some way for Google or Facebook to take the most talented developers around the world. Maybe that is what it is for 10% of the cases but the majority of its use is for depressing American workers salaries and hiring and abusing foreign developers who are just looking for a better life.  It hurts American workers it hurts the workers it brings in. It is especially hurtful to  people who lack representation at STEM jobs because the majority of us don't have the traditional means it takes to break into this field and are facing discriminatory hiring practices. Look online for how few junior roles there are these days. Nobody is bothering to hire or train juniors because they can get ""experienced"" candidates from abroad. 

Even if you guys believe that every competent developer all over the world deserves to come work here then why not just make them citizens in the first place? Why have this in between limbo visa where people are abused and live in constant fear of deportation? 

I think its time to take a good long look at this program and make something that is fair to everybody.",1592951546.0,2020-06-23 18:32:26
134,Finally got a job!!!,1321,jtaxx9,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jtaxx9/finally_got_a_job/,87,"This day felt like it would never come honestly... 2020 grad but I've been applying since February. I've sent out over 800+ applications and probably had around 40 interviews but I finally landed one!!! It's a remote job based out of Atlanta with a decent comp. It's been a dark year but today really made it all seem like nothing. If you're struggling right just keep pushing through and be patient, your time is coming. 

I graduated from the bay area and the competition was tough. It felt like there was always someone I was competing against that was more qualified than I was with every job I applied to. I only had one internship as a web developer but I talked about that and some of my other best projects. Something that did help me get more responses was I started applying to remote jobs all over the U.S. 

Good luck to everyone out there! There is hope!!",1605272010.0,2020-11-13 07:53:30
135,Got reported to HR for Swastika (indian religious symbol)?,1313,izyoin,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/izyoin/got_reported_to_hr_for_swastika_indian_religious/,664,"Hey Guys,

&#x200B;

So, with everything being WFH I moved back to my parents home last week. I'm indian and my parents have hindu religious symbols around the home. One of these symbols is a [Swastika](https://en.wikipedia.org/wiki/Swastika). This is an indian religious symbol, and has literally been a symbol for thousands of years (archaeologists have found these symbols in the Indus Valley 5000 years ago). 

It seems that during one of the Zoom calls, a Swastika was visible in my Zoom background, and I got an email from HR today asking me to talk to them on Monday about it.

I don't think there should be any major problem or anything, but any advice on what I should say (and not say) so I stay on the safe side?

Thanks!

&nbsp;

For the record I wasn't aware it was in my background (I see these all the time in my house so I just ignore them) and will make sure it's not in my Zoom background in the future.

Edit:

To be clear, here's a picture of what [I had on my wall](https://www.google.com/url?sa=i&url=https%3A%2F%2Fdepositphotos.com%2F312145372%2Fstock-illustration-hindu-religious-logo-symbol-swastika.html&psig=AOvVaw2KPxbxBy_BvYjhI-tIMhp4&ust=1601190090591000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCLjX5YmghuwCFQAAAAAdAAAAABAD). So it was the hindu Swastika, not what the Nazis stole.",1601120954.0,2020-09-26 07:49:14
136,"I am enjoying WFH. It has significantly boosted my productivity, I have significant amounts of time saved for personal growth and can complete all the house chores without any delays! I hope this becomes the norm in the industry.",1315,gf2unw,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gf2unw/i_am_enjoying_wfh_it_has_significantly_boosted_my/,334,"I am a full-stack developer(node.js) with 3 years and 10 months of experience. I am amazed at how good WFH has been for me.

I have stuck to a routine during WFH and allocated strict times for everything. But I amazed at how fast most of the work is done. I complete most of my work in about 4 hours max, and then I utilize the remaining time for personal growth.

I am currently studying DS Algos and improving my leetcoding skills. Apart from that, I am learning Java and writing distributed microservices in Java. Since I always wanted to learn an actual strongly typed backend language. I already work with MySQL, so wanted to know what the fuss about PostgreSQL was. Apart from that, I am learning PostgreSQL. Learning about performance tuning with databases.

As far as house chores are considered, I am surprised and how much I can get done by staying at home. No delaying the inevitable boring work. 

Apart from all of this, I also completed 6 novels on my newly bought Kindle!

Overall I feel WFH when executed with discipline has lot of benefits to offer.",1588869809.0,2020-05-07 12:43:29
137,I created a site that aggregates new grad tech jobs: newgrad.tech,1296,djnlyb,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/djnlyb/i_created_a_site_that_aggregates_new_grad_tech/,132,"www.newgrad.tech

**Edit: Seeing some comments about how they're no listings in your particular state. We are working on expanding the data sources ASAP--feel free to PM me with any we should be pulling from!**

Not too long ago, I went through the new grad job gauntlet. It's hard enough studying for interviews and carving out time for phone screens and onsites while dealing with classes and midterms… but then you also have to scour the web for jobs actually open to new grads, and apply to them as quickly as possible. I spent hours assembling a spreadsheet of about 100 new grad jobs, and by the time I finished the spreadsheet and started applying some of them had already expired.

So my friend (another recently graduated software engineer) and I created this site (inspired by intern.supply) which collects new grad roles and puts them in one place!

**Filter by State and Company Type**

Want to work at a startup in New York? A Big N in Colorado? Open to either? You can filter jobs by state(s), and company type(s) (Big 4, Big N, Unicorn, Fortune 500, Startup, Other). 

**Data That's Fresh, Never Frozen**

New grad jobs expire quickly because the recruiting season is often really narrow at many companies. We built a tool that automatically checks through our links and flags potential expired ones, and we do manual research and verification as well. We aim to keep the listings updated on a weekly basis, if not more often. We currently have about 200 listings but will be growing that number in the near future! I set up email notifications as well if you want to get notified whenever there's a new batch of jobs--you can scroll down to the bottom of the page to sign up. 

**Open for Feedback**

 There's an email address at the bottom of the site if you find an expired listing, know of another listing we should add, or have other feedback. Feel free to PM me as well with any feedback. I built the webapp and am a backend engineer, so be gentle with frontend/UI feedback :) 

**Made with Love**

I've been part of the CSCQ community for years and it's helped me greatly--I was able to pass interviews, negotiate my salary, and get my dream job (ML Engineer in the city I always wanted to live in) in large part because of what I learned from this community. The site is free and has no ads (~~not even Google Analytics to harvest your precious, precious data~~ edit: due to the sheer amount of traffic this ended up receiving, had to add Google Analytics just to make some sense of it. Sorry, your precious, precious data is now being harvested.). But if you'd like to support the ongoing efforts it takes to build and maintain this, feel free to check out the interview resources page and use the affiliate link to buy CTCI or something. We'll get like, a buck.",1571434552.0,2019-10-18 17:35:52
138,New law bans California employers from asking applicants their prior salary,1293,76da73,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/76da73/new_law_bans_california_employers_from_asking/,181,"http://www.sfgate.com/business/networth/article/New-law-bans-California-employers-from-asking-12274431.php

IMO, this is a game changing new law that just got passed.  All engineers in California should be aware of it.

Thoughts?",1508029087.0,2017-10-14 20:58:07
139,"Lyft lays off 17%, furloughs 5%, cuts current employee's salaries. Uber in talks to lay off 20%.",1293,gacygl,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gacygl/lyft_lays_off_17_furloughs_5_cuts_current/,457,"[Lyft](https://www.cnbc.com/2020/04/29/lyft-lays-off-17percent-of-workforce-furloughs-hundreds-more.html)

> Lyft is laying off 982 employees and furloughing an additional 288... The layoffs account for 17% of the company’s workforce, Lyft said. Lyft also has implemented reductions in base salary for employees exempt from the layoffs and furloughs for a twelve week period. The salary cuts, which begin in May, will consist of a 30% reduction for executive leadership, 20% for vice presidents and 10% for all other exempt employees, Lyft said.

Lyft's email to employees today [said](https://twitter.com/kateconger/status/1255534235596840960) ""We did not initially have plans for layoffs, but now must be prepared for these implications.""

[Uber](https://www.theinformation.com/articles/uber-discusses-plan-to-lay-off-about-20-of-employees)

> Executives at Uber are discussing plans to cut around 20% of the company’s employees... could result in more than 5,400 of Uber’s 27,000 employees losing their jobs... the 3,800-person Uber engineering group could be slashed by nearly 800 people in the coming weeks under the proposed job cuts.

Any lyft/uber interns or new grads getting impacted?",1588207810.0,2020-04-29 20:50:10
140,Beware of Coinbase,1297,7nszwq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/7nszwq/beware_of_coinbase/,291,"I just want to share my experience with Coinbase. I recently applied for a job there and here is how the recruitment process went:

1. standard application + mandatory cover letter
2. 90 minute hackerrank
3. a 6 hour take home assignment

I was going to quit when I was sent the take home assignment because I've never been asked to do such a long task, but they said they would compensate me. So I did it and submitted it. Keep in mind that at this point, I invested a total of almost 10 hours into this company. After a while, I get the generic rejection. However, it's been almost a month since I submitted the take home assignment and I still have not been paid, even after multiple emails.

TLDR: beware of Coinbase because they are unable/unwilling to pay ",1514991624.0,2018-01-03 10:00:24
141,I raised the response rate to my applications from 14% to 50% just by sending follow-up emails,1285,bmzz8t,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bmzz8t/i_raised_the_response_rate_to_my_applications/,129,"A few weeks ago on this sub someone suggested that they've had much better luck with getting responses from their applications when they found someone's email address in the company's recruiting or HR departments and sent them a quick blurb about their application. I rolled my eyes at it at first, but gave it a shot. And in the end, I hate that he was right lol. But the numbers speak for themselves.

&#x200B;

I keep a detailed spreadsheet of all jobs I've applied to, so I started tracking my response rate as well as the conversion of responses -> phone screenings, phone screenings -> 2nd round (tech) screenings, 2nd round -> onsite, and onsite -> offer. For the purposes of this, I consider a ""response"" to be an initial phone screening with a recruiter (1st or 3rd party). For what it's worth, I'm a front end dev with slightly less than 2 years of experience. Here's what it came up with:

&#x200B;

||Total applied|Total responses|Response Rate|
|:-|:-|:-|:-|
|WITHOUT sending follow-up email|65|9|13.85%|
|WITH sending follow-up email|12|6|50%|

&#x200B;

Not only did the response rate go up, but the responses were quicker (usually 1 or 2 day turnaround time), and they had higher conversion rates amongst all steps in the interview process. I won't provide my conversion stats since they're skewed because I accepted an offer, so I stopped some interview processes midway through. The offer, by the way, was from one of the companies I sent a follow-up email to ;)

&#x200B;

The strategy is to find a recruiter or HR person on LinkedIn. A lot of recruiters I found will list their work emails directly in their bio. Otherwise, I would usually just guess that their email was [`firstname.lastname@company.com`](mailto:firstname.lastname@company.com) which was the case 9 times out of 10. My emails consisted of just a couple sentences:

&#x200B;

>My name is <name>. I submitted an application for the <position> just now, and I wanted to follow up with someone on the recruiting team, and I found your email on LinkedIn. I think you will find my experience as a <current position> at <current employer> to be a good fit for the role, and I'm excited to hear more about the team!  
>  
>I've attached my resume here, and my portfolio and my LinkedIn profile are below. Please don't hesitate to reach out to me at <phone> at any time.

&#x200B;

BTW, \[here's a link to my job application spreadsheet\]([https://docs.google.com/spreadsheets/d/1hIidVSwJ214ikHE\_xefMfhbKFSoFkVlUWXntKmeGUJs/edit?usp=sharing](https://docs.google.com/spreadsheets/d/1hIidVSwJ214ikHE_xefMfhbKFSoFkVlUWXntKmeGUJs/edit?usp=sharing)) that includes the response and conversion rate formulas. Hopefully someone will find it useful.",1557532458.0,2019-05-10 19:54:18
142,Landed my first Web Dev job - fully self-taught. It can be done,1281,hilm31,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hilm31/landed_my_first_web_dev_job_fully_selftaught_it/,186,"I’ve been waiting a long time to be able to write this post. I’ve seen others achieve this same accomplishment and that was a huge part of my motivation. 

Went from six figure + year job - to just leaving and hoping to find a web dev role. Two big factors currently were corona and I moved to a new city. So the cards were stacked against me but determination and consistency won. 

My self taught course:
Studied elementary OOP and Java about 4 years ago while working full time. Built some small apps here and there and then let it go for a while. Focused real hard on my day job until 1 year ago when I know I had an upcoming move for other reasons. 

I decided to go heavily into web dev and used freecodecamp as my foundation. The site was very useful and gave me a great intro to web dev. I didn’t fully complete each section and all challenges. Tbh I didn’t complete most of the projects. I just made sure I knew the concepts. By the time I got to the data visualization module, I decide to put FCC to the side and build my own react project. 

This is where the magic happened and I encourage all who want to get into development to do the same. Building your first project from complete scratch with no tutorial will teach you more than any camp or course. From downloading you IDE to setting up file structure to running create-react-app on the command line - everything was new to me but I literally Googled everything. Any question I had I just googled it and girded through it. It was slow and painful but you need to get through this learning curve. Just learning standard file structure for a full stack app was never taught anywhere. I found these from reading Stack Overflow, github, FCC forums etc. 

First project took about 2 months - simple text generation app deployed on Heroku and did this all after hours while working 50 hours a week. 

I would like to note also, I was heavily sending commits to github (another thing I had to google / YT to learn) to build up my profile to show employers. 

Once complete it took my project that I was super happy with and started applying to jobs! Turns out, employers won’t hire you based off a text generator app. After 1 month of rejections and about 70 apps I went back to the drawing board and decided to build another app. A messaging application with React. 

Having more knowledge this time around was much easier and I completed a fairly ugly messaging app in about a month using Talk.js. 

Again I took this around and started applying.. nothing. Crickets. Back to the drawing board. Instead of building a new app, I decided to make this into a full stack project using Express and Mongo. The MERN stack. I taught my self about the backend, APIs, databases etc. This was my turning point. 

By this time I felt I knew enough to be deadly but my resume was still lacking professional expirence. I did away with the cover letter and the fact that I was passionately self teaching myself at night. I learned quickly employers don’t care about that. I made it look professional, removed most of my prior jobs and listed the projects I built, was working on and my github account. 

I started to get reply’s! I also totally rearranged my LinkedIn.. making it mirror my resume and listing myself as looking for employment as a full stack dev. The recruiters flowed in. 

In my experience - I came across one recruiter who really helped my up my resume. All the other were a waste of time. What I did was begin messaging companies directly. Going to their site, find the Contact Us form and send them a message. “Hey, I’m a full stack dev looking for a great team to work with. Was wondering if you had any upcoming roles. Would love to talk” short and sweet. 

Eventually I found an awesome company that was happy to have me onboard. I’m now beginning my development career. They’re fully aware of the self taught aspect. 

My advice is think of the goal as having two prongs: the hands on coding and the job search. Invest time in both equally however make sure your dev skills are up to par first. 

Application submitted: 150
Recruiter calls that lead nowhere: 40
Interviews: 10
Offers: 1

Total time spent developing since Nov 2019: ~400 if I had to put a number on it",1593545483.0,2020-06-30 15:31:23
143,Please stop answering questions/posting comments without firsthand experience or evidence.,1281,el52pt,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/el52pt/please_stop_answering_questionsposting_comments/,293,"I work at a prop trading firm. I see comments here all the time saying things like ""trading firms pay $700K to new-grads"", ""you're expected to work 90 hours a week"", or ""interviewers at Jane Sigma will expect you to finish 4 Leetcode Ultra-Hards in forty-five minutes"". These comments are usually terribly exaggerated or have very little basis in truth, and they're typically by interns, who often have not even interned at a hedge fund or prop trading firm.

It's not just finance-related. I often see posts bashing FAANGs or specific companies by people who have never worked at these places, bashing the Bay Area or NYC by people who have never lived in the areas, interns talking about how to become CTOs, etc. Furthermore, my suspicion is that some people making these comments do not even have second-hand knowledge of these areas. They are simply mirroring what they read on this subreddit, which just furthers the misinformation.

I think if you don't have firsthand knowledge or evidence on a topic, you should always preface your comment with where your knowledge is coming from. And if your knowledge is coming from the hearsay of /r/cscareerquestions, it's probably not worth contributing (or at least provide a link to where you're getting your information from).",1578394374.0,2020-01-07 05:52:54
144,Companies that have the respect to send a rejection,1281,iluwsm,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/iluwsm/companies_that_have_the_respect_to_send_a/,153,Fuck companies that ghost people. Getting rejected is disappointing but at least those people have the fucking respect to tell me that they're not going forward with my application. Why would a company not send a rejection or you're not being considered email?,1599173645.0,2020-09-03 18:54:05
145,"I was recently hired by Zytech, a consulting company that creates fake portfolios for their employees. They instructed me to lie in order to get senior-level jobs that I’m not qualified for.",1277,axqkcq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/axqkcq/i_was_recently_hired_by_zytech_a_consulting/,265,"Having recently completed Udacity’s Android Developer Nanodegree, I felt like I was finally ready to start applying for junior level Android developer jobs. I applied for over fifty jobs in one week, scoring a few interviews, and receiving a job offer from one of them: [Zytech](https://www.zytech.io). After speaking with Zytech's CEO over the phone, I was informed that they are a company that takes developers who are just starting out, trains them to get them job-ready, and then assigns them to one of their existing clients. The only catch is that I’d have to be willing to relocate anywhere in the US based on the client's location. They offered $30 an hour plus benefits, which seemed amazing to me (the most I’ve ever made is $11/hr). I was ecstatic, and accepted the offer instantly. As soon as I was assigned to a client, I’d be making more money than I ever had, with guaranteed semiannual raises. Sounds great, right?

&#x200B;

Zytech is based in Atlanta, and I live in Phoenix, so all communication was done via email or phone. Before I could speak to clients, I was first asked to review three apps that their former consultants had worked on, to make sure that I knew my stuff. I reviewed and recreated an Activity from each of them, trying to improve them as much as possible to show off my skills. I was extremely excited and ready to get in touch with clients. Below you can see videos of my apps running alongside the actual apps (mine are on the right).

&#x200B;

[Fly Delta](https://youtu.be/dBvL5MJszPg) | [CVS Pharmacy](https://youtu.be/AHXtOGEteaQ) | [Prime Video](https://youtu.be/6femiDgWfB0)

&#x200B;

Once I had completed all of the app reviews, I was nervous as I didn’t know what to expect. I actually never ended up receiving any feedback whatsoever on my code (that I had spent hours of time and energy on), but, I was told that I could start talking to clients. As it turns out, they didn’t have me work on the apps to show them that I could code, rather, they wanted me to work on them so that I could lie and say that I had actually worked on the published apps. When I say lie, I’m not exaggerating: they fabricated an entire [portfolio and resume](https://i.imgur.com/gtpeCO5.png) in my name that says that I had worked at these companies for \*years\*. Remember – the only experience I have comes from personal projects. I was told that since I was employed by Zytech, I was allowed to ""borrow"" their other employee's experience.

&#x200B;

Friday was the first (and last) day that I spoke to any clients. I was told to follow the resume that I was given when speaking to clients, which included lying about jobs that I’ve never had and saying that I have experience doing things I’ve never done. And the sad thing is, it actually worked. In one day, I had spoken to a dozen clients, completed a video interview, and set up several interviews for the next week. I didn’t feel happy or excited though, I felt terrible. I was lying to everyone I spoke to. One of the clients I spoke to was really impressed with my (fake) resume, which just bummed me out even more. I discussed my disdain with two of Zytech’s staff, the president and performance manager, who both told me that while it is technically lying, since I can do or learn most of the stuff anyway, it doesn’t matter. They also told me that this was a necessary process as I don’t have any real-world experience, and that this is just the way that it is.

&#x200B;

I stopped all contact with Zytech that day. There is no doubt in my mind that this would have worked, but I am not going to lie to someone to get my dream job. It’s just not worth it. If I don’t know how to do something, I can learn it, but I’m not going to sit there and lie to recruiters and interviewers to get something I don't deserve. Unfortunately, though, other people will. I wish this story had a happy ending, but here I am back on the job hunt, with a company out there stealing a large share of the job market by way of absolute fraud. I tried my best to research the company beforehand to make sure that they were legitimate, but there is little to no trace of them on Google (several similar-named companies come up when searching for Zytech), so I hope this can at least be a warning to recruiters and prospective junior developers. I just wasted the past two weeks of my life for this company, so I'm hoping I can at least save someone else's time.",1551850580.0,2019-03-06 00:36:20
146,[Shitpost] Name And Shame: The North Pole,1278,a95j3l,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/a95j3l/shitpost_name_and_shame_the_north_pole/,65,"**Pay:** The pay is abysmal. Since we are the only company on the continent, they can afford to go cheap on labor since everybody is applying here. 

&#x200B;

**Work-life balance:** It is almost non-existent. Our product is used by billions of people, and we work the whole year leading up to a single day for release. We have daily sprints they call 'Quotas' that MUST be completed before we go home. 18 hour days are common. Speaking of home...

&#x200B;

**Living Conditions:** The company decided to build their office as far away from civilization as possible, and they own much of the land there, so building our own homes closer is out of the question. So, they provide us with corporate housing, and I think it's safe to say  the reindeer have a better living space than we do. Meanwhile, CEO is living in a nice cabin with his wife getting stuffed on food we could only dream of tasting.

&#x200B;

**CEO:** He's non-existent in the office. Rumors say he's mythical, but at this point I don't even care. He used to work a lot in delivering our product, but now he outsources his own work to a company in the U.S.

&#x200B;

Guys, don't work here. Company is as cold as the weather. 

&#x200B;

Also, Merry Christmas you filthy animals!",1545691625.0,2018-12-24 17:47:05
147,I got my personal perfect SWE job today (Self-taught in 9 months with project-based learning),1275,ickmuq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ickmuq/i_got_my_personal_perfect_swe_job_today/,245,"Some personal information: I am a 24-year-old female from Germany and have learned professional software development for exactly 9 months. With very much help from friends, family, and Reddit (thank Reddit for reviewing my CV), I landed my dream job today.   


I started sending my applications in July and roughly 20 companies got my applications, from which about 12 companies responded positively (invitation to a telephone or personal meeting). Of those 12 companies, I have 4 offers until yet and 4 still ongoing interviews (which are not relevant anymore since I just signed my contract today). You can assume that I gained quite a lots of experience (positive and negative) with job interviews in the last months' :D   


Since my Bussiness Informatics degree was basically useless and I don't have any professional experience working in the industry, all I have is my GitHub profile ([https://github.com/larapollehn](https://github.com/larapollehn)) where I showcase my personal projects. The interesting thing I observed is, there are two kinds of interviewers. One who has not taken a look at my GitHub profile and the one who studied my code.   


The interviews with the first kind were (almost) always a pain, they would ask me questions about PHP or Java which I don't have any proficiency at. The interview process was also very awkward since they would assume I can not code at all (questions like ""what is the difference between == and === in JavaScript would not be appropriate to test somebody's competence).  


The interviews with the interviewers who took a look at my profile were however really fun, we would discuss the ideas of my projects and how I would implement some specific features. The interviewer from the company I will work for did not ask me any programming questions at all, the questions themselves were more logical and a bit mathematical (since they work lots with Big Data). In the end, I got an offer, but not as a junior developer (like in my application stated) but as a middle-level developer (which a bit scary for me since I don't have any industrial experience at all).  


Anyway, I would like to share my experience and how I learned programming. My choice of tools is JavaScript/TypeScript, React, Node.js, Express, PostgreSQL (I have a little dislike against MongoDB), and Linux.   


From the very beginning, I spent all the time I got on learning JavaScript/TypeScript, Linux (which is very important since things are more simple on Linux). The Java programming exercises from my university certainly helped me with object-oriented programming. I myself find online tutorials on objected-oriented programming sucks, they would explain how to program with Animal, Mammal, and Birds, but anything beyond trivial would not be explained at all.  


I also spent very much time refreshing my SQL knowledge and learning Docker. The roadmap itself was very clear since I have friends as a mentor, who would give my advice on what to learn as next. In my free time, I spent time on Wikipedia reading about basic computer science concepts like operating system, compiler, TCP/IP, and database (I don't have any deeper knowledge about the topics but a rough overview certainly helped).

My first bigger projects was a clone of Paint, I learned very much about HTML Canvas, OOP, and MVC design pattern in this project. The next project was a small Kanban app where I applied React.js and drag-and-drop API.   


To learn more about REST-API, I tackled an RSS feed project (In my understanding, RSS is more or less a REST API) and a weather application (data fetched from Open Weather API) where I also started to implement my applications responsive.  


Non-trivial projects with more complex algorithms are a Sudoku game and a DNA-aligning algorithm (I got the idea from a friend who studied Bioinformatics). Finishing those projects is very satisfying for me, they certainly gave me notably more confidence in my programming skills.    


However, the projects that landed the job offers are TuffiLink and FoxGlove. The first one is an URL-shortener with user authorization, the second one is an e-commerce application. In most of my interviews, I spent often several minutes on talking about those projects.  


On the whole, the journey was extremely fun and I am looking to learn more about software engineering in my first job.   


P/S: Also thank Reddit for reviewing my CV ([https://www.reddit.com/r/cscareerquestionsEU/comments/hv4uuc/selftaught\_developer\_from\_germany\_can\_i\_have\_some/](https://www.reddit.com/r/cscareerquestionsEU/comments/hv4uuc/selftaught_developer_from_germany_can_i_have_some/)). The new CV was the game changer for my career.",1597859190.0,2020-08-19 13:46:30
148,Got fired from Internship for not wanting to sign on full-time,1275,bsbc6m,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bsbc6m/got_fired_from_internship_for_not_wanting_to_sign/,257,"I have been working as a developer intern at SAP in Montreal for the past 5 months.  
A couple of weeks ago, my manager asked our team of 10 people which of the two interns on the team they should hire for a full-time position starting in July.  Up to this point, I had been doing great work and getting great feedback from my team members, and the team chooses me. He specifically asked a member of the team who they would throw off a boat if they had to choose between the other intern and me. Despite this, we have managed to all stay friends and laugh at our manager's actions. My manager speaks to me and tells me they are interested in hiring me full time and asks me if I would be interested in staying.  I ask my manager some questions and tell him what I'm thinking and that I possibly would like to continue my studies and pursue a masters degree, finally, I politely asked my manager what the salary would be in order to help my decision and he gets mad that I asked him telling me how disappointed he is that I would ask him such a question. Despite this, I tell him I would be interested in staying full time and that I have been enjoying my internship thus far.  
The next day, another one of the devs on our team gives his 2 weeks notice as he has found a better job. A few weeks prior, our main DevOps guy found another job within SAP and told our boss that he would be leaving at the end of the month. Our manager threatened the DevOps guy telling him that they will ""have problems"" if he decides to stay on the team and not leave, all the while withholding him from starting his new job with the other team for 2 months, including his salary increase. Now with 2 talented team members leaving, our manager panics and attends our team's scrum meeting (a rare occurrence) and tells the team that he has good and bad news. The bad news is that the other team member is leaving, but the good news is that I have signed on to be a full-time employee. All this without my knowledge and before I even see an offer and what the salary and package would be.  
A couple of days later I receive an offer, however, it is really not that interesting and far lower than the market for software developers in the area and what other interns transitioning to full time have received at the very same company on other teams. I try to negotiate with HR, but they tell me that my manager has told them that the offer is non-negotiable and final. I decide to tell HR that I am not interested in the offer and would like to kindly reject it and continue with my internship. My goal at the moment is just to go back to school and do a Masters. At the end of the workday yesterday, HR sends an email to my boss to tell him that I have rejected the offer.  
I come into work this morning and begin to work as usual. I'm in the middle of helping another intern, and my boss takes me aside and tells me that my last day of work is going to be the end of the week since I am not a team player and I rejected the offer after he told the whole team that I am staying full-time. I am shocked question if he means this Friday is my last day, and remain silent.  I go back to my desk and continue my work while discussing other matters with my coworkers. My boss again takes me aside and tells me that I can actually leave today if I wanted to. I asked him if he could give me 5 minutes to process all the information and decide. During this time I call HR to see if I can do anything about this and to understand my rights, but they tell me that since I am an intern, my boss can terminate me at his discretion.  I take my 5 minutes and come back to see him and tell him I would like to stay till the end of the day to do my knowledge transfer to the other teammates and to not completely screw over the team and finish up my tasks and finish documenting my work. My boss tells me that when I was taking my time to think he was taking his time and wants me out immediately. He follows me to my desk and watches me pack my stuff. I try to say goodbye to my teammates who are all shocked and sad, but before I can even finish my goodbyes, he comes and forcibly removes me, walks me out the door and closes the door behind me. The DevOps guy also gets told that today will be his last day and not to bother staying until the end of the month.  
My team comes to see me outside the office and tell me how disappointed they are at what happened. The other intern decides to quit on the spot after the whole ordeal and not finish his internship in which he had a few weeks left. The team that was at 10 is now down to 6 with only 1 dev left, which is a shame as I really enjoyed working with the team and they all said how much they enjoyed it as well. The day prior we had a meeting with our big bosses from Germany where I did a demo on what I had been working on, and they were all super pleased with our work as a team and told us that we are the best team that they have in our division, and we are leading the charge in cloud development at SAP. A couple of my coworkers under the same manager have already told me that they are fed up and are already looking for other jobs, and this had crossed the line for them.  
Is there anything I can do about this in Canada? Do I have any rights in Quebec or Canada concerning termination of an internship without any prior notice?  My university is in another city, and now I am stuck in Montreal, not knowing what to do. Has anyone experienced anything similar?",1558692454.0,2019-05-24 06:07:34
149,Are there any other tech companies paying workers to stay home (no work needed) due to COVID-19?,1270,juvz3e,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/juvz3e/are_there_any_other_tech_companies_paying_workers/,208,"I work in food service in the cafeteria of a Microsoft campus. Due to the pandemic, Microsoft has closed the cafeteria and allowed ALL of the cafeteria workers on my campus to stay home and literally do no work at all and they're still paying us the same amount each month.. They've even decided to give us a 2% raise recently. It's been 7-8 months now and I have not gone to work at all but they haven't fired me or any of my co-workers and they're still paying us every month. What's even crazier is that they don't expect us to come back to work until sometime in early 2021, and possibly longer..

I was wondering if there are any other tech companies that do this besides Microsoft?",1605511761.0,2020-11-16 02:29:21
150,Anyone starting to hate working from home?,1264,ft6k92,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ft6k92/anyone_starting_to_hate_working_from_home/,518,"I've been working from home since mid march since our company told us to do so because of this virus situation.  First week, I was so happy. Now I am starting to hate it.  I am unmotivated and lazy.  I can feel it from my team mates too.  The daily ""stand ups"" are shorter and barely any progress.  Anyone else feel the same?",1585797292.0,2020-04-01 23:14:52
151,I got my first job offer!,1262,ilcype,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ilcype/i_got_my_first_job_offer/,108,"So I interviewed with a company last September during my last year of college for an internship with a pretty well known company. I got the internship offer in October and I started in June. The internship was for the summer in software development on one of their teams, with the possibility of full time at the end of it.

The pandemic happened and I was so afraid of my internship getting cancelled, but nonetheless they decided to continue remotely and luckily I have been able to work from home since then. These past months have been tough, I wanted to quit because self doubt and just stress of learning on the fly, feeling hopeless, and most importantly imposter syndrome. However, yesterday I was offered a full time position with the company with pay more than I would have ever imagined. 

I’m extremely happy and grateful for this opportunity especially in times like this. I’m also extremely grateful to have the same company I interned with offer me a full time position as a full stack developer. I’m excited to start my career with this company. 

Just thought I’d share my excitement. :)

Edit: Thank you all for the awards. :)

Edit: I appreciate everyone’s positivity. Thank you all so much!",1599101708.0,2020-09-02 22:55:08
152,Anyone else feel like the people who plan offices for software developers have all vastly overestimated how much we like foozeball?,1252,d43iqw,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d43iqw/anyone_else_feel_like_the_people_who_plan_offices/,219,"Every goddamn ""hip to the groovy jive"" office has a foozeball table. Why?",1568485780.0,2019-09-14 14:29:40
153,Name and Shame: Capital One,1250,chrdif,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/chrdif/name_and_shame_capital_one/,274,"Let me just start out with this initial disclosure; I have never been interviewed by a company more dismissive, disrespectful of my time, and frankly lazy.

Even though this is a name and shame, they were very organized and did not ghost me. Which I do appreciate.

That being said... What the fuck capital one? 

Everything was fine until the final interview.

So if you aren’t familiar with C1s interview process they have a final “power day” where they do a bunch of rapid fire interviews with a bunch of people in the company.

This is flawed because every single one of them ran out of god damn time, I didn’t have a chance to as a single fucking question. 

Every single person that I interviewed with in person was only concerned with immediately bailing to go to another interviewee that I imagine they also gave 0 flying fucks about.

They gave some coding refactor challenges on a piece of paper, literally the stupidest shit ever, it was just a god class with a bunch of if statements. Someone with 1 week of Java experience could have understood this. (Sr software position btw).

So the interviewer ask me to refactor it and I do, and any question I ask gets shot down, WHILE HE IS SITTING ON HIS GOD DAMN PHONE TEXTING WHILE INTERVIEWING, not just a one off thing, no no.

He was texting for damn near 50-80% of his portion of the interview. I almost, and frankly should have, walked out.


I had around 5 different people total in person, here’s how I’d say it went.

0/10 Business guy totally displaced from the tech. He talked the entire time, asked no questions, I had no chance to respond or as questions.

-fuck you/10 Guy fucking texting and being a general asshole. Obviously didn’t want to be there. 0 feedback, this was the if statement guy

4/10 One was a bit of a prick, two person interview. It was pretty loosely goosey. 0 feedback and immediately left when hitting their timestamp

2/10 Guy was kinda a sperglord, asked questions that he said couldn’t be memorized. If anyone wants a link to the article he got the questions from in order to memorize the solutions LMK. 0 feedback during the entire time.

They can eat my fucking shorts, let me arrange it in the business 101 STAR solution format for you “professional businessmen”. (I’m not even fucking joking here they used those dumb ass businesses 101 acronyms for common sense shit).


Edit: this blew up. Been a lot of good discussions here, had a good time y’all. I’ve gotten a job at a really awesome finance place that I’m looking forward to so all is well!

@capital one Thanks for leaking more social securities asshats! Is this the 8th or 7th time now? I’m sure you’re recruiting only the best tech wise... Let’s write down a SMART solution to not do it a 9th time.",1564107294.0,2019-07-25 22:14:54
154,Does anyone else feel like this subreddit is a bit cynical?,1243,dmybah,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dmybah/does_anyone_else_feel_like_this_subreddit_is_a/,296,"Been lurking a bit, and honestly, 90% of this sub seems to think everything is a bad thing. Someone finds something good, everyone starts coming in on how it's probably a trap.

If you get a role that isn't SWE you're wasting your time or going to be trapped. Basically, if you have a CS degree, it's SWE or the highway.

All start ups fail.

Anyone who doesn't make you white board has awful coders

or even vice versa, reject all companies that give you a coding test.

Don't speak to recruiters

If it's family or team oriented stay away.

If you aren't offered remote, don't apply. (Literally saw this one 2 days ago in a comment. I get it, remote sounds great and a lot of jobs offer it, but people have to go to work in other jobs. Don't avoid an opportunity because they want you at the office)

If they're not offering top pay, don't take it. It's entry level roles, and people are talking about you shouldn't accept lower that $70,000 in an average/low income state. These kids are coming out of college, if someone offers you $55k for a junior role, it's not ideal, but take it to start racking experience, and apply for other jobs while you're already in the field.

You should expect 200+ applications and maybe 10 call backs and even then probably no offers. Takes months or years.

Financial SWE is a poor role. Looked down upon.

I don't know. I feel like this subreddit is for new grads, but we're basically pushing them away from so many jobs. Your first job probably won't be your last. Or maybe it's not ideal, but it's your foot in the door. This subreddit seems to tell people, there are 500,000 jobs out there, but only 2,000 are perfect or great quality. Only apply to those 2,000. There's a lot of missed opportunity. Tell people to be cautious, but don't tell them to be scared. Also remember, if you have 15 years of experience, of course you wouldn't accept half of these entry roles, it's because you've been in the business so long that you know your worth. But getting your foot in the door, just so you can put on your resume ""I have ____ years experience."" Or so you can atleast start to see work life.


Now i'm not saying, stay in a company you hate. I'm saying, for you students just graduating, your focus is getting in. Once you're in, and you know your worth and quality and have that leverage, then you can start being picky, but there are a lot of jobs, and not all of them sound ideal, but sometimes you get there and you're like ""Wait this isn't bad.""


Also, can we kill the ""I want to go to work, and go home"" attitude. Not saying you should stay at work and work OT. I mean, graduates are coming in so independent, that they are a pain to work with. ""Don't talk to me. I'm putting my headphones in, and i'm working so I can go home, I don't want to be here."" Projects revolve around a team, you don't have to go to parties and all these events, but come in with an attitude of ""Teach me. I want to be here. I want to be better. I'm ready to learn.""",1572042910.0,2019-10-25 18:35:10
155,SQL is terrifying,1236,jzjks4,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jzjks4/sql_is_terrifying/,324,"I just tried to update the values for a row in a table used to perform quality checks on the company’s most important database tables. but I accidentally had a semicolon before my WHERE clause, so it updated every single record in the table with the new values. And there were no backups",1606173863.0,2020-11-23 18:24:23
156,Just accepted my first job offer with no leetcode and what I've learned,1245,jd5bd5,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jd5bd5/just_accepted_my_first_job_offer_with_no_leetcode/,183,"Sorry for the wall of text in advance!

I am still in school so I am pretty surprised (super senior though), especially because of COVID. I started applying in the summer and I did get a lot of feedback, I just think I didn't realize how serious the leetcode grind was and how most jobs I applied to administered hackerrank or a live coding session. After quite a few rejections, I decided that while my experience and resume was good that I need to work on my technical interviewing skills. So I decided that I wouldn't aggressively apply and instead passively apply and work on Leetcode until the next application cycle (next year since I wont have new grad status until starting spring) and if something hit it hit.

Well something hit. I ended up interviewing with a startup in the New England area who absolutely loved me. Their team was great and any technical portions were more conversational and about projects I had worked on. In the end I accepted an offer for 72K with relocation assistance, profit sharing, unlimited vacation, and some other good benefits.

What I've learned in my three months of applying and over 200 applications is:

1. Do the leetcode grind to a point but do not be consumed. I think the earlier you start the better, because you won't be cramming and you'll have more time to let the information sink in through repetition and practice. For me, I didn't start too late, but with this being my first real application cycle where I sent my refreshed resume out I did have some anxiety because I didn't know what to expect. All but one company (the one I accepted the offer from) asked me some sort of leetcode question or had a technical interview.
2. It doesn't matter if it is a big or small company they will still put you through the ringer. After the first two months of applying I realized that without decent leetcode practice I would keep getting rejections. Almost all interviews asked some sort of leetcode question(s) and they were in the easy to medium range.  All interviews had a minimum of three interviews (including the final).
3. It mostly doesn't matter where you apply. This sub likes to post that if you apply anywhere in the midwest or low cost areas you'll instantly get a job or it will be a lot easier because they're hard up for talent. That is simply not true. I've sent applications to popular tech states like California, Washington, Texas, etc and states like Kansas, Michigan, Arizona, Virginia, etc. And it was the same experience. While my Indeed and LinkedIn reports for tech states would show 1000+ applications for a position the other states still had applicants in the 100's or sometimes more. I think because of Covid a lot more people are applying and in droves in all the areas you wouldn't think either. Also if you live in Florida, you might have a tough time if you're only applying here. Most companies are not looking for new grad or entry level. I had a friend who just got a job here after almost a year since graduation.
4. Big N and top company interviews come from either networking or dropping your application when it first opens. I had the opportunity to interview at big companies like Amazon, Microsoft, IBM, fortune 500 companies, and national labs mostly because of friends or graduates from school.  I also reached out to recruiters on LinkedIn with some success.  I also wanted to see if my resume was decent enough to cold apply and so I applied when applications were first starting to come out as well and got decent feedback. For networking I always touched base with graduates from my school and started a conversation about their happiness at work and their work culture. For many of us who want to work at a big N, we know most of the answers to questions about the company and work culture, but the employees of those companies do enjoy sharing their joy. Make the conversation less about how you want a referral and more like wow you're working on really cool things and you love working there so much do you think you could help me achieve that same level of satisfaction because what a dream?
5. GPA doesn't matter as much as you think. I only got asked my GPA if I applied to or was interviewed by companies at my career fair. I thought based off of those experiences applying was going to suck because I had a 2.1 GPA.
6. Internships Matter. Most companies gave me the time of day because I threw myself at any campus tech opportunity. I work a really easy web dev job on campus, but maintained it for a year and recruiters loved that. I also worked at a student startup as a dev and later CTO as well and showed my impact there. They liked my initiative and drive for entrepreneurship with that one. I did it for that reason. It was unpaid, but I figured most companies would like that I expressed in interest in tech ownership. That became sort of a highlight on my resume because it showed an extended project turned LLC.
7. Less than 100K doesn't make you a failure. A lot of new grad and entry level jobs were offering less than 100K even mid tier companies. The highest I came close to getting but failed the final interview was around 80K with I'm sure some wiggle room for negotiation. That 100K+ is certainly achievable if you work for a top company off rip, but not everyone can land an Amazon or Google job as an entry level and that is OKAY. The biggest thing for me to realize is there is always room for a salary improvement. I may not make 100K + now, but its not unreasonable for me starting here to do so in the next year or two with a job hop or promotion(s). You're not a failure because some of your peers beat you to it by a year or a few. Even now, I accepted the offer knowing that within the next 6 months or a year I will be pushing for a higher salary. Also we're all still killing it! These salaries and our career growth are amazing, especially in this current economy! [Less than 10% of Americans make 6 figures anyway](https://finance.yahoo.com/news/more-millennials-have-higher-salaries-than-gen-xers-boomers-185011477.html?guccounter=1&amp;guce_referrer=aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS8&amp;guce_referrer_sig=AQAAABFbFNklIuN5OuD7a2Ox4YTv-UiMLHvrj6vouCKjHJWU0fQgiFRYQranBd_RQSxeq5HFz9-OZSX7S_19bsUpT3DMoh5KllyMqfjAWNQHCDDQDKu1zJU-cjTQ1mxDdOEz7kxst2LKJlfNXQ3-Sg77Ne1EFLbqdS6--PpxcQyFyUrL)
8. It's also okay to feel dejected and like crap! It is a hard market and as new grad and entry level it can feel awful when you're applying in the hundreds with little feedback. It really makes you question your skillset and competency, especially when your friends are doing much better than you. Don't look at your friends success unless you're asking them for advice or a referral. Otherwise, be sad, complain for a minute, and within the same breath go straight back to applying. Something will hit eventually!

I just wanted to post my thoughts. I know this sub can make getting employment seem dismal or like you're a failure if you didn't land a big N, but honestly just having gainful employment with the prospect of growth is a blessing. Ya'll we can do it!

Edit: For those who don’t have any internships, I wouldn’t say you’re a failure either or it’s hopeless. I can only speak from my experience and how it was applying with internships and what made it easier. I did have friends however who had none. One friend only had research experience and got a great job at a national lab (mentioned his rec above). Another had 0 and works at Lockheed Martin. A closer one, only minored in CS and works for a private making decent money in Florida. He actually got a job in state, while I wasn’t able to get one. Meanwhile I had internships and at the time wasn’t get any bites. Really it’s all perspective. Your time will come!

TLDR: Don't give up. You aren't worthless. It will happen for you too.",1603005251.0,2020-10-18 03:14:11
157,I have finally done it,1239,9sdzc1,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9sdzc1/i_have_finally_done_it/,186,Snip,1540855058.0,2018-10-29 19:17:38
158,"Tip: ""fake it til you make it"" refers to emotions, not skills/knowledge",1240,8ufm10,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8ufm10/tip_fake_it_til_you_make_it_refers_to_emotions/,93,"I occasionally see the advice ""fake it 'til you make it"" brought up in the context of being a junior developer and in relation to impostor syndrome. It has always bothered me for couple reasons: 

1) If someone is worried about being an impostor, telling them to 'fake it' seems to be just adding to that pretty directly -- the very *definition* of an impostor is someone who fakes something. 

2) In healthy environments, it is rather hard to fake skill or knowledge for very long. You'll run into problems delivering and ultimately end up in a conversation about performance.

However, I've recently realized the conditions under which that phrase make sense: When the 'it' you faking is your emotional state.

So for example, if you walk into an interview and inside you are feeling nervous but you use confident body language, that will make you feel more confident. That 'faking it' actually caused a change in the real situation. 

---------

In contrast, if you are working on a problem involving debugging some container setup and you try to ""fake it"" and act confidently in your knowledge and ability to solve the problem without help...that won't actually tell you anything about port forwarding or cgroups. Instead, when you start 'faking it', you'll feel like you have to go heads-down and do a bunch of research yourself in order to be able to live up to whatever you promised about your knowledge. This is the *wrong* thing to do and can lead you down a 4-day rabbit hole... which holds your team back.

How to approach situations where you feel tempted to fake knowledge or skill relies on a few things:

 * [Know that confidence isn't about believing you are smart. Its about believing its okay to be ignorant](https://www.youtube.com/watch?v=0Tk82hEHNnY). If you abstractly know this to be true but you still get butterflies in your stomach, that is okay and a good place to apply ""fake it til you make it"" until your intuition catches up with your logic.

 * Be in a team which allows you to [have the psychological safety](https://hbr.org/2017/08/high-performing-teams-need-psychological-safety-heres-how-to-create-it) to admit a lack of knowledge. This is one of the most important things to judge a team on when you are interviewing. Building this trust is also one of the things important to do in 1-on-1s. (NOTE: This is mostly on management to be supportive but partly on you to swallow the discomfort of taking on your insecurities)

 * Have self-knowledge which close-to-correctly reflects your level of skill. If you don't know anything about webpack, you should want to believe that you don't know anything about webpack. If you know a sizable amount about webpack, you should want to believe that you are pretty good at working with webpack. (NOTE: I should make this section more clear. There is also a category of skill where you’ve never worked with the specific tool but could spend 30 minutes and judge the scope of a problem or decide what questions need to be answered. There’s also something to say about getting out of your comfort zone and stretching yourself while still keeping a cool comminicative head)

 * [Be skillful in asking for help](https://jvns.ca/blog/good-questions/) in a way that sets your answerer up for success. Be able to ask questions like ""who is a good person to talk to about X?"" or ""what are the important things to focus on when learning about Y?"" which let you guide your learning.

Your job as an engineer isn't to know all the things but to take responsibility for communicating about and negotiating for the resources you need. That way, your team lead can delegate something to you and walk away thinking ""okay, that's being taken care of and I can worry about other things. If anything comes up, he'll let me know"" Those resources can include guidance in planning something, time in your own roadmap to spend explicitly learning about something, or a half hour on someone's calendar to walk them through your plan and challenge assumptions you didn't realize you were making. Without the ability to be honest with yourself and your team about gaps in your knowledge, it is incredibly hard to work up the courage to ask. But with that self-knowledge and a healthy organization, it often only requires asking.

[""If you know the enemy and you know yourself, you need not fear the result of a hundred battles""](https://www.youtube.com/watch?v=FdbloUQrDLw)

EDIT: verb tenses

EDIT: Thank y’all for the comments — they’re helping me clarify my thinking on this. If you’ve got a different way that you read that advice, please post it; I’m all ears.",1530181769.0,2018-06-28 06:29:29
159,Would any of you be interested in livestreams of an experienced candidate solving questions?,1231,b64z0c,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/b64z0c/would_any_of_you_be_interested_in_livestreams_of/,143,"For context, I'm someone who's gotten offers from Google, Amazon, Uber and several other tech companies in the past. Would anyone be interested in watching me walk through and solve these problems in real time? I usually struggle a little through all questions but end up solving them.

Also, open to suggestions on which problems to solve. Thanks!

**Update #1**: Well the response has been overwhelming. So, I will make my first video tomorrow (Friday) evening at 7pm EST. I will try to do at least one stream every week.

* I will pick something that's Leetcode medium. In order to keep it honest, I will pick something at the beginning of the livestream.
* I will timebox myself to 45m.
* I will use my iPad Pro to emulate writing on a whiteboard.
* Chat will be enabled. I will have someone moderate the YT comments/questions for me to make sure someone doesn't give me hints.
* Videos will be available for later viewing for those who can't watch it live.

Here's my YT channel: https://www.youtube.com/channel/UCM6SejOjga8sIlhJlJdHchQ/
PM me for questions or comments.",1553724744.0,2019-03-27 18:12:24
160,I have become a soulless zombie and I honestly do not care.,1225,g0yuex,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/g0yuex/i_have_become_a_soulless_zombie_and_i_honestly_do/,299," 

In a retrospective recently, no not a code review, I become aware that my behavior has completely changed. My family and old friends do not recognize me as the same person I once was. My life is completely different now than it was just a few short years ago. My mother looked at me over video conference at Easter and suggested this, and I was quick to brush this off, but she was absolutely right.

I used to be quite social and active. Through college I was an avid runner and involved in an honors fraternity. Never went to an elite school but always was driven by a passion for technology. I made many friends and frequently spent my weekends with them. That soon changed. I’d say it was after my Sophomore year I got consumed into the world I live in now. My first internship, at a small and unknown digital media company. I quickly discovered minimum wage was not the “standard intern pay” I had been told and people all over the world were making full time wages at much larger tech companies. From there I was hooked.

Junior year on I balanced internships at 30 hours a week with 18 credits in the evenings. I managed to score a salaried position while I finished up my classes and then spent a few months using every extra hour to build a portfolio and do every single DS&A (Now leetcode) problem I could find. It could have been my birthday, I was still going to do my evening leetcode.

Even after this I would work and consult, work and consult, find new jobs on a semi yearly basis, enhance my portfolio, more leetcode. Soon 5 years had gone by. I was nearing 27. Then I started with building up start ups and selling apps and ideas. Then came 32. Now what? I haven’t had a love interest in nearly 10 years. I have no interest in a family. No interest in doing anything but developing towards my own success. And I am successful, but I have given up the pursuit of everything else in the process. Forgotten what it means to be human. And the saddest part is… I just don’t care.

I don’t notice it at all. I see pictures of those I graduated with and they have families, it does not phase me. Tonight I had to convince myself to step away from my work, have a drink, and compose this. So that somewhere, someone, will heed this and not fall victim to my own misdoings. You need not torment yourself with your work, you live life for purposes beyond just self success and human innovation. Don’t seclude yourself, else you may find it far too late to attend to your mistakes.

In a way I still have no regrets, I did what I set out to do, and will continue to do so, regardless of any intervention. I surpassed every expectation I ever had for myself. But I desensitized my humanity in the process. And this is something I can never take back.",1586867287.0,2020-04-14 08:28:07
161,Warning: do not use Triplebyte anymore. They are taking your information and creating a profile including your Triplebyte test status. You have one week to opt-out before it goes live.,1227,gozvlk,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gozvlk/warning_do_not_use_triplebyte_anymore_they_are/,188,"https://news.ycombinator.com/item?id=23279837

As expected Hacker News swiftly dropped it off their front page on a Friday evening. Please make sure you opt out if you have ever signed up for Triplebyte in the past. Apparently it’s very hard to find and you might need to provide government identification and it takes 30 days to remove this profile (edit: to delete your account, not opt out).",1590242487.0,2020-05-23 10:01:27
162,Let's not forget how much luck is involved in the job hunt,1224,e44x9q,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/e44x9q/lets_not_forget_how_much_luck_is_involved_in_the/,148,"Trying to get your first internship or job, trying to get an interview, and even passing the interview itself: let us not forget how much luck is involved in that entire process. Even though I can say I worked hard to get to where I am, I would be delusional to think that it was purely due to my own efforts. Sometimes it's just out of your control.

That's not to say it's ALL luck, of course not. You will need a good resume to pass screening and you'll need to be well prepared for the technical interviews, but there are some things that are just out of your control. Maybe a recruiter just so happen to get a text while looking through your resume and passed it over, or maybe your interviewer woke up on the wrong side of the bed and gave a particularly difficult problem.

The only thing we can do is prepare to the best of our abilities and then hope for the best.

Don't be bitter about it; life is not fair. Instead, keep trying your best and you'll be the next one with that success post. Good luck y'all.

EDIT: lot of people bringing this up, so let me reiterate. Not at all am I saying it's ALL luck; you definitely need to work hard. But know that you can only do so much before it is out of your control. You can do EVERYTHING right and still fail. Don't dwell too much on those failures and keep trying your best! Luck favors the prepared!",1575182735.0,2019-12-01 01:45:35
163,A company being pressured to do 50/50 gender parity workforce,1222,if2z4u,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/if2z4u/a_company_being_pressured_to_do_5050_gender/,807,"Obviously am using a throw away here.

 

But I would like to rant this out. 

Full disclosure. I am all for empowering women to fight against harassment. Give women a lot of tools to fight against people in power of the company. I am also all for higher maternity benefits. Its a shame that maternity benefits are not regulated in the country and there should be higher benefits. And I am against people viewing that being a women means that they have less tech skills than men. I am also all for MINIMUM % of females at the company. 

&#x200B;

The size of the company is around 100 people. Of which 40 are in tech. Of the 40, 12 are women. The rest of the 60 people departments are pretty much 30 men and 30 female. 

&#x200B;

Ever since, Canadian PM made sure that his cabinet will be 50% female and 50% male, in my experience there is a huge pressure for companies to close the gap that being employed between women and men. 

&#x200B;

During leadership meetings, women are constantly asking why they cannot find more female developers and constantly tell the leadership team to remove bias for women. At one point, one of them threaten to make it public that the company is not trying hard to be 50% women in tech. Cause if the PM can do it why can't the company do it? Already bootcamps and dev degrees in canada are 50/50 gender parity. [https://devdegree.ca/](https://devdegree.ca/) So there should not be any excuse for the company to not be completely 50/50 gender parity. 

&#x200B;

Then came the hiring for 5 more developers and even though we were open to all genders. I was a part of the hiring team and We disregarded several amazing male candidates. I was told privately that they have to do this because of constant pressure from the employees plus they need to look good in from of investors. 

&#x200B;

Finding good female candidates were extremely hard eventually we did find some but they were such in high demand its difficult to convince them to join our company because we are still pretty new. In the end what happened was that we had to offer them a higher salary. In the end we hired 5 employees where one was male and the other was females where some of the females have 15k higher salary then their male counter parts even though imo the male is stronger than them technically. i was part of the hiring team so i have the assessments.

&#x200B;

The purpose for me writing this because i wanted people to be aware of it. IMO, this is not the right direction to solve gender discrimination. But companies are being forced to do this out of the fear of losing investors. 

&#x200B;

You may think its okay to hire people who are not the best but they are qualified females, please state your arguments so that I can discuss with you. To me this is forced and it may cause even more gender discrimination. For example this is happening to bumiputera in Malaysia where people from other races view them that they did not earn their success and take advantage of the system. 

  
Regardless, I am all for minimum % but not completely close the gap. Minimum% because if a boss is clearly toxic against women then they could back each other to fight against the toxicity. 50/50 is ways too forced and imo will have a larger adverse effect than the marginal benefit it will provide.",1598217282.0,2020-08-23 17:14:42
164,I compiled a list of System Design Resources (Awesome System Design list). I would love contributions and engagement. - GitHub,1214,i64ft7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i64ft7/i_compiled_a_list_of_system_design_resources/,64,[https://github.com/madd86/awesome-system-design](https://github.com/madd86/awesome-system-design),1596941242.0,2020-08-08 22:47:22
165,"I had trouble getting bites on my applications. Then I stopped checking ""I have or had a disability.""",1212,88b07i,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/88b07i/i_had_trouble_getting_bites_on_my_applications/,318,"This is kind of interesting and disappointing to me. I have a good resume, a 3.93 GPA, a couple of letters of recommendation (one from the editor of one of the biggest CS research publications in the US), and a not-too-shabby portfolio. But out of nearly 70 applications - mostly to local companies, even - I only got two responses. Didn't get either opportunity; they had hired someone else before even scheduling my interview.

I've never thought twice about checking, well, any of the boxes for reporting demographics or disability status. Honesty seems important when it comes to things they'll learn anyway in the interview. Plus, they talk all about how they legally can't discriminate, and they make a big ruckus about how that they even get bonuses from the government for taking on disabled workers! My disability is minor - I have a crappy lower back that I take medication for and it doesn't really impact anything that I do, but it was notable enough that I ended up registered as disabled. So if a company wants to use my semi-trivial condition to make stacks off the government, why not!

But then I started feeling really down on myself about not getting a single bite on these applications. Threads on this forum always say *you need to stop looking at the big companies and go local*! Well, I was already doing that; I don't want to move out of state, and certainly not to California or Seattle or anywhere else with outrageous cost of living, so I only applied to the likes of Google if they had openings in the local office. *You must have a bad resume*, well, apparently it's bad in a way that no career professional could spot, because I had plenty of people look it over. *Your portfolio must be underwhelming*, but in all of my applications, not a single person even viewed my portfolio.

It really sucks to get shot down when you should be at the very top of the candidacy list. So I finally decided on one simple lie on my application. I didn't click ""I choose not to disclose my disability."" I went all the way over to ""I do not have a disability"" while applying for 8 positions.

I got 5 emails and one phone call that week. One email asked me in the very first exchange what my expected salary would be. They didn't disappear when I gave them a vague range about 10% higher than the local going rate - they called the number I left in my response 2 hours later.

I'm kind of overwhelmed now by all of it, really. It feels like being thrown into the deep end. I'm being really skeptical as I approach these interviews I've got lined up because it feels like there has to be some catch here. While it could all just be coincidental, it seems unlikely - and that really makes me angry. I think that's what I'm feeling most right now. I've been told that disability information typically isn't even shown to the hiring folks for the sake of legal liability. But wow.

Has anyone else had this experience?

Edit: Whoa gold, thanks so much guys! It's both depressing and encouraging to read the replies here. I think what I'm maddest about is the idea that there were some good companies I may have had an opportunity to interview with if I hadn't checked that box - the places I'm talking with now will be good money and okay work, but they're definitely not in fields I'm excited about and are mostly my ""bottom picks."" So part of me still hopes it's a coincidence or a statistical anomaly. Hopefully experience and networking with these companies will at least get me into CS work that I'm more passionate about!",1522451160.0,2018-03-30 19:06:00
166,I interviewed with ~20 companies for a Senior Software Engineer position in Bangalore and Toronto - Here is a list of questions I was asked,1211,ek6mik,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ek6mik/i_interviewed_with_20_companies_for_a_senior/,225,"Hello folks, 

I stumbled across [this older post](https://www.reddit.com/r/cscareerquestions/comments/apu3ni/a_list_of_questions_i_was_asked_at_top_tech/) on r/cscareerquestions, and wanted to share some questions I was asked during my recent interviews as well. I decided to switch jobs earlier this year and interviewed with multiple companies in Bangalore(India) and Toronto(Canada). The following are some of the companies I tried (all non-FAANG):

1. Atlassian
2. Shopify
3. Swiggy
4. Instacart
5. Okta
6. Borealis AI
7. Arista Networks
8. PaytmLabs

The following is a (non-exhaustive) list of questions I was asked during different rounds.

**Coding**
1. Find word in a 2D matrix
2. Top K frequent words in a list
3. Find median for a stream of integers
4. LRU cache
5. Least Common Ancestor in n-ary tree
6. Closest element in BST
7. [Print numbers in sequence using 2 threads - one for odd and one for even](https://knpcode.com/java-programs/print-odd-even-numbers-using-two-threads-java/)

**CS + Programming Language fundamentals**
(My language of choice was Java)
1. How are indexes implemented in a SQL database? How do reads/writes work with indexes? (This was the most common question asked across all the companies)
2. What is the `volatile` keyword in Java?
3. What are the different transaction isolation levels in a SQL database? (Followed by probing questions on some of them)
4. How does a `ConcurrentHashMap ` work in Java?
5. Explain CAP theorem and eventual consistency.
6. Garbage collection

**System Design**
1. Design a pub-sub system without persistence
2. Design a URL shortener
3. Design a email/messaging system
4. Design Quora feed page
5. Design a system for processing jobs(whose information is stored in a database) in an exactly-once fashion
6. Design a Youtube clone
7. Design a Json Parser
8. Design a data pipeline for a Machine Learning system
9. Design a multi-level cache

**Behavioral/Managerial Rounds**
1. What is the most difficult technical challenge you've solved?
2. Tell me about a recent project that you are proud of. Why are you proud about it?
3. How do you mentor other engineers in your team?
4. A time when a deliverable got delayed - 1. not because of your fault (eg. requirements changing) 2. because of your fault - How did you handle it? How did you communicate this to impacted teams? What did you do to ensure it doesn't repeat?
5. What challenges are you looking for, in your next company?
6. Tell me something that's not on your resume.

Edit:
I am a computer science graduate with around 8 years of experience, since some folks in the comment wanted to know.",1578220036.0,2020-01-05 05:27:16
167,"A senior engineer at work got upset with me and basically told me I was a ""diversity hire"" and I don't know what to do.",1200,cp2ew5,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cp2ew5/a_senior_engineer_at_work_got_upset_with_me_and/,354,"Hi guys,

I started my first CS job out of college a month and a half ago for a rather large company. I have been struggling to keep up with all the information, tech and fast-paced environment, and I think I have been asking way too many questions as well. I have a learning disability, but I have been trying my hardest and I am never on my phone or anything, it just takes me a while to learn things. A few days ago, the senior engineer who is also my mentor, got upset when I wasn't able to answer a few questions about the feature that my team was working on and basically told me something along the lines of ""I should have known I would have received this kind of low-effort from a diversity hire"". I didn't ask him anything about it, I sorta let it go, but it has been haunting my thoughts this weekend. I'm a little upset and concerned now. This engineer was one of the 4 interviewers that I had when I was interviewing for the position, and I assume that he would actually know if I was a diversity hire or not? Either way, is my job safe? Am I at any higher risk of getting fired or let-go because of this? I legitimately did not think I would be a diversity hire, so I oddly hope he was just saying this to make me feel bad.

Any advice?

&#x200B;

Edit: Thank you for the support everybody. I will talk to HR tomorrow.

Edit2: For anyone who is still following...this is what I did. The HR department had a service for making an anonymous tip. I made an anonymous tip about workplace harassment, but I did not mention anyone by name or location. I listed everything that happened without giving out personal information. I made an email address without any personal information and listed it in the tip and said that they can reach me through that if they want more info. I'm not sure if I will get a response, but that was what I was comfortable doing. If I don't hear back, i will try to reach HR directly.",1565586529.0,2019-08-12 01:08:49
168,Finally got a job after 8 months of self-teaching and you CAN too!,1200,gwq1xr,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gwq1xr/finally_got_a_job_after_8_months_of_selfteaching/,241," 

I just want to share my story and give you guys some encouragement and don't lose hope because I was on the same path. I started my first ever coding exposure on freecodecamp and Udemy, and I finally got a job as an entry-level full stack developer in Austin, Texas 8 months later.

The only courses I took on Udemy in order:  
1/ The Web Developer Bootcamp by Colt Steele.  
2/ The Modern Javascript Bootcamp also by Colt and Stephen Grider  
3/ Modern React with Redux by Stephen Grider (2020 update)

I started applying after I finished those 3 while also learning Computer Science theories like algorithms, data structures, some C++ & blockchain coding .... on Udacity, Edx, Coursera and Udemy. I also have my own Shopify store and Travel blog on Wordpress.

Here is my portfolio website for your reference 📷[www.lucaslu.dev](https://www.lucaslu.dev/?fbclid=IwAR2BoXOy7NFIOaMnkqHBfXwpnWELf0DkSgdL7N_LF3kAGyRDJvOLzpHwdpQ)

Yes most of the projects are from tutorials, but most employers don't know where you get them from because there are too many courses, and they don't have time to check. So DON'T be afraid to apply even if you don't have any projects of your own. Too many people scare off beginners by saying you have to start your own projects, contribute to open sources, grind coding challenges in Leetcode, start your own company blah blah ... I have never done any of them. Even though they may help, don't feel discouraged if you feel like they are too much beyond your ability.

How I got the job: I was applying every single day to job postings on Indeed and LinkedIn with a few different keywords: junior/entry-level/ intern frontend developer, web developer, software developer, software engineer ... I also looked at a few different cities I would be willing to relocate to if I got an offer. After like 100+ applications and 3 months later, I got like 3 interviews but no luck.  
Then my friend suggested I look on Craiglist where he got his job. I was surprised people still using it. I literally applied to TWO jobs on Craiglist, and got a call for phone interview 2 days after. Then they asked me to create a form to capture customer information and autocomplete address using Google Map Api and a npm package to validate credit card number. I learned all of them from the 3 courses I mentioned above! I finished the assignment in 1 day after a lot of Googling lol and review some of my past codes. They asked me to come to the office to start next Monday. Hell yeah !!!

So if I can I know you CAN too. Keep trying and believe in your ability!",1591333021.0,2020-06-05 00:57:01
169,"Uber is the next to go, cutting 3,700 jobs (14% of workforce) -- CEO to forgo salary for rest of the year.",1202,gekgih,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gekgih/uber_is_the_next_to_go_cutting_3700_jobs_14_of/,398,"[https://www.nbcbayarea.com/news/local/uber-plans-to-lay-off-3700-workers-report/2285304/](https://www.nbcbayarea.com/news/local/uber-plans-to-lay-off-3700-workers-report/2285304/)

I guess we suspected as such, but it's still heartbreaking to see these many workers to be out of a job and have to compete against each other in the shrunken job market. 

Anyway, like the recent Airbnb post said, hang in there everyone.",1588802167.0,2020-05-06 17:56:07
170,"How to deal with a male coworker who is trying to be ""woke""?",1201,e8h6dq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/e8h6dq/how_to_deal_with_a_male_coworker_who_is_trying_to/,456,"I graduated last year and have been working at my job for about a year and a half now. I have been the only woman on my team the whole time. At first I was the only woman in a team of 5. (I'm also the youngest at 25 but that's pretty much irrelevant). 

Untill recently it all felt great, I felt like I was just being seen as a fellow developer and not ""the girl"". I was treated with respect and such. A few months ago as part of a reorg my team merged with another team, so now I'm the only woman in a group if 16. And then things felt different.

I still feel like I'm respected, but now I am acutely aware that I am ""the girl"" on the team. This was almost exclusively caused by one of my coworkers.

One of the first times I was in a meeting with him, he started going over the top when trying to seem inclusive. Like drawing long hair on a stick figure, correcting everyone who used ""he"" generically for a user with ""or she!"", etc. 

One day he came to ask my coworker who sits back to back with me a question. Then he says ""(my name), you may be a minority on this team, but you are still a valued member and your thoughts are important.""

Just the other day we were working on a project together and he came over to my desk to talk about it. We were on the topic of dismantling an old system in favor of the new one, and he said ""we also need to dismantle the patriarchy!"" And internally I was like why is this necessary to be said right now?

And the final thing that bugs me is he treats the rest of our team members the same, direct and emotionless. But with me he talks all soft and gentle and skirts around issues. I feel like he is treating me like some sort of fragile flower and it bugs me so much.

All of this has also opened another can of worms for me where now I feel very sensitive to perceived slights because I often see them through the lens of ""they see me as just the girl"". Like my desk being moved farthest from the rest of the team and facing away from everyone else. Or another coworker constantly fielding questions about code I wrote and know 100% about, just because he has a version he slightly modified that is used more. Then I end up often wondering if I was just the ""equal opportunity hire"" if you will, even though I completely know I have the skills and experience. It's all inconsequential and not purposefully done but now I second guess stuff. Constantly being reminded of my status as ""the girl"" on the team is very demoralizing.

I'm sure he has good intentions and is just trying to make sure I am comfortable and don't feel like an outsider, but I feel more like an outsider now because of his constant virtue signaling. 

I'd like to tell him to tone it down because it makes me uncomfortable, and that I know he has good intentions, but I don't know a professional way to do so. Like do I email? Slack? Set up a meeting? Does anyone have any advice for how to talk to him about this?

edit: clarification

edit 12/11: Thanks everyone for the advice! I am waiting for another ""incident"" to talk to him about it so it is more relevant and he might remember it. I'll keep everyone posted",1575959331.0,2019-12-10 01:28:51
171,PSA Most people in CS don't make crazy high salaries,1198,7vpufg,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/7vpufg/psa_most_people_in_cs_dont_make_crazy_high/,753,"TL;DR A salary less than 100k is more normal. Don't come into the field expecting 200k in options.

This sub tends to get both ends of the curve and not so much the middle in terms of people. You have people who get 300k total comp new grad offers and you have people who can't find a job after 2 years. Naturally it might prompt some people expect such high salaries. Then some people get bummed out when they don't have high salaries like that and that leads to posts like ""Am I not good enough?"" Most new grad/entry level salaries in most places is about 60k-80k if you adjust for cost of living. Most companies outside of the big 4/unicorns don't pay these high salaries.

For all the folks who have several years of exp the normal is anywhere from 90k-120k total comp if you adjust for cost of living. Now if you're a director/vp/cto you obviously make more but that's a very small percentage of people. 

Furthermore, people need to calm their tits when they get these offers and they assume they won't make it. If you're single you really only need about 25-30k to survive. Anything more is just spending money. For folks with a partner you only need about 30-35k, + 10k ish for each child. 

Don't let the fact that you don't make a high salary affect your morale or your confidence.
",1517973997.0,2018-02-06 22:26:37
172,What's the point of an intern acceptance speech on Linkedin?,1187,asb377,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/asb377/whats_the_point_of_an_intern_acceptance_speech_on/,251,I've been noticing people making these 2-5 paragraph long posts on Linkedin talking about all their offers and who they end up picking. Usually pretty cringy and I stop reading by 1st paragraph. Is this actually normal and should interns be doing this?,1550616093.0,2019-02-19 17:41:33
173,LPT: No one ever advanced their career pointing out the faults in the people around them,1190,cu1cfq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cu1cfq/lpt_no_one_ever_advanced_their_career_pointing/,147,"Saw this story on /r/ProRevenge. Don't be like Fred:
>https://www.reddit.com/r/ProRevenge/comments/ctmlqb/make_my_life_at_work_miserable_youll_never_work/

tl;dr - don't be the person who no one wants to work with. Even if your coworkers are all idiots (hint: they aren't) or the software you work with is total crap, written by morons (hint, it isn't), you never want to gain the reputation Fred had by the end of the story.",1566526708.0,2019-08-22 22:18:28
174,CS Rich Kids vs Poor Kids,1190,kg2g24,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/kg2g24/cs_rich_kids_vs_poor_kids/,735,"In my opinion I feel as if the kids who go to high-end CS universities who are always getting the top internships at FAANG always come from a wealthy background, is there a reason for this? Also if anyone like myself who come from low income, what have you experienced as you interview for your SWE interviews? I always feel high levels of imposter syndrome due to seeing all these people getting great offers but the common trend I see is they all come from wealthy backgrounds. I work very hard but since my university is not a target school (still top 100 - UDEL) I have never gotten an interview with Facebook, Amazon, etc even though I have many projects, 3 CS internships, 3.5+ gpa, doing research. Is it something special that they are doing, is it I’m just having bad luck? Also any recommendations for dealing with imposter syndrome? I feel as it’s always a constant battle trying to catch up to those who came from a wealthy background as if they don’t have to work as hard as I do but for a lower outcome..

**Edit:**
Thanks everyone for the kind words and for messages. It’s helpful to hear the support. I already have a few smaller fintech offers so I’m planning to probably just work for a bit (1-2 years) and just pay off loans at the moment. The most important thing is that I use my first fulltime job to pay off the loans and help out my family with financial troubles then purchase resources to help me prepare for interviews. I know FAANG is not necessary for a good living but it would be nice to work with very hardworking intelligent passionate engineers so I want to reach that height one day.",1608386365.0,2020-12-19 08:59:25
175,"Do you feel tech companies try a too hard to make their place of work look ""fun""?",1178,b0bn2k,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/b0bn2k/do_you_feel_tech_companies_try_a_too_hard_to_make/,489,"I've been looking into different places to work recently. I like where I work but I'm thinking it might be time for a change. After some browsing to see whats out there it seems like every tech company career page goes over the top to make their company look like its some sort of adult preschool or leisure center (adults in consumes, free food, rock climbing group activities).

&#x200B;

I don't mean to be negative but it seems a bit over the top.

&#x200B;

Just to poke some fun at it I made this starterpack [https://i.redd.it/i966yjcdbpl21.jpg](https://i.redd.it/i966yjcdbpl21.jpg)

&#x200B;

What are your thoughts? Are companies taking the whole 'make work look like play' thing a bit too far? ",1552446308.0,2019-03-12 23:05:08
176,Turned down a third !nterview for a company and now the manager is LinkedIn stalking me,1177,jvafzz,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jvafzz/turned_down_a_third_nterview_for_a_company_and/,234,"Turned down a third interview with a company, and the manager had been LinkedIn stalking me for months

This is a bit of an odd situation. Back in June I interviewed with a large medical device company for a developer position. The first interview went well and then I had an interview with the manager I would be working for. She told me the job would ""be chaos"", I would be having meetings at 10pm with coworkers on the other side of the world, and they have meetings for 2 hours a day every day.

Well needless to say that is all I needed to hear and after the interview I sent a polite and professional email to the hiring manager saying I did not wish to move forward with the process. They asked for feedback as to why but I never responded.

Well that was in June and since then the manager who said it was ""chaos"" had been viewing my linkedin profile, over and over and over again. It was funny for awhile but now I'm getting weirded out. They seemed to have switched their profile to private now because I get ""someone at Medical Device Company viewed your profile"" but I know it's them because there was a pattern since *June*. 

They view my profile a few times a week and they just viewed it again 10 minutes ago. Has anyone ever encountered anything like this before? The job I interviewed for is long filled they are still stalking me for 6 months.

Do people really get that butt hurt if you turn down an interview?

Edit: also can we stop auto deleting posts that have the word ""interview"" in them? This is a career sub man",1605575136.0,2020-11-16 20:05:36
177,Name and shame: Fanimal.com,1174,hy0ot8,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hy0ot8/name_and_shame_fanimalcom/,136,"Throwaway here for obvious reasons but I wanted to share my experience with Fanimal (the ticket reselling website) as I know they tend to hire a lot of young/inexperienced contractors. I had a contract with them to overhaul their front end. The contract had a max of xx hours. About halfway through the max hours, they suddenly wanted to terminate my contract and said they would only pay me for half of the time I spent. They said that I was taking too much time and that my code was unusable. They owed me a four-figure USD sum, and a few weeks later I could see that they were actually using my code, because a pretty unique bug that I didn't have time to fix in my code was present on their public website. They also previously made me sign a contract that would force me to come to California for any legal disputes (I don't live in CA), so I was pretty screwed when it came to recovering the money. When they terminated the contract they basically put me on blast in a conference call and then cc'ed everyone in the company, and a mutual acquaintance, with a disparaging email. It seems their main goal was to shame me into not fighting back than to actually come to a solution.

I periodically asked for feedback and the feedback was good, until suddenly they wanted to terminate the contract, so I think they just ran out of money and screwed over an easy target. The whole experience was a bit traumatizing and put me off development for a while, so it took a few months to process and actually write this out.

EDIT: Thanks all for your responses. This got far more attention than I expected it would. Even if I never get a resolution it is comforting to know that some strangers on the internet support me during this stressful experience.  
I do want to point out that in the last few hours this post got hit by a few comments supporting Fanimal. I'll let you be the judge but these comments all came one after another, written in a similar style, on new accounts...[https://imgur.com/vyW9V3J](https://imgur.com/vyW9V3J)",1595766736.0,2020-07-26 08:32:16
178,"To hell with new grads. 2005 grads, how you doing?",1182,jwt2pt,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jwt2pt/to_hell_with_new_grads_2005_grads_how_you_doing/,370,"Title says it all. We’re typically considered the first millennials, we snatched up jobs before the Great Recession, we’ve worked with boomers, gen Xers, millennials, and now Zoomers. 


So, how you guys doing?  Still writing code?  Move on to management?  Something else completely different?",1605777688.0,2020-11-19 04:21:28
179,Is this common in software engineering?,1172,epubyd,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/epubyd/is_this_common_in_software_engineering/,101,"I’m posting this from a throwaway account because I have friends and family that know my actual Reddit account and I feel embarrassed about my how I handled the situation and if I might be making a big deal out of nothing. 

So about three months ago my school had a career fair in which I got an interview at a well known healthcare company for a summer internship. I was pretty happy that i got the opportunity to interview because a lot of my friends didn’t get one. I had the first interview the day after the career fair with some former students who are currently working at said healthcare company and after they said they wanted me to come onsite and do a second round of interviews. 

At the second interview I was in a room with three people each person asked me a question and the first couple minutes went just as great as the first interview.  It wasn’t until The third person asked me a question, “name a time you helped someone become healthier and how did you do it”.  I mentioned how I helped my grandparents get to a healthy weight by teaching them to cook healthy foods and excercise. His response is what bothered me, I’m an Black male and he said “yea you can’t eat fried chicken everyday and try to balance that out with the occasional watermelon”. 

After he said that the room got really awkward and the other two people just looked at him and after a brief pause just said that they didn’t have anymore questions and asked if I had any.  I was pretty shocked for two reasons. One I honestly hate assuming everything comes back to the color that I am and I don’t want to be the person who just claims racism at everything so I honestly was thinking he has to be joking or maybe that’s just the foods his family ate growing up and it had nothing to do with my color and two I just couldn’t believe, even if he was being racist, that it would be so blatant, like this is a job interview there is just no way someone would say that. Anyway i just quietly said no and the guy then said “great, we can finally get these interviews moving fast.” 

He then told me I could leave and to close the door behind me. When I looked at the clock my interview was 7 minutes long, I was scheduled down for 15 and out of everyone in my group I’m the only person that left early and I was the only black person interviewing( honestly not uncommon at my school there are very few Black CS majors). I guess my question is, should I learn to expect this kind of behavior and is it common? I’ve dealt with a lot of racism in my life and just being a CS major.  Usually it’s just small comments about how well spoken I am and that I’m smarter than most people expect or that I understand things better than the “other ones”. I just didn’t expect it from a billion dollar healthcare company. 

TLDR: am a black guy, had an interview where I got asked a question on how I helped someone get healthier, interview responded with “yea you can’t eat fried chicken everyday and try to balance that out with the occasional watermelon”

Edit: I’m in America on the east coast

Edit 2: so I just woke up for my 8 am class and did not expect this many comments. I separated the text up a bit(sorry I was on mobile and very tired).

I have decided to do what a lot of the comments suggested and report his behavior. I set up an appointment with my career center and have begun composing an email to HR. I don’t want anyone else feeling singled out or hurt by someone else’s comment so it just seems like the right thing to do. 

For the people who messaged me and talked about how I should have responded violently. Responding in violence to racist comments is never the answer. The only thing you will achieve is proving the image they have of you is correct and you will hurt any chance of any real change happening. The best thing to do is be the bigger person and respond intelligently and appropriately. Is that fair ? No, but sometimes what is fair and what is the right thing to do, do not align. 

Thank you everyone for the encouraging comments and I’m excited to try again at my schools upcoming career fair.",1579258746.0,2020-01-17 05:59:06
180,I've reviewed thousands of applications for university recruiting at a startup. Here’s a bit of what I look for when reviewing an application. (Part 2),1169,irjodn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/irjodn/ive_reviewed_thousands_of_applications_for/,311,"I've been a hiring manager for a US-based university recruiting at my unicorn of a few hundred people. As a follow up to [my previous post](https://www.reddit.com/r/cscareerquestions/comments/inrex1/ive_reviewed_thousands_of_applications_for/), I thought I’d share a bit about how I go about reviewing applications. Also, if you aren’t aware of the [Resume FAQ](https://www.reddit.com/r/cscareerquestions/wiki/faq_resumes), this is a really amazing resource and I would check that out first. My post here represents one specific viewpoint whereas that advice is more broad and generic.

*Edit:* **One thing to note is my experience is only in the context of a Unicorn (which is competitive with FAANG). In our case we have tens of thousands of applications but we only have the capacity to interview a couple hundred.**

Here’s a bit of the behind the scenes for how I review applications:

* Frankly, application review is not my full time job, so usually I end up doing this after work hours. Typically I might spend 30-60 minutes reviewing applications before decision fatigue sets in.
* Most applications would be pretty clear after about 5 seconds of reviewing. Probably 5% would be an obvious yes and 75% would be an obvious no.
* The other 20% of the cases take up 90% of the time. If your applications is in that 20%, then I’ll take some more time to look through all the details. If you provide links like personal websites or Github, I'll probably click into that.

When reviewing a resume, here is the rough order of things I’ll look for:

* *Industry Experience.* Having an internship at Facebook, Google, or another highly prestigious company on your resume probably makes you a yes most of the time. Otherwise I'd look into the details of what you did in your various roles. If you had an internship where you just pushed code around, that doesn't show much. But if you had an internship where you built and ~~shipped something that was used by a million users, or halved the latency of all requests~~ solved a really challenging but really impactful problem, then that's probably an automatic yes. Because of this, I’ve often preferred candidates who interned at startups and were forced to play an impactful role in the company over candidates who joined a less tech focused F500 company.
* *University.* I’ll be the first to admit that I’m ashamed at how high this is. There are a number of reasons that which university should not be this high: (1) it is highly correlated to how well off your family is, (2) it only reflects on what you accomplished in high school and ignores what you accomplished in college. Unfortunately, university rankings are still the most reliable standardization out there. There is still a correlation between where your university and your success in interviews and your success in industry. If you go to a top 5 CS school, you’re a bit more likely to be a yes than a no if everything else on your resume looks solid. Granted, if you're at MIT but you haven't shown much else in any of the other categories, then you’re still going to find yourself to be a no in most cases.
* *Teaching Experience.* I've found that being a TA is one of the signals that helps separate soft skills the most. I appreciate candidates who have deep knowledge of a topic, can empathize with where someone else might be coming from in their understanding, and bridge that gap. If you haven’t done so already, **I highly recommend talking with your professor about becoming a TA.**
* *Projects.* There's a ton of nuance in projects listed, so I’ll go into more detail.
   * School project in your introductory CS sequence - this doesn't show me anything that would separate you from everyone else.
   * Hackathon(or similar) project - This shows me you probably have a genuine interest in learning new technology and building software. Also in this category are clones of apps.
   * Research project / Project teams - This shows me that you take initiative to dive deep into academic areas that interest you. It’s even better if the research project requires you to work with a team.
   * Open Source Project - There's a ton of nuance here, but if you're making contributions to a critical library or if you decided to build something from scratch and it has some traction, that looks awesome.
   * Productionized application solving a real world problem that has real users - I would love to get you an interview ASAP. You don’t need revenue, funding, or even a startup, but there is no shortage of real world problems where software can help. If you can honestly say you’ve dedicated a significant chunk of time to this, feel free to put it on your work experience too. The best part of this is that unlike internships of university, this is 100% in your control. I cannot stress this enough - **show me that you can solve a real world problem with software and have real people use what you built.**
* *Coursework.* Computer science is still the gold standard in software engineering, but you can still succeed without a CS degree as long as you show that you’re not shying away from project heavy classes and still understand basic CS theory. I generally like candidates who are taking more advanced courses (like grad level classes) and/or more programming heavy courses (like compilers or operating systems).
* *Extracurriculars.* Candidates that take initiative and can handle large amounts of responsibility are great. In addition to displaying leadership, extracurriculars also show me how you are striving for excellence in the things that you enjoy doing. Show me your passion for sports, dance, theatre, or whatever and the things that you've done to push yourself in those areas.
* *Degree.* BS vs BA doesn’t make a difference. Having a Masters is a slight bump, but if you can get your Bachelors + Masters degrees in 4 or 4.5 years, then that’s pretty impressive.
* *GPA.* Honestly, GPA doesn’t really matter too much. If you leave it off your resume, I’ll probably just assume it’s lower than a 3.0, but that also probably wouldn’t be a dealbreaker. If it’s really good, that would be a slight bump. However, I’ve seen people with a 4.0 that fail in industry roles where soft skills and the ability to handle ambiguity are important.
* *Skills.* I wouldn’t care too much if you included this. When hiring new grads we don’t hire for the programming languages they know or don’t know. However, if you have experience with iOS and you’re applying to a company with a big mobile presence, maybe you should put it on your resume.
* *Cover Letter.* I almost never look at the cover letter.
* *Work Authorization.* We don’t have a team capable of handling immigration for more than a handful of people, usually reserved for leadership and extremely senior positions. If you are a US citizen or permanent resident, it would be beneficial to add it.

General advice:

* Less can be more. I’m browsing through applications quickly, so be sure that any key words or accomplishments don’t get missed because your resume is too cluttered. Imagine that my eyes are jumping around the page, looking for key phrases. If you’re describing your previous internship, instead of describing what you did week by week, find 1 bullet point that encapsulates the work you did the entire summer. Then add 2-3 additional ones describing the most impactful or most challenging parts that made up that project. And please make sure your resume fits on one page - I sometimes don’t even think to scroll down when reviewing a resume.
* When going into the details of your work, avoid jargon that the average technical recruiter wouldn’t know. There is a fine art in communicating accomplishments without going into too much detail, but it helps to imagine yourself explaining it out loud to a friend.
* Show me the impact of your work. In general, software engineers are responsible for solving real world problems with code. I know that it can be tempting to talk about the technical details of what you did, but be sure to show the impact that it had.

Keep in mind that this post just reflects my thoughts and there are plenty of other companies and other people that review applications that are looking for different things. Please don't overfit your application to one single narrow viewpoint. If you’re in a role that also reviews applications, I’d love to hear your thoughts as well. Let me know your thoughts and if there's any other topic you'd like to learn more about.",1599969859.0,2020-09-13 00:04:19
181,I finally quit,1171,efrbww,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/efrbww/i_finally_quit/,372,"I finally got out of software development. I couldn't be happier. For anyone interested, here are my reasons why after about 7 years in the field I packed it up:

* I was treated like a cog in the machine.
* I was constantly being checked on by middle (project) managers. They were always asking for estimates, their updates and it felt like I was caught in this bizarre micromanagement reporting hell.
* We were always grinding. But it felt like we, the software developers, were the only ones creating values for the company. Middle management always leaving early and just asking dumb questions, HR ladies were organizing nonsensical events and generally doing nothing... I could go on. This felt very unfair.
* No career advancement ever. Stuck at a desk with keyboard for life.
* Programming became extremely boring. CRUD after CRUD.
* Programming became extremely tedious. Especially with microservice oriented projects. The amount of shit that had to be running before I could even start doing anything was mindboggling. And don't even let me start on debugging this monstrosity.
* The projects were getting more and more complicated and tangled as more microservices and mocks were being added. This was never allowed to account for in our estimates. Some coworkers kept working in their own free time to keep up with their usual expected outputs to get good performance review. I didn't and was constantly berated for it (never fired though).
* Social isolation.
* Health problems, specifically back and dried out eyes.
* When changing jobs, interviews were pure madness. It felt like playing slot machines, playing the algorithm roulette. It's just stupid and dehumanizing what's going on during these interviews.
* Non technical people always treated us like we were aliens despite them being more socially akward than us. Basically the moment I said I was a software developer I got the ""oh watch out, those are the weird ones"" kind of attitude and had to work to disprove it. I was being given extra shit for being often a sole woman. But my colleagues were always great. It's just the other people were always manifesting asocial behaviour towards us despite them labeling us as socially akward ones.
* I think this field is just way too exhausting (brain working always at 100%) for its average compensation.

Yeah I am done. I will never return.",1577366506.0,2019-12-26 08:21:46
182,I got my dream job and I hate it,1159,k2e35x,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k2e35x/i_got_my_dream_job_and_i_hate_it/,332,"( First world problems coming your way ) I recently became very “successful” in the past few months. I (22F) make well over a $100,000/yr, tech, but I have never been so unhappy. My job is incredibly stressful and I have no time to focus on my hobbies that do make me happy. I work 10-12 hour days. I am constantly filled with anxiety that something at work might go wrong and I’ll lose the company a ton of money and get fired ( I probably won’t get fired, but I constantly think I should be fired lol). I have never been an anxious person until starting this job. I am wondering if anyone else has ever job the job they worked all there life for, then fucking hated it. Should I quit?

TLDR; I got my dream job and I hate it. Should I quit?",1606555400.0,2020-11-28 04:23:20
183,Wow are Startups really like this,1160,fwi9pq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fwi9pq/wow_are_startups_really_like_this/,288,"I came across a post and it seemed interesting untill I got to this section.

""You'll be pressing the pause button on most everything else in your life over the coming months, working long hours and giving 100% of your time, heart, mind, and soul to help bring our revolutionary technology to market — and working alongside others are doing the same.""

Unless that's my own company I don't see how you can ask of this from normal employees",1586284570.0,2020-04-07 14:36:10
184,"I finished my degree at 29 and have a lot of job options, never give up!!",1157,ey6rzk,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ey6rzk/i_finished_my_degree_at_29_and_have_a_lot_of_job/,175,"Just want to share my story, i finish my degree at 29 just this year and I have a lot of offers on the table, I have a github with several projects I did in my degree and a good linkedin profile with a proffesional photo.

&#x200B;

Never give up really, i was depressed for so many years, changing majors, traveling....

but finally I made it

Good luck, you can do it!!",1580763426.0,2020-02-03 15:57:06
185,What is going on in this job market???,1163,j6t7ge,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/j6t7ge/what_is_going_on_in_this_job_market/,607,"Currently working as senior software engineer at a no-name non-tech medium sized company. After much leetcoding I was able to jump ship to a much more favorable company. As part of my exit I recommended HR to post a Jr Software Engineer position to careers portal to fill easier part of my day to day tasks. I specifically told HR expect zero to no applicants, as I thought the market is hot - everyone should be applying to FAANGMULASS. Less than a week later I was told there is 200+ applicants plus dozen more on LinkedIn.

Originally I was hoping to do meaningful non-leetcode interview rounds with lot of behavior introspection. Now it's impossible to filter the pool with just 2 Software Engineers, so most likely we have to go through automated HackerRank style leetcode Online Assessments.

Just want to share the craziness of the current job market. Huge condolences to all the new grads out there this year.

EDIT: I thought the market is hot because accordingly to TeamBlind everyone is getting 400k+ TC offers with FAANGMULASS. I guess not.

EDIT: Facebook Amazon Apple Netflix Google Microsoft Uber Lyft Airbnb Stripe Square

EDIT: After screening 30 or something resumes I found some dude interned at Google two years ago applying to be at this no name company. Wow",1602114262.0,2020-10-07 19:44:22
186,2 offers in a pandemic with 0 internships & an online degree. Some tips.,1155,g6381k,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/g6381k/2_offers_in_a_pandemic_with_0_internships_an/,187,"I didn’t think it was possible if all I read was this sub. While some posts are helpful, this place can induce anxiety.

I worked full time while “going” to school after work & on the weekends. 

I’ll be choosing a $90k offer for a Fortune 200 company.

I hope what helped me can help you:

1.	Stay positive. I always felt there’s light at the end of the tunnel. I didn’t care if I didn’t have experience because I’d tell myself I’ll ‘convince interviewers with my friendly personality’
2.	Don’t take this sub too seriously. I remember being positive until reading some negative posts. Got into my feelings real quick. Avoid if you must
3.	Study Leetcode. I’m no genius so I had to do some questions about 5-10 times over the course of 3 months. I focused on Explore Easy & Medium. Be vocal & explain your thoughts. I learned the most from Leetcode question discussions & Back to Back SWE. Be consistent because if you stop for a while you may forget tactics
4.	Practice behavioral & resume questions. Make a bank of questions & have someone ask you things randomly. Get feedback. YouTube STAR method. Ace this portion!
5.	Practice interview behavior. During an interview I focus on being enthusiastic, friendly, and act like I’m having fun. In truth I’m nervous as hell but you need to do this so the interview can go smoothly
6.	Relevant projects. This helped me in receiving interviews. Since I didn’t have internships I made projects that were relevant to jobs. Try to use a stack relevant to job postings. I had 4 projects on my resume and 3 of those were from school. The most recent was outside of school & interviewers liked talking about that one since it was relevant
7.	Make a good LinkedIn profile or whatever job site you use. Good picture, decent amount of connections, etc.
8.	Resume should have other things that show you collaborate & get results. This kind of made up for my lack of internship since it showed I work with teams, had conflicts, etc.

I applied 2 months ago to 70-80 places on LinkedIn. Had 3 interviews:

1.	No offer. Failed because I didn’t study much on behavioral questions. Stumbled a lot.
2.	Offer. Thought I failed because I couldn’t quite handle 1 SUPER BASIC coding question but aced the behavioral & had good vibes with the interviewer
3.	Offer. Did decent after wowing them with personality (refer to #5). Was given a coding assessment & couldn’t get it to run due to website technical issues. I did explain the algorithm step by step before coding which helped out.",1587598282.0,2020-04-22 19:31:22
187,Is anyone here motivated by money rather than a love for coding?,1156,gh319k,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gh319k/is_anyone_here_motivated_by_money_rather_than_a/,639,"TLDR: If you are a good programmer making decent money - did you enter the industry knowing the earning prospects, or because you were genuinely fascinated by programming?

I'm 22, have worked 2 years (Uni dropout from civil engineering after 1 year) in sales, considering going to back to University at UNSW (top Australian school) to study for 3 years to get a high paying SDE job.

Financial independence is my goal.

I have learned some great sales skills from working in sales for the last 2 years however I don't have any technical skills and don't want to be in pure sales for the rest of my life. A senior salesperson in my industry with 7+ years experience can make about 300k but this process is often quite stressful and luck dependent with frequent 60 hour workweeks.

I'm thinking software development may be an easier route to financial independence (less stress. higher probability) I've seen my friends graduate with a software Engineering degree and get 180k TC offers from FAANGs - I'd like to jump on this boat too.

Only issue is I've never been that ""drawn"" towards programming. My successful programming friends have always been naturally interested in it, I've done a programming class before and found it ""OK"" interesting, however its definitely not something I've ever thought about doing in free time.

I am fully prepared to give away 10 years of my life grinding my ass off to achieve financial independence. Not sure if its best for me to do it in sales or study hard and become a great programmer - and then love it because of how much money I'm making?

And when people ask me to follow my passion - well, I'm not getting into the NBA. I am an extraverted ""people-person"" and I entered sales thinking it was going to be extremely fun all the time - I've now realised that its relatively repetitive & uncreative with little transferrable skills. I just want to know where I should be focusing my efforts for the next 10 years of my life to set myself up for financial freedom and happiness. ",1589151743.0,2020-05-10 19:02:23
188,"Name and Shame: Ellucian, they have absurd non-competes and they sue",1149,9dwqub,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9dwqub/name_and_shame_ellucian_they_have_absurd/,121,"I have almost 20 years experience. I turned the job down. It was for a very senior position. I am not going to say what since I don't want them to figure out who this is from. 

When I got the offer, it also included a 'non-compete clause' that said I could not work for 'any of their competitors'. No name. Just anyone they considered a competitors. 

When I interviewed for the job over a year ago  I googled ""ellucian non-compete clause' There were a lot of posts on it saying

1. They make you sign a more strict one when you get laid off if you get a small severance package

2. They sue people who were laid off for violating the non-compete

3. posts on glassdoor about how people are pressured to put up positive reviews. There are 500+ reviews. This is absurdly high for a company this size.

All of this is gone. Even the glassdoor reviews that had the word 'legal action' and non-compete. MY NEGATIVE review about the non-compete is gone. Ellucian scrubbed it from glassdoor. You can probably pay glassdoor to have bad reviews taken down or they threatened to sue. 

Don't work for a company like this. 

",1536371372.0,2018-09-07 21:49:32
189,Got an internship in the midst of all this chaos!,1147,fw6lvl,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fw6lvl/got_an_internship_in_the_midst_of_all_this_chaos/,108,"I am a Junior at a very middle of the pack Midwest school, studying computer science, and I received my first ever internship offer today! I know how real imposter syndrome is on this sub and I never felt like I could get an internship, but if I can do it, anyone can.

My school is not super well known, I have a 2.8 gpa, minimal leetcode practice, and no prior CS internships. I didn't have some crazy personal projects, just 2 school group projects listed on my resume.

What I'm getting at is don't put yourself down because you can't leetcode all day, or you don't have enough personal projects, or you're not an A+ student. Don't get imposter syndrome from looking at this sub all day, only seeing people talk about FAANG companies. There are so many companies looking to hire interns, you just gotta find them.",1586234565.0,2020-04-07 00:42:45
190,Another data point on industry hire in the bay,1140,cdp9yz,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cdp9yz/another_data_point_on_industry_hire_in_the_bay/,513,"Hi everyone, I just went through a round of interviews and wanted to share a data point. Also, I wanted to share some interview tips that you may not have seen before. I'll answer questions in AMA style.

**About me**

I’m a software engineer with 5 years of experience in the bay area. Bachelor's degree in engineering at Waterloo. I don’t consider myself special talent, but I think I’m pretty good at interviewing. I've worked at a couple startups before joining G back in 2017. No specific expertise to brag about, but I have a good history of doing cross-stack work.

**Offers**

I interviewed at Airbnb, Facebook, Lyft, Uber, and 3 other companies. I received offers from Facebook, Lyft, Uber, and 2 other companies. First year total compensation ranged from 380k\~500k from both public and private companies, 2nd year comp was around 400k for most of them. The offer numbers correlated with my interview performance, and from my research, it seems like some companies offer standardized offers to every candidate. Surprisingly the private companies did not beat out the public companies in equity package. Breakdown was around 180\~210 base, 500\~800 equity, and 0\~100 sign-on.

**Process/Scheduling**

* I set a measurable goal for prep. 200 Leetcode questions, 10 system design problems, deep-dives of my past projects, and recollected my past experiences for behavioral questions. Whole process was 3 months.
* Did mock interviews on [interviewing.io](https://interviewing.io/) throughout the process.
* I had a buddy the entire process who was also looking to switch. He went from 85k to 300k TC (crazy). We did mock interviews everyday.
* I did my phone screens during lunch hours, and scheduled onsites over span of 2 weeks, using all my vacation days :'(
* Schedule the companies that you don't want in the beginning. I bombed my first interview lol.

**Interviews**

It's common knowledge that you should prep for Leetcode-style questions, and system design if you're interviewing for senior positions. That's what I did 2 years ago to get into G, but the interview formats were slightly different this time around:

1. **Phone screens were more difficult.** I'm not sure if it's because I was being considered for senior positions. In one phone screen I had to explain what a BST was, implement algo to check if tree is BST, explain LRU cache, implement it, then design Twitter timeline. Every step of the way I had to give the tradeoffs and time/space complexity, as well as analysis of the design and writing/analyzing some SQL queries. 2 years ago I got mostly Easy/Medium Leetcode questions.
2. **Practical coding was heavily emphasized.** Almost every company I interviewed at had a practical coding round, where I was given a task (building a feature/scripting/debugging). You can bring your own laptop and I recommend that you do. You can also search the internet while coding. I think they look for fluency in programming, as well as how you break down problems. I say this because I got an offer despite not completing a task. I think this is a trend that will continue until proven to be ineffective.
3. **Behavioral interview is more important than design**. Every company I interviewed did a deep-dive of my past projects and experience. Recruiters told me that this interview is more important for determining level than the design interview. I can see why. Most design interviews aren't conducted properly. Questions are often too large in scope and too much time is wasted in narrowing it down, and you only have 30\~35 minutes when you account for the intro/closing. High-level ideas can be BS'd, and most of the interesting design decisions are lower-level. The level of depth is dependent on the interviewer's experience level, making it highly variable.

**Leetcode**

I've done around 300 Leetcode problems lifetime. This time around I did 200 but a lot of it was questions I've done before. Leetcode tips are all over the Internet, I'll leave some tips I haven't seen online.

* Do these questions [https://www.teamblind.com/article/New-Year-Gift---Curated-List-of-Top-100-LeetCode-Questions-to-Save-Your-Time-OaM1orEU](https://www.teamblind.com/article/New-Year-Gift---Curated-List-of-Top-100-LeetCode-Questions-to-Save-Your-Time-OaM1orEU)
* Find the brute force solution immediately, and tell the interviewer so that they know you're not an idiot. Too many candidates trip themselves up trying to find the silver bullet. Optimize the brute force solution if you can, and that will lead to a very good answer most of the time.
* Example: [trapping rain water on leetcode](https://leetcode.com/problems/trapping-rain-water/). The brute force solution is to find the amount of water trapped at each index, by scanning for the largest values to the left and right. This is n\^2. Then you optimize by caching the largest values to the left and right instead of scanning. Now it's linear. You know that it can’t be faster than linear because you need to look at each index.
* Even when you’re peeking at Leetcode solutions, understand the brute force solution first and try to work your way up to the optimal solution. Jumping straight into the optimal solution without explaining the brute force solution will raise red flags. Readability is just as important as finding the very optimal solution. Solutions on Leetcode Discuss score low on readability.
* Put trivial computations into helper methods that you tell the interviewer you will implement later. Generally they won’t ask you to implement these helper methods. For example, finding the min/max in an array, it’s so trivial that you don’t need to write out the whole method. It also shows that you are comfortable with translating ideas into code.

**Design**

* I used Grokking the system design interview on educative.io and system design primer on github. I recommend it, but these are surface level material and if you regurgitate the content you will fail. I recommend it as a starting point.
* They recommend this structure: requirements, load estimation, API, data schema, high-level architecture, detailed component design, and scale. This is a good structure in my opinion.
* The problem with these contents is they spend too much time on high-level/drawing boxes, but when they go deeper they are not going deep enough, and tend to focus on the wrong things. I personally believe the most important part of the design interview is the API.
* Generally the interviewer will give you a problem definition and they’ll tell you the feature scope and maybe the usage characteristics (daily active users, for example). You should clarify until you understand the problem, don’t clarify for clarification sake.
* I personally believe API is the most important part of a design interview, and no other content online will tell you this. Think about it, when you’re designing something at work, that’s the one thing everyone cares about. Implementation details are done within the team or on your own. The API is where cross functional collaboration and discussions happen. Grokking and primer don’t cover API in enough detail.
* Write down each API and discuss the policies. For example, when designing a queue, you have enqueue/dequeue API’s. Does dequeue guarantee that the same element will be dequeued on subsequent call or not? This changes the entire system. Let’s say you’re designing a sendMessage API for a chat app, who generates the message ID? Server or client (it should always be client btw, and think about why, it changes everything).
* From API discussions, the data schema, high-level architecture, and services should be easy to draw out. Data schema will roughly reflect the API request/responses, services will be scoped to support a set of functionally related API’s.

**Behavioral/Deep-dive**

*""If you’ve never failed, you’re either inexperienced, a liar, or unaware"" - somebody*

* Don’t be afraid to show your flaws. In fact this is where most candidates fail. Interviewers can tell if you’re BS-ing them. Be genuine.
* If you’ve never failed/had a conflict/lost an argument, you’re either inexperienced, a liar, or unaware. All are bad signs. I was asked to provide a concrete example of a time I had a disagreement, and I told the interviewer about a time I disagreed with something and lost (they liked it).
* This guy sums it up perfectly: [https://www.youtube.com/watch?v=PJKYqLP6MRE](https://www.youtube.com/watch?v=PJKYqLP6MRE)
* Go through your past projects and try to gain a deep understanding of the entire project, beyond the scope that you were involved in. Identify the key decisions you made, the high-level architecture, because you’ll need to be able to explain it to someone as if they are a newcomer to the team.

**Negotiation**

I believe there are 2 fundamentals of negotiation: knowing your market value, and having leverage.

1. **Know your market value.** Use [levels.fyi](https://levels.fyi/), Blind, your network to find out how much market value you have. It's strongly correlated with your level of experience and the company you're interviewing for. Do not take low-balls. Do not ask for unreasonable amounts. I've seen people get offers rescinded for over-negotiating.
2. **Have leverage**. Competing offers, good job situation, 1 million dollars in the bank, those are all leverage. If you have no leverage, then you need to fake it. I don't recommend faking leverage, because if you were able to get one offer you can easily get another one.

I didn't negotiate my offers beyond telling the recruiters what the other companies were offering me. This only worked because I interviewed companies that pay top of market earlier in the process. I also let the recruiters know how much I was expecting, and disclosed my current level/comp when asked (L4 at Google, so it would not have helped my case).

I dislike most of the online advice that tells you to play a game against the recruiter. Recruiters are human. Full transparency, and being genuine with the recruiter has worked well for me. Try to not make it all about money. If all your questions/comments are around comp, it signals to the team that you're just interested in money, which certainly doesn't help your case.

**Closing notes**

I found that through preparing for interviews that I did become a better engineer. The process of preparing for interviews challenges your mental fortitude and time/stress management. Prepping for design interviews is not as simple as reading Grokking/design primer, you need to gain a fundamental understanding of every decision that’s being made in the design, and this requires a lot of digging through the internet for content. *A lot of hate for Leetcode style interviews on this sub.* Doing Leetcode doesn’t make you a better engineer, but it makes you a better coder. A big part of our job is translating ideas/thought into code, in a way that others can read it and understand it. Leetcode problems are challenging because they test your ability to generate the idea, and to translate ideas into code.

&#x200B;

AMA",1563262680.0,2019-07-16 03:38:00
191,Does anyone else think we are in the greatest career ever?,1137,cbvs9g,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cbvs9g/does_anyone_else_think_we_are_in_the_greatest/,432,"The job is not physically demanding. The pay is extremely well. The schedule is often flexable. You sometime dont even have to leave your house to work. Some jobs feed you lunch and offer other odd benefits. Employment is stable and it's not hard to find another job if need be. Devs are in high demand. You can listen to music or podcasts all day long while you work. It really is better than almost any other career out there.

Only possible downsides are stress due to strict deadlines, and micromanagement from the boss. Both of which I don't experience.

Edit: Yes, I know some people are famous etc etc. I'm not talking about lottery ticket careers here.",1562881096.0,2019-07-11 17:38:16
192,It's so cool that educating yourself even further is a part of the job.,1139,c09yk0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/c09yk0/its_so_cool_that_educating_yourself_even_further/,156,"This isn't much of a question, but I just really want to share this story.

I went to the person who is in charge of me and sort of just dumped my inner negative impostor syndrome feelings onto them. In short, I basically said, ""I feel so useless that a lot of the things I have to do require me to study them. I feel so bad that I didn't know them beforehand"", to which they replied, ""Hey, learning is a part of the job. We didn't hire you because we assumed you knew everything. That's impossible in this industry. We hired you because we saw potential, and seeing how much effort and willingness you put into learning new material is a testament to the truth of our faith in you. Dont worry, you're doing a great job. Continue learning, applying, and growing.""

I swear, I was about to break off into tears right then and there.",1560481664.0,2019-06-13 23:07:44
193,"To all those who are struggling with computer programming or doubting their abilities, or to those considering a mid-life career change. I’d like to share a bit of my story.",1138,9z5608,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9z5608/to_all_those_who_are_struggling_with_computer/,151,"I’m 37 years old and I’ve had a lot of jobs. Like A LOT. I have been a roofer, a welder, a framer, worked at grocery stores, at a small-town newspaper, every major gas station chain, built air conditioners at Trane, and even worked as a baker for a bit. Up until 6 years ago I was a mechanic. Suffice it to say, I’ve always been a bit lost career-wise. I had a bad habit of working at a job for about a year, getting bored with it, and quitting. Usually by just not showing up again. Looking back, I feel a bit shitty about it all. 


Five years ago, my wife and I moved with our 2-year-old daughter to southeast Iowa (US) to attempt to re-start my father-in-law’s tofu company. Logistics caused us a lot of headaches and it fell through pretty quick. We found ourselves in a town of 9,500 people without much in the way of job prospects. The blue-collar life had taken its toll on me, and I had no interest working on rusted out cars in some seriously harsh winters. I needed something else. There was a community college about 30 miles away that offered some attractive associate degree programs, generally 24-month technical degrees in robotics, photonics, geospatial technology, electronic engineering, etc. I threw a dart at a map and chose software development. The only experience I had in any kind of programming was when I would mess around with the html in my MySpace background 15 years ago. I really had no idea what it was all about, but I had the opportunity to go for it. I consider myself to be of average to moderate intelligence and I’m good at taking tests. The program didn’t dive too deep into actual computer science and I didn’t have too much of a problem following the logic and theory of programming. So while I struggled a little I made it through with good grades. 


Six months after graduating, I got a job at a major retailer in Wisconsin and set to work. And. I. fucking. hated. it. I felt like a fucking idiot on a daily basis. I couldn’t wrap my head around the real-life application of computer programming, having only really followed along to tutorials and step-by-step assignments in school. I was working in an obscure language with very little online community support, so Stack Overflow wasn’t there to save me. I was just lost in it all. Our office was pretty relaxed as far as our schedules were concerned, so I would make excuses to leave early a few times a week just to get away from it. I was beating my head against a wall and getting pretty much nowhere. For the next two years, I watched the other developers who were hired the same time I was sail through projects, get assigned higher priority work, get promoted, and seemingly really get in the groove of things. And here I was, circling the drain. I felt doomed. Not only did I not feel like I fit in with the company (I’m covered in tattoos, and this was a pretty conservative Midwestern company), my wife and I didn’t fit in with the town (again, a couple progressive old punks in the Bible Belt). I felt like my manager, who was actually really great, was just waiting for me to quit so he wouldn’t have to fire me. My mentor was awful and never had time to help me. I felt like I was bothering the senior devs with my questions. My code reviews were nightmares. I just felt like I wasn’t meant to be a programmer, and the proof was all around me. I wanted to give up.


But I couldn’t. I knew I owed it to myself and to my family to at least try to find work with a different company. If I went somewhere else, and had the same experience, then I could say that I just wasn’t cut out for this type of work. I started applying for jobs everywhere I could. I looked into where grocery stores had their headquarters, where insurance companies were based, if banks and credit unions needed developers, hospitals and state/local government departments, and so on. I knew I wasn’t Google material, and I knew I didn’t want to work for a start-up, so I looked for jobs that weren’t on everyone’s radar. I ended up focusing on Austin, TX. I had family living there and there are a lot of job opportunities. But I wasn’t getting any callbacks being in Wisconsin. My wife and I decided to take the leap and move to Austin without having anything lined up, I always had my mechanic experience to fall back on. **Disclosure: I feel amazingly fortunate that I was able to make this move, and I understand not everyone would be able to just up and move across the country.**


Things changed real quick once we got to town. I interviewed for and was offered a software developer position within two weeks. It has been a month now and it is COMPLETELY different than my experience in Wisconsin. My co-workers are awesome, my mentor ACTUALLY mentors me, the team leaders really go to bat for their developers, and the overall environment is incredibly encouraging. Things click a lot more for me now and I no longer feel like I ‘just don’t get it’. I work in Python and Django mostly, which I am really enjoying. My job is in the public sector, so there is no more working to increase profits for a billionaire boss. I look forward to coming into work! I was on the verge of giving up on programming, now I can really see myself here for the foreseeable future. If you think you can’t make it as a programmer, you owe it to yourself to stick with it. At least try a different job, it really could make all the difference. 


**TL;DR** A mid-life career change into computer programming is totally possible, even if you have no experience. If you find yourself struggling/doubting your abilities early on in your career, the problem may not be you but actually your environment. You owe it to yourself to not give up, but instead to find a job that will support you in your learning. 


Edit: PARAGRAPHS",1542849445.0,2018-11-21 20:17:25
194,Protip: NEVER let your client work on your project,1141,hkz25z,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hkz25z/protip_never_let_your_client_work_on_your_project/,157,"So my client was a programmer. He paid me, and handsomely, but at the end he started working on the project himself. He didn't pull the repo, and ended up sending the wrong request to the server. He ended up not paying a large sum of what he owed me because he thought the code is faulty. Plus he was kinda... emotionally needy. He expected me not to work on any other projects whilst I was working on his.

&#x200B;

So here are a few things that I've learned from my second project:

&#x200B;

1- Never befriend your client. People who ought to pay you make the worst friends.

2- Never let your client work on your project. This guy, I respect him and all, but he was kinda stupid, I told him three times that I have changed the header name in the backend but he didn't know much about Express so he thought I'm speakign gibberish or something. That's why sadly things ended up badly between us.

3- Never, ever be verbose with your client. Determine a time, like, 7 PM, and tell them that at that hour, exactly, you will be available on Slack, WhatsApp or what have to update them on the project. NEVER be on their catch and call 24/7. Don't work on the weekend or else they get cocky.

4- Expect a clean, laid-out document detailing what the client wants. Don't just ask them. If they decide to change X whilst you have put a lot of time on it, cite them. Yeah cite the fuckers. This dude changed the project over 15 times, and I had to scrap much of my code. At the end he asked me to rewrite the frontend the way he wanted. I liked his way but he didn't pay me for it because he thought it's broken, because of the header thing which I told him thrice about.

5- Kinda extension of the first point but if your client is a programmer, only give him read access to the repo.

&#x200B;

6- Never let your client test the project. Always test your project yourself first. Only let your client test out the project at the end of each cycle which brings me to...

&#x200B;

7- Make milestones. And always make them pay you at the end of each milestone. Also, take a retainer. Like, 1/4 of the end fee as the retainer.

&#x200B;

I worked with a programmer because I didn't have a published app to my name. I'm going to take a break from working with remote clients, my professor has found an investor for my chore app. I'm going to work on it for a month so I have an a published app instead of lines of code.  I had two apps when I started working with this guy but he kinda asserted himself as my ""supervisor"" because he himself was a programmer. Damn. Should have never let it happen. When he was working on the app he would ruin the repo and I had to spend 2 hours each day fixing his mess. He reverted my changes because he believed ""redux-persist is in a loop"" Goddamit what does that mean. 

&#x200B;

Okay I didn't mean to vent just to relay my experience. If the guy is reading this please be decent and don't post because I have the proof that you messed up. Thanks.

&#x200B;

&#x200B;

PS: if you guys have any tips for working with clients, tell me.",1593874547.0,2020-07-04 10:55:47
195,"So, I just erased our JIRA database",1136,aglvqr,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/aglvqr/so_i_just_erased_our_jira_database/,360,"I am working as a DevOps for about 2 months and a half. Today I was supposed to migrate our JIRA to another server, the old server hard drive was mounted on another computer using an Ubuntu live CD.

Super simple, right? I was trying to export the postgres database and I used a chown to change the data directory owner's to the postgres user. The folder simply vanished and there's no backup.

I'm fucked. Did anyone passed through a similar situation?

\[Update\] Thanks to /u/[Happy\_Recognition](https://www.reddit.com/user/Happy_Recognition)'s [comment](https://www.reddit.com/r/cscareerquestions/comments/aglvqr/so_i_just_erased_our_jira_database/ee8flse/), I located the automated JIRA's backup on the server and I was able to restore it on my local machine as a test. Thank you for all the amazing support, and also you guys made me laugh a lot.  


Curiously, the CTO himself didn't know about these backups. JIRA was set up here 5 years ago by a guy who no longer works for the company, and it seems that nobody messed with the setup, since it was working perfectly. For anyone wondering why we don't use a cloud service, like Amazon, it's because we're actually a cloud service provider company!",1547679234.0,2019-01-16 17:53:54
196,Sharing the System Design framework I’ve used that has served me well,1131,kd13sx,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/kd13sx/sharing_the_system_design_framework_ive_used_that/,92,"I recently got back to interviewing, and thought I’d share the framework I’ve been using for design interviews that has netted me offers at places like Google, Facebook, Uber, Microsoft, etc. Previously, I’ve also conducted numerous interviews and also been in hiring committees from the inside of these tech companies, so I felt sharing the angle from the interviewer’s point-of-view could be helpful.

Side note, this is not a replacement for studying your stuff. There are numerous resources I’ve used to prep and brush up on my fundamentals (there are a bunch shared in this subreddit alone). This is primarily a tactical framework I use to get that additional bump, which is often helpful when your hire/no-hire decision is on the boundary.

First, I think about these 3 points throughout the whole interview. Unlike the coding section, there is no formal answer on design interviews. It’s often not about the answer you produce, but how you get there.

1. **Speak out your logic**
   1. Remember, everything is a tradeoff. Everything. Even expanding that field in your DB that will enable a critical user feature, or adding a test that will prevent that recurring bug comes at a cost. Don’t even think about adding a load balancer or async task queue until you understand why that is the most effective use of your company’s engineering resources at that time. So talk about this. Speak it out. Say that you would start by monitoring where the bottleneck will happen with the increased traffic, and give your reasoning on why you believe service “x” is where you would start increasing instances, and what would be the cost of such. Don’t always have to go into depth, but try to formulate your design decisions around “given (because of) A, I would do B”
   2. One added benefit is that it gives you a fast way out should your decision be wrong. You might find that your logic is incorrect midway while you’re speaking out your logic. It might also expose a logic that comes from a misinterpretation of the requirements in which case you give a chance for your interviewer to correct your assumptions. The worst thing is when you have seemingly made up your (incorrect) decision, and the interviewer is not sure why you made that decision and is waiting for it to possibly make sense, but it never does and has to correct you 10 minutes later. By speaking out your logic you fail early and also have given a reasonable reason on what you took that path.
2. **Read the room**
   1. So I lied above that “it’s not about the answer you produce, but how you get there”. Although it shouldn’t be, in practice your interviewer has already used this question a few times and knows the parts a good candidate should be covering. If you do your homework well you should be able to get 2/3 of your way to what the interviewer wants, but how on earth are you going to cover designing an Instagram feed in 45 minutes comprehensively? So if the interviewer starts talking about data failover, make sure you immediately pivot over to that topic even though you really want to continue discussing that security issue. If the interviewer is uneasy with what you’re giving, keep trying out different angles to your approach instead of doubling-down on your first answer. Try to get as much coverage on the components the interviewer is “expecting” you to cover.
3. **Get your \[++\] marks**
   1. Remember, this is still an interview, not a tech discussion with your peers (unlike what some folks try to frame it as being). At the end of the day, the interviewer (at least a good one) is taking notes on the \[+\] and \[-\] parts of your interview session. If the previous part (“read the room”) was about minimizing the number of \[-\] marks, this section is about maximizing your \[+\] marks. If you’re targeting a senior role, you have to get some \[+\] and \[++\] marks. This is important for senior levels, and even for mid-levels (L4, L5), being able to “impress” the interviewer a couple of times during the interview goes a long way. So how do you impress?
   2. One approach is to go one level deeper. Best to use your past knowledge/experience if possible, as that makes your points the most unique. Don’t dwell too long, unless the interviewer follows up as it could prevent you from covering other topics the interviewer wants to discuss. The point is that you want to show that you can talk about parts of a system in a bit more detail than the average interviewee. Talk about a feature in a service you’ve used in the past (e.g. using sets/lists in Redis for structured data cache), how you’d implement a service logic (e.g. rough verbal or written algorithm description), alternative approaches and discuss tradeoffs (e.g. numerate 3-4 ways of caching the request and which option you would choose). Best way to prepare for this is as you’re studying, write down a few “show-off” points. Read through company engineering blogs in your field, look into the feature sets and technical docs of a few popular services that you can mention universally for different types of interviews.
   3. If you’re afraid to go too deep, simply touching in a different angle that is not commonly talked about will also add that “unique factor”. For example here are a wide variety of topics that you could be talking about. I’ve roughly ordered them by having the common topics at the top for generic interviews, but would obviously differ depending on your field.
      1. Scalability, availability, latency, throughput
      2. Usability (product-level), extensibility, testability, operational (monitoring, debugging, logging), resource capacity (CPU, memory, network bandwidth), async/offline jobs, analytics
      3. Security, portability (different surfaces), privacy (data retention, encryption)

So with these high-level points in mind, throughout the interview I try to take a simple 3 phase approach unless guided differently by the interviewer.

1. **Assumptions**
   1. Clarify: From the interviewer’s perspective, this is the part where I see if the interviewee can narrow down an ambiguous scoped problem by asking relevant questions. From the interviewee’s perspective, all you need to think about is whether I can draw the right “building blocks” in part 2 below (high level design) with the information given. Don’t leave this step without 100% understanding the problem. Try to draw the building blocks in your head and if you’re stuck, ask.
   2. Scope: After you’ve clarified and understood the problem, rule out blocks you won’t be drawing. Clarify the scope of the problem. e.g. do I have to think about the user login/authorization for this web app? What about the expiry on this URL short link?
   3. Ballpark estimate: I feel this part is a bit overblown in design discussions. Showing off that you can crunch numbers well doesn’t impress interviewers. What does is how you connect those numbers to your design decisions. Here are a few points I try to touch on in this part
      1. Data schema, size → Guides database choice, replication
      2. Traffic: Bandwidth, patterns (cyclical, bursty) → Determines whether you need to touch on scalability and how.
      3. Read:write ratio → Storage (availability for high read), scaling (cache), API decisions
2. **High level design**
   1. The part where you draw the rough building blocks. Try to “read the room” and make sure you get good coverage in this section. I make it a point that I will talk about scaling and other details after I have a rough drawing of the high level design.
   2. In this section, I try to make sure I have good coverage on these two parts
      1. Component/API: Discuss the various components (service, storage, cache, queue, client, extensions) and also the interface between each component (API, communication protocol).
      2. Data: Details on data schema, flow between services, how it would be stored, cached, modified.
3. **Detailed discussion**
   1. This part is extremely specific to the problem at hand and it’s important to also follow the flow you are having with your interviewer in your session. Aim to get a few \[+\], \[++\] points here to show your knowledge and reasoning.
   2. Scalability: A frequent extension to the basic discussions. There should be a lot of material discussing this, but it’s important to note the following
      1. Mention the tradeoffs of scaling your system and that you would only add a solution for this when/if needed (e.g. live traffic monitoring suggests we need to scale, we have strong product indication that we will require a large amount of traffic from day 0, Golang is beneficial for our scaling purposes despite the tradeoffs around generics, dependency management and even just experienced dev hiring)
   3. In general, here are some common topics to be aware about so that you can discuss should you go over them in this section: Load balancing, reverse proxy, Caching (server-side, client side, database-level, eviction policies), CDN, DNS,  Async (task queues, message queues, backpressure routing), Batch (map-reduce), Database (RDBMS, No-SQL, Federation, Sharding, Denormalization, CAP theorem), Communication (REST, UDP, TCP, RPC) 
   4. Different angle of discussions, mentioned in “3. Get your \[++\] marks” above, are also good points to touch in this section should you have time.

Hoping this helps for some folks out there prepping for their interviews.

I also have a few mock interviews that I’ve been doing that follows this template. I’m planning to spend some time cleaning them up a bit and adding more details around the \[++\] part for each mock interview. Leave me a note if you’re interested, and I’ll let you know when they’re ready.",1607992898.0,2020-12-14 19:41:38
197,I still feel unpaid internship is a scam.,1134,fxs5c4,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fxs5c4/i_still_feel_unpaid_internship_is_a_scam/,369,"Some people may argue that the reason why not to take them is because it does not offer a tax return document, so people can not prove that they have worked as an intern.

&#x200B;

 However, I think working for someone without getting pay is simply a scam. It is so that simple. I don't know what is in those people's minds, who offer unpaid intern or unpaid jobs.",1586466624.0,2020-04-09 17:10:24
198,"Is ""you can't leave your desk"" culture normal?",1126,i9dwmy,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i9dwmy/is_you_cant_leave_your_desk_culture_normal/,418,"I just need to hear that I'm not crazy. I've worked two industry jobs with an academic one in between, both of the industry jobs were Midwest non-tech companies no one's ever heard of where software is more of a side department than the main product. But there's always been this ""you can't leave your desk for any reason"" culture, like with my manager timing everyone's lunch breaks and keeping a record of how long everyone takes or how many times you've gone over 30 minutes, or never letting anyone take any time off if it's not a medical emergency. I'm pretty friendly with all my coworkers and they all have something that they've needed time off to do, like take their car in for an oil change or go to the dentist, that my current manager won't approve because it'll mean they'll be in an hour late one day, and every day there's some huge priority that can't be missed. For some reason they all seem not to mind it but it's really, really bothering me. I feel like a prisoner or something. 

This has continued through WFH, now my manager expects responses to any Teams or email message within 60 seconds or they'll send a follow-up ""what are you doing? you should have been able to respond by now"". Or they'll schedule meetings starting immediately and complain that someone was late. One of my coworkers got reprimanded in front of the rest of my group over Teams for going to get groceries during the workday and not responding to an email for an hour. I feel like this should be really abnormal but no one else seems to think that.

The academia job was much more normal, like people would often go for long lunch breaks or go to get coffee outside lunch hours. Is this how most workplaces are?",1597401889.0,2020-08-14 06:44:49
199,Rant about programming and what employers are looking for,1125,k0zser,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k0zser/rant_about_programming_and_what_employers_are/,255,"So right now, I'm stuck fixing memory leaks. What's worse, I'm tracking down memory leaks in other people's code, one of my least favorite things to do. But I tend to get assigned these problems because I get it done.

My own code tend not to have memory leaks. And this is not because I'm such a good coder, it's because I REALLY HATE tracking down memory leaks. So I always put in extra effort to make sure it doesn't happen. Memory leak prevention is not fancy genius stuff. A leetcode master doesn't necessarily write code that's less memory leak prone, because it's not an algorithm thing. What helps memory leak is about anal retentively handling every single possible error return. It's about developing a system/style/approach for yourself and always sticking to it obsessively, like Nikolai Tesla with the number 3, or the Undertaker never breaking character.

Whether I like it or not, this is one of my contributions. What really bothers me is that this skill, which I get better at the more hours I spend using it, doesn't help me get jobs. Even if the interviewer asks about memory leaks, or my OCD for neatly organized code, how can one test it? A memory leak you can find by eyeballing code in 45 minutes is unrealistic.

So ultimately, if this were an RPG game, I should have put points into Leetcode Mastery instead of Bonus Damage Against Memory Leaks. Employers that are hiring don't care about memory leaks (until it hits them in the face), but they care about leetcode.

So I'm doing something I dislike by tracking down these memory leaks. The silver lining is I'm getting better at an useful aspect of coding. But, it's an aspect that's not marketable. I wish what I do in my day-to-day could be something that can be used for getting jobs. But, that's just wishful thinking. When I do start looking, I'll need to grind leetcode.

""Algorithm is all. "" - Uhtred of Bebbanburg, probably.

End rant. Thank you for reading.

Edit: I didn't expect this post to be so popular, I was just getting something off my chest. But it's time for me to go. Thank you all for reading and responding, and I'm sorry if I didn't reply. Take care and stay safe everyone.",1606363677.0,2020-11-25 23:07:57
200,You're amazing and you need to hear it more often.,1130,jw6g1u,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jw6g1u/youre_amazing_and_you_need_to_hear_it_more_often/,65,"I finally got my ""dream job"" as a data scientist after an analytics role in the military, a graduate degree, and an internship at a moderately big name tech company. The first month was a feeling of complete triumph. The second month was general enthusiasm. And now \~6 months later, I just feel physically and emotionally exhausted. 

I see so many posts on here about people grinding away at LeetCode. I did some of this as a data scientist, but probably spent more time asking questions on Cross-Validated, working on Kaggle-like problems, implementing ML algorithms from scratch (as best I could) etc. Bottom line, there's this culture of always pushing yourself as hard as you can go. And I bought into it hard. 

What I can tell you is that no matter your accomplishment, you will adapt to it. '*New car smell*' **wears off**, so to speak. Google, Doordash, SAP, whatever will not complete you. Putting 100% of your identity into ""making it"" professionally is dangerous to your physical and emotional health, as I'm learning. I understand a good number of redditors on here are about to finish their undergrad degree, so about \~24 years old. As a 31 year old, I can say that your body likes all-nighters less and less. Energy drinks and McChickens will drop you on your face after 27. 

I'll tell you what I wish I did: 

\- Tell myself that ""Everything is all happening according to plan"" every morning

\- Budget time for physical fitness, yoga, etc. 

\- Get back into hobbies, like guitar, for example

\- Be emotionally available to my friends and family 

\- Cook more, sometimes healthy, sometimes to treat myself but to be mentally present in the process

So, whether this is the first time or 1000th time you've heard this: Everything is going to work out, you are the sum of your experiences, not just the professional ones; don't be anhedonic- budget time to experience life. You're amazing, you've got this, don't give in to fear culture. Your mind and body will thank me. 

Much love!

Edit: Thanks for the awards, I really just try to bring a little more positivity into everyone’s lives.

To the naysayers downvoted at the bottom, I’m sorry that this positive message made you feel so uncomfortable. Sounds like you’re knee deep in your quest to become a 24 year old faang alum. I genuinely hope you’re successful! Just try not to become so zealous about your own answer to life that you feel compelled to belittle anyone else that takes another approach.",1605692175.0,2020-11-18 04:36:15
201,"Can we start a monthly ""Who's hiring"" thread?",1122,efvz8a,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/efvz8a/can_we_start_a_monthly_whos_hiring_thread/,124,This sub is 300k+ strong. I am sure we could leverage this network to benefit jobseekers. There many people here working with awesome but not well known companies. It would be great if we provide a place for both the jobseekers and people looking for talent to connect with each other.,1577399103.0,2019-12-26 17:25:03
202,"Never take a verbal offer as final, if you don't have it on paper you don't have an offer.",1123,cwkxg6,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cwkxg6/never_take_a_verbal_offer_as_final_if_you_dont/,116,"Just a reminder. I never thought it would happen to me, I always took precautions just in case but figured it was silly and ""apocalypse planning"" to hold off until you get a written offer before you have the job because a verbal offer is an offer right?

Well it just happened to me, I went through 2 technical interviews, and one phone screen with a company for a part time after hours side-job. I got a verbal offer 2 weeks ago and haven't heard back since, I sent out an email to the director that offered me the position but haven't gotten a response back in 4 days. I already told my family and some coworkers that I got the job after I received the verbal, so now I need to go through an awkward conversation with them about that.

I know I could probably call and get someone to pick up but it's not really worth my energy now. Whether it is because I slipped through the cracks on a clerical error or they decided not to hire me doesn't really matter at this point.

Always get the paper guys, if this was a full time job I was moving to from my current position there would have already been rumors floating around the office about me leaving, and even though I doubt it would affect my employment it would have been a very very uncomfortable conversation to have with my manager...",1567028241.0,2019-08-28 17:37:21
203,"Job hunt for a regular dude: New grad, 0 internships, no-name online school, basically 0 leetcode.",1127,f0erfh,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/f0erfh/job_hunt_for_a_regular_dude_new_grad_0/,242,"I've been a part of this sub for a while now & especially early on, I felt that the only ""success"" stories were people of high pedigree boasting (top school, 4 internships, job at bigN) or people with outrageous stories, like the dude with 850+ applications. There's honestly nothing wrong with boasting, it's super exciting that all your hard work has paid off! But, for people like me, it only makes us worry while we're still in school about what the job hunt is going to be. If I only see stories of people from good schools & multiple internships & stories of people with *hundreds* of apps, having no internships myself, one can only surmise I'm going to be stuck begging for a job for like a year.

Luckily, I feel like this sub has gotten better in this regard lately. More than likely it's because people like me are getting jobs & are actually coming back to post their success, exactly for the reason stated above. Regardless, here's another one for those of you out there feeling like you're doomed to a year of searching & sending out hundreds of applications for a shitty job.


**So, my background:**

B.S. in CS from an online school

0 internships

0 professional field-related experience

**Applications sent:**

75 applications total

~20 of these were LinkedIn's ""Easy Apply,"" meaning I literally clicked 2 buttons & it sent my resume. Extremely low effort.

The vast majority of these didn't have a cover letter. I typed up a generic one I started pasting & wrote a custom letter for maybe 2 positions. I heard back from at least 1 of them.

I got 5 phone screens. All 5 phone screens led to coding challenges or technical phone screens. 

**Of the 4 screens:**

1 ghosted

1 rejection

1 on-site interview

2 I turned down the technical screen due to a better offer (they came late)


The on-site interview ended up in a job offer. 

**Offer:**

Denver

86k Salary

7k Signing bonus (includes relocation assistance)

**Total time spent applying:**

~ 2.5 months. I started applying just 1 month before graduating, but very very casually. I didn't really ramp up sending applications until after graduating.

**How I did it:**

Do I think I got super lucky? Honestly, no, not really. I applied almost exclusively through LinkedIn. I don't think I got anything out of doing the Easy Apply ones, but hey it only takes like 5 seconds so why not. I think that Easy Apply is better geared for more experienced candidates that have much more impressive resumes. A good resource that helped get me started was https://www.newgrad.tech/. I didn't tailor my resume for specific job postings. I went through a few iterations of my resume at first, but once I found one that I liked, I used the same one for every role.

**Edit:** *I've had multiple people post that I'm shilling for this site. I guess I can see why you might think that, but here's the truth. It's not my site & I get nothing out of linking it. It has 0 ads, links to job postings directly, & only makes money if you click affiliate links on a different page that the owner straight up tells you make him money. I posted it for 2 reasons. 1, I feel like other people that post these threads always have a long list of resources they used. Since I only used this site (at first) & LinkedIn, I figured I'd contribute at least something tangible. 2, the site is really good if you're just starting. It's honestly not amazing much past that, bc you quickly run out of listings (it's not updated super often), but it helps you get your feet wet if you've been hesitant on starting the job hunt for whatever reason. If you're already far into your application process, it probably won't help much.*

As the title said, I basically did 0 leetcode. I say basically 0 because I think I did like 3-4 of the starter ones. I spent some time re-learning data structures because I felt that my school did a bad job of teaching them, but nothing crazy. 

**What allowed me to succeed:**

There's 2 reasons why I think I didn't have a hard time getting a good job.

**1:** I'm not awkward af talking on the phone or communicating via email.

I'm not extremely personable or fantastic at chit-chatting or anything, but I'm a normal person & don't melt at the thought of having to talk to someone longer than 4 seconds. I'm also fairly good at writing & do a good job at getting my point across in a particular way, so I think that helped a little bit, too.

**2:** Personal projects.

You've heard it before from everyone on here & guess what: it's legit. I had I think 4 projects on my resume, 3 of which were school projects. Literally no one asked me about the bottom 2 & I was asked about the second project twice. The focus was always on my first project, which was not a school project & was an app I made that I use for my current (unrelated) job. 

It was very important, in my opinion, that this project *wasn't* a school project. You need to show initiative & do something outside of what you're prescribed to do. It doesn't need to be super fancy or super high tech, it was basically a CRUD app. But make sure it's somewhat big (took real effort) & be sure you can talk about the different aspects of the project. What went wrong, what you'd do differently, how & why did you implement certain features, what focus did you put on the UI, etc.

**That's basically it.** Don't be super awkward on the phone. Don't be lazy & do some projects. 

It helps if you're likable & can come across as friendly & personable. Like I said, I'm not actually super personable, I'm actually quite introverted. But I can still come off as if I'm not. 

Good luck to you all.",1581129585.0,2020-02-07 21:39:45
204,Missed out on life and realized only because of Corona virus,1115,ijyxww,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ijyxww/missed_out_on_life_and_realized_only_because_of/,164,"I graduated a year ago majored in CS, and about a year before graduation, I realised I need to get my shit together and started learning new things, interned and participated in hackathons. I had secured a full time job at a very nice place before graduating and have been working harder to ensure I'm on top of everything and contributing everyway I could.
 
Things were and are fine but I had a realization that throughout the lockdown I never felt different or had a feeling of missing much. On contrary to feeling happy I understood I actually didn't have much in life other than work. No hobbies, no workouts. It's miracle I'm not burned out yet.

I'm rethinking on what should matter more and how to not be just a code monkey, honestly I don't know what is or was the wrong decision or if there was a wrong decision.",1598912742.0,2020-08-31 18:25:42
205,Huge (1k +) List of Company Hiring Statuses,1116,frv1vl,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/frv1vl/huge_1k_list_of_company_hiring_statuses/,125,"Hey, 

figured you guys might find this useful, I've been applying based on this list and have gotten a couple of Online Assessments.  Note that I am not affiliated with the website, so I probably can't answer too many questions.

&#x200B;

 [https://candor.co/hiring-freezes/](https://candor.co/hiring-freezes/) 

&#x200B;

Good luck out there!",1585617966.0,2020-03-30 21:26:06
206,A /r/cscareerquestions College Survival Guide,1108,iucp54,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/iucp54/a_rcscareerquestions_college_survival_guide/,149,"# A /r/cscareerquestions College Survival Guide

With our final school year beginning, we were reflecting on how lost and confused we were when we first started university. We made a lot of mistakes (still am) along the way, but we’re in a much better place after learning from them and constantly putting ourselves out there. In hopes of shining some light and helping others, we decided to make a comprehensive guide for university students – based on our knowledge/experiences - on how to start your successful CS Career (or gain the wisdom to avoid CS altogether, more on this later).

/u/rishiss Background: I am a 4th year student at UC Irvine majoring in Software Engineering. I am an incoming Software Engineer at a F100 company (received return offer after interning this summer). Before that, I interned at an R & D center for space, a small cloud company, and a small IT company. I have a 3.65 GPA, won a few awards at startup competitions/hackathons, and remain pretty active in my schools CS organizations.

/u/chaitu65c Background: I’m a 4th year student at UC Irvine majoring in Computer Science. I’m currently a SWE Intern at a Unicorn and just wrapped up my 2nd internship at a Live Streaming Company(you can most likely tell who they are if you browse my history LOL). Before this, I interned at my school’s IT department, did research under a professor, and worked on a few small startups that other UCI students were building. I have a 3.3 GPA, won some awards along /u/rishiss and was pretty active in my school’s CS clubs.

Disclaimer: “But /u/rishiss/ and /u/chaitu65c, you don’t work at a Big N, go to a target CS school, why should I take your advice?” You’re absolutely right; we are, by no means, ‘up there’ like some other folks on this sub. And, you don’t have to take our advice! Simply close this tab and do whatever else you want 😊. Our intent is to guide and prepare uni students for a CS career they enjoy, not work at Big N or get the highest TC. Life is much more than a dick-measuring contest, and the earlier you learn that the better.

[We have also created a guide with our own personal advice/stories](https://docs.google.com/document/d/1QpbntzGn3DG64nYSE2Av9AlszZB2hqXWVdIqCSCj1qg/edit?usp=sharing)

## Please, take this advice with a grain of salt. we’re not Tony Robinson or Tim Apple, we’re just two random reddit users.

## Table of Contents:

This guide is divided into the following sections:

* Is CS Right For Me?
* Classes
* Projects
* Hackathons
* Resume
* Friends and Networking
* Freshman Year
* Sophomore Year
* Junior Year
* Senior Year
* Searching for Internships
* Searching for Full Time Jobs
* Final Thoughts

## Is CS Right For Me?

The way we see it, there’s 3 types of people pursuing CS.

1. Those who know CS isn’t for them – They’re in it for the money, to appease their parents, for a minor/requirement, some external factor. They hated programming while taking the introductory CS course and just try to get done with their class/degree ASAP.

**Advice**: The majority of people who fall under this usually burn out quickly, as they aren’t motivated enough to learn the material and to apply themselves. This usually leads to them cheating and getting kicked out of their major, minor, or university altogether. Even if you manage to earn a degree, we've seen a large number of these folks endure a 'pre-mature' mid-life crisis or simply get fired from their jobs. Before you even start this major, you should definitely understand that this isn’t going to be easy, and you do have to put in a lot of effort to succeed. If this isn’t your cup of tea, definitely look into switching into another major you like.

Some folks are really passionate about technology, but don't want to pursue an entire Computer Science major or see themselves as Software Engineers. That's completely ok! Try looking into related majors or minors. We know many students who switched from CS to majors like Informatics, Business Information Management, and Economics and are thriving in tech-related roles like Data Analytics, Product Management, UI/UX Design, and Technical Recruiting. CS is not (and should not be) for everyone, and there is no shame in having the wisdom quit and move on.

2. Those who don’t know if CS is for them – Where most of the CS community is IMO. These folks (like me, /u/rishiss) are riddled with something called Imposter Syndrome: “the constant feeling of not being good enough or knowing enough to do your job well.”

**Advice**: For students, really take the time to learn and be open to anything you go through. Try sticking it out until you've taken a Data Structures course, one of the harder, more important courses out there. If you're not understanding the material or just aren't having fun with it, it’s definitely ok to switch majors/careers. Otherwise, CS just might be the career for you! Give it your best shot!

Admittedly, it's hard to provide stronger insight to overcoming Imposter Syndrome, as I am afflicted by it as well. For me, my IS derives from constantly comparing myself to others and confusing inexperience with incompetency. As such, I continue to work and focus on myself and take baby steps towards smaller goals I set out for myself. Knowing that I've put the effort to improve myself by just 1% everyday has made me a lot more confident.

3. Those who know for a fact CS is for them – The diamonds in the rough. Learning and practicing CS material gives them a euphoric high.

**Advice**: Broaden your scope and learn new areas of CS! Who knows, you might find another new field that you really want to work in. Other than that, definitely make new friends regardless of whether they’re a CS major or not. Even try pursuing other hobbies like weightlifting, reading, dancing, or even public speaking. Don't limit yourself!

## Freshman Year

We recommend not taking more than 3-4 classes in your first quarter/semester, as you shouold keep an ample amount of time to go to professional/social events, make new friends and hang out with them, and pursue your interests.

We've seen a lot of freshmen (and upperclassmen) CS folks get cooped up in their dorm rooms playing video games and watching TV. We understand that these two are a passion for many, but please be cautious to not get consumed by them.

You have the privilege of pursuing higher education, making valuable connections/memories, and setting up your CS career in the trajectory you want. This year is the best year to take advantage of all that university has to offer; make the most of it.

One of the best ways to get involved in your school’s/region’s CS community is by joining clubs like ACM and WICS and participating in hackathons (see ‘Hackathon’ section below). Try pursuing internships and positions in these organizations and events as well!

One, major issue we see with freshmen (even upperclassmen) is their ignorance on all the avenues available in the CS Industry. So we’ve tried to narrow it down (not exhaustive).

1. Cyber Security Engineer
2. Front-End Web Developer
3. Backend Web Developer
4. UI/UX Designer
5. DevOps/Cloud/Site-Reliability Engineers
6. Mobile Engineer
7. QA Engineer
8. Product Manager
9. Data Scientist (Machine Learning/AI)
10. Embedded Software Engineer
11. Systems Administrator
12. Database Administrator (The Wizards)
13. Networking Engineer
14. Hardware Engineer
15. OS Developer
16. Video Game Developer
17. Solutions Architect/Sales Engineer/Technical Account Manager

As a freshman, definitely take the time and see if you can picture yourself doing any of the listed fields. You should open yourself to all facets of CS and not just the “hot field” like Data Science and Machine Learning. Choosing a field because it’s “exciting” will usually lead to bad results as usually, other people are thinking just like you and will lead to over-saturation.

Our recommendation is to select the top 5 fields that have piqued your interest and experiment with the field. For example, if you are interested in Mobile App Development, try learning how to build an Android app from the ground up. A simple weather app or alarm clock is completely suitable for a first project/prototype. This lets you understand what skills you would need for this field and can serve as a forecast as to what your career would look like.

You should definitely look for an internship. Ignore the people that tell you to wait until you’re a junior, as it’s going to be very hard to get an internship if you don’t have any experience. Common places that most students don’t realize are available are usually IT departments at your school and even research with professors. Researching is highly recommended as you can definitely learn more about a field you can be interested in and if you’re interested in graduate school, that’s going to be a letter of recommendation that you can ask for.

If you’re considered a minority in Computer Science, look into first and second year internship programs as they’re meant to help you succeed. Here’s some programs that come to mind:

[Google STEP](https://buildyourfuture.withgoogle.com/programs/step/)

[Microsoft Explore](https://careers.microsoft.com/us/en/job/870951/Internship-Opportunities-for-Students-Explore-Program)

[Amazon Future Engineer](https://www.amazonfutureengineer.com/)

[Uber STARInternhip](https://www.uber.com/global/en/careers/list/62885/)

[Facebook University](https://www.facebook.com/careers/students-and-grads/students)

Another way to get internships is to research into smaller companies in your area. If the company is very small (<100 employees), consider reaching out to the CEO on LinkedIn. They might be able to help you! Also, take advantage of university recruiting websites like Handshake to see companies that directly hire from your school. More info on how to get an internship in the ‘Searching for an Internship’ section.

## Sophomore Year

Now that you have basic programming knowledge, create your own website or GitHub account and start contributing to them with small personal projects. Nobody expects you to make a full-stack MERN project hosted and scaled on AWS at this stage. Focus instead on clean code, learning a framework or two on a language you like, and creating a small, robust feature. Grow from there!

If you weren’t able to find an internship/research opportunity as a freshman, community involvement, projects, and hackathons become especially important, as they are a great way to make you stand out on your resume and to recruiters when you reapply. As you brush up on your skills, apply again, and try your luck out.

## Data Structures and Algorithms

In addition, you are most likely to take a Data Structures and Algorithms course this year. Make sure you are focusing on this class and writing good notes; you will need this knowledge when interviewing for internships and full-time jobs in the near future. Here is a link to our DS and A course (in C++) for [reference](https://www.ics.uci.edu/~thornton/ics46/Schedule.html)

## Junior Year

As a junior, companies are more willing to hire you for an internship, as they are likely to convert you into a full-time employee after graduating. This transition process is much easier than interviewing, and they'll usually offer you a higher compensation package if they want to convert you to a full-time employee. As you now should have knowledge of Data Structures and Algorithms, we highly recommend looking into coding interview prep sites like LeetCode and HackerRank or purchasing a prep book like CTCI or EPI (advanced).

Continue to attend hackathons, remain active in clubs/organizations, and grow your portfolio.

Classes will be much harder; expect the time for completing projects to double and the content covered to be much more difficult. We recommend taking no more than 2-3 upper-division CS courses and balancing your load with 1-2 GE classes. You should not be taking more than 16 units (assuming 4 units per course).

Start to get an idea of what field in CS you would like to pursue. Research what it takes to be successful in that field. You can do so by looking up job postings with that title on LinkedIn and looking at the requested skill set or take a look at [Roadmap.sh](https://roadmap.sh/). If you want to learn more about a related skill set and your school doesn't offer a course, consider picking up a class on udemy.com.

## Senior Year

Focus heavily on your senior capstone, project classes, etc. as they're the last thing you can put on your resume before applying for full time. By now, you should have at least 3 polished, working projects on your GitHub that you can easily talk about with your recruiter. Preferably, they're aligned with the CS field you wish to enter.

If you were able to get a return offer from an internship, congrats! However, don’t immediately sign the offer. Once you have an offer, you should still try to interview at companies that you’re interested in by the deadline of the time to accept the offer. A good way of doing this is to reach out to a University recruiter for that company and explain the deadline you have. Usually, they’re really helpful and can potentially help skip interviews that you were supposed to do!

In addition, if your friends were able to intern at places you’re interested in, definitely ask for a referral or to send your resume to their recruiter. This usually reduces the risk of being ghosted by that company and increases your chances of getting hired!

Once you finally sign, definitely take the time to relax and enjoy.  Just make sure you pass your classes and stay out of trouble

## Classes:

## What Classes should I take?

## Should Already be Required:

* **Programming in Java/C++/Python (OOP)**: This is how you’re gonna start coding.
* **Boolean Algebra/Discrete Math**: Teaches you some background knowledge to CS.
* **Data Structures and Algorithms**: Teaches you some ways data is stored and retrieved. Very important as you’re going to be using them a lot.
* **Low Level Programming /C**: Teaches you what coding used to be like in the old days.
* **Computer Architecture**: You learn what makes a computer a computer including things like logic gates, registers, memory, and more.

## Must Take:

* **Computer Networks**: Highly recommended as it helps you understand Web protocols like HTTP, TCP, UDP, etc.
* **Operating Systems/UNIX**: Most important class. Teaches you important things such as the kernel, Threads vs Processes and Process Schedulers.
* **Databases/SQL**: It’s very likely that your job as a software engineer will be to interact with databases. It’s really good to understand what they are before you enter the industry.
* **Programming Languages**: Teaches you trade offs between languages like C and Python. It definitely helps when you need to pick up brand new languages!

## Good to Have

* **Full-stack web dev** (pref MERN stack, our school offered both LAMP and MERN)
* **Very deep understanding of at least one language.** (You’ll be surprised to learn how many students who graduate fail to do this)/
* **Semester/Year-Long Capstone course (pref working with a company) if your school supports it:** an internship where you get school credits instead of money.
* **Compilers**: Teaches you how programming languages are implemented 'under the hood.'
* **Human Computer Interaction**: If you weren’t able to learn Full-stack web dev.

## How do I succeed in these classes?

/u/rishiss: You’re more than likely coughing up hundreds, if not thousands, to attend university. It makes no sense to not take full advantage of the course and course staff.

* **Do the readings beforehand** – Dr. K explains [how studying before class is an OP mechanic](https://www.youtube.com/watch?v=mlk0NAA3I48), also highly recommend this video on [how to study](https://www.youtube.com/watch?v=Lw4dMehQkgs) by him as well
* **Attend EVERY lecture, sit at the front of the class** – I’ve seen a metric fuck ton of students in the back of the class with their laptops shopping, trading stocks, scrolling through Reddit, even watching lesbian hentai. By sitting in the front of the class, you’re forced to stay engaged (and close your porn tabs).
* **Take notes**– People have many, different ways of taking notes; stick with what works for you.

*The way I take note*s: I learn from examples; I want to enter my code into the IDE to see what happens. I do a three way split; Google Docs on the left, IDE on top right and terminal (to compile, see output, make new file, etc) on bottom left. I note down the date and topic of the lecture and write questions I have in the comments on Docs. I make sure to highlight important information and possible test questions. I even share the link with friends!

&#x200B;

* **Make a study guide, even though the professor does not give you one** – Using my Google Docs notes, I compile the highlighted information into a summarized study guide. It’s a fantastic review tool. I’ve even shared the study guide with professors/classmates and gotten their feedback and extra information.
* **Go to office hours and become close with 1-2 professors** – Some jobs and most masters/PHD programs require letters of recommendation. While you could get reccs from your work, its great to get a letter from someone in academia, especially if they’re established in the field you are pursuing. Get your ass to office hours and show professors that you are curious and motivated by asking questions about assignments, career, or even personal interests. They provide a cornucopia of opportunities, including research, letters of recc, or even the opportunity to pursue a PHD under them.
* **Make friends!** \- Classes are a great way to meet new people with similar interests and expand your professional network. They can especially be a saving graves if you miss a class, don't understand a topic, and need motivation to prepare for an exam. Don't be afraid to say hello!
* **START EARLY ON ASSIGNMENTS** – I can’t count the number of times starting an assignment early saved my ass. Starting early gives you time to deal with the unexpected: the family emergencies, the late night hangout with friends, the memory leak on line 74. Procrastination is like playing Russian Roulette with your CS career, don’t take the chance. [A helpful video on procrastination](https://www.youtube.com/watch?v=TvRtVuwcrnY)

In the quarters where I followed the steps above, I never got a grade lower than an A-.

## Dealing with Bad Professors

During your time in college, you’re likely going to have at least one bad professor that might make it worse if you have to go to class. If that’s the case, it’s definitely fine to not go to class (as long as it’s not mandatory). However, if you do decide not to go, you must make sure you learn the material, so you won’t be behind on the coursework and studying for tests. In addition, you should be doing something productive on the side. If you don’t go to class and spend the time watching Netflix or playing video games, you’re losing time that you can spend on something that might be fun and can help you in the long run.

## You can take Graduate Courses!?

/u/chaitu65c: A highly underutilized set of courses you can take would be graduate courses. Graduate courses are usually very specialized in certain fields. If you were able to take all the undergraduate courses you wanted and still have spare classes to fill out, I'd recommend researching into taking Graduate courses! They’re a good way to build out your specialization and learn new, cool stuff! In addition, if you’re looking for classes to reach the required number of CS courses needed, your CS department might allow you to make the course count towards your degree!

## Projects

**They're super important.**

## How do I succeed in class projects?

* **Reading the Project Requirements:** Before starting to code, read the requirements and understand what you need to do in order to finish. Too many students ask for help that can easily be found in the requirements which wastes the student’s time.
* **Learn to Debug:** Learning how to debug saves you countless hours trying to read through code you might not understand.
* [**Learn to write Clean Code**](https://medium.com/mindorks/how-to-write-clean-code-lessons-learnt-from-the-clean-code-robert-c-martin-9ffc7aef870c): With this and being able to debug, you’re going to be able to write very efficient code and to debug issues easily, thus not making you only successful in lab assignments, but also making you a better programmer.
* **Plan your work out:** This allows you to simplify the logic you are writing and this usually leads to clean code.
* **Ask for help:** If you ever get stuck on something and no matter how much you Google and you can’t figure it out, ask for help. It’s definitely fine to ask for help and is HIGHLY recommended you do so. Take advantage of the lab tutors and TA’s either through in person or Piazza/Canvas; they’re there to help you.
* **Draw Pictures:** If your project involves multiple things (AWS, Databases, Servers, etc), it’s definitely a good idea to draw a picture that shows you each thing interacts with and how it comes together. This is important especially when you enter the industry and build software for companies.

## Personal Projects and your CS Career

/u/rishiss: Projects are your saving grace, especially if you are lacking work experience. They show technical aptitude, willingness to take initiative, and leadership. I’ve seen people with only projects on their resume get positions at the Big N. Projects are good ways to expand your knowledge of CS as the possibilities are endless! It is best to have a variety of projects dealing with a variety of technologies. As such, you can open yourself up to more positions and have more talking points during the interview.

I tend to edit the ‘Project’ Section of my resume with relevant projects and technologies. For instance, if I made a full stack web application and applied to a DevOps organization, I would highlight my AWS, CI/CD, and Terraform experiences more than my React/Node js work.

It is recommend the project is about something that motivates you and are passionate about e.g. video games, movies, books, sports, etc., as it is very easy to give up half way due to stress or lack of motivation/interest.

Like anything else in Computer Science, projects require you to break it down into smaller pieces. Start with the end in mind and draw out the intended architecture/functionalities. Start with what you know and research on the parts you don't know after that. You will be using these skills often in industry for any project/feature planning.

Spending 15-30 minutes a day is all you need to make a successful personal project. Don't make excuses and get coding!

## Open Source Contributions

If you’ve ever noticed popular github repositories such as torvalds/linux, these are repositories where people from all over the world can report issues with it and someone can fix it. If you are able to make a contribution to a huge open source repository, it looks really good on your resume.

## Hackathons

## What are Hackathons?

Hackathons are large scale coding events, where students from around the area come together and collaborate - usually in teams of 4 (but you can go solo or with a partner!) - to build some software. Companies like Amazon, Northrop Grumman, Google, and Twilio sponsor awards related to best use of their technology. After 24 - 48 hours of intensive coding, participants submit their projects, whether it be an Android video game, Chrome Extension, productivity web app, etc. Submissions are shared with the companies and other hackathon organizers, where they select the best projects and award teams with swag like keyboards, gift cards, and even summer internships at their company.

Participating in hackathons are one of the best ways to hone your coding skills, network with companies and other students, and get free comfy T-shirts. It is also one of the best ways to gain industry knowledge, as representatives from these companies and hackathon organizers create numerous workshops and answer any questions you may have. Winning awards at these hackathons are also great resume boosters and talking points during interviews.

The biggest hackathon organizer is [Major League Hacking](https://mlh.io/). Visit their website, and you can see all the hackathons (remote or local) they are partnered with. Make to be on the lookout for application release dates from the hackathons and apply early.

With Covid, you may miss out on the free goodies and the in-person networking with students and professionals. However, most hackathons are accepting many more applicants due to it being virtual/remote this year.

## What Should I Do At Hacakathons?

Take advantage of the resources available at hackathons. You’re attending a mini CS conference and should be, besides coding, networking with professionals, learning about the different companies, attending workshops, asking technical/non-technical questions to mentors, and getting as much free shit as you can get. Besides T-Shirts, companies give out vouchers to their services, applications to their internship and full-time positions, pillows, notebooks, water bottles, sweaters, and even backpacks.

If you’re looking to get an award, judges at hackathons care a lot about the pitch and the idea rather than the actual execution of the idea. Having an idea beforehand is also helpful, so you can spend your time focusing on the MVP.

## Friends and Networking

/u/chaitu65c: I think it’s definitely useful if you have two different friend groups: One dedicated to career and Non-Career Group.

Career Group - When making a friend group dedicated to career, try to be the dumbest person in the group, you’re definitely going to learn a lot from them as you soak up knowledge! Best ways of meeting friends who are career-driven can be through major specific orientation (actually how I met /u/rishiss), courses, major related clubs, etc.

Non-Career Group - While having a group that motivates you for your career is important, it’s also important to have another friend group that can help you relax and to enjoy your time! A really good way to find these friend groups can be anywhere from your hall to General Education courses, social clubs like Circle K, fraternities/ sororities(if that’s your cup of tea) and others!

This is what has worked for us; no need to follow this exact format.

## Resume

/u/rishiss: Here are the few take-aways on writing a resume that gets through the ATS.

* **Make your resume accomplishment driven, not just a list of your responsibilities** – [This guy puts it best](https://www.linkedin.com/pulse/20140929001534-24454816-my-personal-formula-for-a-better-resume/) TL;DR: Your bullets should be in the format -> Accomplished X by doing Y as measured by Z.
* **Don’t put school projects that every other CS student in your school has completed.** Recruiters are able to figure it out and will look down upon this a lot, as it shows you’re not doing anything outside the classroom to forward your career. Capstone projects are perfectly okay.
* **Make it a simple, one-column that recruiters can easily read through.** There’s no need for pictures, graphics, colors, fonts, etc; the ATS can't parse this! Overall, keep it simple; the content should be carrying you.**Exceptions:** The company you are applying for is small, you’re going to a career fair and you know your resume will be hand-read, you’re a UI/UX person or a Graphic Designer.
* **Have at least 3 minimum (I aim for 4-5) per work experience/project**; it makes no sense when you have such amazing experience and only put two bullets.
* **If you have a GPA lower than a 3.0, do not bother keeping it on the resume.** If you have a 3.5 +, make sure to keep it.
* **Make formatting consistent.** This should be a no brainer, but I still see folks’ resume with different fonts, spacing, etc. It’s annoying; don’t do it.
* **Focus on individual contributions and leadership, not the team.** Recruiters are looking for self-starters and leaders that can see a project throughout the life-cycle, not just another code monkey.
* **Expect to be tested on anything you put on your resume.** If you don’t think you can answer questions about a skill, tech, or experience on your resume, don’t bother putting it in.
* **Make sure to add these items in your resume:** Name, School, GPA (unless its less than 3.0), Work Experience, Projects, Skills (one line for languages, one line for tools/platforms are what I’ve seen the most), relevant links (GitHub, Website, Portfolio).
* **Take out any old or irrelevant experience.** Nobody cares about that Tic Tac Toe game you made in high school.
* **Get your resume reviewed multiple times by experienced people in tech.** /r/csMajors and /r/cscareerquestions also has a weekly resume roast thread that you can take advantage of.

## Searching for Internships

Searching for internships in CS is really different and harder from searching for internships in other professions. CS internship interview processes are often longer and much more technical on what you have learned as a CS major. We've prepped 2-3 months beforehand on CS concepts, whiteboarding, etc.

## Timeline

This timeline primarily focuses on large, non-government/defense companies or competitive startups. This also assume you are applying for a summer internship.

**August - September:** Applications are opened to the public. Make sure to look out for positions and apply early, as most companies admit students on a rolling basis. A site that we used often is [Apply.fyi](https://github.com/rishisshah/reddit_guide/blob/master/apply.fyi). After applying, you may receive an automated (< 48 hours) invitation to complete an Online Assessment, consisting of multiple choice and/or coding questions about Data Structures, Algorithms, and Run Time Complexity. You will have usually 1-2 weeks to complete the assessment. Please that you may be rejected if you are not able to pass 90% of the questions on the assessment: Please also note that you may be instantly rejected due to things out of your control like years of experience, cancellation of internship, internal corporate issues, and more. Don't take rejections too seriously; just keep applying!

**October - November:** After passing the resume screen and the OA, you will be contacted by the company's recruiter for a phone screen. During the screen, you will probably be asked a few confirmation questions about your resume, sponsorship, years of experience with X, etc. and minor behavioral questions like what made you apply for this position, what are you pursuing outside of class, etc. You may also receive questions about your CS fundamentals e.g. what is a hashtable, whats the difference between a process and a thread, what is the runtime complexity of sorting a string, etc. As long as you're cool and confident (and not cringe/edgy), this part should be a breeze.

**November - Mid January:** If you made it through the two Thanos snaps, you will be invited to an onsite “Power-Day,” where interviewees attend 2-4 whiteboard interviews while being grilled on their technical skills and projects. Some companies make applicants go through a panel interview, where a team of 2-5 Software Engineers grill you on technical questions and your resume. You are often pampered with free travel, food, stipends, etc.

**December - February:** If you were deemed a good fit by the hiring committee, you will be extended an offer to intern at the company during the upcoming summer for 10-12 weeks. Remember, nothing is final until you receive an offer letter in your inbox. Some companies may also place you on a wait-list and offer you a spot if someone were to reject their offer letter.

For government orgs, defense companies, and smaller organizations, the recruiting season starts in February/March and usually ends in April and May. After applying online and passing the resume screen, you will usually be immediately pushed to an on-site interview. Most likely, you will be interviewing with your future boss/co-worker.

Please note that internships are not only offered in the summer, they are provided in the Fall, Winter, and Spring (rare) as well. The competition for these internships is usually lower, and the process usually starts 3-4 months beforehand.

## How to get the Interview

Besides following resume tips, make sure to apply to as many places as you can. To get our first internships, we recall applying to approximately 250-300 places before we secured our internship plans for that summer. Also, if you do get ghosted, don’t take it personally, usually, university recruiters often spend so much time reviewing a lot of applications.

Other precautions to take to get noticed are to try attending career fairs if you can, you might be able to get an interview(worst case, free swag!). Other than that, try reaching out to upperclassmen or friends you know that interned and ask for referrals. It’s one of the best ways to get noticed!

## What to expect

As part of the interview process, there’s 4 types of interviews that you should make sure you know.

**Behavioral Interview:** These interviews ask you questions about culture fit such as “Why are you a good candidate” and “Tell me about a time when you ...”

**Coding/Technical Interview:** These interviews ask you questions similar to what you see on Leetcode and Hackerrank. These interviews are designed to test your Data Structures and Algorithms knowledge.

**System Design:** System Design involves the interviewer testing your building to design a service/software and test your knowledge of understanding what things to use for the task and how you will integrate them together. You’re definitely not expected to know this and it’s not likely you’re gonna get asked this. Places that could ask you this are Unicorns, Trading Companies and Hedge Funds, and Big Established Companies.

**Concurrency/Low Level Interviews:** If the company’s biggest product involves low level principles such as networking principles and kernel stuff, there’s a possibility you can get asked this. Places that come to mind are hardware companies and trading firms.

Some companies may adopt only one of these interviews and some may adopt all.

## How to Ace the Interview

It’s highly recommended that you look up the interview experiences that other students have faced so that you can potentially filter out companies with red flags and know what questions to expect. Common sources to search up on this would be Reddit (r/csMajors and r/cscareerquestions), Jumpstart (Relatively new portal for students), Glassdoor and maybe Blind (Aside from the toxic TC or GTFO culture, they do give good advice on interviews). With that said, here’s some advice we have when you approach each kind of interview we’ve seen.

## Advice on Behavioral Interviews

Use the [STAR method](https://www.thebalancecareers.com/what-is-the-star-interview-response-technique-2061629) when describing your experiences. Being quantifiable with the impact of your actions will impress the interviewer.

## Advice on Technical Interviews

Begin by reviewing your notes from the Data Structures and Algorithms class. Do not proceed further until you know how to implement these DS and As from scratch with the language of your choice(If you do know python, it’s recommended as there’s a lot of builtin features!). After doing so, we highly recommend a book like CTCI and EPI to gain a review on programming language details and your DS and As. Then, visit sites like LeetCode to practice real questions from major companies. A Facebook Engineer completed 600 LC problems and compiled the most important ones into a [list here](https://www.teamblind.com/post/New-Year-Gift---Curated-List-of-Top-75-LeetCode-Questions-to-Save-Your-Time-OaM1orEU). During the interview, make sure to talk out loud about possible approaches and tradeoffs before whiteboarding. It is perfectly acceptable (often recommended) to ask the interviewer to ask questions about the problem and get clarification. Once you have an idea in mind and have talked about it with your interviewer, begin whiteboarding. While you talk about the final idea you want to use, write out pseudo code and comments about all the steps you need to implement in order to finish coding your solution. After that, start coding. Make sure to have proper function headers, syntax, spacing, classes/structs, imports, etc. After coding your solution, give a brief explanation and attempt to make it run with less space and in less time (if your solution is not as efficient as you think it can be).

## Advice on System Design

These are somewhat hard to approach if you don’t have experience ever doing it. If you do have experience designing and building services in your spare time and as part of your work experience, definitely rely on your experience. An important thing is to definitely ask clarifying questions. There might be hidden requirements you didn’t think about that could drastically change the way you approach the solution.

## Advice on Concurrency/Low level

Understand basic principles such as Processes vs Threads (A lot of people don’t know the difference!)TCP vs UDP and how to make an application thread safe. Other than that, it’s recommended that you familiarize yourself with basic OS concepts such as Deadlocks, locks that you can utilize to make an application thread safe, etc.

## Searching for Full Time Jobs:

**The big bucks.**

The process for finding a Full-Time Job is usually very similar to finding an Internship. There’s three main differences are:

1. **Harder Questions**. Ex: Google usually asks Leetcode Mediums to Hards + the special Leetcode Hard question that Google asks it’s applicants (they create a new one every year).
2. **More Rounds of Interviewing**: For example, Microsoft makes interns do 2 rounds while New Grads do 4 rounds during the onsite part of the process.
3. **Compensation**: Interns usually get an hourly rate and, possibly, a housing stipend. New grads, however, are given a yearly salary and, possibly, a sign-on bonus, stocks, and benefits e.g. health insurance, vacation days, etc.

The process for finding a Full-time Job won’t really change as much as finding an internship, but keep in mind that the bar is higher. This is probably the biggest reason why you should look into interning early; by getting an offer at the place you like, you don’t need to go through the daunting process of finding a full-time role.

Get as many offers as you can this time around, so you can negotiate and select the position, company, compensation, and location that works best for you.

## Negotiation

Negotiation is a really powerful tool that you can use in the interview process, even as an intern. There’s a lot of guides to negotiation and we recommend Nick Singh’s guide (Look at his LinkedIn and newsletters) for more.

## Final Thoughts

University is a probably the most important time of your life and a foundational block of your CS Career. Like any foundation, it must be sturdy and takes a tremendous amount and energy of time to develop. Take advantage of all the resources (like this one) you can get your hands on. Definitely learn from the mistakes people have made and make sure you don’t repeat the same mistakes.

‘Stay hungry. Stay foolish’ - Steve Jobs",1600347181.0,2020-09-17 08:53:01
207,100 pieces of advice I wish I had been given when starting my career as a software developer 20 years ago,1113,bu84u7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bu84u7/100_pieces_of_advice_i_wish_i_had_been_given_when/,426,"I found this subreddit a few months back because people were linking to my work on ""[How to Deal with Difficult People on Software Projects](https://people.neilon.software/)"" in comments, and I saw the inbound link traffic in my server logs. When I first discovered cscareerquestions, I spent about three days answering questions before I gave up because there were too many questions to respond to, and I was starting to sacrifice quality for quantity.

&#x200B;

I made a mental note to return to this sub and try to do something to answer as many potential questions as I could.  I created the following list to attempt to consolidate all the advice I would have liked to have given to the hundreds of career questions that are being asked here every day:

&#x200B;

1. **Make smart life choices** – You don't want to wake up one day as an old person full of regrets. If you have a chance to do something bold, daring, unexpected, and scary do it if you think not doing it will weigh on you for the rest of your life.
2. **Teach yourself to teach yourself** – All formal education does it get you to the starting line of your career. To win the race, you have to upgrade your knowledge and skills continually. To do that, you need to be continually learning new things; and to do that, you need to learn how to learn anything you want to learn.
3. **Find a software architecture mentor** – Learning to code is easy. Software architecture is a difficult skill to develop and having an experienced architect to mentor you will help immensely. Just make sure the architect is an actual architect and not just someone with an architect title.
4. **Find a business mentor** – Software developers generally are miserable at understanding what makes a business work. You can read all the books in the world, but having someone non-technical with a lot of business experience help guide your career will not only help you avoid a bunch of easily-avoidable pitfalls, but will most likely make sure you end up making a lot more money that you would have otherwise.
5. **Keep the salespeople happy** – If the product you are working on has a sales team, then make sure those salespeople are always happy with you. Salespeople are paid to talk and if they like you, they will talk to everyone about how much they like you; if they don't like you, they will make sure everyone knows how much they don't like you.
6. **Study, learn, and master communication** – The most valuable skill in your career is communication, your ability to code comes second. If you don't know how to listen and understand other people, as well as how to get other people to listen to you, your career is going to be stuck in neutral.
7. **Learn to negotiate** – Whether is negotiating deadlines, requirements, or compensation; your skills at negotiation will be invaluable for your entire career.
8. **Don't leave money on the table** – When negotiating a job offer, make sure that you get the maximum budget they allocated for that position. You never want them to celebrate hiring you with, ""Wow, we got them cheap!""
9. **Develop a good handshake** – Developing a good handshake takes practice but can be learned quickly. Once you meet someone with a good handshake, take that opportunity right there and then, and ask them to teach you that handshake. Your handshake is one of the first impressions people have of you, and if it's a dead fish they will assume you lack confidence.
10. **Look people in the eye** – When you are talking to someone, or they are talking to you, make eye contact. Most communication is non-verbal, and you don't want to be looking somewhere else when they communicate something important non-verbally.
11. **Speak assertively** – Be open, honest, direct and respectful in all of your communication; if you are, you can say anything to anyone.
12. **Avoid offending people if possible** – If it is possible to say what you need to say effectively without offending someone, avoid offending them. If you can't say what you need to say without offending, at least try to limit the degree of offense by being polite.
13. **Never get upset or frustrated** – There is just never a good reason to let a job upset or frustrate you. It's just a job, and if you don't like it you can leave whenever you want.
14. **Leave work at work** – When you leave work, switch to focusing on your personal life. Jobs are temporary, your personal life is forever.
15. **Learn to influence other people** – If you have to choose between authority and influence, go for influence. Influence is primarily exerted by being someone people respect, and then persuading them to do what you need them to do.
16. **Plant many seeds** – Don't go all-in with any one initiative. Start a bunch of initiatives because some of them will fail and you want at least some to succeed.
17. **Don't pay attention to titles** – Titles are meaningless unless they bring you more money. Other people's titles may be deserved or not, so just judge them as individuals and not by their title.
18. **Read the seminal books on software design** – Stack Overflow can't teach you software design. The best way to understand software design is by reading the best books written on the topic by people who know what they're talking about. There are many, many recommended reading lists for software developers, so find one you think you can manage and get started. Since no software developer read these types of books anymore, you will be at a considerable knowledge advantage over your peers.
19. **Listen to audiobooks constantly** – When you have a chance to listen to an audiobook do so. That can be in the shower, while running errands, doing chores, on your commute, or as you're falling asleep.
20. **Learn cybersecurity** – Cybersecurity is an aspect of software development that is never going away, and it's getting more complicated to learn day-by-day. Make sure you do everything you can to learn as much as you can so that you are not the cause of the world's next critical security breach.
21. **Learn performance tuning** – You will most likely need to performance tune the software you write at some point, so you may as well learn how to do it. Performance tuning is a broad and complex topic and is often specific to a particular application. Just remember not to performance tune an application without measuring the current total performance, and the total performance after tuning, otherwise you may be tuning something that doesn't have that big an impact.
22. **Dive deep into Databases** – Databases are not going anywhere, so learn SQL back-to-front, and up-and-down; then learn how to write proper schema's; then learn how to write high-performance queries. SQL is so easy to learn that people think they have ""learned databases"" after they've written a few select statements. Databases have a lot of depth and are often an essential part of any application you are writing.
23. **Learn multiple programming languages** – Not only learn multiple programming languages but learn programming languages that are very different from one another. Java, Python, JavaScript, Haskell, and Swift are good candidates because of how different they all are from one another. The more different the languages you learn, the more approaches you will have in tackling problems – no matter what language you are tackling that problem with.
24. **Master your language runtime** – If you're going to be working with a programming language for years, dig below the surface and figure out how the language's runtime works beneath the surface. Not only will you learn more about the language itself, but it will be invaluable as you learn how to performance tune your applications.
25. **Mitigate your haters** – There will always be people who don't want you to succeed, especially the more success you experience. If you can't convince your haters not to be haters, then figure out a way to neutralize all the harmful bile they'll be spewing in your direction.
26. **Learn to focus** – You need to focus to code. If you're addicted to your phone take it as seriously as a substance abuse problem and get your habit under control. Once you have, you can learn how to enter into the flow state, which is a critical skill for a software developer.
27. **Get off of social media** – Social media is only suitable for virtue signaling and making other people feel inadequate. If you think your friends will miss you, stop using for a week and see who notices. Invite the people who notice out to dinner and learn how to communicate in-person rather than through a tiny screen.
28. **Stop playing video games** – you're an adult. Act like one. Video games take irreplaceable hours of your life and flushes them down the toilet giving you nothing in return. If you want to be a professional eSports competitor, then go all-in on that life. If willing eSports tournaments is that not your passion, then put down the controller and focus on things that matter in life.
29. **Be disciplined** – Discipline is doing what has to be done when it has to be done whether you want to or not. Discipline will be required to accomplish anything worth accomplishing. Suck it up and get it done.
30. **Always be polite and professional** – There is never a reason to be rude and unprofessional. Even if someone is being disrespectful to your face, you don't have to stoop to their level. If you're not sure how to burn someone while being polite and professional watch any British comedy.
31. **Never be intimidated by anyone** – Unless someone has the ability to inflict physical harm or take away your freedom, there is no reason to be intimidated by them. People in corporations will develop massive egos based on their own misconception that people can be intimidated by them, but don't feed into their fantasy.
32. **Stand up for yourself** – Never go looking for trouble, but when trouble comes your way don't back down. Backing down from a coworker or manager who is a bully will haunt you for the rest of your life. Even if you suffer the consequences for not backing down, at least you will be able to look at yourself in the mirror and live the rest of your life with no regrets.
33. **Have courage** – Courage is acting despite your fear, not the ability to feel no fear. There will be plenty of times when you will be afraid to do something, but don't let that fear rule you.
34. **Protect your reputation at all costs** – Your reputation follows you everywhere you go. A good reputation is very difficult to build, and very easy to destroy. If something or someone is threatening your status, you have to act no matter the costs.
35. **Own your strengths and weaknesses** – You cannot and will not be good at everything. You also cannot and will not be bad at everything. There will be things you are good at, and things you are not good at. That's life. The key is to be aware of the things you are good at and play to those strengths while minimizing any negative impacts of your weaknesses.
36. **Be conscious of your own biases** – We all have biases, but none of us spend the time necessary to understand them much less mitigate them. Do your best to understand the biases you have, and try to act in a conscious, deliberate manner rather than just doing what feels natural. If your biases are inappropriate for the workplace, acting naturally is the last thing you should do.
37. **Be aware of Dunning-Kruger** – You don't know what you don't know. None of us do. When you think you know something, question that assumption and try to find a way to verify that you know it. Chances are, what you think you know well you are still only a novice at.
38. **Don't worry about getting fired** – Getting fired is not the worst thing that can happen to you, and depending on the situation might be just what you need to point your life in the right direction.
39. **Don't ""suicide by cop""** – If you want to quit your job, then quit. Don't be a bad kid and hope that your manager eventually gets fed up and fires you because you lack the courage to quit yourself.
40. **Recover quickly from failure** – The more risks you take, the more you are going to fail. If you take no risks you won't accomplish anything worth accomplishing. Therefore, if you want to accomplish something worth accomplishing, you have to take risks and are going to fail. The key to failure is to learn from that failure and move on as quickly as possible.
41. **Be ambitious** – If are stuck in a job, you might as well be the person running the show. The alternative is to be happy with your position on the org chart and watch your peers get promoted around you. Having to congratulate people for a promotion they probably didn't deserve gets old quick, so you might as well work to get promoted so that someone you trust will be in charge – you.
42. **Don't be happy with your ""good job""** \- Almost no job is good, that's why there are people who sacrifice everything to form their own company and be their own boss. Your goal is to have a good life - your job is only there to support that goal. If you job doesn't support that goal, it's not a ""good job.""
43. **Present yourself as you want to be perceived** – If you want people to perceive as an immature slob, keep dressing like you're a freshman in college. If you want to be perceived as a powerful force to be reckoned with, dress accordingly. A tailored outfit and an expensive pair of shoes not only conveys seriousness but it makes you feel like a superhero.
44. **Put a filter between your brain and your mouth** – Master the skill of not saying what you think or feel as early in your career as possible. No one wants to hear your unvarnished truth about anything. Just because something pops into your brain to say, it doesn't mean it's a good idea to say it the way it popped into your brain. Learn how to phrase what you're thinking in a way that palatable to the audience you're speaking to.
45. **Learn to talk to executives** – Relationships with executives can make or break your career. The key thing an executive doesn't have is time, so if you can't convey a point in 10 seconds or less, refine and condense what you have to say until you can. Nothing frustrates an executive more than being cornered by an employee with nothing of substance to say.
46. **Read the company handbook** – Every company has a ""handbook"", even if that's not what they call it. Whatever it's called, your company has guidelines for behavior that they expect their employees to adhere to and you need to fully understand your company's expectations of you.
47. **Resign from death-march projects** – When you see that your project is going to fail, leave as soon as you notice. You may feel like if you stay you can save the project, but it's very rare that a single person can make-or-break a project. When you are in a no-win situation there's no honor in going down with the ship.
48. **Be your own cheerleader** – You will rarely if ever get authentic complements on your performance. In order to keep yourself positive and motivated, you need to celebrate your own accomplishments independent of the company you work for.
49. **Develop a support circle** – Occasionally life is going to kick you in the teeth so hard that you are going to need help getting up again. Your support circle are the people who will be there for you even when it's inconvenient for them. ""Fairweather friends"" are not your friends, they're just people who want company so they don't have to eat alone.
50. **Don't confuse confidence with arrogance** – It can be very difficult to tell the difference between confidence and arrogance in someone you just met. The key difference is that confident people believe they can do whatever they set their mind to, and arrogant people are just trying to get people to respect them without working to earn their respect.
51. **Change processes that don't work** – If you are using a process that is not working, change what's not working. Don't listen to people's excuses of what can't be changed, just start doing things differently and dare people to stop you.
52. **Do at least one startup** – Startups give you experience in how to go from nothing to a shippable product. Considering a software developer's job is to create shippable products, getting that end-to-end knowledge will be invaluable throughout your career.
53. **Do at least one enterprise** – Enterprises give you experience in how big-business runs. Even if your heart is in startups, understanding corporate bureaucracies, hierarchies, politics, and inefficiencies will help you anticipate their moves when you eventually have to sell to them or compete with them.
54. **Learn to manage your manager** – Your manager is just a person like you. They might have a few more years of experience, but sometimes they don't. ""Managing up"" is you giving your manager advice and guidance that optimally is in everyone's best interest.
55. **Learn to code fast** – Your ability to code fast will always come in handy. Being able to code fast doesn't mean you always have to; it just means that if you need to get something built in a hurry you can. Coding fast has almost no drawbacks unless you forget to pump the breaks when you're making your coworkers look bad.
56. **Don't chase certifications** – If you know you can't get a job without a certification then, by all means, get it. Otherwise, don't assume that just because you got a certification in something, that a company will find you more desirable. They may, or they may not.
57. **Don't work with your friends** – It may seem like a good idea to work with your friends it never works out. Eventually, someone gets promoted and the others are jealous, or someone doesn't pull their weight and expects their friends to cover for them; or other people start to resent you being a part of a clique they're not a part of. If your coworkers become your friends eventually then fine but don't actively seek out working with your friends.
58. **Do not define yourself by a technology stack** – You are not your technology stack. You will change which technologies you work with several times throughout your career, so don't paint yourself into a corner by going all-in on some technology that you just so happen to be using today.
59. **Don't obsess about trends** – Trends come and go and are most often are overhyped by the media. Just because everyone says something is the next big thing doesn't mean it is. Develop yourself as an intelligent skeptic that doesn't their own investigation before following the crowd. You have to stay on top of the trends of the industry to make sure you don't miss something important, but don't let trends dictate the course of your career.
60. **Always get plenty of sleep** – Sleep is critical for both your mental health as well as your performance as a software developer. There is never a good reason to not get enough sleep, as not getting enough sleep will eventually catch up with you in non-obvious ways.
61. **Avoid socializing with your coworkers** – Your coworkers are not your friends. Your friends are your friends because of some personal bond you share. Your coworkers are people who get a paycheck from the same place that you do. The more you socialize with your coworkers the harder it will be for them to take you seriously, and as a professional, you need your coworkers to take you seriously to be effective at your line of work.
62. **Understand the difference between friends and coworkers** – The people you work with are not your friends, they only work at the same place that you do. If you wouldn't bother to keep in touch with them after you left to go work somewhere else, they are your coworker. If you would miss them and want to stay in touch with them if you left - and they feel the same - then a coworker relationship has the potential to turn into a friendship.
63. **Don't be naïve** – The world is messed up and jobs are no different. There are good people with good intentions, and there are bad people with bad intentions. Don't assume everyone around you has good intentions. Be skeptical of people's motivations, and trust your instinct when something feels off.
64. **Learn who to trust** – Just because you think you can trust someone with sensitive information doesn't mean you can. A good rule is to simply never share sensitive information unless you absolutely have to and only with people your company authorizes you to share it with. People love to talk about what they know that other people don't, and people can violate your trust accidentally such as when they hesitate in answering a direct question.
65. **Keep your enemies close** – This old adage is popular for a reason. When someone is clearly out to get you, befriend them and get to know them. If that turns into a genuine friendship, perfect. If it doesn't, at least you can glean why they're your enemy and adapt accordingly.
66. **Keep physically healthy** – The job of a software developer is sedentary unless you have a treadmill desk. You have to find the time to move your body and keep it healthy, or else you will end up uncomfortable in your own skin and in-and-out of the doctor's office due to living your life in front of a keyboard.
67. **Invest in a good chair** – You back and neck will give you trouble your entire career unless you learn how to hold your body while you code. Since most of us code in a chair, make sure it's an ergonomic chair that holds your body in the correct posture to avoid long-term physical maladaptations. You don't want to have a hunchback as you age.
68. **Protect your wrists** – Carpal tunnel syndrome is a real thing. Get the right keyboard and mouse, and learn how to use them in a way that doesn't permanently damage the way you make a living: typing.
69. **Protect your mental health** – Ignoring problems at work, working overtime, not dealing with problems as they occur are all a recipe for needing a lot of therapy later in your career. Deal with problems as they come, and refuse to accept any give of stress people try to give you.
70. **Keep your living expenses low** – Software developers make a lot of money compared to other professions, so you might think you're rich. You're not – you're just making a high salary. Wealth is time + freedom, and the measure of your time you have to enjoy your freedom. If you live above your true means, the things you own will eventually own you.
71. **Have a saving account with six months of salary** – Living check-to-check is insane when you start making decent money. Stash money away in savings such that if you suddenly need to find a new job, you don't have to stress about how to pay your rent or mortgage.
72. **Build your network of contacts** – When it comes to finding jobs, it's often who you know more than what you know. That's an immutable law of life. Level the playing field by making sure that in addition to knowing how to do the job, you also get introductions that are at least as good as other people leveraging their network.
73. **Speak at conferences** – Tech conferences are always looking for speakers who can present on the latest technology. Spend a weekend getting familiar with the hottest trendy technology and submit an abstract to a bunch of conferences when they put out their call for papers. Don't worry about being an expert in technology – almost no one speaking at a conference is.
74. **Recruiters are not your friends** – Recruiters tend to be friendly when they think they can make money from you but are only there to facilitate a transaction where you are the commodity being traded. Keep the relationship professional and business-like. Everyone should complete the transaction feeling good about the deal: you, your new company, and the recruiter.
75. **Have principals and stick to them** – Wherever you get your principals from your family; your religion; your ethics; your morals; your opinion; make sure you have them and don't violate them under any circumstances even if it costs you an opportunity.
76. **Live an intentional life** – Don't let other people dictate the course of your life because they don't know the life you want to live. Only you know what an intentional life is for you. You don't want to look back on your life and realize you are stuck in a life-plan you hate because someone else gave you that plan and you didn't question it.
77. **Trust your gut when considering an offer** – An offer may have all the cash, vacation, and perks you are looking for, but if something seems a bit off, and your instinct is not to take the job, don't take the job. Your brain is good at analyzing complex situations but bad at articulating them. Often, the collection of non-verbal communication and situational inconsistencies only show up as you have a bad feeling about the job. Trust your feelings.
78. **Help people who want your help** – If someone asks you if you have time to help them, always say ""yes"" and then figure out where the extra time will come from later. They will become your fan for life.
79. **Don't help people who don't want your help** – If someone needs your help, but doesn't want your help, leave them alone. No come comes from offering help to someone who doesn't want it.
80. **Stand up for people who can't stand up for themselves** – You will run into a lot of people in your career who for whatever reason are getting screwed over
81. **Be a team player** – Don't just give lip service to being a team player: put the needs and concerns of the team ahead of the team. Step up when something difficult needs to be done, back-up your teammates when they need your support, and if you have to drag the entire team kicking and screaming across the finish line so you can all win.
82. **Figure out what ""success"" and ""failure"" means at your company** – Every company is different and defines a successful or a failed software project slightly differently. Things are rarely as simple as they are presented in meetings, so ask questions to figure out what rewards or consequences await you for success or failure.
83. **Figure out what the mission is** – Managers are particularly bad and explaining the overarching vision that you are a part of, often because they don't know. Do your best to figure this out, because the mission is always broader than adding a feature of building a new app.
84. **Commit to the company's mission** – If you are receiving a paycheck, then commit to whatever mission you are a part of. This isn't about corporate loyalty, but about professionalism. If you don't want to commit to the mission, find another company with a mission you are willing to commit to.
85. **Never, ever gossip at work** – There is never a reason to start gossip or listen to gossip. If someone tries to gossip with you, politely decline to engage. People will respect you for your integrity.
86. **Don't get drunk with coworkers** – Grabbing a drink with your coworkers if often unavoidable, but never ever get drunk. Absolutely no good whatsoever can come of you slurring your words and stumbling around drunk with people you expect to have a professional relationship with the next day.
87. **Embrace capitalism** – If you are receiving a paycheck from a company in exchange for your labor, then you are part of a capitalistic system. It's easy to be a replaceable cog in a big machine if you don't understand that you are in a big machine. Learn the rules of capitalism, and position your career so that you're the person in charge making the most money, and not the person working overtime for hardly any money.
88. **Avoid brainstorming sessions** – Brainstorming is a social activity masquerading as an intellectual activity. There are going to be times when you need to work with people to solve tough problems, but you won't solve them by doing the corporate equivalent of a party game. Tough problems need to be defined and rigorously analyzed; practical solutions need to be proposed and either accepted or rejected based on real-world constraints. Brainstorming is just people pretending they care about solving a problem when in reality they usually don't.
89. **Be patient** – Often times to win big you have to hold your position rather than take an action. Sometimes that big initiative that will make your career is rejected but might be accepted if you pitch it again in the next fiscal year. Stalk your game and strike when the time is right. Don't get frustrated and miss an opportunity coming your way.
90. **Learn to make diagrams** – Anything that can be expressed in a document can be more clearly expressed in a diagram. Even a crude diagram can be useful if it simplifies a complex topic. You don't have to be an artist to create a diagram, just try to convey as much useful information in as simple a diagram as you can. With diagrams remember less is more.
91. **Treat your testers well** – The people who test your software can make your life a living hell, or they can make it a breeze. If you work to keep them happy, they'll usually return the favor. Remember, people who test software are your most valuable allies, as they guard against your inadvertent mistakes negatively impacting your reputation.
92. **Pay attention to the little details** – Being a software developer means you pay attention to the little details other people haven't even thought about. You have to think about the problems you are solving far more deeply than the people who are telling you what to build, so always go the extra mile and make sure you don't miss anything at all when you deliver your feature.
93. **Learn to compromise** – Sometimes to get what you need you have to give a little to the other party. If you are having trouble building consensus, then try to identify smart compromises and offer them to the people with objections.
94. **Treat people well** – You can tell the character of a person by how they treat people they don't have to treat well. Whether it's the CEO or the person emptying your trash, treat everyone with respect and dignity.
95. **Respect expert opinions** – Experts are a dying breed, but if you find one, learn to trust what they have to say. The difference between success and failure can sometimes be paying attention to what an expert says. To reap that benefit, however, you first have to acknowledge that experts exist and that their opinion is more useful than the opinions of non-experts.
96. **Be a Mentor** – Once you have a few years of experience under your belt, try taking someone under your wing to show them the ropes. You don't have to be a master of your craft to be immensely helpful to someone who is just starting out.
97. **Don't be afraid of taking small steps** – Often to accomplish something difficult you have to take things is small steps. People like to take big steps as it makes them feel more powerful, but Rome wasn't built in a day. Find the small steps that get you closer to your goal and follow them consistently until your goal is achieved.
98. **Reserve time for thinking** – Producing software requires you think of a solution, and then you type that solution into a computer in a particular programming language. Anyone can type something into a computer, the difficulty is in thinking up what to type. Before you start coding, always set aside some time to think of what you're going to write before you write it.
99. **Be open to other people's opinion** – There are going to lots of people you don't agree with, but that doesn't mean you should ignore their opinion. Sometimes, even a bad idea can be helpful if it helps you more clearly articulate what makes an idea bad. Remember, however, that being open to the opinion of others doesn't necessarily mean you should do what they are suggesting.
100. **Stop feeling like an imposter** – We're all imposters. The software developers at the NSA looking for global cybersecurity threats are imposters compared to the software developers who write code that pilots rovers on mars who are imposters compared to software developers who write missile interception software on battleships who are imposters compared to the software developers at the NSA. Everyone's an imposter compared to someone. Focus on your specialty rather than worrying about what other people are doing.

&#x200B;",1559120069.0,2019-05-29 04:54:29
208,Is there a calmer community similar to this one?,1109,b8dy9x,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/b8dy9x/is_there_a_calmer_community_similar_to_this_one/,517,"I'm so tired of the Silicon Valley/Big N/Leetcode/'220k salary for a new grad internship ok?' circle jerk.

I just want to see discussions of an _actual_ career in Software Dev. and Computers without having to go through 100s of comments of the above.

People dissing others for being happy making whatever in Croatia because 'lol wtf why u don move SV nub, I got 20 offers @ 200k omg' 

And then, on the other hand, seeing the depressing threads of perfectly fine developers going full depressed spending time here comparing themselves to these people who live/breathe SV and nothing else.

Where can I find discussions on mastering your craft, honing your skills the slow, steady way; loving what you do, etc. that's not tied to specific tech.?",1554205143.0,2019-04-02 07:39:03
209,My experience interviewing during a pandemic,1109,g1v1lj,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/g1v1lj/my_experience_interviewing_during_a_pandemic/,163,"Hi all, 

Having just finished a rigorous interview process, I thought it might be helpful for me to share my experience / takeaways while also highlighting how COVID affected the process.

### Background

5 YOE, fullstack/backend engineer in NYC area. To prepare for interviews, I started a typical study routine (ie Leetcode) around December. In total I did around 200 problems, mostly mediums/hards. For system design, I used the Grokking the System Design Interview course.

### Numbers

**25 companies contacted -** Given how much time I invested in studying, I wanted to get the best possible return by casting the net pretty wide with regards to company selection. For me, this step was pretty easy since I have the good fortune of having previous experience at a well known unicorn. Once I found a company I knew I was interested in (I'd use resources use glassdoor and linkedin to find them first), I'd reach out to one of their recruiters via LinkedIn and usually they'd respond pretty quick by setting up an intro call. I started this process back in Jan/Feb -- well before COVID was mainstream news.

**17 recruiter calls -** The basic introductory call where it seems like the recruiter's main goal is to confirm you are who your resume says you are, and maybe that you're not a complete maniac. I actually got rejected at this stage by a few companies which surprised me. I think it's because I wasn't well prepared yet because I assumed this stage was a freebie and some recruiters actually asked challenging questions about my background, interests, etc that I didn't have great answers for. Lesson learned: prepare for these calls by anticipating what they might ask, have a ""story"" about your background that makes it clear why their company is right for you, etc.

**13 technical phone screens -** It might be more accurate to call this stage the ""pre-onsite"" technical screen because a few of these interviews were in the form of take-homes and online assessments. One thing I noticed compared with when I went through this whole process a few years ago is that there was much more diversity with the format of the technical screen. Before it might've been 70% LC easy/medium questions over coderpad, whereas this time I'd say it was 70% non-LC style questions such as debugging pre-written code, implementing a class, Q&A discussions, etc. This was a welcome change. This stage was right around COVID was becoming a big deal.

**9 virtual on-sites -** Of the above 15 technical phone screens, I only failed 1 (Amazon's online assessment where one of the questions was a LC hard I hadn't seen before). But 3 companies couldn't continue because they paused hiring and 1 company I decided not to continue with. At this point COVID was in full effect and every company had gone remote, so that meant all my on-sites were being converted to virtual. These on-sites were mostly done via zoom or some similar VC software and for the most part they went smoothly. The trend of de-emphasizing LC style questions in favor of other formats was happily present for these on-sites as well. The system design interviews did feel less fluent due to the constraint of needing to use software to do the ""whiteboarding"", but the interviews were very understanding and in a few cases they even offered to help me draw the diagram while I explained my thoughts which is something that very worked well. I will say that doing these interviews virtually seemed particularly taxing for reasons I still don't fully understand. Maybe there's extra effort being used to communicate virtually that isn't needed in-person. I don't know, but I was drop dead tired after each session. For this reason, I would strongly urge you to ensure at least one break is included in your schedule, and ideally 2. Even better, you could try asking that the interview be broken up across 2 days. The added benefit with this approach is that the company could evaluate your feedback on Day 1 and only proceed to Day 2 if appropriate. This saves everyone some time. Another tip is to use COVID as a way to connect with your interviewer. Good or bad, we're all going through this shared experience so might as well use it to try to build report with your interviewer. Obviously be tasteful though.

**Post interviews**

After the dust settled,  I landed 3 offers, and am still waiting to hear back from 2 companies, 1 of which I'm hopeful will convert to a 4th offer. 2 more companies paused hiring which really sucked considering I went through the full process, but whadya gonna do. And finally I got rejected by 2 companies.

While overall I feel like my efforts were successful, I would still suggest holding off on interviewing until things normalize or better yet until the economy starts to recover. Virtual on-sites are doable but I much prefer real on-sites, and having companies drop out mid-process was also not fun. 

### Other takeaways

* Be careful of pattern matching. One downside of grinding LC is you become highly calibrated to match patterns. This is often touted as a benefit, which it can be, but it can also get you in trouble. For example, on a few occasions I was presented with questions that were similar to problems I'd seen on LC, but different enough where I couldn't just neatly overlay the solution from the LC problem, even though I tried. This caused me to go down the wrong path and waste too much time trying to ""remember"" a solution instead of just focusing on the problem at hand and trying to solve it from first principles.

* To help overcome nerves before an interview, do whatever it takes to put yourself into a good mood. For me this was going to the gym and playing uplifting music. I'd even watch standup comedy shortly before the interview to ease the tension. Smiling and laughing really do work wonders, so try to do both before and even during the interview.

* When grinding LC, one thing I would have done differently was to take more time to THOROUGHLY understand problems. I was treating it too much like a race to solve X problems (gee I wonder where I got that idea). But real learning comes only when you deeply understand the problem, what makes it hard, why the solutions work, etc. This might mean you spend an entire day on a problem. That's okay, it'll pay off.

* Spaced repetition. Another concept I wish I'd implemented earlier. Whenever you get a problem wrong, take time to understand the solution, then make sure to revisit it after a few days and try to solve it again. I'd even do this for problems you solve on the first try if they are very common interview questions. The repetition really locks in your understanding.


That's all I can think of, hope this helps somebody!",1586996094.0,2020-04-15 20:14:54
210,Falsely flagged for plagiarism by Hackerrank,1107,ffq25a,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ffq25a/falsely_flagged_for_plagiarism_by_hackerrank/,205,"I don't know if anyone else has had this issue, but I recently took a Hackerrank coding challenge, and was blackballed by the recruiting  company because the algorithm said I had, with ""100% possibility"", plagiarized for a particular problem.

First off the problem given was super easy. From my recollection, it was titled something like ""Missing Words"", and the jist of the problem was as follows:

Given a string s, and a substring t, where s and t are both space separated string sequences of words, and all words of t are definitely contained in s, return the ordered sequence of words in s that do not appear in the t subsequence as a list of those strings.

For example if our two inputs s, and t are

`s = ""I went to school last week and ate a super super carne asada burrito afterwards for dinner""`

`t = ""went last week and ate a super burrito for dinner""`

The expected output of the function would be  
`[""I"", ""to"", ""school"", ""super, ""carne"", ""asada"", ""afterwards""]` (note only one ""super"" in the result)

This is an extremely easy question, and took me 12 minutes to complete. When the recruiter got back to me, they then said that they hadn't had anyone finish it this quickly, and wanted me to explain why there was a plagiarism flag. After not understanding/believing my word that I had coded the example without any aid, they escalated it to their manager, who asked me to explain this...

[https://imgur.com/a/ay3sL3B](https://imgur.com/a/ay3sL3B) (What the recruiter saw from Hackerrank's plagiarism flagging feature, for reference, my code is on the left, and the ""plagiarism match"" code is on the right)

First off, it's evident from the solution of the other developer that they are more of a python developer (they use snake casing a.k.a. underscore variable naming), and I am more of a javascript/java developer (camel case variable naming). Second off, given that this is from Hackerrank, there are thousands of solutions, so if your code is ""clean"" and the problem is easy enough (only a list data structure, and one iteration is necessary for this particular problem), it's without a doubt that there will be a solution Hackerrank has received (in this case from over a year ago) that is pretty darn near what you have coded.

I'm just completely speechless that in this case, Hackerrank is telling companies that the the possibility of plagiarism is 100%, without any caveat or doubt. Any statistician would never commit to a 100% possibility in this context  - it would be completely non-sensical and inaccurate.

I'm willing to bet that I'm not the only person that this has happened to - and with the caveat being that I'm sure there are a ton of people who really do cheat on these assessments (I agree they have no business being software engineers or professionals), I think we can all agree that in the context of plagiarism flagging, false positives are much worse than false negatives, and that there needs to be additional context provided to non-technical recruiters so they have an idea of what they're looking at.

Does anyone have any similar experience or insights with this issue, or advice as how to ""un-blackball"" myself?


————————————————————
Update 3/10/20: 

This post blew up like nothing I could have believed, and got so big that a solutions engineer from HackerRank contacted me (in one of the threads below). During a call from London today, The engineer informed me that this issue has been escalated to being a priority for fixing (with an emphasis on the UI/UX with which it’s represented to hiring companies), and that much of the constructive criticism on this thread is directly informing some of these new changes. Kudos to everyone who contributed - this change wouldn’t of happened without you all.

 As for me, well let’s just say I learned a lot from this - both in my experience defending myself in front of a technical recruiter (who evidently wasn’t that technical), and just a ton about all your experiences using these automated tools both as candidates and hiring managers.

Oh, and thanks for helping me go from 10 to more than 1337 karma. Even though no job offer came of this...totally worth it ;)",1583761495.0,2020-03-09 09:44:55
211,Data from 1 Year of Applying for Software Engineering Jobs,1105,hz5a81,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hz5a81/data_from_1_year_of_applying_for_software/,376,"#**Intro**

I'm a recent Computer Science graduate from a public university in California. The reason I started studying CS was to become a Software Engineer. I had dreams of working at FAANG and at the time I didn't realize how foolish that was. As I got closer to graduating and started to apply for internships and jobs I began to realize how competitive the field was. I was a middle-of-the-pack CS student at public university. I never had a shot at FAANG.

I was originally set to graduate in December 2019, but decided to take an extra semester and graduate in the spring because I could not find a Software Engineering job. That turned out to be a mistake because I graduated during the peak of Covid-19. I officially graduated in May. I have applied to over 700 positions since July 27th, 2019. I am currently unemployed.

I decided to keep track of all my job applications because I knew I would have to apply to a lot of positions and I needed a way to organize them.

I'm posting now as a postmortem to my Software Engineering job search. Hopefully you can learn something from this, and if not maybe it will at least be entertaining.

#**Data**
[Here](https://docs.google.com/spreadsheets/d/1_7pS1LQ_aF_AbCm-7CHOZ4EAmnf1c7TmQVqw7m0f53I/edit?usp=sharing) is the raw data I collected. [Here](https://imgur.com/fVgorm6) is a pie chart breakdown of the outcomes.


I kept track of: The company name, the position title, the position location, the date that I applied on, the final outcome, whether or not I got an interview, and the platform on which I applied. 

Looking back I should have kept track on the date of rejection to figure out the average time it takes to get a response. There are probably other useful data points I could've collected to. Let me know if you have any thoughts on this.

#**Resume & Cover Letter**

I've made many changes to my resume over the course of the year. I'll post a few different versions here, though this is not an exhaustive list. 

[V1](https://imgur.com/FluOaoc)

[V2](https://imgur.com/PASQ7ne)

[Current Resume](https://imgur.com/Zw8DAQg)

There hasn't been any increase in responses to my resume as I've changed it. 

I've used a couple different cover letter formats, but I didn't take pictures of them over time. 

[Here](https://imgur.com/FVqx2ZZ) is the current cover letter format that I use.  I haven't noticed any increase in response when using a cover letter vs. not using one.

#**Responses**

* Before I began keeping track of my job applications, I was applying to internships my junior year. I applied for ~70 or so and was rejected or ghosted by them all. At the time, I thought 70 applications was a lot.

* During late October of 2019, I got my first response. I did well in a phone screen and then moved to the technical portion. I dropped an easy question because I took the interview at the end of the day. It was also my first technical interview so I was nervous and found it hard to think. Lesson learned. Take your interviews at a time of day when you're sharp and ready (in the morning for me).

* I've received a few coding tests that automatically get sent out to candidates. I usually do okay on those, but not stellar. Not good enough to get a job apparently.

* In June I interviewed with a local company and it went well. I passed the behavioral and the technical portion and was told I was being moved to the final interview stage where I would sit down with senior HR and management. When I followed up with them a week later the recruiter told me that they were ""pausing"" the position.

#**My ""Software Engineering"" experience**


**Job Offer**

If you were to go through my spreadsheet you'd see that I actually got an offer! I removed the companies name from the spreadsheet so as to not dox them since my experience there was very negative.

Late December of 2019 I applied for a Software Engineering job on Indeed. The listing was for a full time SWE and the pay was listed as 4,000 - 7,000/mo. The CEO got in touch with me and I interviewed the same day I applied. The interview went well and he offered me an ""internship"" as a contractor for $17.50/hr. 

I knew it was a bad offer, especially for California, but I accepted because I was desperate and foolish.

Within a week of working there I knew the job wasn't Software Engineering and that I was getting ripped off. In the first two weeks I was there, I didn't see any of the ""engineers"" write a single line of code. 

I was working along side the other ""engineers"" getting deliverables out to clients. The other ""engineers"" were making 60k+/yr salaried and I was making less than 30k/yr as a contractor. I'm pretty sure its illegal in California to hire someone as a contractor to do the same work an employee is doing (look at AB5), but that's beside the point. 

I stayed because it was experience I could put on my resume. At the end of March half of the company, myself included, was laid off due to covid. 

**HPE Internship Offer**

In late February I applied for and was interviewed for a summer internship with HPE. There were two rounds, one behavioral and one technical and I did well in both. The recruiter called me and offered me the position verbally and I accepted. 10 minutes later she called me back and asked me if I would be returning to school for Fall 2020. I said no, because I had planned to graduate in May. She rescinded the internship offer and I was right back where I started.

If this ever happens to you I recommend you lie. 

#**Conclusion**

Software Engineering isn't for everyone. I started my degree very hopeful and optimistic and now I am the opposite. If I knew it would be like this, I wouldn't have gone to college.

I'm not sure what my next steps are, but I know that I am done with Computer Science and Software Engineering. I just don't have the heart anymore.

 I'm considering going back to school to study some kind of engineering.

I hope you can gain some insight from this post and if not you may at least find the data cool to look at, or my story fun to read.

Thank you.",1595928133.0,2020-07-28 05:22:13
212,"As someone applying for jobs, its so awesome when a company like this that tells you why they arent interested instead of just ghosting you",1097,apb7jo,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/apb7jo/as_someone_applying_for_jobs_its_so_awesome_when/,122,"

https://i.imgur.com/WoNRfGA.png",1549878911.0,2019-02-11 04:55:11
213,2010 unemployed tech support >> 2020 software eng III. Thanks yall!,1097,eidvov,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/eidvov/2010_unemployed_tech_support_2020_software_eng/,140,"I was unemployed at the start of this decade due to the recession. Was in tech support wasting my time, not sure what I wanted to do at 26 years old.

After a few more odds and ends call center jobs I took school more seriously. I went to community college, transfered to UC Davis to study biochemistry for medical school. Then, after all that, realized it wasn't for me before graduating, I canceled graduation and rushed through a CS minor with a friend's advice.

That CS minor got me my first job which I did for 30 months before taking a new job for 60% raise. 

Thanks Jerome for gifting me a career, and a future. I miss ya bud and hope to see you again soon.

Edit: this got bigger than I expected,thanks! But seriously, couldn't of done it without r/cscareerquestions, and my friend/roommate from college, Jerome. He got me started, helped me through a lot of freak outs, and turned me on to r/cscareerquestions which helped me get my first position.

Edit2: if this keeps blowing up, Jerome will see it! Thanks everyone!",1577881388.0,2020-01-01 07:23:08
214,Name and Shame: Tata Consulting Services,1098,fhozmu,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fhozmu/name_and_shame_tata_consulting_services/,177,"I applied to Tata Consulting Services Data Science New Grad role in Late December. In January a recruiter called me for an initial call and later invited me to an in-person interview.

At first, the recruiter told me to come any time between 9:00 AM - 1:00 PM on a Saturday. I thought that was a little weird especially since most companies tell you an exact time and who you'll be speaking with. I responded and told the recruiter that i would be there at a  specific time.

I didn't realize that the recruiters were based in India, and they would constantly call me at weird hours of the night to ask me questions. When I called them back in the morning I got a Text Now voicemail number. From the time I scheduled my interview to my interview date, I was bombarded with so many text messages and unscheduled phone calls.

This wasn't the worst of it. I arrived at the interview site, and they put me and a few other room in a room together to wait for our interview. When I asked who I would be interviewing with, the receptionist said that they are still figuring it out.  I waited for \~30 before one of the representatives finally came and got all of that was sitting in that room, at that point, there must have been \~ 15 of us in there. The process to determine who I would be speaking with is by asking available consultants if they were free. After walking for about 10 min I was finally assigned a person to interview. What's the problem? He was a software engineer. He had absolutely no idea what I was interviewing for. He asked me if I knew Java, C++ or and C, which I didn't. He got upset and told the recruiter that he can't interview me.

I walked around the office again and finally found someone to interview me that know the role. I spoke with 3 more people after that, and none of them seem to have any clue what I was interviewing for. They kept on asking me questions about my background, and nothing specific to data science. weeks

Two weeks after the office visit, I got a call from HR saying that I got the offer. I don't know-how, they told me that I would be in Pittsburg. He went through the details of the offer and start date. I was supposed to get the letter the next day, never got it. Now it's 3 months since I had my interview, another recruiter reached asking me for a first-round interview for the same that I applied to Tata Consulting Services Data Science New Grad role in Late December.

Stay away, these guys are not worth it.",1584080986.0,2020-03-13 02:29:46
215,2 YEAR UPDATE: My journey & tips: 2.9 GPA at a small liberal arts college w 1 mediocre internship –> 4 FTE offers incl FB,1095,b3w1gg,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/b3w1gg/2_year_update_my_journey_tips_29_gpa_at_a_small/,165,"**Previous post:** https://www.reddit.com/r/cscareerquestions/comments/6278bi/my_journey_and_tips_29_gpa_at_a_noname_liberal/

(^ covers the basics which I won't really repeat here, like my timeline out of school or how I received interviews in the first place)

My last post here had an amazing response from all of you and now that it's coming up on 2 years—and with my recently going through another interview cycle—it seems like it's a good time for an update. I stand by my prior advice but do have some thoughts to add from a slightly more experienced perspective.

I also remember getting some questions about whether I'd actually be 'successful' at Facebook, i.e., whether studying so hard just meant I gamed the system and wouldn't do so well at the actual job, so I wanted to address that and general on-the-job tips as well. Finally, I haven't been able to answer the vast majority of PMs I get, so hopefully this will scale better / be valuable to those people in sub-O(n) time :).

**TL;DR:**

ended up doing relatively well at FB—two 'Greatly Exceeds' [expectations] / top ~15% performance ratings in a row—but felt like I was starting to learn less and wanted to switch from DE to SWE; studied 100+ hours in 1 month while working (focusing more on system design and ML this time); landed 5 offers out of 6 onsites, including Google and 2 unicorns; multiple offers were over $300k in total compensation (+50% from prev comp and at <4 YoE); negotiation matters a lot; and this whole process is nonlinear and often frustrating but it's 100% a winnable game and having tracking metrics helps (#trusttheprocess).

**Disclaimer:**


I'm sharing concrete numbers not to brag, but because I believe in pay transparency and think the information asymmetry in the tech industry between employers and employees hurts us. I don't want to rehash a debate over Big N / FAANG 'prestige' and am tabooing it here for reputation or brand value, which does have tangible benefits. Last and importantly, luck always plays a role in these things; I'm not suggesting this is a fully general solution but there are ideas here that will probably be helpful for you too.

**On my experience at FB (skip if you only want interview advice):**

I came into FB with definite imposter syndrome, especially when I was surrounded by people who had gone to Stanford or came here from Google or had PhDs etc. I wasn't sure if I could hold my own and wondered if I had just gotten lucky interviewing. Everybody at FB always says that the first few months is like drinking from a firehose of information—they're right. But eventually I found my bearings. To keep a long story short, I was in the right place at the right time when an impactful opportunity came along and I seized it. I received a rare 'Greatly Exceeds' rating my first half due to this—and more importantly, learned a ton in a short amount of time, both technical and soft skills.

Some job tips (keeping in mind that I'm not that experienced):

- Prioritization is critical and is a skill that can be improved: there are more things to be done than you can do
- Proactive communication: always communicate sooner and more than you think you have to
- Optimize for learning: if you don't feel like you're learning anything, speak up in your manager 1:1 (own your own career! and manage up), or explore other opportunities, internal or external
- Seize opportunities: see also https://pmarchive.com/guide_to_career_planning_part1.html
- Focus on impact: this is clichéd for a reason—you should always be asking yourself if what you're working on is the most important (not necessarily the most urgent) thing you could be working on

Re: prioritization, I really had it drilled into me how critical it was to say no effectively. You need to strike a balance. It's important both that you can say no to senior important stressed out people and that you say it in such a way that they're not disincentivized to come to you again in the future with more impactful opportunities. Practice helps here.

Re: optimizing for learning, I took advantage of the resources around me. I was a voracious reader of internal technical posts, data analyses, and architecture / system design write-ups, read any documentation I could find that interested me, studied the core abstractions written by the best engineers (h/t to Edmond Lau's The Effective Engineer), and generally tried to learn as much as I could whenever I could. Learning compounds over time and even small increases in your 'learning rate' make a big difference later.

When I first jumped on the above project, I was out of my comfort zone. But I was pretty confident I could learn what I needed to and tried to adopt a growth mindset to the things I didn't know. And I knew that being slightly uncomfortable (read: lost) was a good place to be in for growth. This mindset also helped when the inevitable missteps happened, which is where communication comes in too.

**On the interview grind part II:**

My process was broadly the same as last time, but more principled. At a high level, the most important thing is to trust the process. When you first start out, it's easy to feel completely stuck, like you're not making any progress at all. The learning curve is steep and nonlinear; some days you'll feel like you know less than yesterday. That's why I think it's important to have external metrics you can use to track your progress, because (especially initially) you can't trust your brain to have an accurate picture of how you're improving. I personally used time spent studying and number of Leetcode problems solved as my goalposts: I decided I would be ready when I hit 100 hours of overall studying and 100 LC problems solved.

So when you're struggling on a graph traversal problem for the 5th time or stuck on a weirdly difficult easy problem, you can at least see that you're, say, 4 total hours of studying closer to finding a new job and focus on that. This isn't to say that you should spend your time frivolously. It's important that your practice is deliberate and that you don't willfully neglect blind spots. (I knew I was weak at backtracking and at permutation-type counting problems, but I didn't want to face the struggle. Of course, one of my Google onsite rounds featured both.)

Here are the resources I used:

- Coding / Data structures & Algorithms: almost 100% Leetcode, a little Interview Cake and Elements of Programming Interviews but decided it wasn't as efficient
- System design: read all of [Designing Data-Intensive Applications](https://www.oreilly.com/library/view/designing-data-intensive-applications/9781491903063/) and [Distributed systems for fun and profit](http://book.mixu.net/distsys/single-page.html); went through the [System Design Primer](https://github.com/donnemartin/system-design-primer), scattered CS & industry research papers like [Bigtable](https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf) and [distributed consensus](https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf), tech company engineering blog posts, http://highscalability.com/, and some of [Grokking the System Design Interview](https://www.educative.io/collection/5668639101419520/5649050225344512)
- ML: had hands-on experience at FB so mostly googled random shit like this [Github](https://github.com/ShuaiW/data-science-question-answer), refreshed my memory of how the most common algorithms worked especially GBDTs and random forests, and skimmed [Hands-On Machine Learning with Scikit-Learn and TensorFlow](https://www.amazon.com/Hands-Machine-Learning-Scikit-Learn-TensorFlow-ebook/dp/B06XNKV5TS)
- Behavioral: emphasized certain themes in my elevator speech, prepared 2-3 stories for each of the most common behavioral questions, and had some solid questions for hiring managers (refer to the last post or to my study guide)

The system design portion was a bit overkill, but I actually enjoy reading about distributed systems. I believe it also contributed to getting max L4 offers at Uber and Snap (more on that below). This time around, almost every onsite involved at least 1 system design round. Pre-FB when targeting a lower level, I received essentially 0 such questions. 

Here's my study guide: https://workflowy.com/s/study-guide/RD5kZ682pWX5oxiE. Some parts are rough so take it with a grain of salt. The checklist of heuristics to try is particularly valuable imo; here's a condensed version:

1. Always consider hash tables (dictionaries) with their O(1)-ness.
2. If at all array-related, try sorting first.
3. If search-related, consider binary search.
4. Start with a brute force solution, look for repeat work in that solution, and modify it to only do that work once.
5. Space-time trade-off! That is, for better time complexity, try using auxiliary data structures. E.g., do something in a single pass over an array—O(N) time—by using a hash table—O(N) space—vs. doing something in nested passes—O(N^2)—without using any extra space—O(1). 
6. Remember that I can use two pointers.
7. Try a greedy solution.
8. Does solving the problem for size (N – 1) make solving it for size N any easier? If so, try to solve recursively and/or with dynamic programming.
9. A lot of problems can be treated as graph problems and/or use breadth-first or depth-first traversal. And if the problem involves parsing or reversal in some way, consider using a stack.
10. Any time you repeatedly have to take the min or max of a dynamic collection, think heaps. (If you don’t need to insert random elements, prefer a sorted array.)
11. If you have a lot of strings, try putting them in a prefix tree / trie.
12. To improve time complexity, also consider how various complexities match to solution structures and try working backwards from a target runtime.
13. Not quite the same as N-1, but sometimes a divide-and-conquer approach is what is necessary. If I know the answer for exclusive parts of the problem, can I somehow combine to get the final answer?
14. For puzzle problems or anything where we can enumerate all possible solutions and there's a notion of a partial candidate solution, consider backtracking.

**On the interview grind (cont.):**

I've (obviously) thought a lot about the Leetcode grind and one takeaway is that the entire process can be reduced to two overlapping recursive parts: 1) internalizing the comp sci building blocks and 2) knowing when to apply them. If you don't know how binary search works, you're going to struggle on a lot of problems. Conversely, if you can handwrite binary search in 60 seconds but can't recognize when a problem would be much easier with it, you're also going to struggle. The recursive part comes in when those building blocks themselves form more complex DS&A building blocks, like union-find/disjoint-set or Dijkstra's.

Leetcode is an exercise in both. As you do problems, you'll start to recognize common patterns and where a certain data structure or algorithm should be used. As you get stuck on problems, you may find that you have a gap in fundamentals—and that you need to go back and learn one of those algorithms more thoroughly. It's an iterative and even satisfying process.

Relatedly, there's a tradeoff here between improving pattern recognition and learning how to struggle. The naive and fast way to optimize for the former is to do as many problems as possible; when you get stuck, just look at the solution and move on. The problem is that you'll lose out on hard-earned insights that would therefore be more memorable. You'll also flounder when no answers are available, like in an actual interview environment. But you also shouldn't spend days on just 1 annoying problem. It can be tempting, but it's a big opportunity cost.

The balance I found was to set a timer for around 10 minutes: if I still had no idea where to begin by then, I would read the discussion but avoid looking at code; then I'd reset the timer and try to implement those ideas; if I still couldn't get a solution, I'd finally look at people's code and try to understand it. For particularly thorny problems, I'd put it on a list to do again later. 

In total, I studied for ~120 hours and solved 130 Leetcode problems—66 easy, 54 medium, 10 hard. I found hards weren't generally worth it except for the ""famous"" ones like LRU cache and skyline. I did about 10% of the problems on a whiteboard while verbalizing my thought process in a timed environment, but I was already pretty comfortable with that element.

**On the numbers and negotiating:**

I applied or replied to around 20 companies. After some weeding out, I went on to 11 phone screens: Google, Uber, Pinterest, Airbnb, Dropbox, Snap, Stripe, Twitter, Opendoor, Lyft, and Stitch Fix. Note that this rate is very very different from before I started at FB. Back then, I felt lucky if I received 1 rejection out of 25 blind applications—mostly I was ignored. It's obvious but getting your foot in the door is so perversely important.

For anonymity, I'm not going to mention all the specific companies' outcomes; also note that this was sometime in the last 6 months. Out of those 11 interviews, I passed 8. I received mostly LC mediums during these screens, but did get a few hards. I decided not to continue with one company and another happened too late for me to be able to do an onsite, which highlights the importance of timing. A company I really wanted an onsite with was my first interview and I bombed. Ideally, the interviews you care more about happen later in the process, but not too late. You want the practice but you don't want to burn out. You also want the offers to come in pretty close together for negotiation purposes.

Out of 6 onsites, I received 5 offers: Google, Uber, Snap, and two others (companies D and E). Google is notorious for downleveling, so their offer was pretty low. The initial offers (total compensation using FMV and without signing bonus) were:

* Snap: $300k 
* Uber: $290k
* D: $230k
* Google: $225k
* E: $220k

I was surprised by Snap and Uber but I knew I had done very well on those onsites. During Google's I had bombed a round (that backtracking + permutation LC hard combo). So overall numbers were according to expectations and my main negotiating goal was to get as much of a signing bonus as possible, knowing that base and equity were already at the top of the range. I didn't really try with Google since their offer came almost a month later and the difference was too big.

During this timeline, one thing I made sure to do was let the various recruiters know of other onsites or offer deadlines. It's usually in your best interest to do this, particularly if the other company is a ""peer"" or has a good reputation. You can even use an upcoming impressive-seeming onsite as implicit leverage to improve an offer, even if you don't end up passing the former. I think this contributed to the high initial offers. 

For negotiation, I relied on [Haseeb's amazing posts](https://haseebq.com/my-ten-rules-for-negotiating-a-job-offer/) and [Kalzumeus' seminal piece](https://www.kalzumeus.com/2012/01/23/salary-negotiation/) and [followup](https://www.kalzumeus.com/2016/06/03/kalzumeus-podcast-episode-12-salary-negotiation-with-josh-doody/). I don't think giving the first number matters much, but what does really matter is knowing your market value inside and out and standing your ground. [Levels.fyi](https://www.levels.fyi/) is tremendously useful for this (click the level to see the numbers and backing spreadsheet), as is Blind (e.g., [this Google post](https://www.teamblind.com/article/google-engineer---total-compensation-in-us---ultimate-post-jYcrij5X)), toxic though it sometimes is.

Haseeb's advice on using ""I will sign right now if you can make $X happen"" at the end is another great tip. I ended up getting multiple $50k signing bonuses and improving the other offers by ~$20k each.

**On concluding:**

Thanks for reading this far—I swear I tried to keep it short. I feel guilty that I haven't been able to reply to so many PMs, but promise I'll be active in the comments here. 

It's only been a few years since I read this subreddit obsessively and thought I'd never be able to ""make it"" in tech. But it really is doable. Trust the process. Stay calm and leetcode on.

AMA!

(Note: I don't use this account anymore and am not able to reply to all the messages I get, but if you need personalized advice or even coaching, you can try emailing me at suryc011 [at] gmail [dot] com.)",1553231281.0,2019-03-22 01:08:01
216,I picked a job for the prestige and I regret it,1094,i3g44t,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i3g44t/i_picked_a_job_for_the_prestige_and_i_regret_it/,271,"I hate everything about it.
I had a choice between a company with great people, better CoL and same pay and my current company. 

The only thing better here is the prestige, I fell for it. I knew something felt off during the interview but I took the job anyway. 

People here are assholes who live to work, pretend to be nice and backstab you as soon as they can.

Fuck them, fuck me. I wish I I could go back.",1596561604.0,2020-08-04 13:20:04
217,I got asked LeetCode questions for a dev-ops systems engineering job today...,1092,c017up,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/c017up/i_got_asked_leetcode_questions_for_a_devops/,420,"I read the job description for the role last week. Kubernetes, Docker, AWS, Terraform - I thought cool, I know all of those! Proceeded to spend the week really brushing up on how Docker and Kubernetes work under the hood. Getting to know the weirder parts of their configuration and different deployment environments. 

I get on the phone with the interviewer today and the entire interview is 1 single dynamic programming question, literally nothing else. What does this have to do at all with the job at hand?? The job is to configure and deploy distributed systems! Sometimes I hate this industry. It really feels like there’s no connection to the reality of the role whatsoever anymore.",1560428185.0,2019-06-13 08:16:25
218,Someone at my company got COVID-19 and now we all have to put cameras in our house?,1086,horvzs,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/horvzs/someone_at_my_company_got_covid19_and_now_we_all/,365,"I work for a mid sized engineering/sales company. And like the title says... someone at our company got Covid, so now they are making everyone work from home full time. We already had partial work from home capabilities, and apparently someone got caught (from Facebook posts), going on vacation while claiming they were working from home. 

Now, in order to make sure employees are actually working, they want us to install cameras at our workstation in our home so they can make sure we are working. This feels like an invasion of privacy to me. 

What do you guys think, is this an acceptable expectation or an invasion of privacy? I’m about ready to get my resume ready and tell them to pound sand. 

This is in Southern California, USA.

Edit #2:

Love all your responses. My position is somewhat valuable within the company. I established a certain framework/software (mechanical engineering stuff) that no one else in the entire company knows how to use/manage, even my manager. I have so much responsibility that if I miss a day, projects drop dead in their tracks. My manager is way too busy to deal with trying to hire new people. When we needed a new intern, he basically decided on us hiring my friend simply because I put in a good word for him. He didn’t even interview other candidates. My managers hopes are for me to eventually take over his job so he can retire. So I think I’m low on the list for being fired.

My favorite strategy so far is to:

0. Force everything into an email conversation in order to build a possible legal defense. 

1. Ignore and avoid as much as possible.

2. If pressured, buy time by coming up with vague excuses related to things going on in my personal life, being too busy, and just in general find non-legal excuses for not setting the camera up.

3. If cornered, flat out refuse. Tell them I’m not going to do it. Tell them people in my household object. 

4. If they fire me for not using a camera. Collect unemployment and explore with a lawyer if I have a case or not. 

In the mean time, apply for jobs like my next meal depends on it and hope it never goes past step 1. I’m not going to quit without something else lined up.

Edit 3: 

To address some concerns of the purpose of the camera. It’s not intended as a web cam that we would use during video conference calls, we already have those. They’re concerned about people doing non work things while at home. So it’s intended as a camera that will monitor employees for their entire 8 hour work day.

Edit 4: For those of you offering to help me find a new position, I really appreciate your kindness. However I am a mechanical engineer, and only understand MATLAB and a bit of C++, so I’m doubtful my software background is inline with what you’d require me to know. I am expanding my skill set though. I understand software is the future and I’d eventually like to get a masters in CS. Engineering is being influenced by software more and more and they both go hand in hand. 
If you can still help, I’ll definitely pursue it. If not, I still appreciate all the support!",1594426793.0,2020-07-10 20:19:53
219,Name and Shame : IBM,1089,elkh4g,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/elkh4g/name_and_shame_ibm/,222,"TLDR at end - apologies for format, I’m on mobile



I applied for IBM’s Front End Internship 2020 role, and all started off pretty great. I completed the ridiculous IQ test and lots of forms and then was sent a coding challenge. Coding challenge was a little tricky with some binary tree implementations (which is a bit in depth for a front end position) & some multiple choice about development. 

All went well and I received an email a week later from a recruiter scheduling an interview with one of the developers. My interviewer was a programmer himself and asked me a lot of behavioral questions. I was then able to ask him some questions, but since they didn’t know which team I was going to be assigned to nearly all of them went unanswered. 

Following this interview I received an email to fill out my university information (graduation date etc) which I thought was a great sign! A week after this I was scheduled for a second “behavioral/fit” interview. This is when things get bad. 

When it comes time for my interview, I log in and wait in the video conference lobby, and wait and wait. After 15 minutes (of what was supposed to be a 30 minute interview) I gave up and emailed my recruiter and asked if the person i was meeting with needed to reschedule. This email then bounced back to my inbox because they apparently “didn’t exist in the ibm system” ...

My next step was emailing the person I was supposed to meet with, and then calling my recruiter by phone. The recruiter told me she no longer worked for IBM & had no contacts for me to reach out to or next steps.

The man I was supposed to meet later emailed me back apologizing saying the meeting was scheduled while he was “on vacation” and that if he has a role that would be a “good fit” the new hr member will reach out to me.

I can’t help but feel I went through all of that to basically be back in stage 1 and waiting for them to see if they have a role? How did he miss an interview and then suddenly not need to interview me? Very disappointed in IBM’s organization, and even more frustrated that I had to be the one to reach out to right wrongs. 

TLDR: Interviewer didn’t show up for a 3 round interview, my recruiter left IBM and never told me or assigned me a new one, and now I don’t even get to be interviewed


EDIT: After reading replies both positive and negative towards IBM, I want to say that this situation was most likely a result of a bit of disorganization from a few particular people and doesn’t represent IBM as a whole. I have reached out to the manager of IBM recruiting and hope to hear that he is willing to respond and set a new interview and get me in touch with the right people. I’ll post updates if I hear anything! 

And thank you for platinum kind redditor :)",1578471580.0,2020-01-08 03:19:40
220,On Naming and Shaming,1082,elqsrm,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/elqsrm/on_naming_and_shaming/,244,"I've noticed a lot of ""Name and Shame"" posts recently.  I read them, and most of them are not about what it is like to work at a company, but instead about an interview process that felt unfair to the applicant.

I'm not here to trivialize what it feels like to be on the receiving end of those interviews.  What I would like to say is that if you decide to not apply to a company because of interview experiences, you are not doing yourself any favors.  Pretty much all the companies I've worked for have failed to meet the expectations of the ideal interview process for some candidate.  And in fact, the most common thread in these posts is a problem I have seen many times, which is the lack of communication from the company during the interview process.

It's unfortunate, and I personally do what I can to prevent these gaps in communication at the companies I have worked at.  But, I am just one interviewer, and I am not responsible for scheduling further interviews or providing direct feedback to you.  I have nagged people within my orgs to respond to candidates when I realize someone has dropped the ball.  I know someone who got favorable reviews, but a manager wasn't sure (I think the person had no college education), and so we didn't tell them yes or no for 2 months.  I bugged them about this person a few times, until after two months I declared how ridiculous it was no response was given.  At that point, they said - well would YOU hire him CodeIt?  I responded ""hell yes"", and they hired him.  No one else even remembered the interview at that point.  And then I had to convince the person they should take the job, because of how slighted they felt!  Lucky for them, they did take the job - Okta went public and that person is retired now.  Also he was great at the job.

Similar stories have happened at other companies I worked at.  Maybe even all of them.  You've heard of these companies, and they are good places to work at.  One thing I have heard is there is no one who works at Google who would always pass the interview.  There is always some interviewer at a company of sufficient size who might not like you, and usually it only takes one veto.  If you are not being recommended by someone inside the company and have no experience, you are just not top priority to them.  Sorry.  It sucks.  There should always be communication, I'm not excusing that.

But, when you are not a priority, it is easy to fall by the wayside when something in the interview funnel does not fall into a clean bucket (Maybe we like you, but want to see more candidates first.  Or maybe, as in the case the of the IBM post, a recruiter quit their job.) I am sorry this happens.

But to me, this is a different thing than taking a job with a company, and then finding out the workplace is filled will awful people and processes.  Those places should be shamed.  Go ahead and share you interview stories as well if you want, but I'm surprised at the amount of upvoting and agreement with some of these posts.  We are only seeing one side of the story here, and if you were to get a job with one of these companies, the interview process is the least important thing about how you will feel about your job after a month of being there.  If you looked for these kinds of stories, maybe on glassdoor.com, you would probably decide 90% of companies are bad. I don't think it's a useful signal to consider when you decide where to apply.",1578506547.0,2020-01-08 13:02:27
221,Leaving Amazon :: A Blog Post from an Angry/Disappointed VP & Distinguished Engineer,1089,gdbbbt,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gdbbbt/leaving_amazon_a_blog_post_from_an/,362,"https://www.tbray.org/ongoing/When/202x/2020/04/29/Leaving-Amazon

I saw this on HN and thought it worthy of discussion here, it's an angry exit post (justifiably angry, I'd say) for someone leaving Amazon, which might not be super notable except for why they're angry and that the author is a VP and Distinguished Engineer.

> **What happened** · Last year, Amazonians on the tech side banded together as Amazon Employees for Climate Justice (AECJ), first coming to the world’s notice with an open letter promoting a shareholders’ resolution calling for dramatic action and leadership from Amazon on the global climate emergency. I was one of its 8,702 signatories.

> While the resolution got a lot of votes, it didn’t pass. Four months later, 3,000 Amazon tech workers from around the world joined in the Global Climate Strike walkout. The day before the walkout, Amazon announced a large-scale plan aimed at making the company part of the climate-crisis solution. It’s not as though the activists were acknowledged by their employer for being forward-thinking; in fact, leaders were threatened with dismissal.

> Fast-forward to the Covid-19 era. Stories surfaced of unrest in Amazon warehouses, workers raising alarms about being uninformed, unprotected, and frightened. Official statements claimed every possible safety precaution was being taken. Then a worker organizing for better safety conditions was fired, and brutally insensitive remarks appeared in leaked executive meeting notes where the focus was on defending Amazon “talking points”.

> Warehouse workers reached out to AECJ for support. They responded by internally promoting a petition and organizing a video call for Thursday April 16 featuring warehouse workers from around the world, with guest activist Naomi Klein. An announcement sent to internal mailing lists on Friday April 10th was apparently the flashpoint. Emily Cunningham and Maren Costa, two visible AECJ leaders, were fired on the spot that day. The justifications were laughable; it was clear to any reasonable observer that they were turfed for whistleblowing.

> Management could have objected to the event, or demanded that outsiders be excluded, or that leadership be represented, or any number of other things; there was plenty of time. Instead, they just fired the activists.

> ...

Working at Google, there have been similar issues there with whistleblowers, albeit possibly not as bad. Definitely disappointing whenever I've read about it, for any company, and something I wish we could fix within American tech company culture, and American corporate culture more generally.

(For the Big N rule this breaks: we do manually approve posts like this occasionally even when mentioning the Big N: when the post is as much about wider industry attitudes as it is about that particular company, and not so much ""how do I get into [Amazon/Google/FB/Netflix/etc.]??"" or ""what is it like to work at [Big N]??"", an overabundance of which was the original catalyst for the Big N rule.)",1588626582.0,2020-05-04 17:09:42
222,Zuckerberg says company will permanently shift tens of thousands of jobs to remote work,1088,go1nw6,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/go1nw6/zuckerberg_says_company_will_permanently_shift/,658,"[The Verge](https://www.theverge.com/facebook/2020/5/21/21265699/facebook-remote-work-shift-workforce-permanent-covid-19-mark-zuckerberg-interview)

> “We need to do this in a way that’s thoughtful and responsible, so we’re going to do this in a measured way. But I think that it’s possible that over the next five to 10 years — maybe closer to 10 than five, but somewhere in that range — I think we could get to about half of the company working remotely permanently.”

[CNBC](https://www.cnbc.com/2020/05/21/zuckerberg-50percent-of-facebook-employees-could-be-working-remotely.html)

> Zuckerberg announced that [big social media] is going to “aggressively” ramp up its hiring of remote workers, and the company is going to take a “measured approach” to opening up permanent remote work positions for existing employees. 

> Employees who continue to work remotely and move to different regions will have their compensations adjusted for their new locations, Zuckerberg said citing that this is necessary for taxes and accounting. Employees will have to notify Facebook of their new locations by Jan. 1, 2021, he said. 

> “We’ll adjust salary to your location at that point,” Zuckerberg said. “There’ll be severe ramifications for people who are not honest about this.”

Saw Square, Twitter, and Shopify do this but this move is a lot bigger. Good for tech or pathway to more off-shoring and lower salaries?",1590112497.0,2020-05-21 21:54:57
223,I just want a regular SWE job,1088,iwulv5,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/iwulv5/i_just_want_a_regular_swe_job/,462,I don’t really care about FAANG or large titles or any of that stuff. I just want a regular job that pays decently. I just want to afford a house and live normally. How difficult is this? It seems nowadays you need 4+ years worth of experience to just do a regular front end job and you need to leetcode 24/7. I don’t want to do the whole leetcode arms race. I just want a regular life.,1600696212.0,2020-09-21 09:50:12
224,For anyone suffering from imposter syndrome...,1084,d6epju,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d6epju/for_anyone_suffering_from_imposter_syndrome/,148,"I came across this article about actress Renee Zellweger (nowadays, net worth ~$60 million from acting):

> Handler asked Zellweger if she felt like an actress when she first started, she replied, ""Never. Still even today... I've heard of it, imposter syndrome. I'm not trained, so I feel like every job I kind of got by accident because I tricked them, and they just haven't found out yet. But they're inevitably going to, and they're going to fire me.""

Shit, if an actress with imposter syndrome and no formal training can win an Academy Award, you can land a job and/or launch a SaaS business.

The sky is the limit! (unless you work at SpaceX, in which case, the sky is not even a limit)

https://www.cheatsheet.com/entertainment/renee-zellweger-net-worth.html/",1568931577.0,2019-09-19 18:19:37
225,A lot of toxic traits surfaced in me when applying to jobs. Here’s how to avoid my mistakes.,1079,cgtrfq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cgtrfq/a_lot_of_toxic_traits_surfaced_in_me_when/,111,"# Background

I began my software engineering job search in August 2018: the summer before my senior year of college. I applied for 8 months (with some month breaks in between).

The stress and anxiety of applying to jobs surfaced some toxic traits in me. I like to say surfaced because I believe these traits have been in me, such as certain kinds of shame. For example, low self esteem can usually be hidden behind walls. When it gets to an extreme such as direct rejection, or the mindless filling of boxes, it can surface more easily.

I found I projected a lot of emotions on the people around me. [Here's a picture I drew](https://imgur.com/gallery/L4N3UVU) to show how this works. Credits to the therapist in a book called ""The Truth"" by Neil Strauss.

Essentially my ego tries to protect this shame by projecting out irrational thoughts, anger, and sadness onto the people around me.

I want other people to avoid my mistakes. So  here’s my advice.

# Advice

These tips are a part of a lengthier video [here](https://www.youtube.com/watch?v=9uwBkGu3m4Q). The tips listed below are all the same as the video, except the video gives a little more detail. Plus it's in a nice video format if you prefer :)

## 1. Stop comparing yourself to other people  
Everyone's at a different stage. Reading the ""Homeless to Google Employee"" story will not benefit you in any way. Don't read it.  
Get off social media. The last thing you want to do after applying to jobs is see everyone in their ""picture perfect"" life.  
 
## 2. Don't multitask  
Don't try to manage relationships and apply to jobs at the same time. You'll most likely project your emotions onto other people. Lock yourself away in your room or a coffee shop. When you're done applying to jobs THEN be with family and friends, and try to be as present as possible. Leave work at work.  
 
## 3. Self affirmation and mindfulness  
A lot of toxic traits can surface during this time. Be aware of them. Don't let shame (or whatever else arises) take control of you and hurt the people around you.  

Some good apps are [Headspace](https://www.headspace.com/) and [Jour](https://itunes.apple.com/us/app/jour-guided-journaling/id1439590239).  
 
## 4. Assure close ones that this will be temporary  
You may act differently under all this stress and anxiety. Let close ones know this if they feel affected.  
 
## 5. See the big picture  
See close ones as helpful to your emotional well-being, rather than hindering your career.  

Your career is not the only important aspect in your life. You have friends, family, a significant other, pets, etc... In the job search, you can always do more. Learn one more thing, apply to one more job. It's endless. You have to set your own boundaries and not forget about the people who got you where you are.  
 
## 6. Have a non-tech hobby  
Sadly most entertainment these days are via a screen. For people who work with computers all day as a job, this can be difficult. Give your eyes (and brain) some rest with a non-tech hobby. Something expressive like learning an instrument, dancing, or singing are all good.  
 
## 7. Don't put your health in the passenger seat  
Time flies during job search. It can feel difficult to get in 3 healthy meals. Set yourself up in an environment to support good eating. If it takes an hour to make a meal, make a lot to save for the next day. I also drank a shake as a meal replacement for an additional mid day meal.
Additionally don’t stay up late to apply to 10 more jobs. It’s not worth it. For all the reasons said in this thread already.
 
## 8. Therapy  
A lot of irrational thoughts can arise under such stress and anxiety. Flesh them out with an unbiased person. You'll probably learn a lot about yourself :)  
 

You're going to be okay. This is temporary. In 5-10 years this part of your life will all make sense. It may not pan out exactly how you want, but it's going to pan out into an interesting story. Best of luck!

### Edit
Thanks for the gold stranger. Even more importantly, this thread turned into more than I could have imagined. The discussion so far has been great. Happy to see we can all be vulnerable here.

[tweet storm edition](https://twitter.com/bradmitchell_/status/1154402596041482241?s=21)",1563923149.0,2019-07-23 19:05:49
226,Finding a job definitely gets easier with experience,1083,f8tyy8,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/f8tyy8/finding_a_job_definitely_gets_easier_with/,205,"I always heard it gets easier finding a job once you have some experience, but I’ve always had some doubt about how easy it was. I started off from a useless BA and did a coding boot camp in 2016, and subsequently submitted about 1000 applications in NorCal/SoCal across 7-8 months where I got less than 10 phone screens and 1 offer for a crappy position.

Fast forward 1.5 years after that first job and I started applying again. Submitted about 70 applications and got a few phone screens and 1 offer I couldn’t refuse at an early stage startup in about 2 weeks. Definitely an improvement.

Today, 1 year later (2.5 yrs of exp now), I’ve been on the hunt for less than a week, sent out a little over 100 applications, and I already have 20+ phone screens and some onsites from places that seem great to work at.

The point of this is that it definitely gets easier finding a job once you get more experience under your belt, even without a formal CS education. To everyone still trying to get their foot in the door, just stay disciplined and keep going.

Edit: during this job search I sent 150+ applications over the span of a month, did 30-40 phone screens for frontend and fullstack roles, moved on to 10-15 onsites with multiple offers in the midst of the COVID outbreak. If you’re motivated to learn and bring value and you have some experience, I think there’s always a place for you.",1582591509.0,2020-02-24 19:45:09
227,Project managers should be assessed on goddamn system design before getting hired,1082,jdyxwg,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jdyxwg/project_managers_should_be_assessed_on_goddamn/,211,"Hi all, just a quick Monday rant: I happen to work in a team where our project manager clearly has no idea how software applications function. That got me thinking that while devs are being tested on system design, I'm not aware of project managers receiving the same treatment. Because of this, our team's work is being planned, sized and scoped by someone who lacks elementary CS knowledge and it's a complete shitshow.

EDIT: 

Wow, this discussion is getting heated. While it seems that many agree with my sentiment (based on the upvotes alone), many of you also seem to be happy with non-technical PMs. What is apparent is that different companies seem to have different ways of doing things. Sadly, I'm stuck in a highly political environment where decisions are being made top-down by people who, I feel, would have made vastly different decisions if they actually understood the technical requirements of their initiatives. Sadly, it seems to be a common problem.",1603130735.0,2020-10-19 14:05:35
228,Please don't waste my time if you're going to ghost me after passing all test cases for a 90 minute coding challenge,1074,czdvt3,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/czdvt3/please_dont_waste_my_time_if_youre_going_to_ghost/,200,"Name and shame: IXL Learning

IXL sent a 90 minute coding challenge with a 3-day deadline. As someone who already regularly works 12+ hours a day, it was difficult finding time for it, but I made it work.

I had 30 minutes left on the clock when all test cases were passing, and I spent the rest of the time documenting code, writing more test cases, and ensuring my solutions were all optimal.

Almost two weeks went by without a reply, so I sent the recruiting coordinator - who I was in contact with previously - a followup. Almost immediately, I received an auto-generated rejection email.

I tried asking for any insights as to what led to the decision, but was left on read.

I get that some companies send coding challenges as an initial filter. It's easier than assigning engineers to a call. But 90 minutes is a *significant* amount of time - and that's not including the time spent preparing. For those who have full-time jobs and family to tend to at home, it's not a small ask. Especially if only 3 days are given to complete it. I'm perfectly fine with getting rejected for it, but a simple explanation as to why should be given to compensate for the time and opportunity costs.

TLDR:

* Avoid IXL
* Companies that demand a high time commitment and opportunity cost for the candidate should be held to the responsibility of explaining to those who passed the challenge why they were rejected",1567588315.0,2019-09-04 05:11:55
229,Capital One is a very annoying company,1079,9o3jw4,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9o3jw4/capital_one_is_a_very_annoying_company/,297,"If there ever was a company to teach me that good money + modern tech is simply NOT the only things that matter in finding a job.

&#x200B;

Everyone here throws you under the bus because of the stupid stack ranking. Every engineer is trying to 'win' ahead of you to get a promotion. The VP's are master manipulators that talk about the same old ""harvesting company culture"" bs.

&#x200B;

Maybe I'm just ranting. I learned a lot from them but I can't wait to move.",1539559660.0,2018-10-14 19:27:40
230,Is working from home the new norm for CS professionals?,1070,io93qw,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/io93qw/is_working_from_home_the_new_norm_for_cs/,463,"I sure hope so. 

I, like most people have been working from home since march.  And it's highlighted just how pointless going into the office everyday is for developers. 

Perks I've noticed: 

No money spent on travel- I save £235 per month by not having to travel. 

Improved flow and concentration- I know some might argue there are too many distractions at home. But for me, I actually get more work done as I'm not constantly being bothered by projects managers tapping me on the shoulder for a 8 min conversation. 

Quality of sleep- without having to wake up early and commute , I gain about 3 hours of my day back. This allows me to finish work, get everything I need to do done in the evening and also  get enough sleep.  This in turn affects the quality of my work as I can think clearly and I'm not getting up for coffee every hour. 

More time with my loved one- this ties into having more time in general, but it makes such a difference. I love working from home with my GF. Some of you may have kids and that's probably quite a challenge, but it must be nice to see them a little more during the day! 

These are just a few perks I've noticed, of course there are some good aspects of being in the office I miss, like the boozy Friday lunches, work shindigs, banter by the coffee machine and the fooseball table. 

I'm sure there are perks for companies not having us around all the time. They don't have to pay as much for operational costs, like heating and electricity. Also they don't have to do the things most offices do, and buy tons of beer and pizza for everyone 

What do you guys think? Is working from home here to stay? (Atleast for devs?) What are some of the perks you enjoy? Or what do you hate?",1599520113.0,2020-09-07 19:08:33
231,I've reviewed thousands of applications for university recruiting at a startup. Here are some numbers and thoughts on the university recruiting process.,1073,inrex1,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/inrex1/ive_reviewed_thousands_of_applications_for/,338,"I've been a hiring manager for a US-based university recruiting at my unicorn of a few hundred people.

Here are some numbers and thoughts to paint a picture of what it's like being on the recruiting side:

* We are still pretty small, so we can only support about a **dozen new grad** and a **dozen intern roles**. This role was split between me as the hiring manager and one recruiter.
* Despite that, we would receive **hundreds of applications per day**. I think over the course of last fall's recruiting cycle, we had over 15,000 applications. We aren't even a household name or anything. When I went to a career fair, \~90% of the students had never heard of us.
* Because we have so many applications for such few roles, we are only able to extend offers to **\~0.3%** applications.
* Diversity is really important from the tops down and personally I 100% agree. We saw from random sampling that **40% of all applications were female**. We were always expected to match or beat that %. Granted we also invested in trying to find more women, so I’m not sure if the % will be as high for other companies.
* It was impossible to review every single application. My partner and I would try our best to review applications, but often this work would happen after work hours because the volume would be way too high. Even if we were able to review applications fast enough, we sometimes would see bottlenecks with the number of interviewers available or toward the outstanding headcount remaining. We would either have to bulk reject candidates without reviewing them or leave them ghosted. **If you were ghosted or if you were rejected even though you thought your resume was good enough, I'm sorry.**
* Because of the bottlenecks, in order to have the best shot of having someone review your application, you should always **apply as early as possible**.
* We have multiple locations across the US and the ones outside of the SF Bay Area were always harder to fill. If you're struggling to find a job in the Bay Area it might be helpful to also apply to other places.
* I have strong feelings about coding interviews. I hate interviews that require you to find some kind of brain teaser element or require dynamic programming to solve. We discourage our interviewers from asking those kinds of questions. But we do need to find ways to find candidates that are fluent with solving complex problems with code.
* The passthrough rate is a really key number for high volume recruiting. In addition to obvious tradeoffs between quality of candidates you extender offers to, if the passthrough rate is too high, then it limits the number of people you can extend initial interviews to in the first place. If the passthrough rate is too low, then you're spending too many interviewing hours. Given that we have limited headcount, but we want to give as many people a chance as possible, we will have about a **50% passthrough rate on each round of interviews**.

I'm not sharing this to boast about any acceptance rate numbers or to put anyone down who doesn't think they'd make the cut, but just to share a single viewpoint of what things are like on the other side. Also note that this is a super narrow viewpoint, I don't know what things are like at large companies or non-tech focused companies.

I know that things are rough out there and I wish that everyone that wanted to get into software engineering could get the opportunity. I hope that some people found this helpful and if there's demand for it I can also share details of what I look for when reviewing an application.

Best of luck out there.",1599446506.0,2020-09-06 22:41:46
232,"I don't want to be a rockstar coder. When 5PM hits, I want to go home, and not think of a single line of code. Is that too much to ask for?",1070,4xashc,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/4xashc/i_dont_want_to_be_a_rockstar_coder_when_5pm_hits/,296,"I'm fairly early into my career (3-5 years) and already feeling jaded.  None of the companies I have been at so far, as a software developer have been a good fit.

I'm sick of companies claiming they do ""agile"" when they really dont.

I'm sick of deadline driven projects, where the deadline is created by people up top without consulting with the developers, assuming we'll just do whatever it takes.

I'm sick of things being broken in to sprints, but with stupid rules where everything needs to be finished by the end of it.  No concept of moving things to future sprints. Everyone ends up scrambling and that's how overtime is created.

Speaking of overtime, I'm sick of lackluster development practices that cause overtime in the first place.

I'm sick of companies that are too cheap to build out proper teams.  No, I don't feel like developers should do the job of a proper QA team.  And if you can't invest the money to create automated testing, wtf are you doing?

I'm sick of stupid office politics.  Tired of company events being created under the guise of being optional, but if say you won't be coming, you are threatened into going  ""You better think long and hard about your decision not to go....""

I'm tired of having to take my laptop home and essentially being constantly available.  Tired of getting an email and being expected to answer it after hours.

I don't love this stuff.  I do it because I think I'm decent at it, and it pays well.  I have other hobbies.  Unfortunately since I started working full time, my energy to do those hobbies has somehow diminished.

I don't care to be a rockstar programmer.  I don't want to code on my free time.  I don't want to work overtime without getting paid for it.  I don't want to deal with office politics.  I don't want to pretend I care anymore...

Part of me is nostalgic for the years where I did tech support/bug fixing.  At least I knew I would go in, do roughly the sames tuff every day, and when I left for the day, that was it.  No overtime, I was left alone.

Where the hell are the companies that understand this, and what questions have to be asked to find them?

Or do they not exist?",1470990345.0,2016-08-12 04:25:45
233,Name and Shame - Tata Consultancy Services,1071,eu88if,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/eu88if/name_and_shame_tata_consultancy_services/,292,"Background: I graduated with my degree in computer science from a state university in the Southwest in 2017. I only landed two job offers during my last semester of undergrad - Tata Consultancy Services and Infosys. I was under tremendous pressure from myself, my friends, and family to land a job offer before I graduated. TCS would allow me to stay in the same state as my parents so I decided to go forward with TCS. If I could go back, I wouldn't pressure myself so much to land a job offer as soon as possible. I would have taken a few months off to actually prepare for interviews. I actually remember the night before my flight to TCS HQ in Ohio I had typed out a letter to the recruiter at TCS that I didn't want to start my job at TCS but didn't end up sending it because my anxiety told me I had no other job offers at the time. I ended up working at TCS for one year before leaving to go work for a much better company.

My Experience:

TCS is a contracting/consulting company that sends its ""highly qualified consultants"" to clients for IT work. Most of these consultants have no clue what is going on. But, a small 1% are very smart people who either were too naive to realize how they were being exploited by TCS or just couldn't land a better job offer.

Training in Ohio was littered with stories of how TCS had screwed over new hires. People who were promised a certain client or city were lied to. People who were hired as software engineers and had completed training ended up doing Microsoft Excel work for their client. There was even an infamous story that one engineers client asked them to wipe down computer screens for full time employees. The worst story was about a Pakistani new hire whose client asked them to get some trainings in India. The new hires visa was rejected in India so TCS just lied to the client that the Pakistani guy had received the trainings and sent him off to the client.

Once my training was complete I was sent back to my home state where I went to go work for the client - a Fortune 100 company. It really sucked working as a contractor. I was constantly berated by senior full time employees at the client and treated as a second class citizen by full time coworkers. 

My team at TCS was the worst. I can speak Hindi/Urdu and constantly witnessed my boss and coworkers harass others in Hindi, cussing them out. My boss at TCS and other bosses would routinely make offshore employees work long hours all the way into the morning for things that weren't event urgent or high priority. Those offshore employees weren't allowed to work from home either. One time, my boss made an offshore resource come into work on a Saturday (through WhatsApp) she said she was at the train station waiting for a train. He was impatient and made her take a taxi to the office instead. Mind you, these resources in India are paid pennies and taking a taxi way out of their budget.

My team was entirely in India and constantly complained about the horrible conditions and treatment the company gave them. They were under horrible contracts e.g. they couldn't leave TCS for the first two years or else they'd have to pay their bonus back. A lot of these engineers needed that bonus as their family was in extreme poverty or their parents owed someone money and needed to use that bonus to pay that off.

The company routinely abused H1B visas and L1 management visas. What made me leave ASAP was 1) I landed another job offer but the big one 2) my boss telling me I needed to send my bachelor degree to some random dude in India applying for L1 visa and he was lying that I reported to him so he could qualify for the visa.

Two years after I left TCS I asked my former manager for a recommendation on LinkedIn - besides all the shady things that went on - I figured I might as well get a reference letter from this guy so the year I was there wasn't completely wasted. I had to remind him 2-3 times on Facebook and LinkedIn with him constantly pushing it off with some excuse and broken promise that he'd do it that weekend. One week ago, he blocked me on all social media.

Overall, I would not recommend working at TCS or any companies similar - Wipro, Infosys, Cognizant, HCL, Accenture, Revature, TEKSystems, Sogeti. If you're a hiring manager, I would be careful hiring someone from TCS or similar, especially if they're any type of manager - project manager, program manager (basically what my manager was). Unfortunately, TCS is a permanent stain on my resume for life now. I just hope someone who has an offer from them reads this and learns to say what I was too afraid of saying - no, I will not do the needful.",1580082258.0,2020-01-26 18:44:18
234,"This ""startup"" asked me to do a project for an unpaid internship before any kind of phone screen...",1067,78rhz7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/78rhz7/this_startup_asked_me_to_do_a_project_for_an/,341,"This was the email I received after applying (side note, this company's whole platform is centered around photo based marketing):

  
""Hi _______ Thank you for applying for the Back End Software Development Intern position. Before we we get you in for an interview, you will need to pass this development test:
Project Guideline: Here at **Bee** we are content heavy, so this project is designed to test how well you can manage content. Here, the front-end would like to send a JSON encoded API request to your server in order to upload a photo to the site. It is on you to create an endpoint that can handle this upload, then find a way to view all the photos that have been uploaded to the site in an efficient manner.
&nbsp;


Requirements: -Django or Node.js Framework -Photo upload endpoint -View photo endpoint -View photo feed endpoint -Authentication system that only allows authenticated users to upload photos but all users to view photos -Automated testing -Code coverage does not need to be complete, just generate that some critical functions of the system have tests attached to them. -Write-up on the systems design pattern choices
This should explain framework decisions, where the system works scales well, and where the system could improve. This should be a quick project, so it is expected to be functional but not flawless.""  
&nbsp;

**I replied, asking if it was a paid position and the deadline for the project. They replied with the following:**
""Happy to clarify. This position is paid after a 3 month training. This is non-negotiable and keeps us from hiring engineers that end up being toxic to our long term goals and just looking for a pay day. As for the project, you will have one week from today.
We wish you the best of luck and hope to have you on our team within the month!""

&nbsp;

Then I responded, concerned that they were asking me to do free work for them. Mind you, I am very aware of companies asking you to do a project or test before hand...but this was different.


&nbsp;

They responded with the following:
""You are mistaken, but I am sorry you feel that way. As I said above, you will not be paid during the 3 month training session. You would not be doing any work for the **Bee** platform during that time, but instead would be instructed and on-boarded by two of the leading engineers in their field. These 90 days are specifically designated to bring people like you up to speed on our very complex tech stack. We are not only in compliance with California guidelines, but have gone above and beyond to make sure our future employees are not only qualified to work for *Bee* but could work anywhere in the world after their first 90 days.
Let me know if you have any further concerns and we will withdraw you from the applicant pool immediately.""


**Their ""CTO"" was previously a SWE intern at Amazon...I take it that means you are a leading engineer?**

**EDIT** Here is the company: https://www.crunchbase.com/organization/bee-technologies-inc

**Resulting TechCrunch article: https://techcrunch.com/2017/10/30/small-startup-shows-us-the-wrong-way-to-incentivize-programmers/**",1509001364.0,2017-10-26 03:02:44
235,"Why is the advice of ""do side projects"" so common when most employers don't even look at them?",1061,jx8kui,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jx8kui/why_is_the_advice_of_do_side_projects_so_common/,360,"I often see the advice to ""have side projects"" as a way to help you showcase your skills to employers. I have taken this even further to having both a portfolio and a tech talk on YouTube in my resume and LinkedIn.

My thought process was that employers could see both my coding skills and the way I communicate, do live coding, and explain technical concepts to large audiences. Sounds great right?

Well in my experience, employers aren't look at either of those... at all. I have interviewed with a ton of companies recently at various stages and I have casually and professionally slipped in stuff like ""if you want to see how I do xyz, check out my portfolio"". Or ""if you want some examples of my soft skills, check out my tech talk"".

The response? 0% of them looked at either. Not one! Yet I still get questions that have already been solved in my portfolio, or tech assessments for work that's already been done in some fashion in my portfolio.

Is the advice of having side projects being good for hiring mostly theory? Because in practice no one seems to give a shit.",1605840399.0,2020-11-19 21:46:39
236,"The number of increasing people going into CS programs are ridiculous. I fear that in the future, the industry will become way too saturated. Give your opinions.",1059,dvytgh,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dvytgh/the_number_of_increasing_people_going_into_cs/,854,"So I'm gonna be starting my university in a couple of months, and I'm worried about this one thing. Should I really consider doing it, as most of the people I met in HS were considering doing CS.

Will it become way too saturated in the future and or is the demand also increasing. What keeps me motivated is the number of things becoming automated in today's world, from money to communications to education, the use of computers is increasing everywhere.


Edit: So this post kinda exploded in a few hours, I'll write down summary of what I've understood from what so many people have commented.


*There are a lot of shit programmers who just complete their CS and can't solve problems. And many who enter CS programs end up dropping them because of its difficulty. So, in my case, I'll have to work my ass off and focus on studies in the next 4 years to beat the entrance barrier.*",1573710021.0,2019-11-14 00:40:21
237,"After a sub 3.0 GPA, no internships, switching majors Junior year, and searching for over two years I finally received my first offer",1065,729exv,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/729exv/after_a_sub_30_gpa_no_internships_switching/,116,"Hey everyone, I wanted to make a throwaway to just thank everybody for all of the help you have given me directly and indirectly. I found this subreddit about three years ago and I thought I would just use it once or twice for help getting an internship. Instead I have visited nearly every single day, posted my resume at least twenty five times and asked dozens of questions ranging from interview prep to company reputations. I have also collected dozens of super helpful links that are still on my bookmark bar, like [this excel sheet](https://docs.google.com/spreadsheets/d/1z3_OfZdPXiOOgHi7uY5nvLuQX_qbpaxmYNXHHiuuV0I/edit#gid=0), [intern.supply](http://www.intern.supply/), and this [massive cheat sheet](https://www.reddit.com/r/learnprogramming/comments/5gr8nw/heres_a_sanitized_list_of_530_free_online/).


I was never able to obtain an internship before graduating despite hundreds of applications and a handful of interviews but the preparation I did for these helped me later on for full-time interviews. It was really hard seeing everyone else obtain their 3rd or 4th internship and receive full-time offers several months before graduating while I was stuck doing manual labor over the summers for minimum wage. I suffered severe depression from the beginning of my Sophomore year until about a month ago and my sliding grades and poor interview performances were a few symptoms of that. I kept checking out my classmates on LinkedIn and the salary sharing threads here and kept feeling sorry for myself until I realized I just needed to keep improving instead of worrying about what other people thought of me. I felt so monumentally insecure going into interviews because I felt like I was always the weakest candidate because of my lack of experience.

I also kept a folder on my email titled ""rejections"" because I was just getting so fucking many. I kept adding and adding to it because I wanted to look back on the day when I would get my first offer and see all of the hard work I've done. I do not recommend this.


Eventually after many hours of interview practice, dozens of hackerrank questions, reading CTCI front-to-back, a significant personal project and a one and a half month post-graduation internship I finally have my first offer. I didn't make this because I want to brag or anything, I just want to thank the contributors for all of their generous help and to provide some reassurance to those still struggling. If you work hard enough you will eventually succeed. Just keep at it.

Thank you all so very much, I would not be in this position without you.
",1506332651.0,2017-09-25 05:44:11
238,"In 10 hours, I have a meeting with HR. ""Kindly meet with me at the office"", they said. Impostor Syndrome kicking in big time.",1059,eztopp,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/eztopp/in_10_hours_i_have_a_meeting_with_hr_kindly_meet/,192,"I'm old. Been a programmer for 15 years. This is the best job I've ever had, longest I've stayed in the same company, 5 years, and I've just started trying to get my finances on track. I feel like I'm grossly overpaid (for my country), and I know my performance is slipping. Lots of stuff came up, and I haven't been able to get back into the groove since the holidays. I have a feeling I'm either going to be laid off for performance reasons, or learn that my team is being dissolved, because our projects are losing money. Best time to do it is on a Friday, I think.

Not really a question. Just putting words to my worry, to get it off my chest. I will find out tomorrow if this was all about nothing.

UPDATE: My second guess was right on the money. Team is being dissolved, because it's not profitable.

On the plus side, because I was made redundant, and not fired with just cause, I get a bit of severance pay as a buffer. Still think I was overpaid, but I'll try to not let that affect my asking price when I apply for a new job.",1581030757.0,2020-02-06 18:12:37
239,cscareerquestions drinking game!,1068,d5f9gm,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d5f9gm/cscareerquestions_drinking_game/,218,"**Requirements**

Get together with 2-7 friends and buy a few large bottles of your favourite hard liquor plus shot glasses

**How to play**

Read through the front page of /r/cscareerquestions and take the following number of shots when you encounter these posts:

* A post relating to the next recession - 1 shot
   * BONUS shot if the top comment is an armchair reddit economist pretending they can predict the future
* A post where someone without a cs degree made the equivalent of a fart app and wants to know where their promised silicon valley job is - 2 shots
* A post where someone is obviously lying about their salary and employer to get an ego boost - 2 shots
* A post where a high school freshman is dishing out questionable advice as if they are a 20 year industry veteran - 3 shots
* A 'thank you /r/cscareerquestions' post which is a thinly veiled excuse for someone to brag about a new job - 3 shots
* A post or comment where legitimate advice provided by an industry veteran is downvoted to hell by cs students who have never actually worked in the industry - 4 shots
* A post where some guy is either high on MDMA or severely sleep deprived and talks at lengths about how amazing they think this industry is and how grateful they are - 5 shots

&#x200B;

Once you've been through the first few pages of /r/cscareerquestions posts you and your friends should be well and truly drunk. Call and Uber and hit the town, take the night off and forget about cs for a few hours, you've earned it.",1568746449.0,2019-09-17 14:54:09
240,Really helpful mindset my therapist taught me about work,1059,f219oi,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/f219oi/really_helpful_mindset_my_therapist_taught_me/,130,"I posted about this on HN a few days ago under the same username and I thought this might help folks here too. I see a very similar attitude here to how I often feel.

I have really bad work-related anxiety. I'm always worried that I'm about to be fired, either for poor work or for asking to use PTO. I also kinda fundamentally hate the feeling of being stuck in someone else's office, working on someone else's ideas, making money for someone else. I get this kind of ""get out"" feeling most days and my heart rate will skyrocket, I'll start sweating a little bit, and I feel like I have to literally run away or else I'll die.

I recently started seeing a therapist for this and she told me to start thinking of myself as more of a contractor or specialist brought in. She gave me this mindset:

> Think of yourself as more of a contractor or a specialist. Your company chose to work with you specifically because you're the absolute best in your area at your particular field. If this wasn't true, they wouldn't have hired you.

> You're just here to work on this one project. You can end the contract any time you want if it doesn't work for you. Your client will pay you $15k for this and it will be done in 3 months. You can decide then whether you want to keep working with them. 

This really helped me feel more in control of my job. Reframing the workplace relationship from employer-employee to client-contractor makes things feel much more even. It feels more like selling something on Craigslist, where it's just something you did for an hour that day to make some money and not something you attach your whole identity to. My job just feels like a side hustle.

I hope this can help someone else too! Let me know if you have any questions and I'll try to clarify.",1581415573.0,2020-02-11 05:06:13
241,What are some smart questions to ask about the team/company to reveal any red flags?,1057,isj05t,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/isj05t/what_are_some_smart_questions_to_ask_about_the/,231,"Hi reddit!

So I am changing from my current job after fluctuations in company fundings and the following massive paycuts. I am on my final round for a few of my interview processes and was wondering what would be some clever questions to ask that would help me avoid stepping on a mine.

What are your smart questions for your future employers?",1600111316.0,2020-09-14 15:21:56
242,(Bad) advice in this sub,1053,bzrwsk,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bzrwsk/bad_advice_in_this_sub/,327,"I noticed that this sub is chock-full of juniors engineers (or wannabes) offering (bad) advice, pretending they have 10 years of career in the software industry.

&#x200B;

At the minor setback at work, the general advice is: ""Just quit and go to work somewhere else."" That is far from reality, and it should be your last resource, besides getting a new job is not that easy at least for juniors.

&#x200B;

Please, take the advice given in this sub carefully, most people volunteering opinions here don't even work in the industry yet.

&#x200B;

Sorry for the rant.",1560378531.0,2019-06-12 18:28:51
243,"Remember graduating college students, just know that when times get bad, offers are sometimes pulled",1057,fieaaa,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fieaaa/remember_graduating_college_students_just_know/,234,"I know there are a lot of students just going through their senior year with an offer in their back pocket.  As a veteran of 2 major downturns (dot-com and housing bust), just know that offers do get pulled.

You probably haven't seen it at all because the last time this happened with any sort of regularity or pattern was when you were like 10 years old.  But reneging on offers is basically the same as a layoff before you step onto the office, with the exception that your layoff requires no package or heartache.  

But keep your interview skills sharp, keep your network growing, and be aware of any company's financial position.  If you can, keep in touch with your upcoming new boss.  

Don't get me wrong, it is still the exception as opposed to the rule, even in the most trying times (i.e. 2001-2002), but it's not out of the realm of possibility.   But with the market uncertainty, there's potential for some major stuff.

All this Corona-virus stuff reminds me of a super-charged 9-11 - and it took us years to get over that, economically speaking.",1584196582.0,2020-03-14 10:36:22
244,[OFFICIAL] New Rule: College-specific questions now go to /r/csmajors,1051,8hzdvk,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8hzdvk/official_new_rule_collegespecific_questions_now/,112,"Hello to all! This is an OFFICIAL MOD ANNOUNCEMENT, please hold your undoubtedly worshipful praise until you have read the announcement in full.

A persistent issue in this sub has been questions that are much more about CS schooling than they are about jobs, such as ""Help, I only got into Stanford, CMU, Berkeley, and MIT, please help me decide between safety schools so my life isn't ruined!"" We the mods have been somewhat inconsistent about removing these threads, because they're not entirely irrelevant to this sub's focus, and because there wasn't a good subreddit to deflect them to.

...until *now*.

In partnership with the technically pre-existing sub of /r/csmajors and its previously lone moderator /u/ian421, we will begin deflecting to that sub all questions that are more about being a CS major -- or any other form of CS student, for that matter -- than they are about CS jobs. We have also partnered in sprucing up the sub a bit, so it should be easier on the eyes now. So if you want to ask about how to get started on being Big 4-Ready in middle school, or how in God's name anyone survives Operating Systems without swearing off computers, now there's a place for you to do so! Over there! And not over here! Please, God, *not over here*.

Similarly, /r/csmajors will be deflecting any career-specific questions it gets over to this sub. Questions that are in-between, such as about college career fairs, or internships, or ""How do working stiffs actually use the stuff they learned in CS classes?"", may go in either.

Lastly, the mod team of /r/csmajors, of which I am now half, will be recruiting a few new mods. More details on that will be announced later this week.",1525835355.0,2018-05-08 23:09:15
245,"Company let go of their best junior dev, in favor of an OK dev who understood the business.",1040,fv3g6x,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fv3g6x/company_let_go_of_their_best_junior_dev_in_favor/,297,"Just wanted to see if anyone had opinions on this. My good buddy's company just let go their star junior dev instead of him. My buddy was certain he was going to be axed and so asked why he got to stay. His boss told him that he's demonstrated better understanding of the business, and interacts with other teams better, but is indeed a worse programmer.

It's a reasonably small company where people have to wear a lot of hats. But it also makes sense as a long term move - keeping an ok but well rounded engineer. Apparently the other guy was heads down all the time and didn't take any opportunities to do ""role adjacent"" work in lieu of straight up coding.

Anyway, just thought it was an interesting scenario.",1586070954.0,2020-04-05 03:15:54
246,Is there anything wrong with just being a developer?,1040,iyw3kw,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/iyw3kw/is_there_anything_wrong_with_just_being_a/,219,"What’s wrong with just working a job as a developer? I loved studying development and I enjoy programming, but I’m not a “hard-core” coder. I don’t spend any and all of my free time coding, creating apps or websites or whatever else. 
The work is time consuming enough, and I’ve just decided to spend my free time doing other things I also love. 

I get the impression companies expect constant coding from developers, especially those seeking employment. Questions like: “What are you currently working on?, Any freelance projects?”  Seriously? 

Will not being a hard-core developer negatively influence anyone’s chances of current and/or future employment? Is it possible to work as a developer and achieve a fair amount of success without giving your entire life over to it?",1600978458.0,2020-09-24 16:14:18
247,Be careful taking a QA role if you really want to do SWE work,1036,dk6ezp,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dk6ezp/be_careful_taking_a_qa_role_if_you_really_want_to/,254,"I'm just writing this as a warning to others. I graduated college and had some SWE offers, which is where I wanted to be. However, I then happened to get a QA role at a really good company. I figured that I could just switch internally after a year or two and then I would be SWE + be at a good company.

I should've known something was up because this was also the only interview where they tried to 'sell' to me. They claimed throughout the entire process that QA is just ""another form of development"" and I would be doing all sorts of scripting and work on lots of coding projects. I also had no technical questions at all, my only interview to be like that. The constantly claimed that I would ""basically be SDET"" but my title was Test Engineer (which by the way, is a trap. They want to pay you as a manual tester but want the work output of a SWE). They also started off my salary at the same as my SWE offers.

I was naive so I thought they were just really into me (when in fact they were desperate for software engineers in their department). I took it, and when I tried to leave I realized how stuck I was.

Throughout my job there for 2 years I spent a decent amount of time stuck with manual testing. I went ""above and beyond"" and tried to change the pipelines by writing scripts/using Jenkins/general CI/CD stuff. I was the only one doing this on my team, so things were slow, and I was still required to do all my manual testing. Luckily I took some initiative during my job there and did some scripting and Jenkins.

I basically couldn't even get a job interview for any software engineer roles (even internally). I would sometimes get to HR and then the hiring manager and they would just brush me off. I understood, it made sense to just hire a software engineer instead of a test engineer. If you take a QA role, you're pigeonholing yourself into QA (or some form of it). And I know that at least in my area, QA pays lower, you have smaller raises, fewer opportunities, and generally will be ""2nd class"" to SWE. I don't mean that in a bad way, I know QA is important and I really respected my teammates who actually liked doing it, but this warning is for those of you that are graduating or faced with a QA offer but want to be SWE.

After 8 months I finally got stupid lucky and impressed a company into a software engineer role. 

The other thing is that I'm a pretty average guy, I'm not aiming towards the big companies in SF/Seattle. I had to work so hard to get my interviewing skills to handle essentially leetcode medium to switch to an average company as a software engineer.

Just a heads up for those of you interested in development but getting potentially spicy offers in the QA department.",1571533079.0,2019-10-19 20:57:59
248,Name and Shame: Lendinghome,1030,eiqo5k,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/eiqo5k/name_and_shame_lendinghome/,178,"Just wanted to share my horrible intern interview experience with Lendinghome, a startup in the Bay Area.

Passed a hackerrank round - then they set up a behavioral interview with a software engineer. Was very chill, he just asked what I was interested in and explained what he worked on.

Then, came the final round with two software engineers. I answered both of their questions correctly, and they said they were impressed by my skills and ability to explain my thought process. They said I would hear back results within a week, but they were hopeful I would get the offer. 

Two weeks pass - no response. I email my recruiter, with no response. I then find out that he has left for another company. So I email another recruiter at the company asking for a status update -  again no response.

1 month passes and no response - I email one of my interviewers - again to be ghosted.

Finally, after 3 months, I follow up again with my interviewer. He says that he has not heard a response yet from the higher ups, but he will ask. 5 minutes after the follow up, I get a generic ""Thank you for your interest"" email.

If you were going to make me go through the final round, give me false hope, ignore my follow up emails for months, and finally give me a generic rejection email, I'd appreciate it if you never interviewed me in the first place.

Their hiring process is highly disorganized and I would discourage people from applying here.",1577955129.0,2020-01-02 03:52:09
249,"Coworker has been gone for over 2 years, came back this week and is making me hate my life, and is being extremely difficult. How do i handle this properly?",1023,et4gkz,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/et4gkz/coworker_has_been_gone_for_over_2_years_came_back/,307,"We have a coworker who i will call K, K left on maternity leave back in 2017 (not long after i was hired), then took a lot of extra time off. I don't fully know or understand the story behind this. But K came back this week.

Since K has been gone the dev team size almost tripled, the company has grown astronomically. We went through a major successful pivot, and dev has been completely reorganized into teams rather then everyone reporting to the CTO.

Furthermore tons of things codewise have changed, we migrated to the cloud, C++/Ruby have been eliminated and replaced with Rust/Typescript, etc. Many of the things K worked on are ether gone, or have been rewritten.

K used to be in charge of our back end/IoT stuff and was the principal developer. I am now team lead on our backend/IoT stuff, and she was placed on my team.

Since K has been back, it has been frankly fucking awful. What was supposed to be a few hours a day to bring K upto speed has turned into a day long argument where me and other senior developers being forced to explain and defend every single one of our design decisions since K left.

Today during our 1 on 1, K told me that she would like it if i stepped down because ""i blatantly don't know what i am doing"". Then launched into a rant how just because she had to leave for maternity leave doesn't give us the right to undermine all of her decisions. I didn't really know how to respond to this. 

I have my 1 on 1 with our CTO tomorrow, and i am going to explain this to him. I just don't really know how to explain this correctly, and i am worried of sounding petty and trying to cause office politics. How do i explain this?",1579864718.0,2020-01-24 06:18:38
250,"Everyone talks about how to get into big tech companies, but there's very little talk about how to thrive in them",1025,jhfisp,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jhfisp/everyone_talks_about_how_to_get_into_big_tech/,282,"I have created this thread because, when looking online, it seems like there's an infinity of content of how to get in, but not much in terms of career development within big tech companies. When any content is found, it usually seems to be very black & white.

With that in mind, I created this thread to raise a little bit of a discussion on the topic; people who work/worked in FAANGMULA companies, could you tell your story? What did you wish you knew before joining, what do you think are important aspects in succeeding in this company and so forth.",1603598206.0,2020-10-24 23:56:46
251,looking for a mentor?,1025,i794cg,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i794cg/looking_for_a_mentor/,78,"I'm looking to help out some new grads. If you're looking for advice on location, finding a job, interviewing, resume help, or anything else send me a PM and a quick paragraph about your background and hopes for the future. Only US because that's the only market I can truly offer advice for.

If I chose you I'll schedule a 45-minute 1:1 where we can talk more deeply and you can ask me questions. From there, we'll keep in touch over email and I'll be available to help out as you need.

As for myself I'll send you my actual profile but I work as a back-end engineer for FAANG and have 14 years of experience. I've worked at companies of all size at different levels. I'm the creator of a reasonably popular framework.

As I'm doing this for free and I have a job and family, I can only afford to do this for 2-3 people right now. If you're also experienced you should consider helping out others as well. I know early in my career I had plenty of people around for asking stupid questions to that were super helpful.

**EDIT: Please stop sending me DMs. I'm really glad you all have reached out but I've got >50 in my inbox now and will be going through them to find a handful that I feel I would be of most help to. I promise to read all of them but I'll just be responding to the ones I picked. Of course if you respond (long) after I made this edit I definitely won't be reaching out to you—but I wish you luck regardless!**

EDIT 2: ITT u/brik94 suggested [https://www.cscareerhackers.org/about/index.html](https://www.cscareerhackers.org/about/index.html) as a resource to find mentors/mentees

EDIT 3: I'm reaching out to the 3 people I selected now so if you don't hear from me within the hour then unfortunately I didn't select you :( I wish I could've but there really is only so much I can take on.",1597108871.0,2020-08-10 21:21:11
252,How soon after engaging in a firm handshake is it appropriate to apply hand sanitiser?,1026,d6qujo,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d6qujo/how_soon_after_engaging_in_a_firm_handshake_is_it/,215,"I saw in the [career fair thread] (https://www.reddit.com/r/cscareerquestions/comments/d6jclp/to_those_of_you_attending_career_fairs/) that a firm handshake is regarded by many people as essential to making a good first impression. I was a bit shocked by this as handshakes seem like a surefire way to spread germs, especially if that person is shaking hands with potentially dozens of other students in a single day. I'm somewhat germphobic but still very lucky that I have a decent immune system and I certainly want to be mindful of my privilege and not spread germs to others. So I'm just wondering if it would be considered offensive to apply hand sanitiser during a conversation? Should I offer sanitiser to the representative of the prospective employer as well? Or wait until after the interaction?",1568989634.0,2019-09-20 10:27:14
253,"A nugget of job search wisdom I thought of, that just got me a junior full stack offer",1021,i148vx,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i148vx/a_nugget_of_job_search_wisdom_i_thought_of_that/,167,"Hi everyone, long-time lurker on this sub. I just got my first developer job, and I wanted to share with you all how I did it.

As many of you on this sub talk about, I was a career transitioner and wanted to get into web dev (in my mid-thirties). It's tough out there. That all important first job. Even CS graduates seem to be struggling. No one seems to be bothered with juniors, yet they're bloodthirsty for seniors – it's a touch short-sighted. So when a junior job comes up, how do you stand out among the legions of the 'learn-to-code' movement?

When I went to start the job search a month or two ago, I had lots of enthusiasm. I set up alerts on Linkedin and Indeed etc.. When I saw a job advert with a stack I liked (Django, Vue, Linux), I went to apply, but first I checked out their website (which I really hope you're all doing at minimum). It was a shakey wordpress thing. 

So I made 4.20pm come at 11am and spent the day cloning their landing page. The navbar was the same, same sections, same buttons, exact same design... but **I replaced each piece of content with some text that addressed each of the bullet points in the job description.**

It doesn't need to be a masterpiece, the links don't need to go anywhere (though you should maybe replace the call-to-action buttons with links to your personal projects or your github). It shouldn't take you more than a few hours. You'll also need to deploy it, obviously, ideally with a custom domain. I used a subdomain from my personal portfolio website. 

If this sounds like a lot of work, ask yourself: have you built your own UI kit yet? If no, use this exercise to do it.  If yes, use it! Most landing pages are just a navbar, a few banners and a few buttons. And if you're struggling to do it at all, you might need to ask yourself whether you really are job ready – I'm talking about really basic stuff here.

I did this a grand total of one time for one company. They just offered me a job. And they pretty much told me straight that my CV would've been on the trash pile if it was all they'd seen. It's an alternative approach, I'm not saying everyone should do it, but if you're really struggling to get noticed, I just wanted to share the idea. 

Best of luck with the job hunt!",1596214672.0,2020-07-31 12:57:52
254,Losing my ability to speak like a normal human,1014,dlja1f,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dlja1f/losing_my_ability_to_speak_like_a_normal_human/,358,"I'm about six months into my developer career (after a career change at 27), and I love most things about it so far.

However, I feel like I'm starting to lose my ability to express my thoughts to people.

Sometimes when my lead engineer comes over and touches base on whatever I'm working on, I find it extremely hard to talk...almost as if I'm a zombie on benadryl. Like the stuff that comes out of my mouth...I've read more enlightening things on tumblr. It's so embarrassing.

Not trying to flex - but I'm usually a very articulate person with fantastic social skills. I wonder if it has something to do with staring at a screen all day long?

Do any of you feel like being a dev has degraded your social skills?

Any advice on how to not be a zombie?

EDIT: Thanks everyone for all of your suggestions and insights! I'm already feeling much more hopeful that I'll be able to break out of this rut.",1571785930.0,2019-10-22 19:12:10
255,When should I start applying again?,1017,a3t9p3,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/a3t9p3/when_should_i_start_applying_again/,113,"Recently started a new job. Thought it was going reasonably well until I came into work today and found this http://imgur.com/BAXrglo

Not sure things are working, when do I need to start applying again? 


Edit: I’m getting a lot of really good advice! I want to thank everyone for the support. This is a really tough time for me.

After reading some of the suggestions, I’m now wondering if I should move this thread over to r/legalAdvice. Sounds like this could be a bigger deal that I first thought!",1544164732.0,2018-12-07 01:38:52
256,How to reject (junior) applicants,1016,8g0iip,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8g0iip/how_to_reject_junior_applicants/,79,"I'm graduating in a few weeks and my job I had lined up may not work out. I applied to this company recently and they sent me this response. It's the most kind rejection letter I've ever received. Just thought I'd share my excitement over being rejected.  Cheers.

>alreadyheard,  
>  
>I had a chance to review your application to the Software Engineer position at Foo. Unfortunately, I don't feel like the position would be a great fit for you at the moment.  
>  
>We unfortunately haven't found an effective way to on\-board junior folks remotely just yet. So right now we're looking for someone with at least a couple years of product experience under their belts. But based on what I can see of your work, it certainly looks like you've got the ingredients to become a talented engineer; I'd love to hear from you again in the coming years.
  
>  
>I wish you the best in your career search and hope that we can cross paths again in the future.  
>  
>Best,  
>  
>Bar",1525132723.0,2018-04-30 19:58:43
257,Fired. Imposter syndrome materialized,1012,ezch8a,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ezch8a/fired_imposter_syndrome_materialized/,299,"Little background, this is my first job out of university, lasted about 5 months, I graduated with an electrical engineering degree 8 months ago.

The job was SQL/.Net type desktop programming. I knew nothing about databases and stuff going in but I figured I’d learn on the job.

Basically I was slow. My manager was admittedly a very nice guy but I had a ton of questions for every task and all my tasks took 2-3 times the recommended amount to complete.

I spend a lot of time confused about the “inside baseball” nature of adapting to an existing set of source code. So much jargon, so many table names and procedures that do god knows what. Every task required my hand to be held.

I was asked to come in on a “work from home” day. My boss, and his boss were in a room. They were concerned with the rate I was adapting to the learning curve. They hired another junior. That was the end of my tenure.

Kind of lost what to do now. I live at home still and I don’t think I can face my parents with this news.",1580950470.0,2020-02-05 19:54:30
258,Mild annoyances of being a female developer,1010,7kwwim,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/7kwwim/mild_annoyances_of_being_a_female_developer/,607,"Started a big project recently with lots of people and need to vent a bit. Feel free to share/vent if you have any annoyances. 

1. People just assuming you're a business analyst
2. Someone introduces the members of the development team and you have to awkwardly shout from the side that you're a member of it as well to get introduced
3. People automatically assume you're from the front-end team and ""better with colours""
4. Automatically getting more front end tasks than your male equivalents and having to call this out. 
5. Being involved in small email chains and providing correct information/solving the issue but someone just declares ""we need someone from the development team""
6. Having to awkwardly call out people for sending you emails calling you the other female developer many times in the email to you
7. People referring to my manager's team or talking about my manager like I don't know them/him. But that's my team!!
8. Having to listen to your manager correct the big boss which one of the female developers is which. 

My team itself is fine but everyone else in the company either doesn't think I exist or that I'm Mary/Julia/Sophie/that girl the business analyst/merged together estrogen Java unit with the other female developer??? It just doesn't seem to be getting better despite me being in the company for a while now. I have a simple name but everyone gets it wrong all the time. What's going on lol?


",1513752062.0,2017-12-20 01:41:02
259,Is it possible to complete a CS degree and still be completely clueless?,1012,hte0ur,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hte0ur/is_it_possible_to_complete_a_cs_degree_and_still/,311,"I have one more CS course to complete in the fall before I can graduate (undergrad). You would think by now that I would be able to handle a simple coding challenge.
I was feeling good about myself and hopeful for my future but then I applied for this student org on my campus. There’s an interview process which includes a coding challenge and I had a week to submit it. They give challenges based on past experience and I got the hardest one. It’s due soon and I haven’t solved it. The worst part? It says in the description that “it should take you less than two hours”.
If I can’t complete a coding challenge just to be accepted into a club is there any hope for me at all? I had an internship where they let me do pretty much all front-end because they were nice and knew that’s what I wanted to do. I got so lucky landing that internship because they basically wanted someone with no experience they could teach. But no job is ever just going to interview someone with questions about front-end even if it’s literally a front-end dev position and I know that
I thought that having a CS degree meant you knew CS but looks like that’s not true I guess 🙃 I literally don’t even care what type of company I work for I just want a job where I can use the degree I worked really, really hard for. Am I even going to be able to get a job where someone trusts me to code or should I just apply to the nearest starbucks?
If I sound dramatic I am genuinely really sad. I feel so bad about myself. “Two hours”. I feel like an idiot

TL;DR: I am one class away from my CS degree and I have immense trouble with some coding challenges. Am I employable?

EDIT: okay I am having more luck after drawing it on paper like people said. I doubt I’ll figure it out in time anyway but I am somewhat closer

EDIT: okay I am a lot closer",1595094117.0,2020-07-18 13:41:57
260,"After 2 years of hiring data scientists, I realised how take-home assignments actually benefit junior candidates.",1012,jm38l7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jm38l7/after_2_years_of_hiring_data_scientists_i/,336,"**Background**

I'm a data scientist in a tech company in London and have been hiring junior/graduate candidates as well as mid-senior data scientists for my department. I define the job description, filter CVs, grade take home assignments, interview people and decide when and how to start the successful applicants. Basically from start to finish.

**Why**

Looking at the posts that are heavily upvoted in this sub, the general feeling towards take home assignments seems rather negative, and I understand that. Because I (not surprisingly) had to take lots of them when looking for my first job.

So let's start by addressing the most common counter-arguments to take home assignments:

1. **Everyone applies for multiple positions at the same time. Therefore it is stupid for employers to expect you to spend hours and days, unpaid, on the assignment**: I agree. That's why it's much more beneficial to put a time cap or limit the scope of the test, if a test is necessary.
2. **It favors people who spend days and nights working on the test:** Partly true, because commitment **is only one of the criteria** but it's never weighted above the other skills. If you can devote that many hours to the test, it shows that you really want to work at the company you're applying for. Hiring is costly, and no one wants to extend an offer to those who don't want it. **But** if someone devoted a month churning out garbage code, surprise surprise! They get rejected. It's quality over quantity.
3. **Take home assignments do not reflect one's capability to code**: I disagree. It would be dumb to expect the code you write when working is exactly the same as what's in the test. From my experience, these assignments are a decent reflection of someone's coding **practice** and approach to problem solving. It's really easy to spot copy pasting instead of defining functions, terrible code hygiene, blindly copying from stack overflow, etc. which makes filtering out people who can't code easy.
4. **Companies use these tests to exploit people and made them work for free**: This is totally ridiculous. If the code written by a full time paid engineer who left 3 months ago can't be understood, reused or debugged, what makes you think the code you wrote in a few hours can ever be integrated and used easily? I understand there are cases like that, but those are rather niche and limited.

And now, here's why I believe these assignments especially benefits junior candidates:

1. **It helps you win against people with more YOE or big brand names on their CV:** The rule if simple. If you show competence in your code, even though you had no prior exp or graduated from MIT, you still win. It's a fair game.
2. **It's less tiring and a more worthy investment than grinding leetcode:** In order to be proficient in these, you need to spend a few hours everyday for months preparing, and even pay to get extra access and you ended up learning skills that is useful in 1% of your job. This takes away more time and money than a couple of hours doing a take home assignment. The latter, on the other hand, is 99.99% actual coding and problem solving, and it's a chance for you to practice. If you're data science enthusiast, it's a golden chance to practice on dirty datasets.
3. **You are less likely to mess up:** Ever done a whiteboard interview or a live programming exercise with someone watching every line you write and your mind suddenly go blank and if you can't come up with something, you're ""forked""? Never happened in take home assignments where you are in control of your environment, code at your pace and are free to take a break.

**Conclusion**

Take home assignment with a reasonable length is a very effective tool to weed out totally incompetent candidates and assess applicants based on their actual capability instead of how their CV look or how well they can talk in an interview. This greatly reduces the randomness in the hiring process and lets both parties focus on what truly matters: Your technical capability.

My most 3 recent junior data scientists had no prior working experience, but they showed critical thinking and great problem solving skills, as well as good coding practice in the test. They have been excellent and get promoted ahead of their peers.

Lastly, bear in mind that, if you're applying for a junior position at a company that's actually worth working for, it is extremely likely that you will be competing against hundreds of people. And if 1 of them decided to spend time on the test, you lose.

**EDIT**: Interestingly, some people here actually prefers spending hours and hours on leetcode instead of spending time a couple of hours on a take home assignment.

**EDIT 2**: I agree that there are lots of bad examples out there, but they are not the majority. If you simply rely on a few narratives to say all take home assignments should be abolished, you have a bigger problem.

**EDIT 3**: Please read my first point! **WE ALL AGREE** that tests that take hours to days to complete are bullshit. Good tests should be limited to a few hours (2-3).",1604270207.0,2020-11-01 17:36:47
261,New grad student at their first company,1004,emdft0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/emdft0/new_grad_student_at_their_first_company/,69," I just implemented my first code change at my new job and it got pushed for testing and then hopefully into production! Always felt like I've been a below average programmer, so I'm really fucking happy and just wanted to tell someone!",1578622085.0,2020-01-09 21:08:05
262,coolest cs class activity I have had,1009,dgfnum,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dgfnum/coolest_cs_class_activity_i_have_had/,132,"So I am in a senior level software engineering class which is one of the last pre requisites to graduating and we have a young very new professor who is honestly probably 10x better than any prof I have had to this point. So anyhow, he was explaining the SDLC which is a huge goal of the course and  he said that instead of taking a quiz we would do a class activity wherein we went through a small example of a full process. He ended up showing us this video in class...

[https://www.youtube.com/watch?v=A48AJ\_5nWsc](https://www.youtube.com/watch?v=A48AJ_5nWsc)

&#x200B;

If you are unfamiliar, this is a scene from Silicon Valley which is 10/10 HBO show about start up culture and one of the better shows I have ever watched. In the scene the characters buy a new smart fridge that irritates the very pessi-realistic Gilfoyle who goes on to brute force the password to the fridge and override the OS with a rather crude gif. What is cool about this is that the tech actually isn't too far off. Ok, a 10 digit alphanumeric probably is not going to be cracked in a matter of hours with a garage server and software is probably in place to lock the ip source out after too many failed attempts, but the code at the end of the video is actually pretty good. 

&#x200B;

Anyway, we then spent the class separating into teams to accomplish different elements of this using the agile process. Some wrote an algorithm to brute force a decidedly 7 digit numeric passcode that would be verified for ample time complexity. Another set wrote the unit tests to verify correctness. Another set used the professors ""Developer Wiki"" for a fictitious smart fridge to understand how to override the system effectively. I was a part of this team and wrote the function to replace with my meme of choice, which of course given the circumstances I made be Erlich in the pied piper costume.  At the end another group of system builders tied everything together to create a baseline version and pushed to the repository. Professor ran the program on his system and we watched as it ""invaded"" the fridge and displayed our meme.

&#x200B;

That was the coolest thing I have ever done in class. I learned more in that hour than I probably learned in 2 years of dinosaur professors lecturing on things I wouldn't use very often post graduation. If you are in a position to teach younger developers how to do things, take a note here, could change the way we see the industry.",1570831555.0,2019-10-11 18:05:55
263,PSA: You are not going to have an inherently more satisfying career or life in general by working at one of the biggest tech companies in the world.,1003,5zd9oo,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/5zd9oo/psa_you_are_not_going_to_have_an_inherently_more/,196,"I'm 35 years old and have worked in this field for a while. I've interviewed with several of the ""Big 4/5"" companies, received offers at two of them, and worked for one of them.

I currently work at a smallish (~100 employees) ""fintech"" company.

The most exciting places I've worked at have been smaller, because you make more of a difference there. The most laid back place I worked was a big but low profile tech company - an S&P 500 company, but not a particularly recognizable name.

There are so many options out there in a variety of fields working on all different sorts of technology, that I don't understand why people are so dead-set on working at places like Google and Facebook.

The single biggest factor affecting my happiness at a given workplace has not been the recognizability of the name, or the size of the paycheck, but the level of camaraderie I've felt with my team. I'd rather work with people I like than work on a product my friends use.

I'd rather work on something I found interesting than something I found uninteresting (or worse, exploitative), regardless of the name on the company.

I'd rather work for a place that recognizes that I want to spend evenings with my family than a place that thinks dedication to my job is more important than anything else.

If you want to try your hand at a Microsoft or Amazon interview, great! You may even do well and like the product or team you could work on. If so, enjoy your job there. But the emphasis on a few giant names in this sub is not really a service to anyone starting out a career.",1489538912.0,2017-03-14 20:48:32
264,How I went from $14hr to 70k with no experience,1007,bhfi88,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bhfi88/how_i_went_from_14hr_to_70k_with_no_experience/,272,"I started off living in the Midwest, I knew nothing about IT and made $14 an hour as a contractor doing armed security work. Before that I was a failed real estate agent (being 18 when I tried real estate probably didn’t help..)


I’m now 23, I have no college degree and went straight from the security industry into a cloud position making $70,000 a year in a low cost of living area. I had to move for this job offer, though I had multiple offers across the USA.


I’ve had offers from Minneapolis for 72k, Austin for 74k, Tulsa for 65k, and accepted a job offer in Raleigh for 70k.


Before we go any further, if you are not in a “tech” area and want to accomplish this, plan to move.


Anyways, how did I do it? I started off studying what industry I wanted to be in and what’s popular. It ended up being the “cloud”. The good thing? It pays a lot, even if your new. The bad? It can be hard to get hired as a noob in the IT world starting at the cloud...UNLESS you take the correct steps.


Step 1: Prove my knowledge in various ways. How did I do this? First thing I did was self study and grab 3 certifications.

1. AWS Solutions Architect Associate
2. AWS SysOps Administrator Associate 
3. AWS Certified Developer Associate 


It took me 87 days to get all 3 of these certifications. After that, I needed to prove my knowledge in a real world way since I knocked the paper certifications out of the way. 


I did 2 Cloud AWS projects, one was a chat bot integrated into Facebook messenger that has automatic responses I built using Amazon Lex.

The second project was more on the infrastructure side of things.

Both were pretty simple projects for the most part.


Step 2: Establish credibility. I started a YouTube channel where I created AWS Cloud tutorials and even showed how to do some things like building the chat bot, hosting websites using s3, explaining what route53 is and the differences between all the options, etc. 


After this, I grabbed 1 more certification. I went ahead and passed the CompTIA Security+ certification so I could open the door to government jobs, though I didn’t end up at a government job. It only took 11 days, so it wasn’t too big of a deal.


After this I created a resume using one of the top formats posted on Reddit and updated all my LinkedIn information. I turned my status to searching for opportunities and started reaching out to recruiters and applying to jobs in cities across the United States. 


For specific areas I loved, I created a phone number using that area code and used it on that resume. At one point, I had 5 identical resumes but with different telephone numbers and used each one according to the city I was applying to.


After doing this, I started getting job offers. This path is much much better than help desk and can slingshot you forward in your career. I had no connections in this industry, no prior experience, and no college degree. 


Like I said, I received multiple offers, it’s not easy, but it’s possible.


Look for jobs titled:
Jr devops
DevOps 1
AWS Engineer
Cloud Support Engineer
Hell, I even got an SOC analyst offer in the cyber security space.


Study materials:
For the AWS certs I used LinuxAcademy and aCloudGuru, as well as reading white papers.


For CompTIA Security+ I used professor messers YouTube video series and also bought a cheap study guide to supplement it.",1556264147.0,2019-04-26 03:35:47
265,"Forgive me, but I wish my job would lay me off",1006,i2pxtv,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i2pxtv/forgive_me_but_i_wish_my_job_would_lay_me_off/,222,"I feel terrible for thinking this way. Especially with those of you out there looking for a job and I truly apolgize... But the past 4 months has taught me that WFH and working through a pandemic has caused a great toll on my mental health. Productivity at an all time low. Panicking about stand ups the next day with minimal progress. I only think about how much work I need to do. This weekend the only thing on my mind was work. I'm supposed to be relaxing. It's eating me alive with the amount i'm not getting done and I don't know what to do anymore. I want to take leave of absence so bad but financially supporting myself and my family is extra important this time around. I just wish I could be collecting unemployment and ride these weird times out...

I'm sorry. I just need to rant this somewhere because I have to be strong for my family. I'm stuck and lost and I feel like this feeling won't end anytime soon.

&#x200B;

EDIT: 

Waking up to all the love from everyone and relatable stories definitely helps to make me feel a little more sane. I really appreciate the words you guys. And again, I just want to apologize to those felt offense to me saying I wish I was laid off, especially those who are in the opposite situation where you're struggling with job finding (i've been there and know how it feels). I immediately felt ashamed for even thinking that, but everyone's situation is different and everyone's mind is built differently. The grass isn't always greener on the other side you guys, and we shouldn't put each other down but help each other grow through these weird times..",1596454690.0,2020-08-03 07:38:10
266,If you're in low COL don't settle,999,k4na9u,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k4na9u/if_youre_in_low_col_dont_settle/,249,"I got out of school with my CS degree around a year ago. Had been in an internship with a good culture and people for 2 years, and continued working there. There was only one problem with the job - I was only making 60k.  Despite this I was happy and complacent, not really looking for anything.

So I hear from a recruiter on LinkedIn who says they saw me because of one of my connections (who used to work at the only job I've had in CS, pretty crazy). They said they have an opportunity with a new company that is owned by a larger, secure company and it sounded pretty interesting. I decided to look into it and interview not really expecting anything to come of it.

The interview went really smooth and I liked the sound of the company a lot. Even more they offered me 98k salary to work remote indefinitely from my low COL area!

For me this is really crazy. I'm about a year out of school and getting a 40k raise that will put me way above average family income for my area, something I thought was not possible with what companies around here pay.

Take advantage of the growing remote opportunities, don't settle, you can make more. If recruiters reach out to you tell them you are only interested if it's full time remote, don't worry about ""missing opportunities"" there are plenty. I told a ton of recruiters who contacted me before this I wasn't interested in their positions because they weren't remote, or because they were consulting or ""talent agency"" type gigs which we all know are terrible for work life balance.

EDIT: If you are looking for a first job in CS take whatever will get you experience, with the above paragraph I'm talking more about moving on from that in low COL but first you need experience.

EDIT2: Some people DMing me about how much experience I have - 2 years as a part time intern and 1 year as full time dev.",1606866212.0,2020-12-01 18:43:32
267,Yesterday I started an open source project for interns who had their internship cancelled. So far the project has 181 members. Come join us!,1002,flfoc3,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/flfoc3/yesterday_i_started_an_open_source_project_for/,129,"This is a great way to build your resume in preparation for next year. Come join us on the Discord [server](https://discord.gg/duwcbx) for more info.

(link has been updated)",1584673631.0,2020-03-19 23:07:11
268,Airbnb internships cancelled,995,g2ubnb,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/g2ubnb/airbnb_internships_cancelled/,295,Confirmed through email,1587123809.0,2020-04-17 07:43:29
269,"Every application response email should start with either ""Good news!"" or ""Bad news :(""",994,ikdgr1,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ikdgr1/every_application_response_email_should_start/,164,"I'm sick and tired of seeing this in the email notification preview:

""Hello, after careful consideration, we have to decided to...""",1598962087.0,2020-09-01 08:08:07
270,Just Got Fired. Need Career Advice,989,k38loy,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k38loy/just_got_fired_need_career_advice/,280,"I've been a SE for a few good years in the industry and I got fired a few days ago after being at this company for a few months. My boss was nice about it, he said that I'm a good person and that he'd even recommend me. But, he said that that I didn't deliver fast enough and that I wasn't independent enough, that I often relied on other developers for help. He said that he also understands there's a lot of issues with the codebase and I didn't get the expected amount of support or a good onboarding process, but that this was something the company couldn't afford to offer at this time because of a lack of resources.

In my defense, I do feel that I completed important tasks, and had an impact on the business, I don't think that I was useless. This specific job required FE and multiple other technologies and languages that I didn't have experience with, and I told my boss that I felt I was being spread too thin and didn't really get enough time to focus on a specific technology and learn it well enough.

But, from the very beginning of my employment at this company, I felt that my boss was disappointed and expected me to push features to production pretty early on, despite the above difficulties. 

I *would* just move on and continue somewhere else, the issue is that this is *not* the first time that this has happened. The same thing has happened at previous companies that I've worked at. I've been fired before and had bosses tell me that I'm slow at completing tasks, that tasks can get delayed by a few days or a week quite often. I just really don't want to repeat this vicious cycle of starting a new gig and getting fired again.

In general, I never fully connected to the profession, sometimes I think it's ok, and sometimes I do feel that I've learned interesting things or bulit something nice. But I've still never felt that the profession fully suited me. Often it feels difficult and very technical.

Regarding my performance at companies, it's hard for me to pinpoint exactly where the issues are coming from. Some example questions that run through my head: Am I really that slow? Am I no good at this profession? Or is just my time management? or ADHD? Boss anxiety? I have never managed to figure it out.

I'd be happy to receive any type of advice you guys can offer - finding a good way to pinpoint what the main issue is, offering different approaches, or just relating in any kind of way to my story. Or, if you've made a career change, how did you find what's right for you?

Thanks",1606681695.0,2020-11-29 15:28:15
271,You are not as mediocre as this sub will make you feel...,980,ezopia,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ezopia/you_are_not_as_mediocre_as_this_sub_will_make_you/,195,"Throwaway for obvious reasons.

I discovered this sub my Senior Year of High School. It convinced me to go to a college that hit on almost none of the criteria I wanted in a continued education. Except, it was the only school I got into within the top 40 for CS, so that made everything ok right? Wrong. I was morbidly depressed, because Us News and World Report cannot accurately tell you how easy it will be for you to make friends and acclimate yourself to the new environment. There is no statistic for that.

I left that school, went elsewhere, well outside the top 100, but closer to home. I made more friends, was closer to family, and was just generally more motivated. My GPA was still mediocre, and I was no FAANG candidate. So I took an internship doing IT support for a small media company, for minimum wage. I climbed that ladder for 6 months, scheduling class around a part time work schedule, and working harder than I ever had. Finally, I was promoted to work with a web apps team, and from there I was hooked.

I bridged that experience into 2 more internship roles, and finally, as of this moment I make a salary with the biggest tech company in my area (not FAANG), and I still have yet to graduate. I can do so in May.

I now work among people from even top 10 institutions, not because of my academic accolades or institutional reputation, but because of my work ethic. If there was something I didn't know, I'd learn it. Something I needed to do, I'd do it on or off working hours. I just outpaced my competition.

This sub will make you feel less than, it will make you feel dumb for some of the things you genuinely want out of a school or a career.  But everyone follows a unique path. There exists no guideline to life. Whatever you do, do well, work hard, and success will attend your efforts. I made many decisions this sub would have steered me away from, and I worked out just fine.",1581002190.0,2020-02-06 10:16:30
272,"People with 9-5 jobs, how do you find time to study?",986,ivxrv7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ivxrv7/people_with_95_jobs_how_do_you_find_time_to_study/,393,"Whether it getting Maters remotely or preparing for interviews, how do you organize your day to find time to study or practice. I find that by the end of the work day I feel so drained I can't even look at Leetcode/courses/etc. I can study on the weekend but I will be progressing very slowly. Any tips?

Edit: hey guys, I get it that apparently some of you work 23h a day and have a dozen toddlers to look after. I admire your dedication and work ethics, but let's try to keep gate keeping down and focus on productive tips",1600568304.0,2020-09-19 22:18:24
273,The company screwed up and now they're paying me more.,981,bb7in0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bb7in0/the_company_screwed_up_and_now_theyre_paying_me/,77,"I just landed a Data Analytics internship with a very large multinational corporation that you all would know. I'm ecstatic about the opportunity, it feels very surreal to finally be working with such an awesome group and in the field I've been dreaming about! 

The cherry on the cake is when I was given a verbal offer last week, they quoted the salary for the starting pay for this position and not the internship salary. In the written offer they chose to honor this mistake and pay me the starting salary during my internship. 

I cannot believe the amount of luck I have had in this situation and will do everything I can to make the most of this incredible opportunity.",1554842776.0,2019-04-09 16:46:16
274,My worst nightmare at work happened today...,983,bcf2uj,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bcf2uj/my_worst_nightmare_at_work_happened_today/,219,"I was working from home, in a conference call and I thought I was muted.

I wasn't muted.

I slowly just want to sink and die now.",1555112780.0,2019-04-12 19:46:20
275,"Is it normal to just stare at complex code and be like, wtf?",977,b1g8bd,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/b1g8bd/is_it_normal_to_just_stare_at_complex_code_and_be/,318,"I always wonder if there are people that just look at the code and flow through it and understand it.  Yes, after 4 years of working with it or if I built it, I can just blur my eyes and just by the pattern and colors of a code block, I know what it does.

But man... when I go on a new project, I look at the code and I try to follow it, I pull out a f'n pen and paper and try to write it down, I get lost then I break into a cold sweat and feel I'm gonna one day be a homeless bum as i get lost in a sea of technology.

One top of it, it seems every day a new framework comes out, a new cloud, a new library, a new language a new platform, etc.

So now I gotta learn all that stuff.  
I guess i'm looking for other people who feel the same... is it normal?  Am I stressing myself the F out for no reason because I just feel uniquely stupid?  I dunno",1552692286.0,2019-03-15 19:24:46
276,California accuses Cisco of caste-based discrimination,982,hj8yjt,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hj8yjt/california_accuses_cisco_of_castebased/,381,"https://www.reuters.com/article/us-cisco-lawsuit/california-accuses-cisco-of-job-discrimination-based-on-indian-employees-caste-idUSKBN2423YE

Thought this was interesting:

> California regulators sued Cisco Systems Inc (CSCO.O) on Tuesday, accusing it of discriminating against an Indian-American employee and allowing him to be harassed by two managers because he was from a lower Indian caste than them.

> U.S. employment law does not specifically bar caste-based discrimination, but California’s Department of Fair Employment and Housing contends in the lawsuit that the Hindu faith’s lingering caste system is based on protected classes such as religion.

And lol'ed at this bit

> At Cisco, the unnamed employee reported Iyer to human resources in November 2016 for outing him as a Dalit to colleagues. Iyer allegedly retaliated, **but Cisco determined caste discrimination was not illegal and issues continued through 2018,** the lawsuit states.

Even more interesting was the HN comment section, with many Indian commenters chiming in to discuss the Hindu caste system: https://news.ycombinator.com/item?id=23697083

A few examples:

> I live and work in India and I would like to throw more light on this. Me and my friends like to joke around that you will never get your dues, either pay raise or promotions unless you have the last names jain, gupta, sharma, verma.

> I had a guy on my team who was very capable but did not have the right last name, he was being harassed for promotions for 4-5 years. On the other hand the manager class was entirely ""jain, gupta, sharma, verma"". I know of a specific case where the same manager had one of his relatives transferred from another branch and then promoted to manager on a different team in the same branch. This was all very hush-hush, I know of it because I overheard them talking about it. This is not some local tidbit software company, this is a company you HAVE heard about.

.

> I have experienced caste-based ""weirdness"" of a slightly different flavor - I look like a brahmin (the highest caste), but am not one. Every once in a while I'll meet some indian-origin guy who's brahmin who will come ask me if I am okay with eating that tortilla since it contains lard. Once I let it deliberately slip that I'm not in-fact brahmin, they will be like, ""oh"" and change topics. The oh always sounds to me like, ""oh, I thought you belonged to the ubermensh Aryan class but you don't so I guess I don't care about your depraved ways!"" - sounds like an exaggeration but I have worked too long with too many of these people to be confident that this is what they think. The most rewarding thing for me is when I tell that all my exes were brahmin (it's a trope that they're pissed all their women are being stolen by lower caste men).

.

> As a former employee of Cisco and having been in the Silicon Valley for 10+ years, I can say that I have witnessed extreme casteism and nepotism in Cisco. There was a saying I heard a few years back that one of the criteria to get hired in one of the Cisco guaranteed acquisition spinoffs is that you wear a thread (called Janeu - worn by high caste Hindus over their shoulder and hidden inside shirt). If there is one company in the valley where HR is totally absent and managers form a clique to abuse employees, it is Cisco. It is polluting the entire valley with its casteism and also by exporting its incompetent managers to other companies.",1593634097.0,2020-07-01 16:08:17
277,I no longer thing CS is the right career for me. Critical thinking everyday is exhausting.,980,i8aynq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i8aynq/i_no_longer_thing_cs_is_the_right_career_for_me/,307,"I am at my first programming job and at 2 months, I am already burnt out. I find myself doing anything just to step as far away from the computer as possible.

I have worked at brainless manual labor positions before and I find that so much easier and natural I don't feel drained after an 8 or 10 hour shift, instead I feel satisfied after a hard day of work. And there is no learning off hours just to stay ahead of the competition. 

Meanwhile, currently after work hours end, work is still on my mind. I still have tasks I have to do and I have to study for things outside of work so I don't lag too far behind. It is exhausting.

I am seriously considering become an apprentice and taking on a trade in something. While I feel this is.a little short sighted, I just can't imagine doing what I am doing day in and day out.",1597254993.0,2020-08-12 13:56:33
278,Name and Shame: Citizens Bank,973,eb92ub,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/eb92ub/name_and_shame_citizens_bank/,227,"I haven't worked for Citizens Bank, but I interviewed with them and was given an offer. That process was very ridiculous and they deserve a lot of criticism.

So, I met a recruiter for Citizens Bank at a Hackathon hosted by my school. I was told by the recruiter to email my resume to them and they would get back to me about applying. That all went smoothly. I emailed them my resume, they had me apply and I was told soon after that I had a first round interview with them. This was for the Tech Development Program.

The first round interview was just a video interview where we talked about my education and experience. Soon after the interview I was told that I was invited in for a final round interview on November 5th. I was excited for that! Although I had to drive almost 2 hours each way for the interview, I felt that I was fortunate to be getting a final round interview and so I did it without any complaints.

The final round interview also went well. I met with 3 different interviewers at the same time and they asked me about my experience as well as some basic logic questions and somewhat quizzed me on what I claimed that I knew. I was told that I would hear within 24 hours if I was going to be given an offer. Well, it was just about 24 hours and I was anxiously awaiting a call - then the phone starts ringing!

Instead of an offer, I'm informed that the managers want to add another step. They want to add a Hackerrank coding challenge. I ask during the phone call if that step is used to evaluate candidates, but what I'm told is that it will be used to understand people's experience level once they have the position. I was skeptical about that response, but whatever! I asked what I could expect the challenge to be like and i was told that it would be 1-2 coding problems and 7 multiple choice questions in an hour, and that the challenges would be 'Easy'. I also only had something like 48 hours to do the challenge.

So I sit down to take the coding challenge, and first I run through a few 'Easy' Hackerrank challenges. I complete 3-4 with it just taking a few minutes each, and then I decided that I was ready for the challenge. I start up the challenge and I'm given 4 coding problems and just 4 multiple choice questions. I was also having issues with the first problem that I started, where it would time out while running the tests. I started to panic and essentially just tried brute force solutions to the problems and then ran through the multiple choice questions.

Afterwards, I'm told by Citizens Bank that my test was 'Not within passing range'. So, it was entirely used to evaluate me as a candidate for the position. However, I explained my frustrations with the test and they said that they could give me another chance at a coding challenge. They assign me a coding challenge that I have 24 hours to complete. It was assigned at 8 am, so realistically I had about 16 hours (I didn't want to do it in the middle of the night). Regardless, I do the test and since knew what level of difficulty to expect, I didn't panic at all and aced it. I was informed the next day I believe that it was within passing range.

I was also informed that the manager for the position that I was applying to wanted to talk to me. I asked if this was an interview, and I was told 'yeah, I would treat it as an interview.' Why can't they just be upfront about that? I realistically should've walked away by now, but I accept to do the interview. The interview was scheduled as a phone interview on 11/21.

11/21 approaches, and I'm told a few hours before the interview that one of the managers is sick that day, so we need to reschedule (there was going to be two managers for the interview - the other couldn't do it?). I was barely given any options for days to reschedule, and they're suggesting that I take time at my current job to interview. I say that I'm not comfortable doing that at my job, as they are interested in hiring me full-time and that would be pretty disrespectful to interview when I should be working for them. We manage to pick a time to reschedule. Finally! I'm interviewing on December 4th, and I'm told that I can expect to hear back on the 5th.

The interview went really well (even though they joined the webex call 10 minutes later than they said they would),  and again, I didn't hear about an offer by the 5th. Or the 6th. I followed up, and I was told that they needed more time to deliberate, as there was 'several competitive candidates, including yourself, in the mix.' Eventually, on the 10th, I'm given an offer with two days to accept. Two days? I was patient through the entire process that should have ended on November 6th!

Well, my current employer gave me a full-time offer on the 11th. Now I have to choose between the two. Citizens Bank offered more money, but it would require relocating and joining a new team. I was torn, and I asked for more time to think about it. They give me until the 16th, saying that I have to be respectful of the other candidates in the pipeline.

Well, they don't really give me until the 16th, because they call me on the 12th and let me know that they're rescinding the offer because they 'don't feel that I'm committed to the position.'

Seriously, such a ridiculous mess. Avoid that nonsense.

(Luckily I had the offer long enough to negotiate a much better offer at my current employer :D)",1576493680.0,2019-12-16 05:54:40
279,I hand-curated 450+ remote jobs letting you work remotely - from on the Hacker News Who is hiring - November,973,k1gde6,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k1gde6/i_handcurated_450_remote_jobs_letting_you_work/,100,"Here I would like to share more than 460 remote jobs that I've curated from Hacker News Who is hiring thread. All these are 100% remote jobs not just allowed to work from home during COVID-19. These are 100% remote jobs and will continue to follow that after the covid.

https://remoteleaf.com/whoishiring.

✅ 100% remote full-time jobs.    
✅ Each and every job is manually curated and verified. Spent more than 14 hours on this.",1606430663.0,2020-11-26 17:44:23
280,"Experienced developers, if you could do it all over again and be a new grad fresh out of college, what would you do differently?",972,img7qs,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/img7qs/experienced_developers_if_you_could_do_it_all/,571,Would you move to a different location? Study/practice a certain topic more? Invest your money some different way? Join a certain group? Etc..,1599255996.0,2020-09-04 17:46:36
281,How top tech compensation works,973,cct7v5,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cct7v5/how_top_tech_compensation_works/,279,"I've noticed that there is some confusion and arguments on this sub about how compensation works at the top tech companies, what's real and just made up etc, and since this is information I wish I had before I joined I figured I would explain the different parts and add some concrete number. While this won't be 100% accurate for anyone single company Google/FB/Uber/Lyft/AirBnB/LinkedIn etcetc are all surprisingly similar so it should be a good ballpark for all of them.

# Levels

SWEs at these companies are hired in at a certain level and this level is hugely important for your compensation. These levels usually start at 3 (level 1 and 2 are used for non-engineering roles) and go up to 7-11 depending on the company. This post will focus on levels 3-5 for a couple of reasons.
- It covers ~90% of engineers
- It's very difficult to get hired in as a L6+ if you don't already work for one of these companies 

The breakdown of the requirements for each level is roughly as follows
- L3: Non-PHD new grad or equivalent
- L4: PHD new grad or 2+ years of top tech company experience
- L5: 5+ years of top tech company experience

The reason I use the term ""top tech company experience"" is that these companies are notorious both for discounting experience that aren't from another known tech company and for trying their best to downlevel you. Even if you have 15+ years of experience you might have to push and have competing offers to get an L5 offer if you haven't worked for a company the compensation teams knows how to evaluate. With levels out of the way, compensation can be broken down into 6 parts.

# Base salary
Probably the most straight forward part. You can expect a yearly bump to your base salary that will be based on your performance and how your base salary compares to other people your level. For the total comp math later I will use a $3K raise which should be roughly correct for a standard performer. Approximate numbers:
- L3: $120K
- L4: $150K
- L5: $190K

# Performance bonus
This is a cash bonus that's usually paid out twice a year. This one comes at a ""target"" which is a percentage of your base salary. If you meet but not exceed your performance goals you will get your target bonus. The targets for each level are typically:
- L3: 10%
- L4: 15%
- L5: 20%

# Stock refresher
Each year you will get a stock refresher paid out over four years. To see how much this would increase your compensation every year divide the number by 4. This one is also heavily tied into performance, more on that later.
- L3: $45K
- L4: $80K
- L5: $130K

# Stock sign on bonus
When you join the company you get a big chunk of stock up front that vests over 4 years. What this means is that usually your compensation ramps up for the first four years and then it takes a sharp dive, known as the four year cliff. Companies deal with this in a variety of ways but this is outside the scope of this post. A good but not great stock sign on bonus is roughly 4 times the value of the yearly stock refresh for your level which comes out to:
- L3: $180K
- L4: $320K
- L5: $520K 

# Cash sign on bonus 
Not much to say here, if you have competing offers you can expect to get a cash sign on bonus. Rough numbers: 
- L3: $10K
- L4: $25K
- L5: $50K

# Other perks and benefits
These won't be used for the calculations further down but since they do have real economic benefit they should be mentioned. The big ticket items are
- Free food
- Really good Health/Dental/Vision with $0 premium for individuals, low 3 figures per month for a family IIRC
- 401K match, varies a lot but perhaps 4% of your base salary and performance bonus

# How performance ties in
Normally these companies have a pretty formulaic performance system that ties into compensation. You get graded on a scale from 1 to X (let's use 7) and your base salary raise, performance bonus and stock refresher get set based on that grade. The numbers used above are for when you hit the ""Meets all"" grade smack in the middle, most people will hit this number or a higher one. If you get a 1/7 you can expect your bonus to be 0, if you get a 7/7 the numbers would usually triple. 

# How stock price works
At the time you get awarded your stock refresher or your stock sign on bonus the cash numbers above get converted into an actual number of shares. That means that if the stock price goes up, your compensation goes up with it, and likewise if it goes down your compensation suffers. 

# Doing some math
To make things a bit more concrete let's do the math for the first 4 years for an L5 engineer. Let's assume the stock price stays constant, that the engineer has a completely average performance and does not get promoted. 

- Year 1: 190 base + 20% performance bonus + 1/4 of stock sign on + 50 cash sign on = $408K
- Year 2: 193 base + 20% performance bonus + 1/4 of stock sign on + 1/4 of stock refresher = $394K
- Year 3: 196 base + 20% performance bonus + 1/4 of stock sign on + 2/4 of stock refresher = $430K
- Year 4: 199 base + 20% performance bonus + 1/4 of stock sign on + 3/4 of stock refresher = $466K

Hope this was helpful for anyone considering the top tech companies.",1563074246.0,2019-07-13 23:17:26
282,How many of you have forgotten everything you've learned about Data Structures/Algorithms because you don't use it in your everyday work?,974,fh8nn6,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fh8nn6/how_many_of_you_have_forgotten_everything_youve/,170,"I guess this is sort of a follow up to this [post](https://www.reddit.com/r/cscareerquestions/comments/fggxtv/after_7_years_of_working_as_a_software_developer/).

I'm self taught and I've been contemplating learning CS fundamentals like data structures/algorithms.

I don't want to repeat what the other post has already talked about so my question is how many of you have forgotten the majority of what you've learned about data structures/algorithms whether it's from school, online course or book because you don't use it in your everyday work. 

Would I be learning DS/Algorithms simply to pass the technical interview? I doubt I would be implementing any of this knowledge if I was to work as a ~~Front End~~ Web Developer at any of the tech giants.",1584006569.0,2020-03-12 05:49:29
283,"[Success Story] $20k to $115k in 5 years. If I can do it, so can you",976,alpxur,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/alpxur/success_story_20k_to_115k_in_5_years_if_i_can_do/,248,"I also want to share my journey to help anyone who is feeling lost and like there's no hope for them to get a job.

Let me start off by saying that I 100% believe that if I can pull this off, so can you. I barely graduated high school because I skipped class all the time and I dropped out of community college after 2 semesters because I couldn't be bothered with doing homework. It's not that I'm an unmotivated individual, but I just cannot stand formal education. Something in my brain isn't wired that way. 

So, rewind 5 years ago. I'm 18, freshly out of high school, working as a Deli Manager in a grocery store making something like $11 an hour and also working as a movie theater cleaner for $8 an hour. I also lived with my girlfriend (now wife) who was in school full time for education. My normal schedule would be 5am-3pm at the deli, then 6pm-2am at the movie theater. I worked 17 hour days for a year just so we could afford to eat and have somewhere to live. I would also like to point out that neither of us come from any money. If I lost either of my jobs, we'd be out on the streets.

Anyways, back to the story. Notice how I mentioned I worked 5am-3pm and then 6pm-2am? Guess what I did for the 3 hours in-between. The deli I worked at and the movie theater were both right across from the street from each other, with a Starbucks in the middle. So every day once I was done at the deli, I would mosey over to Starbucks with my laptop and make stupid simple websites with basic HTML, CSS, and JS. I knew working 17 hours a day wasn't sustainable and I thought maybe being a web developer would be a good fit for me since I liked solving problems and solving puzzles. 

Once I had something like 4 or 5 simple static websites created and looking moderately presentable, I created a portfolio and began to apply to every web developer job I could find. I finally landed one making $10 an hour. I was responsible for taking static websites and implementing them into Wordpress. Nothing crazy, just replacing some static text with dynamic fields on the backend. I absolutely hated this job because the boss was such an asshole, but I am grateful every single day that I stuck through it because if I had quit, I would still be working in a grocery store.

So cut to about 8 months into my first dev job, and I apply to another job closer to my apartment. This one isn't offering an hourly rate, but their starting salary is $30,000 a year. Let me tell you, when I got that offer in hand that said $30,000, I thought I was rich. I legitimately couldn't believe how much money they were willing to pay me to sit in an office for 8 hours a day and learn how to be a better developer. At this job I had a really great mentor and boss who I really appreciated. I stuck with this job for about a year. 

One night, on a whim, I decided to apply for a developer job posting I found on [weworkremotely.com](https://weworkremotely.com) for a marketing company that was based in California (I'm in Florida). I knew there was a 110% chance no company would be crazy enough to hire some 20 year old guy without a degree, with barely 2 years of experience, to work for them remotely, but you miss 100% of the shots you don't take, right? Plus, the worst they could do is send me an email saying ""Thanks for applying, we're going with another candidate, blah blah blah"".

Nope. 

The next day the creative director sent me an email and wanted to schedule a Skype interview for that day. Somehow I managed to convince them I was a worthy enough hire. They offered me $50,000 to work for them, full time, from home, in Florida, with 100% paid healthcare for me and my wife, and unlimited PTO. Whaaaaaat.

Now I'm really freaking out. I barely have 2 years of experience and this company is offering me $50,000 to work for them and create projects for their clients. That would be fine, except their clients ended up being Disney, FOX, Cisco, Dolby, and a few others. So what do I do? I stick it out, work 12 hour days, and thank god each day for some company being crazy enough to pay me that much money to add projects for companies like that to my portfolio and resume.

I stayed at that job for about a year and a half, learning all that I could. However, I didn't have any senior devs above me and I knew if I really wanted to grow as a developer, I needed to find a new job somewhere that I'd have a mentor and someone who would beat best practices into me. I applied for a job at a media company, with a team of 10 devs, offering me $70,000 a year. I had never worked with that many devs before and I had especially never imagined making $70,000 a year at 21 years old without a degree. When I interviewed there, I remember being so intimidated. I was certain all of the other developers would instantly notice I was a fraud. However, I powered through the interview and their coding challenge. To my surprise, this company was also crazy enough to hire me. I worked here for almost 2 years with the intention of only leaving if I got fired or let go. $70,000 was great, the mentors were great, the company was great, the work was great, everything here was great. 

Cut to last August. I got a message on LinkedIn from a VP of a F500 company that was looking to branch out into the market of my current employer. They needed developers. They tell me to name the title I want and salary I want. Well jeez, okay. Now here is where something happened. Through the process of talking with this new company, they were not interviewing me. I was interviewing them. The entire time. If I were going to leave my perfect job, I sure as shit better be leaving for an even more perfect job. So... salary? I think ""Might as well aim high. I have nothing to lose."". So I tell them I want $110,000, expecting them to meet me somewhere around $90,000 or $95,000.

Nope. They offered me $115,000 base salary + $20,000 in bonuses. Well god damn. I took that job faster than Internet Explorer crashes. 

I never, ever, ever, imaged I would be 24 years old earning six figures without a degree. I definitely did not even think I would ever hit six figures in my entire lifetime. But I guess the moral of my story is persistence is key. Through the first 2 and a half years of my career, I studied during all of my free time. Every day before work, every night after work, and I held myself accountable to at least 6 hours each day on the weekends. 

If I, a feeble brained guy that can barely cook without catching my kitchen on fire, can do it, so can anyone else. You just need to be persistent and not give up.

EDIT: Now that this post has hundreds of comments, I wanted to take a second to address the 2 types of negative people that have been messaging me and commenting. 

1. To the people saying this is an add for WWR: Honestly, I’m not sure how you read such a long post and the only thing you picked up was a website that barely added any backstory lol. If I were an advertiser paying money and this is what I got, I would 100% want my money back because this would be a terrible ad. 

By the way, make sure when you go to apply for a new job, you check out indeed.com! (/s)

2. To the people so concerned with how I slept when I worked in a deli: 
Well, I didn’t... that much. I’ve had a few people message me that understand and can empathize, but if you actually need to work and going to work is a choice between eating or not eating, you don’t really have a choice. Also, not sure where everyone got the idea that I was working 17 hours a day, 7 days a week. If you’ve ever worked full time, anywhere, you usually get 2 days off a week lol. Mine would be Wednesdays and Sundays, and this is when I would sleep. I also had a comfortable car to sleep in during lunch breaks at work. 

To everyone else, thanks for not feeding into the negative people and contributing to the conversation! And thanks everyone for the well wishes. ",1548973578.0,2019-01-31 17:26:18
284,Slacking off might be the best career move,971,ayys2m,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ayys2m/slacking_off_might_be_the_best_career_move/,294,"
There is this dude at my old job that was really nice to everyone, but did basically zero work. He would chat with everyone and make an appearance for a few hours and then be gone for the day. He was such a smooth talker that he didn’t get fired for like a year. I found out recently that he received a 4 month severance as well. He added me on LinkedIn and he had a new job in less than a month. Also, I see literally a decade of 3 month - 1 year stints on his LinkedIn that he just marks as short term contracts. He has probably made 100k just in severance payments and hasn’t actually had to work in years.

 It makes me think I’m going about this the wrong way with all this Leetcode business. Thoughts? Someone convince me not to leave after standup at 10:15am every day.",1552128587.0,2019-03-09 05:49:47
285,How to: get a software engineering internship at a technology company,970,htrai2,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/htrai2/how_to_get_a_software_engineering_internship_at_a/,93,"Everything below is a synthesis from my experience over the last several years in college. I wrote it up for someone I know who is an underclassman studying computer science at a state university who is interested in trying to get an internship at a competitive technology company. I wanted to put it here because I think it's useful, and I'd be happy knowing others found it useful as well.

To validate the information I share below, I am a new grad working as a software engineer and just graduated from a strong state school computer science program. Over the last few years, I have interviewed at a majority of the hot tech companies, both large and small, trading firms, been rejected a lot, learned a lot of lessons, and received offers from some of the most ""desirable"" places to work. Unfortunately, the one thing I cannot account for is any bias or privilege due to the school I attended, but I assure you, I did not go to MIT, Stanford, Carnegie Mellon, or Berkeley.

This is a simple set of what I think are the core pieces of information and steps to position yourself to get an internship at a reputable technology company.

Completely non-jokingly, I think it boils down to two stages, which require completely different areas of preparation and requirements:

1. Getting the interview
2. Passing the interview

**Getting the interview**

*Note: this section is assuming you have a properly crafted resume. Quite frankly, I am too lazy to write about how to make a good resume, and I think there are plenty of resources online for that.*

For younger students and students without as much experience, getting interviews at technology companies can present a challenge. However, I think there are a few tips and tricks that can be used to make your life a lot easier.

**Referrals**: this is the undisputed number one way to get an interview at any company. Find a friend that works somewhere, or a friend of a friend, and ask if they'd be willing to refer you or connect you to their recruiter at the company. When possible, referrals should always be the absolute first choice for how to apply to a company. This isn’t just something you ask for when you need it. Throughout your curriculum, try to make friends with your peers, upperclassmen, and surround yourself with people that are strong students--right from your first year. 3 years later, all of those students (including yourself) will have strong internships, and you’ll all be able to help each other out. If you stay in your own small bubble and work through your coursework that way, you’ll be less well off.

**Career fairs:** they work. The line for Google isn't worth it since they just tell you to apply online, but career fairs are worth going to and the lines are generally worth waiting in. It's a few hours of pain for long-term success. Just go. There are also ways to make these conversations more worthwhile. Take some time to talk to some of the shorter-lined companies that still have great programs that you may just not know about. A lot of these can lead to genuinely interesting conversations with an engineer that can lead to an email for you to reach out to later.

**Cold emailing**: in my opinion, cold emailing is very underrated. Outside (or in addition to) career fairs and when you don't have a referral, I think it's the best thing you can do. Your success rate from cold emailing will depend on the timing of which you send the email so that it doesn't get buried in the recruiters inbox, the quality of the email, and how impressive of an applicant you are.

Finding the email of a university recruiter at the company and sending them an email expressing your interest in the company, the work they do, and that you're interested in an internship is a good way to get in contact with a company. I think cold emailing can be as effective as career fairs depending on the company, and it's infinitely better than throwing your resume into the black hole of online applications. In the absolute worst case, you just don't get a response from the recruiter you email. 

An additional note is that I usually apply online to the company around the same time that I send the cold email because there's no reason not to, and sometimes the recruiter could miss your email or forget to respond, but your online application will get picked up and put you into the interview process.

Three questions you might be having at this point are:

1. How do I find the email address for the university recruiter at X company? 
2. What do I put in the cold email?
3. When should I send it?

Let's answer them separately.

For question one, I use a gmail plugin called ""Clearbit Connect"". I have found this plugin extremely useful and does everything I need it to do. You can install it easily for gmail, then within gmail, you can search for email addresses of employees at companies by position, very easily letting you find the email address for ""university recruiter Facebook"", if that was your search query.

For question two, I will include an example email edited for anonymity directly from my inbox that I sent last year when applying for new grad roles. I think there is a key to it to stand out beyond ""I am interested in your company's internship / new grad program."" You need to specifically mention WHY you are interested in this company. What is it about the work they do, their company culture, etc., that makes you want to apply. I know it's hard to think about that specifically because many times you are just applying to anything and everything, but believe me, finding a way to make it specific to the company, even just a little bit, goes a long long way. 

Anyways, onto an example. I sent this email (and included my resume as an attachment) at the end of July 2019 to a recruiter I found through clearbit, inquiring about full-time jobs:

\---

Subject line: COMPANY NAME New Grad 2020 SWE Interest

Hi RECRUITER NAME,

My name is JOHN SMITH, and I’m a senior in computer science at the University of Anonymous. I’m graduating this year (Spring 2020), and this fall / late-summer I’ll be looking for a full-time software engineering role for after graduation.

I’m currently a software engineering intern at COMPANY A. Previously, I was a software engineering intern at COMPETITOR working on PROJECT.

From my time at COMPETITOR, I gained a strong affinity for the type of work done at YOUR COMPANY — particularly working on RELEVANT DOMAIN DETAIL, and I have also heard wonderful things about the environment and culture at YOUR COMPANY.

I’m very interested in starting a conversation about potential full-time roles for after graduation in 2020. I know it’s a little bit early, but since return offers from previous internships will likely have a deadline a few weeks into the school year, I figure it's better to get the ball rolling as soon as possible. Additionally, I went ahead and attached my resume to this email, so that you can learn a little more about me.

I’m excited to start the conversation and learn more about YOUR COMPANY!

Best,

JOHN SMITH

\---

For question three, I think emails should be sent so that it arrives in the recruiter's inbox close to the start of the workday (anywhere from 8-9am in their timezone should suffice). You're probably thinking to yourself, do I have to wake up at 8am to send an email? The good news is no, you don't. There is a gmail plugin called Boomerang that lets you write an email and schedule it to be sent at a future time. For example, you can write the email the night before at 9pm and schedule it to automatically send at 8am the next morning, when you're still peacefully asleep.

For all of the above, again, having a well-prepared resume here is a prerequisite.

**Passing the interview**

95% of technology companies will ask leetcode (leetcode.com) style data structures and algorithms problems. The interview will generally be 45-60 minutes in length and ask 1-2 leetcode style coding questions around the ""medium"" difficulty level. The amount of help you're expected to receive will depend on the company, but generally speaking, you should be able to come up with working code to solve the problem with an optimal time-complexity solution in roughly 30 minutes for a ""medium"" difficulty question without too much assistance. Some interviews might be an exception on the easier side and ask a couple of questions that are more ""easy"" difficulty, and some might ask a question closer to the ""hard"" difficulty.

**What interviewing is actually all about:** You’ll hear people complaining all over about how technical interviewing is bogus and algorithms problems are irrelevant to real world work, etc. One thing to keep in mind is your actual process and discussion with the interviewer. At some companies, solving the problem may be all they care about. But at most places, they are actually very forgiving and want to see how you code and how you approach the problem. Your discussion about trade-offs, your thought process, your verbal communication, your ability to implement once an algorithm is in place--these are all way more important than the actual solving of the problem to most companies. Of course, it’s difficult to focus on these things a lot of the time since many interviewees will get stressed out about solving the problem and not handle it well. It’s mostly important to keep a cool head--start with the dumbest solution you can think of and discuss from there. As long as you can communicate and move forward and keep coming up with ideas and thoughtful genuine technical discussion, the interviewer is likely to think you have good general problem solving ability even if you didn’t come up with a perfect solution right away. With that being said, preparation is still important and that’s discussed more going forward.

My general view is that technical interviews can be a bit of a crapshoot, and you might be fully qualified to work somewhere, but you just happened to get an interview question that you were unable to solve effectively. That happens sometimes, and all you can do is learn to move on. There are plenty of good technology companies out there. HOWEVER, I think that your goal should be to do sufficient leetcode practice such that you go into an interview comfortable with your programming and problem-solving ability for these kinds of questions, aiming to reduce the performance variance based on any question specifically as much as possible. There is absolutely a pattern to the kinds of questions asked, and you can definitely be in an interview and given a question that is similar to something you have seen before, either in a different interview or in your practice, and it will make the interview substantially easier.

In my opinion, for internships, if you can comfortably solve arbitrary leetcode ""medium"" difficulty questions in roughly 30 minutes or less with the optimal time-complexity solution, you are good enough at these problems to pass a good amount of technical interviews. As a reference point, by the beginning of my junior year fall, I had solved roughly 100 problems on leetcode (I have currently solved 110 problems). It varies per person, but I think this is generally a reasonable number such that if you hit the right areas, you can go into your interviews feeling confident. If I had to guess, the breakdown of those 100 problems is 30-40 easy questions, 40-50 medium questions, and 5-10 hard questions. I have only come across a ""hard"" difficulty question a handful of times in my interviewing experience, and to be honest, I'm not sure that difficulty level is worth preparing for, at least for internships, since they don't appear very often. However, the bar could be increasing for internships, and companies could start asking harder questions as the field becomes more competitive.

I also want to include that these types of questions are not easy. Even the medium level questions, and some easy ones, can be quite challenging when first starting out. There will definitely be times you struggle very hard and just can't figure out a question, and that's okay. Practice makes perfect, and it's all about practice.

Certain data structures topics come up more often than others in these kinds of interviews. Here is a dump of the topics I think are the most important to focus on. These correspond to the ""Tag"" of the problem type in leetcode (ordered roughly by importance, but all of them are important):

1. Hash table
2. Tree
3. Linked list
4. Array
5. String
6. Dynamic programming
7. Stack
8. Heap

Feel free to PM me if you have any questions. I'm happy to help.",1595146990.0,2020-07-19 04:23:10
286,"Networking and soft skills are a huge deal in this industry, don't ignore them!",973,cfl8w8,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cfl8w8/networking_and_soft_skills_are_a_huge_deal_in/,120,"I feel like this sub is very focused on being as leet/1337 as possible, leetcoding all day and being able to solve problems as quickly as possible, but, remember, you will work with people in teams most of the time. You will have to communicate with people, understand requirements from them, and in general, working with people is one of the hardest things to do.

I've gotten my second offer yesterday for a 60% increase from my current salary, and this was based purely on my networking skills. 

What I did at my current job:

First 3 months it was the internship part:

   • I was new and didn't really have much tasks going on, most things were ""read about this, read this documentation, watch tutorials about this, we will have a demo friday showing you how we do some stuff here"". So I couldn't really proove my leet coding skills, instead, I focused on my networking skills.

   • I went and figured out who drinks coffee as a group (I love coffee) and I started going with them regulary, making a group of friends. This was the first step that got me in their circle and later I could find out different things about the company and about how things were there, plus, they were people with 10+ years experience so I got to learn from them.

   • Never eat alone. There's a book with the same title. Sometimes, I'd pack my lunch with me and if someone from the team suggested we go out to a place 5 minute from the building to eat, I'd put my lunch in the freezer and go with them. I'd eat my lunch tomorrow just so I wouldn't miss a chance to go out with people and socialize.

   • I'd go to whatever trainings my company offered (from how to communicate, how to invest money to how to eat healthy and whatever else they offered) just so I could meet the people from other departments and socialize.

   • We had a ping pong table so I'd ask people who didn't look busy at that time to play and I could talk and socialize with them.

All the things I did above put me over the edge of other interns and even normal employees and I've built strong relationships with people there. I was appreciated for that, more than for my technical skills. 

Due to all the connections I've made I was able to get people to reffer me to companies now that I knew I wanted to make a change. I knew how to communicate better, I've asked people with more experience than me how to deal with interviews, with negotiating salaries, how to give and take feedback etc.

So, my advice for the people here is to not forget about soft skills. Connections and strong relationships are just as important as being the ultimate coding machine. To add to this:

   • Dress nicely at the job. That doesn't mean wearing suits. It means buying clothes that fit, and dressing appropriately to the circumstances. Jeans and a t-shirt are usually my go-to, but I might put on a my best shirt if I knew a meeting was due that day, or we'd meet with a client. Appearance matter!

   • Show respect to people. Ask when you need help, thank them if they helped you. Don't get mad if they didn't. Always offer to help people out if they need and you can. And if you can't/don't know the answer, respectfully tell them this, maybe suggest someone who might.

   • Take every opportunity to socialize and build connections! Go with people at lunch and eat if you have the opportunity, don't stay and eat at your desk unless you have a deadline to meet and you're running out of time. Go to events with your team or at events organized by the company. Drink your coffee in the morning with people if you can. If you smoke you can take cigarettes breaks with others. Stay connected!",1563654210.0,2019-07-20 16:23:30
287,"""grep"" is one of the most important tools you will ever use in your CS career. What are other programming lessons that are never taught in books or classes?",973,8r770l,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8r770l/grep_is_one_of_the_most_important_tools_you_will/,463,"When looking up a codebase, you can import it into an IDE that lets you jump to function/variable declarations, find out each call site of a function, etc. Or you can set up a tool like cscope. Though often, it will be too much hassle, or the IDE wont import correctly, the project may simply be too big and unweildly, or in a new weird language. In all kinds of situations, grep will come to your rescue as you try to figure out what does these weird function calls do, or who are the people calling this super cryptic function because maybe that will explain a little.

Sometimes, you may just get a codebase with zero clue where is the part *you* are interested in. In which case you can just start grepping for random keywords until you locate the correct module. For example, if you are looking for the GLSL shaders in a game code maybe you can just grep for ""gl_FragColor"". It will find the shaders regardless of file extension, embedded in a C or Java file, etc.

Of course no programming book mentions ""grep"". Or how to read code in general.

So, what are other useful tips that you must figure out yourself, or learn from someone, but are never taught in books or classes?",1529055071.0,2018-06-15 05:31:11
288,PSA: I got a LOT more interview offers with a .docx résumé than a LaTeX one converted to PDF,969,8gi9hl,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8gi9hl/psa_i_got_a_lot_more_interview_offers_with_a_docx/,184,"I was applying for a job and threw my PDF in the resume field, and it said ""Error: Not enough information recovered"". I thought maybe the resume crawler bots have a hard time parsing the PDFs, so I switched to a (less pretty) word doc file.

I went from 1 interview offer every other month to getting 5 after a week.",1525303680.0,2018-05-02 19:28:00
289,[UPDATE] Offer Rescinded due to GPA,970,a2ve4h,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/a2ve4h/update_offer_rescinded_due_to_gpa/,207,"First I would like to thank everyone who commented words of encouragement and advice, I really appreciated it. Many people have reached out to me and shared their own experiences with this company and it seems more common than not.

I was in no way bashing this company by my last post, nor was I saying GPA is not a valid indicator of job performance. I was simply stating my experiences and how I felt disrespected as a candidate that they have had my disqualifying factor since the beginning of the application, and waited for me to jump through 2.5 months worth of hoops to have it be a factor. I would much rather be disqualified off the bat, and I can use the time and resources I have spent on this application cycle on other potential employers. 

I have since reached out to one of the companies that I have turned down, and they happily gave me my offer back and I have since accepted, so this isn't a total disaster. I have stopped actively applying, but am continuing my ongoing interviewing processes, as I have learned my lesson. I have already received some coding sample requests from places I have applied to since the incident and I am keeping a positive outlook. 

&#x200B;

Overall this is not the best experience, 2/10 would not recommend. ",1543914250.0,2018-12-04 04:04:10
290,Bad culture in cs and stem,962,j3qxn5,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/j3qxn5/bad_culture_in_cs_and_stem/,296,"In a lot of my classes and in personal projects, I have really bad experiences with the type of people I work with. When I ask questions about code the people I work with treat me like I'm stupid and don't know how to understand or read things. I am very detailed and try my best to be accurate when learning concepts about programming, but this treatment never escapes me. Is this common in cs? Maybe I just don't rub well with the people in this field; i constantly feel like an idiot and it turns me off from working with others. I cant tolerate it anymore and its starting to make me believe im a stupid person",1601656399.0,2020-10-02 12:33:19
291,"If the entry-level market is saturated, is mid-level next?",965,jyearu,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jyearu/if_the_entrylevel_market_is_saturated_is_midlevel/,386,"The entry-level has been really difficult to break into recently.


Part of it is COVID (layoffs, cancelled positions, lots of experienced devs on the market). Part of it is also exponentially growing interest in coding. 


The original narrative we're all familiar with is ""learn to code, there are lots of jobs"", but now it seems to be shifting to ""entry-level is saturated, but there's lot of jobs for people with experience"". 


Could this shift continue though? Is this job market just gonna get more and more competitive every year? Until just getting any job at all will be a huge undertaking? Is this really a temporary problem or is it going to keep going in this direction?


What are your thoughts on this?",1606007279.0,2020-11-21 20:07:59
292,We have to stop open office layouts.. I can't work like this,954,d01a9y,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d01a9y/we_have_to_stop_open_office_layouts_i_cant_work/,266,"We deserve to be productive and open offices are terrible for programmer productivity. For the majority of my career I've been stuck in open offices for no reason and no gain - interruptions, sounds, people talking loud in phones, when I just try to concentrate on doing something useful. But there is a way to change and it's, as usual, through convincing management of money saved - because team rooms and remote working is more economical in the long run. Not surprisingly - programmers that can't work are pretty expensive.

As an anecdote, I was recently interviewed by Gitlab and this is a hugely successful company that is fully remote. 100% remote is not a lie.

Anyway, not all of us wants to work remote. Here's how to save the situation and convince your employer to get the walls in again:

- People that are happy at work don't quit. As it turns out, people quitting are expensive especially programmers that can take months to reach peak productivity.

- Management needs to get their act together and tell the truth. Open offices are just for short term savings. If they don’t understand the long-term catastrophic losses due to lack of productivity they don’t deserve their jobs.

- Long-term savings for everyone involved are astronomic. Increase productivity * amount of people = MONEY. It’s not a difficult equation.

- Headphones are not the solution – they are a bandaid to the problem. If you give free headphones to workers to “fix” the open office problem you are doing it wrong. Fix the fundamental issues.

- Remote work for those that wants it. Huge gains in productivity and worker satisfaction.

- Make choices that improve the work environment and productivity for the majority of the workers – that’s where the big money is saved and working satisfaction is gained.

- Put up few walls in these open spaces. It doesn’t have to be expensive walls. 6 people max in a room, allowing them to acclimatize to each other and get an understanding of how they want to work together. How about, I don’t know… cubicles?

- Don’t mix departments with different expectations and requirements on their work environment. No-one likes this.

https://www.youtube.com/watch?v=2r1DtyGXliY",1567721234.0,2019-09-05 18:07:14
293,I could cry.,953,b3ekwy,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/b3ekwy/i_could_cry/,161,"I got word today that I got accepted to a direct-hire boot camp program that feeds into a good IT company doing what I want to do, which is web developing. I'm beyond stoked, as I've lived most of my life being broke as hell. This will give my family two things; a stable career for a long time and financial security that I've never known.

Just had to share my excitement.",1553130560.0,2019-03-20 21:09:20
294,I start a new job today with online onboarding. No one has called me yet.,958,jmohfs,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jmohfs/i_start_a_new_job_today_with_online_onboarding_no/,194,"It's 9:30 am right now. I was sent the company laptop last week, but I can't log into it. I was also sent an email last week saying that IT would help me set up my laptop on my first day.

I've sent a reply to the onboarding email asking if they'll call me, or what to expect. No reply from that either. So... Do I just sit around until someone reaches out?

Edit: 10 am, still no contact. Sending some more emails out.",1604356534.0,2020-11-02 17:35:34
295,Found a job :O,957,iq7q88,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/iq7q88/found_a_job_o/,121,"Currently in Toronto but company is in San Francisco. I have kind of a big work gap but was told I did well on the interviews.

First year is going to be pretty much remote then I could relocate depending on the pandemic situation(I think). I'm guessing with how the COVID situation now companies are more open to employees from remote locations. (From what I was told there is someone else joining from Canada as well).

Anyways just wanted to do a celebratory post! :D

EDIT:

This post got a lot more attention than I expected o\_o! I'm sure everyone's experience is a bit different but here is kind of the process I went through.

Without going too much into detail I have about a year of experience out of school, then had a gap and worked on my own app(gaming related app/passion project) for a bit. I dunno I think had a bit weird of a resume but I think I got some bonus points because I was pretty passionate discussing about the app.

Interviews consisted of like 1 online challenge + 5 video calls in total with recruiter + engineers + CTO + CEO etc. The online challenge had a somewhat non-conventional question with non-polynomial time complexity with serializing, deserializing, traversing a tree etc. Then I had 2 calls with engineers with about a Leetcode medium-level question each, and talked a bit about system design and background.

CTO call had a bit of ""casual"" system design discussion and rest were just talking about the company and ask questions and CEO was all chatting and asking questions about the company (I was a bit nervous so I kept asking from question list that I prepared :S).

TLDR: Bit of leetcode + side projects/previous experience to discuss + applying a lot + getting rejected a lot + luck

Also for those wondering how the remote is being handled - I think the way they're going to do it is all compensation/benefits will be handled by an intermediate HR company

Thats bout it and thanks everyone for the congrats :D",1599787130.0,2020-09-10 21:18:50
296,"After 19 months of searching, four months of unemployment, failing 7 straight final rounds and hundreds of applications , I finally landed my dream job !",957,b176n1,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/b176n1/after_19_months_of_searching_four_months_of/,191,"So as the title states I’ve been searching for a job for 19 months (August 17th,2017, 3 days after I started my last job), since then I’ve put in hundreds of applications and wouldn’t be surprised if it was a thousand. And I just recently accepted a job with Microsoft! 

I graduated with a computer science degree in December 2017 from a public university in the east coast and from August of 2017 up to November of last year I was a “developer” at an investment bank company. I put Developer in question marks because I spent a lot of time doing product support and talking with clients as opposed to working in software. That work was cool and all but not what I wanted to do. 

The job searching process was truly mentally draining and honestly the worst time of my life, I just wanted to share my story on here and give some tips for job searchers. 


**What helped me** 

As you can probably imagine I did have a lot of algorithms and data structures covered in this interview, so when it comes to A & DS there isn’t much I can say that hasn’t been said on this sub. However if you want to know some posts about that subject that really helped me out on my job search, I’ve linked some below.

 https://www.reddit.com/r/cscareerquestions/comments/7vke9e/my_story_from_0_to_210/?st=JT96WJKH&sh=e54c168e

https://www.reddit.com/r/cscareerquestions/comments/9i0pow/graduated_with_a_24_gpa_1_year_ago_after_studying/?st=JT96WXHD&sh=ea0e9b14

https://www.reddit.com/r/cscareerquestions/comments/6278bi/my_journey_and_tips_29_gpa_at_a_noname_liberal/?st=JT96ZP91&sh=5aec9f33

One thing I would like to note is to NOT do what I did when I first started searching. More specifically I would go on Glassdoor and websites like 1point3acres to find questions that companies would ask and I would only prepare myself for those questions. This is a terrible idea because a lot of the time I wasn’t being asked those same questions and that laziness really prevented me from really mastering DS & A. I think I did around 100 leetcode problems by the way. 

Another thing that really helped me that I cannot stress enough, is staying off this sub. “You just posted some helpful links form this sub and you’re telling us to stay off it , what gives?” I know, there can be a lot of helpful information on this sub however coming here everyday wasn’t healthy. I would constantly compare myself to the success stories and feel lesser of myself because I wasn’t at their level. It took me a long time to realize that I had a toxic state of mind and if I ever wanted to succeed I needed to stop comparing myself to other people and realize this is my story, no one else’s is written the same way. 

**How did I get my interviews**

Now as the title stated I had 7 onsite interviews which I failed, those interviews were with Facebook, LinkedIn, Yahoo, Mozilla, Oculus, Yelp and Amazon. Funny note , I actually failed my Amazon onsite 3 days before my Microsoft one. 

I’ve also had around 30ish phone interviews with the companies above and 
Dropbox, Twitch ,Zillow , Asana, Mailchimp, Opendoor ,Oscar Health ,Textio
Salesforce, Indeed ,Houzz, Pandora and Goldman Sachs. With coding challenges from some more companies. 

Now you’re probably thinking , “that’s a lot of companies to interview with and a lot of companies to get rejected from, how did you get those interviews.” 

Well to answer that shortly I had to be a little unconventional. Normally people will tell you to just apply to a job and hope to hear back. However of all my onsites, I did not apply online for a single one. And for all my phone interviews I believe I only applied online for 3 companies . 


Basically in order to get these interviews I had to surround myself with people who worked in these tech companies. The easiest way to do this is adding people on LinkedIn from companies you want to work for however (at least for me) very few of these people ever responded to me.

I instead spent a lot of time going to tech conferences and really networking with the people there. Once you make yourself known to people and leave a good impression they will be so eager to give you referrals. One tech conference that really helped me out was AfroTech, not only was I able to meet engineers and recruiters but they have a recruitment database for people to reach out to you. 

Also, if you do meet someone at a tech conference that you want to leverage for a job in the future , make absolute certain you get in touch with them as soon as the event is OVER. These people meet hundreds of people per day so making sure you email them while you’re still fresh in their mind is awesome!  There was even an official AfroTech app that listed the emails of the participants, so I would search them up by companies and send them emails about roles I was interested in! From that and referrals from people I met at other conferences that was how I got the majority of my interviews.

In addition to that I would go on hackernews and look for who was hiring for specific companies. Sometimes a company that I wanted to work for wouldn’t be on the most current hackernews whoishiring post , so I would search for people who’ve made posts for that specific company in the past. Usually with just a simple google search , for example “whoishiring Adobe entry level.” The managers would usually leave their emails in their posts and I would send them emails asking if they could help get me in touch with recruiters for specific roles I was looking at. 

Adding on to that point I also used this site [Jopwell](https://www.jopwell.com/)  to land one of my onsites. It’s a job posting site that automatically gives you a referral when you apply. I also used the [Blind App](https://www.teamblind.com) to message managers and recruiters of specific companies asking for referrals and I got ALOT of referrals from doing this too. 

**The most important thing**

Now I know it’s been stressed before on this sub but I don’t can’t stress the importance of this one thing , and that is LUCK. 

And by luck I’m talking more specifically about back luck, of all my onsites I would say I  failed 3 because of bad luck. For first, onsite the recruiter told me that the team wanted to hire me but they didn’t have enough room, pretty unlucky right. The other two I failed because the interviews were extremely rude and abrasive. 

More specially for one onsite , I had a replacement interviewer because the original interviewer forgot he was supposed to interviews me and went on vacation. This replacement asked me a bit manipulation question in a front end interview, told me google and Facebook were better companies than the one I was interviewing for and refused to shake my hand because I struggled with the question he asked me.  

The other onsite, I had an interviewer who deeply sighed every 30 seconds during my interview. And the interviewer after that made me spend 40 minutes trying to solve a problem that she told me after the interview was impossible to solve(I didn’t solve it by the way). 

Basically want I want you to get out of this is that, bad interviewers exist. And there’s honestly nothing you can do about it. You can be so prepared and ready for an interview but sometimes if the stars don’t align you will fail and it’s nothing to beat yourself up over. 


**Closing Note** 

This job search was the hardest thing I’d ever had to do in my entire life. I spent so many days if I would ever make it through, I even gave up on my self towards the end. But I kept at it , no matter my personal feelings. I knew that I had to keep going if I wanted to ever get where I wanted to be. I used to spend days where I just spend hours checking my emails hoping something good would happen. I even quit my job at the time with no job lined up just so that I could get more serious about applying and that was around 4 months ago. 


I know this is kind of long but this sub has really helped me and I wanted to return the favor and help others!",1552633287.0,2019-03-15 03:01:27
297,"I thrive in the WFH environment. Working from home has made me happier, healthier, and 10x more productive at work. How to ask manager to WFH permanently?",953,h96krz,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/h96krz/i_thrive_in_the_wfh_environment_working_from_home/,168,"Hey guys, similar to a lot of you guys my company has been working from home for the past few months due to COVID19. They announced plans to bring people back into the office and i'm upset because I KNOW my work and quality of life will decrease when this happens. Working from home has helped my anxiety and stress, my work has also been so much more productive and efficient, and not to mention the 1 hour i save from commuting. As an anxious introvert, i thrive in this environment. Being in the office stresses me out, gives me anxiety, distracts me and overall just makes me unhappy and a lot less productive than working from home. Also, i eat a lot more because of the free food, and after work i can't physically work out or anything because im exhausted. When im at home, i can work out during my lunch breaks and im not tempted to eat so much junk food.

Now here's my question(s). I know a lot of companies want people to be physically seen at work, but if there is proof that someone is more efficient and productive when working from home, why wouldn't they let them do it? Would they really trade productiveness for having someone physically at work? In other words, how can I ask this to my manager for the highest chance of getting an okay from him?",1592214549.0,2020-06-15 05:49:09
298,I just lost a really good job opportunity because I couldn't reverse a linked list.,947,hjkski,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hjkski/i_just_lost_a_really_good_job_opportunity_because/,388,"I have solved more than 50 easy to medium problems on leetcode. Reversed a linked list so many times! Yet on a 45 min interview i just got stuck.

I almost had it, i just missed one line of code for pointing the head node back to nil and it was causing an infinite loop. Right after the interview, i figured it out in just 2 minutes.

I feel horrible because I lost such a worthy profile due to such a stupid mistake. 😭

I don't want this to happen for my future interviews. What can I do to not get stuck and fail so miserably? Also, is this really a deal breaker considering I have several projects on GitHub and 1 year of professional experience?

EDIT: Thank you so much to all for letting me know how I can handle the situation better from now on. Also knowing this is not an uncommon occurrence makes me feel slightly less miserable.

Also, I have tried to take all critical comments in a constructive manner. I understand your frustration considering this looks like such a simple problem which should not have been an issue.

I strive to improve myself, and both the interview and this discussion have been tremendous lessons for me on how interviews work in general, and also how I can improve my chances here on.",1593671740.0,2020-07-02 02:35:40
299,Crowdsourced dashboard of hiring freezes,945,frb9fp,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/frb9fp/crowdsourced_dashboard_of_hiring_freezes/,105, [https://candor.co/hiring-freezes](https://candor.co/hiring-freezes),1585537648.0,2020-03-29 23:07:28
300,Rockstar new developer on team,945,kdomsz,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/kdomsz/rockstar_new_developer_on_team/,241,"Just hit 1 year anniversary at startup and we hired a new (less experienced) frontend dev. New dev seems to complete every task 2x fast as me.  I feel like I've been at a good place so far and getting decent feedback, bonus etc until now.

Personally I like having a smart high performer on my team, but from a career and team perspective this has me worried and my confidence has been shot this whole month.

I already put in 50+ hrs per week and study outside of work, but oftentimes our code base doesn't click with me and things take me longer to do.  Not sure what to do, besides keep my head down and keep going.",1608077769.0,2020-12-15 19:16:09
301,Trump Administration Announces Overhaul of H-1B Visa Program,944,j6fh4j,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/j6fh4j/trump_administration_announces_overhaul_of_h1b/,786,"[WSJ Article Archive](https://archive.is/N3uMd)

>Under the new rule, the required wage level for entry-level workers would rise to the 45th percentile of their profession’s distribution, from the current requirement of the 17th percentile. The requirement for the highest-skilled workers would rise to the 95th percentile, from the 67th percentile.

[DHS Press Release](https://www.dhs.gov/news/2020/10/06/department-homeland-security-and-department-labor-rule-restores-integrity-h-1b-visa)

On the surface this sounds like a reasonable move, companies will no longer be able to pay H-1B workers significantly under market rate. This should make it much more difficult to abuse the system and result in some combination of increased domestic hires and increased wages for H-1B. Interested in what other people think of this move and if there may be negative consequences that aren't immediately apparent.",1602053549.0,2020-10-07 02:52:29
302,"Getting paid, doing absolutely nothing, been a month, don't know what to do",940,jokbii,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jokbii/getting_paid_doing_absolutely_nothing_been_a/,184,"Hello guys. I'm a new grad CS major. I've managed to found a job right after I graduated. I've been working for a month as a software engineer now.

My company is mid-sized, around 50 engineers in total. But my division only has 3 including me and 2 mid-level devs.

I haven't given much of work at all since I've joined. My 2 mentors tried their best to isolate me from all the problems & issues they deal with daily. They just want me to learn how the product works in terms of codebase and system design (api s, services etc...)

I'm trying my best to analyze the code and I'll get so many questions to ask them on a daily basis. But as per usual, they don't have enough time to teach me.

Nothing about my training is planned or programmed. I basically ask them during arbitrary work hours and they usually postpone it due to being in a meeting or a call with QA, Testers, UX, FrontEnd people. So my training is very limited. (1-2 hours per week)

I don't wanna keep reminding them every minute since I don't want to seem as a needy developer.

I have signed one-year contract. I don't know how to improve myself or prove them that I'm worth keeping for the company.

They have asked me to design this project with all of it's services, security, login sessions etc. handled. I can design it on my own but they want me to use their own services and to do that, I need them to tutor me on how stuff works.

There is no documentation at all.

I don't know what to do. I don't know if I'm gonna get fired. Any advice is appreciated.

Thanks.",1604617614.0,2020-11-05 18:06:54
303,Is it normal for other people's code to induce violent thoughts?,938,hv6yrg,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hv6yrg/is_it_normal_for_other_peoples_code_to_induce/,170,Just wondering.,1595365401.0,2020-07-21 17:03:21
304,"Any advice on how to get into large, slow moving companies where technology isn't their main focus?",939,gkabod,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gkabod/any_advice_on_how_to_get_into_large_slow_moving/,324,"I've been working at small companies and startups for well over a decade now. When I was 25 it was great: learn all the things, multiple hats are cool, beer in the fridge, etc.

Now I'm 35 and I absolutely tired of it. Doing multiple jobs on 1 salary, having shitty benefits, and having to put out fires everyday is not fun anymore. Daily releases to prod, ""scrum"" as an excuse to put work on a conveyer belt, and anxiety as to whether or not your company will exist in 3 months is not fun anymore. 

I'll be frank, I know my shit and I want a boring, low stress job at a big company where I don't have to worry about the place going under and my coworkers all being ""rockstars"" who have to one up each other. I actually want that place where Bob doesn't know how to rotate a PDF and has gainfully employed since 1978.

What companies or industries should I be looking at and how do I gauge how much slower the company will be vs. a startup?",1589582438.0,2020-05-15 18:40:38
305,Just sent my acceptance email (bootcamp grad),934,k0k1ty,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k0k1ty/just_sent_my_acceptance_email_bootcamp_grad/,257,"After 800+ applications and 6 months of projects and toy problems, I received an offer from a startup. If you're going still going through this phase, remember, it only takes one company to accept you and take you under their wings. Keep going, don't lose hope in yourself, no one's going to push you to learn but yourself.

If you have any questions regarding my process, I'll be more than happy to answer.

&#x200B;

""Success is not final; failure is not fatal: It is the courage to continue that counts."" - Winston Churchill

//EDIT Whoever wanted to know my full journey and my recommendations made a posting

[LINK to post.](https://www.reddit.com/r/cscareerquestions/comments/k0yzbo/journey_to_my_first_software_engineer_position/)",1606302995.0,2020-11-25 06:16:35
306,"""Bang for your Buck"" Leetcode Study Guide / Question List",934,b4t12i,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/b4t12i/bang_for_your_buck_leetcode_study_guide_question/,112,"Hi cscareerquestions,

Has anyone created a list of leetcode study guide questions that will establish I guess a good ""framework"" for questions that can be asked?
I just want to be efficient and am still working a fulltime job, even though I know it's a good idea to practice as much as possible.


Thanks!


Edit: Feel free to include non-leetcode links too.  I'm fine with practicing on other websites too, just most familiar with leetcode!
",1553435171.0,2019-03-24 09:46:11
307,We’re Reddit engineers here to answer your questions on CS careers and coding bootcamps!,933,8na87e,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8na87e/were_reddit_engineers_here_to_answer_your/,384,"We are three Reddit engineers that all have first-hand experience – either as a graduate or a mentor – with a Bay Area bootcamp called Hackbright Academy. For those of you who are unfamiliar, Hackbright is an engineering school for women in the Bay Area with the mission to change the ratio of women in tech. 

Reddit and Hackbright have a close relationship, with six current Hackbright alumnae and seven mentors on staff. In fact, u/spez is one of the most frequent mentors for the program. We also recently launched the Code Reddit Fund to provide scholarship and greater access for women to attend Hackbright's bootcamp programs and become software engineers.

We’re here to share our experience, and answer all your questions on CS careers, bootcamps, mentorship, and more. But first, a little more about us: 

u/SingShredCode: Before studying at Hackbright, I worked as a musician and educator at a Jewish non-profit in Jackson, MS. Middle East Studies degree in hand, I wanted to look at interesting problems from lots of perspectives and develop creative solutions with people smarter than myself. After graduating from Hackbright’s Prep and Full Time Fellowships, I landed the role of software engineer at Reddit. I will begin mentoring this summer.

u/gooeyblob: I started mentoring at Hackbright after we hosted a whiteboarding event at Reddit. I really enjoyed being able to help people learn and prepare for careers in tech. As far as my background goes, I started working in tech by working in customer support for web hosts after dropping out of college. I eventually worked my way up to join Reddit as an engineer in 2015, and today I'm Director for Infrastructure and Security where I help lead the teams that build our foundational systems (with two Hackbright grads on the team!).

u/toasties: I've been a Hackbright mentor over a year, mentoring four women (two of whom have been hired at Reddit!). I went to Dev Bootcamp in 2013; before that I was a waitress. I mentor because there were so many kind people who helped me along my journey to become an engineer (my first employer even let me live in their office for two weeks with my dog because I couldn't afford a deposit on an apartment). I want to pay it forward. 

Proof: https://i.redd.it/o06ce8xnx0111.png",1527728416.0,2018-05-30 21:00:16
308,"As a new employee, I feel very unproductive working from home",932,gjmsoc,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gjmsoc/as_a_new_employee_i_feel_very_unproductive/,148,"I joined my company right after the whole WFH thing started. As such, I haven't met any one of my teammates and no one has really explained much of our platform to me. Instead, I am given a brief overview in a 5 min call and then just told to ""figure it out."" I've been reading the documentation and that's not too clear to me.

If I was in the workplace, I could quickly go over to my teammate and ask for help. But this is much harder and annoying while working from home, everything takes like 3 times as much time. Plus I'm still a junior developer and I feel like I'm not learning as much as I could be if I was working in the office. 

Plus my company is pretty PIP-happy so I'm worried that I'm not very productive. :/",1589493289.0,2020-05-14 17:54:49
309,Reminder that it's okay to be slower than many other people.,932,k1moik,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k1moik/reminder_that_its_okay_to_be_slower_than_many/,175,"Male, around age 35 here. I graduated from a state university that's not in the top 25 and have worked in the industry as a software engineer for several years. As of now, I have almost no debt, but I also have almost no money in my only bank account, no home, no valuable assets of any kind. My most valuable (money-wise) asset is an old but reliable car with which to do errands with.

You'd think I'd be far better. However, a few of my cousins who never settled to move to the US, they had already gotten their degrees in STEM or civics and social work in their mid 20's, and started working right after. They got married in the late 20's to early 30's, have money, house, car, kids, pets, all by the time they reached 35.

My parents have already accepted that I'm slower in moving on with my career and life, and I don't really get to talk to my relatives all that much anyway. I'm continuing to move on my career to rebuild again, from no money and no assets. But I've always compared with myself with my past self. Once you get a good job and good home people will start to forget how long it took you, anyway.

I say don't worry about others and just work on being the best version of yourself. You'll just feel worse if you compare your own salary, lifestyle etc. with others.",1606451130.0,2020-11-26 23:25:30
310,2 months after being laid off in the middle of the pandemic. I finally got an offer!,931,gwe0d3,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gwe0d3/2_months_after_being_laid_off_in_the_middle_of/,136,"I just want to express my happiness even if if the pay is quite low , I'd take any chance I can get right now. After approximately 90+ job applications and 6 interviews, I just got an offer yesterday and I'm so relieved.

My savings is running out and my 7 month old laptop just died I thought I couldn't make it , I practiced leetcode problems using only my phone , pen and paper.

Now my current problem is that I think, I did really well in the interview and the problems they gave me were already familiar and because of that I feel like it was just a fluke.

And also I have zero experience java which is the main language they are using , any advice how can I transition? I have 5 months experience using Angular, Python and Mysql.",1591291112.0,2020-06-04 13:18:32
311,The concept of dream job is not healthy,930,evbp67,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/evbp67/the_concept_of_dream_job_is_not_healthy/,262,"This is half ""need to get this off my chest"" and half advice for the rest of you that have a dream job in mind.  
  
I have the job I always wanted in the city I always wanted to live, I've been dreaming of this since I started studying CS in university. I've been here for some time now and I've worked REALLY HARD to get where I am today.  
But I'm just realising that it's all bullshit, my friends tried to warn me that the concept of a dream job is unhealthy, it sets very high expectations in your head that reality is incapable of realising, so disappointment will almost always follow.  
  
Which is what happened to me. It's starting to hit that it's just another job. Actually, it's worse because a lot of bad things have been happening which I thought ""this place is amazing, surely it doesn't happen there, so I wanna work there!"". But voilà! It happens! So I get even more disappointed because I was sure it wouldn't.  
  
Anyway, might be obvious for some, especially more senior people. I joined the workforce 1 year ago so this is new to me and I thought I'd pass along the message I ignored. As much as there are objectively better jobs than others, don't fall into this trap of dream job, thinking that it will solve all your problems and make you happy.",1580274719.0,2020-01-29 00:11:59
312,Stop rejecting yourself.,932,a8abew,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/a8abew/stop_rejecting_yourself/,114,"Frequenting this sub-reddit, I've noticed a lot of posts along the lines of ""Should I apply for this job?"" ""Do you reckon they accept interns with only 2 years at college?"" ""I feel unqualified should I even do this bigN interview?""

&#x200B;

My advice is to stop rejecting yourself. In these situations, just go with it, you will lose absolutely nothing. If you apply, and get ghosted/rejected, it doesn't matter, *let them reject you, don't reject yourself.*",1545430128.0,2018-12-21 17:08:48
313,You guys stress me out,927,8iat1f,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8iat1f/you_guys_stress_me_out/,264,"This sub is so stressful man. Reading through posts gives the impression that there's like a winding golden path to success in this field and any misstep will through you off a loop. People saying ""don't take x it'll make you an x guy forever"", or ""if you can't answer xyzadbc or don't know these 8 esoteric things you'll never find a job"".

Fuck me I thought people got into tech because of the flexible job market. I don't get that impression from this sub at all, people sound like they're fighting like crazy to get entry level positions and no one with a job is ever positive or reassuring about job prospects. Why am I even in this field if I'm going to have to spend 500 hours to prepare for an interview? Might as well go management or something and skip all of this stress. 

Is this really what its like out there or is this just the environment in this sub? I just started my first position and it seems like people I know are finding new, better positions *all the time*. I'm not at google or anything but the job market does not seem so bad from my perspective. Why is the atmosphere on this sub so glum 24/7?",1525940454.0,2018-05-10 04:20:54
314,Would it really kill HR to send an automated rejection letter rather than ghosting you?,922,ewvc1a,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ewvc1a/would_it_really_kill_hr_to_send_an_automated/,213,"I’m applying for a bunch of jobs with little luck, but fuck me, getting ghosted sucks ass. I’d say maybe 1 in 15 companies will reply saying they’re looking at other candidates. But other than that I just get nothing. Annoying as hell",1580535068.0,2020-02-01 00:31:08
315,"I (21F, poc) have a really hard time fitting in bc everyone assumes I'm an underqualified diversity hire",925,edqtrq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/edqtrq/i_21f_poc_have_a_really_hard_time_fitting_in_bc/,363,"Its difficult to prove that I belong because confirmation bias is a thing (miss a deadline by a day or dont understand a concept? Clearly you're dumb as rocks and dont deserve to be here).

Anyone have any advice on how to ease the situation? Besides the obvious make no mistakes ever again. This is really making me rethink my career choice and I hate it because I really do enjoy developing software and coding, but the people can be brutal and bad at hiding it.",1576969194.0,2019-12-21 17:59:54
316,Landing a developer job is harder than the actual job.,923,ghoula,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ghoula/landing_a_developer_job_is_harder_than_the_actual/,243,I’m not saying being a developer is easy. It’s not but I’d say it’s easier than landing a developer job.,1589237057.0,2020-05-11 18:44:17
317,How do I stop being afraid of code reviews?,926,jqztd2,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jqztd2/how_do_i_stop_being_afraid_of_code_reviews/,140,"Everytime I push code for a review, I have a bad feeling in my stomach. What if I did something stupid? What if the reviewer is thinking ""who hired this idiot"" and I stay in this state till the review is done. 

And tbh, no one is really mean in the reviews. They are quite polite. 

How do I get rid of this BAD feeling? It's driving me nuts. Especially during the damn WFH where I'm online literally all the time. 

I have like 7 months experience right after college.

Edit: Thanks everyone for your kind replies. Improved my confidence and made me feel much much better :)",1604965163.0,2020-11-09 18:39:23
318,Getting the most out of 1:1 Meeting,919,ifuk46,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ifuk46/getting_the_most_out_of_11_meeting/,92,"What are some questions or topics you have discussed or think to discuss with your manager in a 1:1?

Aside from ""What is one thing I can do better over the next few weeks"", and similar questions, what are some things to cover to get the most out of this meeting from a longer-term career perspective?",1598322049.0,2020-08-24 22:20:49
319,PSA: Fake LinkedIn Job Postings,917,jrfwua,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jrfwua/psa_fake_linkedin_job_postings/,112,"I was almost a victim, but I did some research before my ""interview"" tomorrow. 

I applied to a junior software engineering job through LinkedIn for a big health industry. I applied on October 24th and a day later, I saw that they had viewed my application and nothing about it since till today. 

I got an email earlier today at 6:33 pm pst saying that their online recruitment team has recommended me for the position and that I'm one of the candidates shortlisted for a virtual interview. 

In my head, it sounded great since I finally got an interview after months of searching. What threw me off was the fact the following line:

""The window for this screening test/interview is today Monday 9th and Tuesday 10th of November from 10AM - 6PM (PDT), Meaning you can schedule your interview in between the hours. This virtual screening test/interview is online through Email correspondence and Google Hangout.""

I mentioned that they sent me the email at 6:33 pm. Today was the 9th, so I effectively only had 1 day to schedule my interview. I was also looking at the email from my phone that time so I failed to notice the email they sent me was from enroll@<company name>s.com. 

There was also this line:

""You are to immediately contact the Sr Recruiter / Vice President of Marketing and Communications Ms. <first name> <last name>at her email <first>.<last>healthinterview@gmail.com to acknowledge the receipt of this email and to confirm your availability and to schedule your interview. You should also add her on Google Hangouts with the same email address.""

The email address looked fishy, but for some reason I ignored it.
Since I only had a day left, I sent an email to her and added her contact on Hangouts. I then looked up her name on LinkedIn and found this under her ""About"" page:

** NOTE- I am not an IT recruiter. I have not been communicating with anyone for a Junior Software Engineering job at <Company Name>. No such job exists and is a fraudulent posting. Please contact LinkedIn to file a complaint and report this to the FBI’s internet fraud department. The main intake site, IC3, is where you can file a report, www.ic3.gov.

If I hadn't searched for her name, I might've (probably not) fallen for their scam depending on their requirements. (I am still tempted to see if the scammers would interview me and see what they say when I link them that though.)

Be wary of fake job postings on LinkedIn and research beforehand if anything looks fishy.",1605018255.0,2020-11-10 09:24:15
320,Triplebyte is cancelling the public profiles,913,gqfvs0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gqfvs0/triplebyte_is_cancelling_the_public_profiles/,147,"This is the email I got:

There’s no other way to put this--I screwed up badly. On Friday evening, I sent an email to you about a new feature called public Triplebyte profiles. We failed to think through the effects of this feature on our community, and made the profiles default public with an option to opt out. Many of you were rightfully angry. I am truly sorry. As CEO, this is my fault. I made this decision. Effective immediately, we are canceling this feature.

You came to us with the goal of landing a great software engineering job. As part of that, you entrusted us with your personal, sensitive information, including both the fact that you are job searching as well as the results of your assessments with us. Launching a profile feature that would automatically make any of that data public betrayed that trust.

Rather than safeguarding the fact that you are or were job searching, we threatened exposure. Current employers might retaliate if they saw that you were job searching. You did not expect that any personal information you’d given us, in the context of a private, secure job search, would be used publicly without your explicit consent. I sincerely apologize. It was my failure.

So, what happened? How did I screw this up? I’ve been asking myself this question a bunch over the past 48 hours. I can point to two factors (which by no means excuse the decision). The first was that the profiles as spec’d were an evolution of a feature we already had (Triplebyte Certificates--these are not default public). I failed to see the significance of “default public” in my head. The second factor was the speed we were trying to move at to respond to the COVID recession. We’re a hiring company and hiring is in crisis. The floor has fallen out on parts of our business, and other parts are under unprecedented growth. We've been in a state of churn as we quickly try various things to adapt. But I let myself get caught in this rush and did not look critically enough at the features we were shipping. Inexcusably, I ignored our users’ very real privacy concerns. This was a breach of trust not only in the decision, but in my actual thought process. The circumstances don’t excuse this. The privacy violation should have been obvious to me from the beginning, and the fact that I did not see this coming was a major failure on my part.

Our mission at Triplebyte has always been to build a background-blind hiring process. I graduated at the height of the financial crisis as most companies were doing layoffs (similar to what many recent-grads are experiencing today). My LinkedIn profile and resume had nothing on them other than the name of a school few people had heard of. I applied to over 100 jobs the summer after I graduated, and I remember just never hearing back. I know that a lot of people are going through the same thing right now. I finally got my first job at a company that had a coding challenge rather than a resume screen. They cared about what I could do, not what was on my resume. This was a foundational insight for me. It's still the case today, though, that companies rely primarily on resume screens that don’t pick up what most candidates can actually do--making the hiring problem much worse than it needs to be. This is the problem we're trying to fix.

We believed that we could do so by building a better Linkedin profile that was focused on your skills, rather than where you went to school, where you worked, or who you knew. I still believe there's a need for something like this. But to release it as a default public feature was not just a major mistake, it was a betrayal. I'm ashamed and I'm sorry.

Triplebyte can’t function without the trust of the engineering community. Last Friday I lost a big chunk of that trust. We’re now going to try to earn it back. I’m not sure that’s fully possible, but we have to try. What I will do now is slow down, take a step back, and learn the lessons I need to avoid repeating this.

I understand that cancelling this feature does not undo the harm. It’s only one necessary step. Please let me know any other concerns or questions that I can answer (replies to this email go to me). I am sorry to all of you for letting you down.

Sincerely,

-Ammon",1590458740.0,2020-05-25 22:05:40
321,"I'm Gayle Laakmann McDowell, author of Cracking the Coding Interview & CareerCup founder. AMA",909,6enydz,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6enydz/im_gayle_laakmann_mcdowell_author_of_cracking_the/,404,"* Author of Cracking the Coding Interview, Cracking the PM Interview, Cracking the Tech Career
* Founder and CEO of CareerCup
* a former software engineer at Google, Microsoft, and Apple
* Consultant -- interviewing training, how to hire developers, etc
* Consultant -- coaching startups through acquisition interviews
* blog/post/write at http://www.gayle.com, http://www.facebook.com/gayle, http://www.twitter.com/gayle, https://www.quora.com/profile/Gayle-Laakmann-McDowell
* Speaking on technical hiring and other topics",1496364013.0,2017-06-01 20:40:13
322,Accepted a job offer just to find out they use time tracking software. How should I proceed?,911,gth11h,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gth11h/accepted_a_job_offer_just_to_find_out_they_use/,214,"UPDATE: Thank you everyone for your responses. I have declined this position and told them my exact reasoning for doing so. In the future, I will be sure to ask potential employers how they track time, and any whiff of a time tracking program like this will be a hard pass.

\---

I (25 F) am halfway through my CS degree and am currently working as a contract front end web developer for a digital marketing agency in town.

After 3 interviews with another digital marketing agency, I received a job offer with a \~$3/hr raise (on salary instead of contract) and benefits. This job is more technical, seems to offer some degree of mentorship, and will set me up better for graduation, unlike my current job which is pretty breezy and more focused around WordPress web design than technical development. They are backlogged with projects and desperate to bring a web developer on board. They want me to start first thing Monday.

I tell them I will need to give my current place 2 weeks notice and that I can devote around 20 hours per week in the evenings this week and next to onboarding, training and beginning to work on these projects for this new company.

Everything sounds pretty good, so I go in to sign paperwork last night and get my company equipment.

This meeting turns into a 2.5 hour (unpaid, since I don't start until Monday) mini training session on their project management software (Pro WorkFlow) and other general things. All hours are tracked live and to a T. To add back hours for a missed punch or edit hours, you need to get a project manager to do it for you.

Then... he brings up RescueTime, their time tracking software.

From his explanation to me, this software:

* Tracks the window/tab you have open,  what you type in, your activity/interaction with the program/webpage
* If you are idle from your computer for 5 minutes, it sends an alert asking what you were doing. Not sure what happens with this alert or the response, but I imagine the manager can see all of this.
* Sends ""productivity scores"" to the manager for all members of the team weekly.

The manager said this is a ""backup"" and useful for when employees forget what they were doing at a particular time, they can ask him to look up their activity so they can track their hours correctly. He says he ""doesn't want to use it"" and the productivity scores email usually gets marked as read in his inbox.

So... I went home after that feeling both flabbergasted and let down. How did I not think to ask about how this company tracks time? Everything else about the company seemed pretty good, despite the clear message that I will be worked as much as I will let them work me, especially this summer.

Should I still take this new job? I do not feel comfortable with time tracking software like this. Am I overreacting?

&#x200B;

TL;DR: Got a job offer for a salaried web dev position with a raise over my current contract position, then found out they use time tracking software to track everything I do on my work laptop.",1590885132.0,2020-05-30 20:32:12
323,What's up with People Coding for 10+ Hours a Day?,909,ee7u45,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ee7u45/whats_up_with_people_coding_for_10_hours_a_day/,301,"Genuinely curious here.
Back when I've started to learn coding (2012-ish), all it took for me was  3 to 4 hours a day of focused studying to get job ready within a year.  

However, I keep seeing overly enthusiastic to-be-devs saying that basically EVERYTHING they do is study how to code – whether that's mobile development, web development or something else. Some even going as far as studying 10 to 14 hours per day, completely neglecting their health. I just cannot see how that'd be possible (you have to eat/work/sleep/spend time with friends and family/want to relax etc.) without completely burning out. 

Before I started my own dev agency a while ago, I noticed that coworkers who were sticking to a time consuming routine like that basically had no difference in the work they've done in terms of quality. In fact, it seems almost all of them  burned out sooner or later and the quality of their code suffered immensely. 

Is this just peer pressure? Work-harder-than-everyone-else-and-earn-more mentality? The only way I can somewhat understand this is if you're working in a rather demanding CS field like ML and need to really prepare or have an undying passion/illusion of changing the world somehow and work towards that goal, but if your goal is a normal dev job this seems rather unprofitable.",1577065916.0,2019-12-22 20:51:56
324,Got my dream job offer thanks to this sub! + Tips from my experience,914,8235gs,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8235gs/got_my_dream_job_offer_thanks_to_this_sub_tips/,103,"After months of blood, sweat, and tears (okay, maybe not the blood), I received an offer last month from a Big-N. It's a niche position, in a field I *want* to work in, and as a new grad, this is rather thrilling. I won't have to spend 2-3 jobs working up to the niche I want to be in - the company was impressed enough with the interview that they gave me an rather generous starting offer in a team that doesn't regularly take new grads.

And I really couldn't have done it without this subreddit. While I was given many domain-specific questions in my niche, the general algorithms questions were far easier thanks to all of the tips, tricks, and guides on this sub. The books everyone recommends actually helped, LeetCode grinding actually helped!

And sincere thanks to the few individuals who reached out to me and took the time to help me personally with mock interviews. I was never expecting this level of generosity from the community. You all are *amazing.*

Anyways, onto a few of my own tips. This was for the particular company/team I was applying, so YMMV - in fact, it is likely to vary, but hopefully something helps...

---

## Preparing

* [**LeetCode Premium**](https://leetcode.com/subscribe/) is actually worth it. The Leetcode Explore section for premium users filters out problems by topics and when they appear in the interviewing stage (i.e. online screen, phone screen, on-site). While it wasn't useful for this specific position, it definitely helped with other large companies (e.g. Big G.)  It's *essential* to code out working solutions, eyeballing won't do it. I did about 95% mediums and 5% hards. I solved around **115 problems**, at which point I felt confident in my abilities.

* [**Elements of Programming Interviews**](https://www.amazon.com/Elements-Programming-Interviews-Insiders-Guide/dp/1479274836) is an excellent book. Work through every problem in your head before looking at the solution. Takes about **15 days at 1-2 hours a day** to get through the **whole book.**


* [**DailyCodingProblem**](https://www.dailycodingproblem.com/) is this nifty resource that sends you one problem daily. Sounds funny, but it actually kept me motivated when I was on the verge of burn-out. You see the notification in your inbox and go ""oh it's just one problem"" and click on it out of curiosity. It helps. The premium version was useful to me because I could directly email the founder with my questions and he'd type up long, detailed replies to each of my questions. Incredibly helpful. But again, make sure you actually code out and test your solutions. I did **45 problems over the course of 2 months.**

* [**Designing Data-Intensive Applications**](https://www.amazon.com/Designing-Data-Intensive-Applications-Reliable-Maintainable/dp/1449373321) was useful for my on-site interview architecture questions (of which there were quite a few difficult ones). I read half the book. About **an hour a day for 10 days.**

* **Don't visit this sub often.** It can be depressing seeing people get offers while you're still interviewing. Collect a list of tips and just work off of those.


## Interviewing

* **Show your thought process.** I mean, *really vocalize it*. Almost stream-of-consciousness. Well, don't mention random thoughts, like ""goddamn that steak breakfast was great"", but more along the lines of *don't be afraid to mention a line of thought even if it's wrong*. 

   This is especially valuable because my interviewees were able to nudge me back into the proper line of thought whenever I started to stray too much. And with stream-of-consciousness, you can also show how creative you are - I thought of unique solutions to problems that the interviewers had never seen before, and while the solutions were more complex than their reference, they were nonetheless impressed with the creativity of passing ideas.

    For example: do you think a graph might be useful for this problem, even if you aren't *sure*? Say exactly that. Elaborate a bit, work through the problem vocally. This might take some practice, so practice with a friend. 

* **Clarify the question.** Two times I lost some time because I was thinking of a slightly different question than the one asked. Fortunately, vocalizing my thought process put and end to this quickly.

* **Be prepared for stressful questions.** One of my interviewers asked me an intractable problem. I didn't know it was intractable and became a bit worried. I eventually worked out that no solution exists. The key to this is being calm - when I asked my interviewer why he asked that question, he said it helps gauge how the candidate thinks and how they react (calmly, agitated, etc) to problems that *have no solution*.

* **Passion is not a platitude.** It *really matters*. It's not a wishy-washy saying people throw out there to make you feel better. I was passionate about this niche, and it *showed*. In the end, I honestly think this contributed most to my offer.

* **Be social.** As I'm introverted by nature, this is the hardest part. Lunch was the scariest part of the interview, but I managed to loosen up and get through it. Just talk to people, be friendly - this is where you show your passion.

* **You don't need to excel at every phase.** In fact, I thought I did terribly for one of my interviews, ""meh"" on another, well in one, and beyond excellent in another (they ran out of questions to give me). With the attitude of this sub, I thought I was a goner after the first two, but whaddya know. I was surprised with a verbal offer the same day. **(YMMV the most here depending on the company.)**

## Negotiating

* [**This guide.**](https://www.kalzumeus.com/2012/01/23/salary-negotiation/)

* **Don't state a number for your salary.** If they insist, say something that's *unrealistically high*. Either they'll match or they'll negotiate down to something still pretty high. Unfortunately, I stated a very high number from the start. Fortunately, my recruiter exceeded that, perhaps for the reason below...

* Be excited about the opportunity, but **also aloof**. You don't want them to have confidence in the fact that you'll be their employee. Act like the job isn't strictly necessary for you. For example, I told my recruiter that I was going through end-stage with a competitor of theirs, and my recruiter called me back the next day with an offer much higher than I was asking for initially! He even managed to secure a ridiculous moving allocation (but receipt-based) and stacking RSUs (so compensation significantly increases every year for up to 4 years).

* **Negotiate with PTO** if you can't push the compensation figures.

---

Applications: About 70, about half one-click, half through company website

Interviews: About 7; 3 in final stage, 2 beginning stage, 1 rejection, 1 offer (at which point I ended all interviews)

Don't give up. The thrill of finally finding a job is so worth it. You viscerally, physically feel all the accumulated stress being released for weeks after you get your offer. It's impossible to describe, a feeling of infinite comfort and *validation*, and it's so worth it.",1520250527.0,2018-03-05 06:48:47
325,"Graduated 4 years ago in CS from a top 25, 2 internships. Working as a dishwasher and starving to make ends meet. Feeling like a career and life failure.",906,ekclxy,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ekclxy/graduated_4_years_ago_in_cs_from_a_top_25_2/,384,"I gave up everyone and everything I knew to try to break into this field.  I haven't talked to my family in about 3 years or friends in 5 years.  Family has disowned me and friends do not care about me anymore.  They have lost interest in me always needing to be in front of the computer working on something else.

I have lost interest or just time in the things I used to care about do not have any hobbies other than browsing Reddit or YouTube.  Related to this I have become extremely out of shape and cannot run more than about 20 yards.

I search and apply to the junior developer postings for hours every day all around my state, but I find little to no opportunities.  All the postings are for more experience.  Recruiters only contact me about lead roles.

Most days I starve or have around 800-1200 calories of food be wise I cannot afford any more.

All I remember about school is putting countless hours into the labs.  While other students would breeze the labs in a few hours, I would be there well into the night sometimes and spend entire weekends.  

I was told I was not talented enough with a high enough IQ to do this type of work.  First in college, then at internships and jobs.  

What can I possibly do moving forward.  I am 28 years old and my life feels like it is already over. I am trapped in current situation with no way out.  Working full time only to starve and have no money for relocation.

I would like to try to restart into this field but it feels further and further out of grasp.  When they see my resume they will only see the graduation date being so long ago, with limited experience.  Occasionally I will get a phone screen but they will be wary of me from the start, pressuring me about my work experience and gap.  Then I will get ghosted.

I spend much time listening to interview prep videos and studying for technical interview, such as example projects.  Confident that the technical skills are still there to pass interview, I am solid junior level developer candidate.  I can make a simple CRUD website in .NET Core or Java Spring with a decent frontend within a few days if I had to (I know some could do this in a day).  

I am not picky about where to find a job.  Looking in Midwest or south for low paying jobs that don't require experience.  However I'm also fucked for relocating because I have no money, so if they don't offer relocation I simply can't go.  Im thinking about live out of my car and may end up doing this.",1578257298.0,2020-01-05 15:48:18
326,"CEO of Coinbase says engaging in social activism has ""the potential to destroy a lot of value at most companies, both by being a distraction, and by creating internal division.""",909,j1ouga,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/j1ouga/ceo_of_coinbase_says_engaging_in_social_activism/,630,"I'm curious about what are your thoughts on this ? Tech companies have always been very vocal about their stance on many social justice issues. Have you ever experienced distraction/internal division in your workplace due to this ?  


[https://blog.coinbase.com/coinbase-is-a-mission-focused-company-af882df8804](https://blog.coinbase.com/coinbase-is-a-mission-focused-company-af882df8804)",1601369180.0,2020-09-29 04:46:20
327,I feel like this industry is ruining my life.,905,gidh92,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gidh92/i_feel_like_this_industry_is_ruining_my_life/,338,"Basically, I graduated with a CS degree and work as a full stack dev. Had the job for about a year. This job is toxic as hell. Basically, if you aren't obsessed with code every waking minute of your life and aren't a mid-level/senior-level developer by 7 months, your targeted on the stack rank curve. Sorry, I like having a life outside of my job.

But, since I am about to lose my first job soon (yes, PIP happened and as is common sense on here, that isn't fixable. No it isn't before someone jumps in and says work 80 hours a week to improve). Doesn't matter I have evidence I'm improving or I am doing just as much work point wise as other devs. I was also told I was no longer a junior developer after only after 7 months on the job. This was after they pretty much PIP and fired a junior developer after 5-6 months on the job.

I have been applying out of this job and trying my best to leave. But, so far the interviews have been very difficult. One asked me a leetcode hard problem, another one asked me hyper specific stuff and I guess didn't like my answers, and the questions vary. 

I am doing my best to learn. I am making a new side project and practicing leetcode. I have applied to 200+ jobs.

But, I worked in another industry before this and I just wonder, what the hell am I even doing? 

Like, I never heard of a job that makes anyone study as hard as they do to even get an interview, let alone pass it. Nevermind, having to keep up with all this outside of work even if you have a job.

It is ruining my life. I am constantly stressed out with not getting a break from this work. It literally seems you don't have an option to just chill out because if you do, your manager then targets you for ""not being passionate enough"" and you lose your income.

Yes, I am fine with learning new stuff and get it is part of the industry. But, guess what? I would also like to spend time with my girlfriend, maybe watch a TV show after work, have time to work out, and do other things like socialize. It feels like this industry just expects you to forgo all that to even keep up with expectations.

I'm literally willing to take a pay cut to just have a normal 40 hour job without all these insane expectations. Just enough to afford a small house and food on the table. Literally, I don't need the six figure salaries everyone on here seems obsessed about. What good is any of that if you have no life outside of work and you just die with a big bank account?

Where can I go to just have a normal 40 hour workweek and not all these insane expectations? Is this what I really have to look forward to in this industry? Toxic managers, toxic senior ""rockstar"" devs who look down on you if you have a life, and endless studying outside work?

Please tell me there are more options than this in this industry.",1589326494.0,2020-05-12 19:34:54
328,Any recourse for this recruiter?,908,dfn3ar,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dfn3ar/any_recourse_for_this_recruiter/,195,"So I was called for an interview by a recruiter with a staffing agency. I didnt have anything going on today and said why not, it's like 5 minutes from my house.

I show up, it's the normal small talk. As soon as we get into her office, she begins asking me questions regarding a startup I used to work for. Which it's my professional history, so I expected to need to talk about it. So far, no red flags.... but the interview goes on and on, and the questions stop being about my experience at the start up and instead about the start up in general and how the previous staffing company I work for got the contract for the start up. 

This is when my suspicions were peeked. 

I kind of interrupted her and ask what the positions was that she called me for as she said she had 3 opportunities that fit my resume. 

She then blatantly and without sugar coating it says that she actually has no jobs for me and is instead trying to win the staffing contract for the start up from my previous employer and she just wanted to learn more about the start up from me. 

This is why recruiters are the worst people in the world.....

I took a freshly dry cleaned suit ($25), prepared questions for her, spent the gas money, and gave her my time all so that she could get the inside scoop on a company that has openly said they will never work with a staffing company again. 

She didnt even have the decency to make it a phone interview....",1570682645.0,2019-10-10 00:44:05
329,Praised for the first time in my career,907,crsse1,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/crsse1/praised_for_the_first_time_in_my_career/,45,"I've been a software developer for just over a year now - For the first time in my career, I was praised.

&#x200B;

I was working with a guy from another team on a small, but important project. We had issues which I was debugging and I solved them pretty quickly after lunch, and spending most of the morning getting nowhere. When I finished them, my manager and the senior engineering manager what checking in. The guy I'm working with (much more senior than me) told them what I did, and that I'm going places.

I've never been praised like that in my career, and the fact this guy who I've been working with for a few days said this means a lot, and is a huge confidence booster. I've been in this job for 2 months, having been in a horrible place the year prior. 

My manager never praised anyone, always expected more, and was just a bad person to work for. This new job is amazing, and this isn't really a question, more of a slight brag  🤣",1566108850.0,2019-08-18 02:14:10
330,Made a huge mistake and now I feel like it's hurting my chances. What do I do?,906,5sik98,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/5sik98/made_a_huge_mistake_and_now_i_feel_like_its/,144,"So around last September I got an invitation from a Big4(not rainforest) to do their 2 online pre-assessments. I left it off till the last date, and finally ended up doing it a couple of hours before the deadline (2 am or something).

Let's cut to the chase, I went full retard and looked up / copied the answers from leetcode. A couple of days later the recruiter got back to me saying that the system had detected that I'd cheated on the assessment. Which is completely true.

But now I feel like because of this, I'm not getting callbacks from the other Big4s or even the BigNs for that matter. Is it possible that I got an industry-wide blacklist? Does information like this get passed around?",1486461053.0,2017-02-07 04:50:53
331,Why do Scrum Masters get paid so much?,905,h8cwzv,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/h8cwzv/why_do_scrum_masters_get_paid_so_much/,380,"They feel like scuffed managers that make meetings, talk in circles about agile best practices, and becoming a CSM is...not hard.

It's not a skill-set that is hard to develop.  You could grab the average high school senior and throw them in the role after training and they would do fine.

I don't understand",1592101990.0,2020-06-13 22:33:10
332,I'm happy at my job,902,bx8dpn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bx8dpn/im_happy_at_my_job/,167,"I make on the upper avg in DC working as a contractor. Everybody is chill here. Work ends around 4. No one cares whether you work from home. I get unlimited vacation and community service paid for. We're allowed to use any technologies. Since we're government, we get lots of projects and don't rely on funding or external projects. I get to spend I think around $2.5k after rent on whatever I want. My commute is 30m by metro rail and I live in downtown. Everyone is serious about tests here. We have a lot of those here across many pipelines. There's a lot to learn. I read a lot of negatives about working for gov (one of the agencies), none of which apply to me. More pay would be nice. For my next job, I hope to work in the video game industry.",1559799940.0,2019-06-06 01:45:40
333,What to do if someone steals your code and passes it off as theirs?,904,g2ewvx,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/g2ewvx/what_to_do_if_someone_steals_your_code_and_passes/,262,"I’ve been working on a tool to solve a problem lots of folks have been having, and finally finished it. I sent a colleague the code, and he just sent an email out to all the groups showing how to use it, and stating he wrote it..

I’m more laughing than mad right now. Should I just ignore and move on lol

You hear about these stories all the time, but never thought it’d happen to me

Edit: grammar",1587072573.0,2020-04-16 17:29:33
334,Anyone else just LOVE taking a nap in the middle of a leetcode problem?,901,cyjcd7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cyjcd7/anyone_else_just_love_taking_a_nap_in_the_middle/,83,"When I start a leetcode question, I’ll mess around with it for about 15 minutes but then just have a strong urge to take a nap. This is always the case. Even if it’s a question I know im close to solving or if I know how to do it. 

I’m scared I won’t be able to take my nap in the middle of an interview so how so how do I be less nappy while doing leetcode ?",1567421572.0,2019-09-02 06:52:52
335,FYI getting fired doesn't automatically make a place toxic. Some people just suck and need to be let go.,903,bylgg3,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bylgg3/fyi_getting_fired_doesnt_automatically_make_a/,268,"I've been on this sub for awhile and the pattern is always this:

1.  LARPers making up stories about their salaries, work hours, job title etc.
2.  People complaining that they got fired, usually accompanied with a story about how ""I'm only a junior and was asked to *insert task* and got fired*

Posts of the 2nd type always have the same response:

""ThEy WaNtEd A jUnIor FoR SeNiOR sAlAry, fUk tHeM. YoU ShOuLd bE HaPpY u GoT fiReD FrOm tHaT ToXic PlAce""

The responsibility never focuses on the OP.  It's always the companies fault and never the OP's fault.  

And yet, people here are fine with lying about their skills as long as they get the job because it's tough out there, so you got to do what you got to do.  So what's a company supposed to do when they realize you BS'ed your way into a job?  Keep you around?

EDIT: Thanks for proving my point about LARPers down below.  If I'm being honest, I believe some of you.  Not all of you though.",1560123504.0,2019-06-09 19:38:24
336,UPDATE: Skyscanner Grad Scheme Zoom Call - one big ol' bamboozle,895,hr0zeo,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hr0zeo/update_skyscanner_grad_scheme_zoom_call_one_big/,68,"Back in April I posted [here](https://old.reddit.com/r/cscareerquestions/comments/fsptz5/name_and_praise_skyscanner_hosted_a_zoom_talk/) praising Skyscanner for hosting a zoom call with those accepted onto the graduate engineering scheme.

On the call they told us our jobs were safe despite the pandemic, and even sent us a form to complete asking if we wanted to work in frontend or backend. 

This facade was kept up in the Slack chat, until executives suddenly decide to ghost us. No one would ever respond in the Slack chat from the company, and purposely keep us in the dark. 

Today, 3 months later, I got an email saying the grad scheme has been cancelled. 

This is of course gutting. If they told us 3 months ago that we wouldnt have jobs, then we could have joined other grad schemes or spent these 3 months finding new roles.

Some people are mid way through moving to new countries, or getting flats in new cities. 

This whole situation really sucks, but I cant help but think Skyscanner should have addressed it a lot earlier and been way more open.

To to answer my original post 3 months ago - yes. Its one big bamboozle.",1594760112.0,2020-07-14 16:55:12
337,Basic DS and algo question collection,898,dqkr7o,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dqkr7o/basic_ds_and_algo_question_collection/,192,"After attending a lot of interviews I have created a list of problems which you should definitely know for a programming interview(these are bare minimum though).

**Arrays**

1. Dutch national flag problem
2. Kadane's algorithm
3. Moore's voting algorithm
4. Rotate an array and find an element in rotated sorted array
5. Find missing element in array(XOR technique)
6. Find median of two sorted array
7. Merge two sorted array
8. Find the next greater digit with same set of digits
9. Check if a number is palindrome (check the code on leetcode)
10. Search an element in sorted matrix.
11. Rotate an image by 90 degree(code in cracking coding interview book)
12. Print a matrix in spiral form(code in cracking coding interview book)
13. Find the index of 1 in an array with 0 and 1 infinitely ([http://www.geeksforgeeks.org/find-position-element-sorted-array-infinite-numbers/](http://www.geeksforgeeks.org/find-position-element-sorted-array-infinite-numbers/))
14. Binary search in array (recursive and iterative)

**Stacks**

1. Convert inorder to postorder and evaluate the postorder
2. Balanced parenthesis
3. design an array which supports constant time(O(1)) push,pop, min.([http://www.geeksforgeeks.org/design-and-implement-special-stack-data-structure/](http://www.geeksforgeeks.org/design-and-implement-special-stack-data-structure/))
4. Implement queue with 2 stacks
5. Implement stack with array and linked list
6. Implement two stack in array ([http://www.geeksforgeeks.org/implement-two-stacks-in-an-array/](http://www.geeksforgeeks.org/implement-two-stacks-in-an-array/))
7. Merge overlapping interval([http://www.geeksforgeeks.org/merging-intervals/](http://www.geeksforgeeks.org/merging-intervals/))

**Linked list**

1. Find loop in the linked list
2. Find the lenght of the loop in the linked list
3. Find the intersection of two linked list([http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/](http://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/))
4. Merge two sorted linked list ([http://www.geeksforgeeks.org/merge-two-sorted-linked-lists/](http://www.geeksforgeeks.org/merge-two-sorted-linked-lists/))
5. Reverse linked list(recursive and iterative)
6. Clone a linked list with random pointer
7. Add numbers represented by two Linked list

**Strings**

1. Return maximum occurring character in the input string
2. Remove all duplicates from a given string
3. Reverse words in a given string
4. Reverse a string
5. Given a string, find its first non-repeating character
6. Write a program to print all permutations of a given string
7. A Program to check if strings are rotations of each other or not
8. Check if two strings are anagram
9. Check if string is palindrome

**Bit manipulation**

1. Check if a number is power of two.([http://www.geeksforgeeks.org/write-one-line-c-function-to-find-whether-a-no-is-power-of-two/](http://www.geeksforgeeks.org/write-one-line-c-function-to-find-whether-a-no-is-power-of-two/))
2. Little and Big Endian Mystery
3. Position of rightmost set bit
4. Find whether a given number is a power of 4 or not
5. Add two numbers without using arithmetic operators

**Tree**

1. Tree traversal(inorder, preorder, postorder)
2. Level order traversal
3. Count the number of leaves in tree
4. Height and diameter of a tree
5. left top bottom right view of a tree'
6. Root to leaf sum path
7. print all the root to leaf path
8. Binary search tree and height balanced tree (AVL)

**General**

1. Sieve of erathoness for prime numbers

**Graphs**

1. Graph representation
2. DFS and BFS
3. Topological sort
4. Cycle detection

Edit: 

**Sorting**

1. Quick sort
2. merge sort(some problems based on merging)
3. O(n) sorting (shell sort, bucket sort etc)

**Backtracking**

1. Sudoku
2. Rat in maze

Hope this helps someone.",1572733041.0,2019-11-02 18:17:21
338,Does anyone else hope permanent WFH isn't the new normal?,902,iuti54,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/iuti54/does_anyone_else_hope_permanent_wfh_isnt_the_new/,334,"I generally love working from home, but since covid the expected working hours have been getting longer and longer. Before the lock down, pretty much everyone went home at 5, and that was the end of the day. Now, people will schedule meetings starting at 6, or I will get messages from managers later than that. Also, the deadline expectations seems to have changed a lot too, myself and my team have been working much longer days than normal. I know I *could* tell my manager that I'm offline at 5 or whatever, but I don't think that's practical.

Has anyone else experienced this?",1600409114.0,2020-09-18 02:05:14
339,Are you a LinkedIn slut?,896,dq4zj2,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dq4zj2/are_you_a_linkedin_slut/,214,"Do you just ""Connect"" with anyone, regardless of them even reading your summary? Even when they probably just saw your luscious OO buzzwords that you pushed up and think you're super agile and they can just slide into your feed without a message?

Or do you want them to put some effort first? some foreplay? Maybe send an interesting pickup ... uhm, I mean introduction line?


Do you ghost them after their first message? Or breadcrumb just enough to keep them around as an orbiter for when you're tired of your current commitment?

Even if you do, I can only advise you to never go to their place on the first meeting. That's exactly where they want you... invested, excited, hopeful, vulnerable, and trying to please them. Stay safe!",1572647387.0,2019-11-01 18:29:47
340,Anybody else feel like they have an unhealthy obsession with prestige and success?,896,dbfnzr,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dbfnzr/anybody_else_feel_like_they_have_an_unhealthy/,208,"I still have one more year until I finish my Masters', but I feel like I'm already tired of the whole rat race. I got into this field because I thought it was interesting, matched what I was good at, and payed a pretty good average salary. Now I feel like I'm just constantly chasing the next thing to add to my resume so that I can momentarily feel slightly less bad about myself.

Started going to this interesting tech club? Why aren't you in a leadership position yet? Leadership is what recruiters crave. Got a leadership position? Well, why aren't you president? Nobody cares unless you're president. Became president? Well, why didn't you start your own club? Nobody cares unless you're a founder of something.

Got anything less than an A in a class? Trash. Got an A in the class? ....well, why didn't you get an A+? If you weren't even good enough to get an A+, can you really say you know the subject? I mean, GPA obviously doesn't matter, but you're obviously not gonna get emails back from recruiters unless you have over a 4.0 GPA. 

Got an awesome internship at an interesting company? Well, it wasn't FAANG, so who cares? Got a FAANG internship? Well it wasn't one of the good FAANGs, so if you really think about it, you really didn't accomplish anything. Got into a ""Good FAANG""? Well, the other intern works on his own startup idea when he goes home. Why aren't you working on your startup idea? Do you even have a startup idea? Are you even trying?

Got into the best school in your state? Well, it's not a top X school, so I guess you just didn't work hard enough ehh? Got into a top X school for your Masters'? Well, it's not a top X-- school, so really anyone can do what you've done. Got into a research program? Why haven't you published in a top conference/journal yet? How do you expect to get into a PhD program without top first author publications? Oh, by the way, you want to get your PhD now. I know you said you didn't want to before, but seeing some of your friends do it is making you feel insecure. 

Part of me feels like I just want the ""I don't really care that much about what I do, so let me just work 40 hours a week and then do whatever with the rest of the time"" life. But another part of me feels like ""If you don't work harder and spend 60-80 hours a week trying to be better than your peers, then you're going to lose out on opportunities that other people only dream of and you'll regret it."" It's almost like I feel like I have this obligation that I can, so I should, and I should just ""save laziness for later"". 

But it seems like the more I work, the more I feel like I have to work. There's no ""good enough"". There's no endgame. No matter what, there's another level, another thing to feel insecure about, another reason to feel bad about not grinding and feel like my desire to chill out is just laziness that I should ignore. I feel like my own ""tiger parent"", and it's starting to really take its toll.

Has anybody else had feelings like this before? Did you do anything about it? Any regrets along the way?",1569895951.0,2019-09-30 22:12:31
341,Programming is so much easier to learn today than it was 10-15 years ago.,891,eq6i6h,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/eq6i6h/programming_is_so_much_easier_to_learn_today_than/,178,"Almost every coding question out there has a solution written up on the net. 

So many bugs have been documented on stackoverflow along with how to solve these bugs. I can’t tell you how many times I ran into a bug and was able to fix it in under an hour thanks to stack overflow. And no I didn’t even have to ask the stack overflow community the question as someone else already asked a similar question before. 

There also is chegg which gives you answers to so many computer science questions posed in various textbooks 

Yes I know not everything is on stackoverflow but most challenges and solutions to them  are on there. You just have to get good at explaining what you wanna do on your google search. 

Before you would search though so many coding textbooks and reference manuals which are boring as shit to read to understand why something isn’t working. Now you don’t have to anymore.",1579324034.0,2020-01-18 00:07:14
342,Difference in mindset between the student me and the professional me,886,9zkjy3,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9zkjy3/difference_in_mindset_between_the_student_me_and/,155,"A few month's ago when I was still a student I used to frequent this sub and read through all the front page posts and I obsessed over having a good career, studied leetcode hardcore, put in many hours improving my craft, etc and I was able to secure a good full time offer with a company in NY (not a Big N but the company is often talked about here).

&#x200B;

I've been working for almost a half a year now and I realized that I stopped visiting this sub ever since I started work and now my priorities have changed. Before I wanted to super successful career where I was given the opportunity to work on challenging projects. Nowadays, I just want to put in my 9-5, not code or study after work, pursue my hobbies, and start thinking of starting a family.

&#x200B;

I'm now back at home, just had a nice thanksgiving with my family, and I've been reflecting on my college days. It's crazy how my mindset completely changed once I started working and I just wanted to share that.",1542971420.0,2018-11-23 06:10:20
343,"FYI - Don't trust any post that says, ""I used Rooftop Slushie"", it''s spam.",888,eo7n49,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/eo7n49/fyi_dont_trust_any_post_that_says_i_used_rooftop/,147,"Seems like there is a rash of spam posts that seem helpful but always end up with ""I used Rooftop Slushie to get a referral.""

No, you didn't.  The account was just created.  And this is spam.  

Mods, you know better that this: Something like this should not be allowed: https://www.reddit.com/r/cscareerquestions/comments/enyz3m/coding_questions_i_received_from_10_companies/  
OP went through 7 rounds of interviews, posts a large ass post, but has NO history in cscareerquestions and has no follow up replies.  OP just pasted interview questions from well known sites.  

Please don't feed the spammers.",1578967046.0,2020-01-13 20:57:26
344,"LPT: As a software engineer, please don't be defensive about your delivery",886,e7eyie,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/e7eyie/lpt_as_a_software_engineer_please_dont_be/,162,"Software development, like every other job is inherently prone to mistakes. Nobody is perfect and it is perfectly acceptable to have defects in your code or in requirements or in test cases

It is really hard to discuss and resolve an issue when any one of the people in the discussion starts off by saying ""no but my <code/test case/requirement/design> has no issue in it""

If only everyone could go back and check their work against the stated requirements and/or have an open mind about getting to a solution, it is much faster and easier to get to a resolution and move on",1575758006.0,2019-12-07 17:33:26
345,Tech's push to teach coding isn't about kids' success – it's about cutting wages,885,71s9za,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/71s9za/techs_push_to_teach_coding_isnt_about_kids/,235,"The following article from the Guardian talks about the so called shortage of programmers, outlook and wages.

https://amp.theguardian.com/technology/2017/sep/21/coding-education-teaching-silicon-valley-wages",1506127882.0,2017-09-22 20:51:22
346,Do What You Love: And Other Lies About Success and Happiness,888,fpc08o,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fpc08o/do_what_you_love_and_other_lies_about_success_and/,218,"[https://www.amazon.com/Do-What-You-Love-Happiness/dp/1941393470](https://www.amazon.com/Do-What-You-Love-Happiness/dp/1941393470)

I recently read this book and it really resonated with me. Essentially the idea is that we're pushed into jobs and overworked, with the idea that we should be HAPPY being exploited. We're sold the idea that if ""you do what you love"" you won't work a day in your life. This gets further pushed into you working long hours, and being happy about it! Because if you're really passionate about your work, it's not work. It's ""passion"". 

I've seen this mentality and attitude everywhere, but it's extremely prominent and rampant in software. We're told that you should be programming at all times, that you should always be learning, that you should try to be a 100x-er, a ninja, etc. All in order to exploit every ounce of work they can out of you for the least amount of compensation. 

Remember that at the end of the day, work is work. Do what you're paid to do, and do a good job, but don't kill yourself over it. Don't give more than what you're being paid for. This life is for you, not for whomever youre working for.",1585260188.0,2020-03-26 18:03:08
347,"Had my first ""unpaid internship"" experience",885,fanc1m,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fanc1m/had_my_first_unpaid_internship_experience/,160,"I always hear stories about folks dealing with companies expecting students to work for free (which btw, I think should be illegal) and got my first taste of it recently. My department head circulated an email that was forwarded to him by this company looking for a student to make an app. I decide to see what it was about, as I have some paid app dev experience under my belt already. I go and meet up with them and it was exactly what I was thinking it would be - two sales guys who claim they have something ""game-changing"" and just need a developer to get it going - for no pay. They even threw in how they would be ""doing all the marketing"" and I'd be ""rockin' the app!"" I nearly cringed when they said the last part.

I left pretty soon afterwards and then politely told them by email I was not able to justify being on an unpaid project. They said thanks, but then still tried to pressure me into signing an NDA, even though we had not even discussed anything particular about their ""great idea."" Then all of a sudden the next day, I get another email and they ""magically"" seem to have the money to pay someone now. Keep in mind - these guys were wanting a full app that could be put into the wild with subscription features - this would require lots of unit and stress tests. Something like this would be better suited for a pro with 5+ years experience.

To my fellow students out there - be careful out there and never work for free! Even for a basic website, you should be getting paid something.",1582884702.0,2020-02-28 05:11:42
348,Staying up to date... what's your favorite tech blog?,884,jj1lso,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jj1lso/staying_up_to_date_whats_your_favorite_tech_blog/,145,"Just curious what blogs/forums/websites people follow to stay up to date on the latest tech. Whether it be modern tech stacks, new tech, big data tech, the list goes on and on...

Do you have a favorite? Thought a little thread of some cool places to learn more about current trends would be helpful.

EDIT: First off, awesome blogs posted below! I just figured I'd mention this is oddly a question I've been asked during an interview that lead to an open discussion.",1603835922.0,2020-10-27 17:58:42
349,"I have no idea what my coworkers are talking about. I've been here 3 months, what to do?",880,ewpw2n,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ewpw2n/i_have_no_idea_what_my_coworkers_are_talking/,274,"I've been at my first industry job for 3 months now and since day 1 I haven't been able to understand what anyone's talking about work-wise. All my coworkers are great to talk with at lunch or about non-work things, but whenever it's work-related they say things like:

""Route your qualification matrix through production""

""Make sure to run a BSV on the OQ and get sign offs from Impact""

I always ask what that means and people can't tell me. They just repeat the same sentence verbatim. No one will tell me what BSV stands for. My manager says I should just already know from school. It's genuinely like that Office episode where Jim has to make a ""rundown"", except this happens every day and no one else has a problem with it. I have no idea what to do. Does anyone have any advice?

edit: just wanted to add that I worked in a university research lab for 1.5 years before this and never had this problem",1580512732.0,2020-01-31 18:18:52
350,"Took 6 months to get a job w/ no internship, heres my 2 cents",886,e9jmcg,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/e9jmcg/took_6_months_to_get_a_job_w_no_internship_heres/,155,"Just as a disclaimer, this is not to brag but rather offer some advice for whomever may be in that dark place i was in a couple months ago. I was one of you, lurking this subreddit frequently  for any tips or leads on how to get closer to a job. 

1. Dont spend too much time on personal projects with hopes that it may supplement your work experience. As a new grad, i had a decent list of projects but it didn’t quite fill up my resume. I did a couple personal projects on my free time after graduating and filled the remainder of my resume. These were excellent talking points in interviews and gave interviewers subjects to question me with and determine my understanding. 

2. Leetcode is an excellent way of progressing towards your end goal, acing interviews and getting jobs. Once i started spending my days working on leetcode as “my job”, i became very confident in my ability to be able to perform in interviews. In fact, of the handful of interviews i had, all questions i received had either been completed on leetcode previously or i had solved something similar to it. No matter how stupid you may think it is, this is the reality. Any job you go for will ask you at least one whiteboard question to complete. You can help yourself with this aspect of the interview or leave it to luck.

3. Have a professional presence online. Its not absolutely necessary, but it helps. The first step to this is with your resume. Yes, you have the standard black and white resume. But have you ever seen how good a little color on a resume looks? 

4. Imitate successful people around you. Successful being “have a job” or whatever you define success as. I saw a friend of mine who was quite successful. I saw his personal website and quite literally copied most of his ideas and implemented them my way. I used his resume format and color scheme as well because hey, hes got a job and hes my age/position. Hes definitely doing something right and his website and resume really stand out.

5. Keep a cool head and be ready to talk to humans on the interview. I had a bunch of online coding tests that went nowhere, but out of the 2 in person interviews i had i scored on both, and i had a good feeling directly after the interview that i had gotten the job. This was because besides answering their questions well for the most part, the interview flowed like a conversation i would have with my friends, if they were asking me questions. You still want to keep it professional, however, its not an interrogation. You’re going to be working with these people everyday, and i believe the interviewers are more aware of this than the interviewees. If they cant talk to you normally, or you just dont have a likeable personality at the interview, they probably wont want to work with you.

6. Keep a positive attitude. My god once i hit my 5th month jobless i would cry every night. I didnt have time during the day because i was “at work”. Which is basically the local coffee shop working leetcode questions untill the coffee shop closed. However, that little crying i did at night helped me release how i felt and then think positive and keep moving. Find a way to deal with the negativity and remove it out of your life so you can think positive! When you give into negativity, you slack, you give up, you become cynical and make bad decisions. Mentality is very important and keeping busy with something helps a lot. 

Hopefully this is visible for the people that need it the most as these are the lessons i learned along the way. I think im set now. Just had my first month performance review and was told that im vastly over performing the usual expectations and the company is really happy with me. Just because i had no internships did not equate to how good of a software engineer i was. Things just didnt work out, i never had a good schedule and missed out on internship opportunities.

Just keep pursuing your goals everyday. You will get it eventually!

EDIT: currently at work, will be getting to replies soon when i have some free time.
Also i graduted from pretty much a no name school with honors, 3.6 gpa cumulative. More like ~3.9 major gpa which i was able to use.

Also i noticed theres some confusion on #1. I developed personal projects just to fill my resume up/ learn tech for myself. Most of my time was better spent on leetcode upping my algorithm skills. In my experience personal projects only carried me so far, and no one really looked at my github to see my other projects. Use it as resume filler and learning new tech for yourself.",1576159203.0,2019-12-12 09:00:03
351,What are your 90% / 50% / 10% predictons for the programming industry in 2020 and upward?,886,d5u7w2,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d5u7w2/what_are_your_90_50_10_predictons_for_the/,567,"Example:

90% sure if you know Java, you will have no trouble getting a job in the next decade, but it might involve more maintenance than greenfield work.

50% sure React will become the framework of choice for front-end, removing Angular and Vue from competition

10% sure Kotlin will become as huge as Java for new development

I'm making this thread here because it's one of these ""heartbeat of the industry"" web places. A small disclaimer on your career experience would also be great.",1568820216.0,2019-09-18 11:23:36
352,Where can I work as a software engineer to combat large global problems?,883,dichsq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dichsq/where_can_i_work_as_a_software_engineer_to_combat/,211,"I have a Ph.D. in CS and enjoy solving open-ended technical challenges. I have a decent hands-on experience in operating systems and software engineering. I’ve been working as a full-stack engineer building Android products for almost a decade now.

I want to switch to work on larger global problems that are also technically challenging. So far I’ve recognized following job profiles-

Combatting climate change:

* Reducing the power consumption of data centers. Data centers consume ~2% of global electricity consumption and are estimated to consume up to 8% by 2030 due to the ML boom. Example roles: Site efficiency teams in Big 4.

* Building systems to support autonomous vehicles. Greenhouse gas (GHG) emissions from transportation account for about 29 percent of total U.S. greenhouse gas emissions, making it the largest contributor to U.S. GHG emissions. Autonomous vehicles are projected to reduce per-mile greenhouse gas emissions by up to 94%. Example roles: system performance teams at getcruise.com, tri.global

I am wondering if there are other software engineering/research roles I should apply to. Roles that combat global challenges and are also technically interesting.",1571194519.0,2019-10-15 22:55:19
353,Just got hired!!!,880,cq02zn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cq02zn/just_got_hired/,142,"I've been lurking this sub for awhile now. I'm aware that these threads pop up pretty regularly, but I'm super excited. I'm 30 and just transitioned from working as an electronics technician to a junior DBA role and I couldn't be more pumped. Literally opened the offer email 45 minutes ago and can't stop rereading it.

Pay raise, more vacation, work from home after a few months onboarding, better benefits, etc. I couldn't be happier with this new opportunity.

So to anyone else out there without a degree, keep trying! I didn't apply to this company but rather met the owner at a Meetup and started exchanging emails. Networking is how you find those jobs that never get posted in the first place. And if you don't have the degree then it puts you face to face with a person that has the ability to hire without an HR filter in the way.

Good luck out there everyone! Keep pushing!

Edit: I just want to say thanks to everyone for all the positive vibes going on in here, it's really awesome! We all go further when we're not busy tearing each other down, so hell yeah!",1565762026.0,2019-08-14 01:53:46
354,"After a year in the industry, finding a new job gets a lot easier! 22 job applications, 8 ghosted, 7 rejected, 4 I rejected / decided not to further pursue, 3 offers",880,emsyad,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/emsyad/after_a_year_in_the_industry_finding_a_new_job/,159,"I know it may seem insanely difficult trying to find a new grad position because I experienced the struggle as well just last year. This isn't really a brag post, but a reassuring one that once you get that first job, all the struggle and hard work you put in will pay off. Never stop honing your skills! That means leetcode every once in a while, or wipe the dust off the cover of some books.

Turns out once you have the work experience, things like your GPA or internships or the things you did in college start to matter a lot less. I'm not saying they're unimportant but try to keep that in mind as you're progressing or about to finish your degree.

Most of these positions were applied from Glassdoor or LinkedIn or Angelist but I noticed Google base actually collates the majority of open positions from various sites, so I would recommend starting there for new job searches.

I'm not sure what the specific breakdown was as I was only tracking whether I was currently interviewing or not in my spread sheet, but out of the 7 rejected, only a few of them were after the technicals or onsites, the others were a straight out rejection after the initial application submission. The 4 I rejected were places I interviewed at that I didn't believe would be a good fit for me or didn't think I would enjoy the tech I'd be working on.

With the 3 offers I had, I was able to negotiate what amounts to roughly a 30% increase on my current base salary, and that's not including any benefits either.

Anyways, I hope you find some encouragement. If you have any questions you want to know about my new grad process, and what I've done before graduating and since then, I'd be happy to answer them.",1578701059.0,2020-01-10 19:04:19
355,Please Please PLEASE don't do drugs during your job search!,879,eeszpn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/eeszpn/please_please_please_dont_do_drugs_during_your/,564,"This is a cautionary story, only the dumbass doing dumb shit is me.

I'm a sophomore in college. I've regularly used marijuana recreationally, both for fun and stress relief. This is the first time I've seriously looked for a job (that wasn't minimum wage), so the thought of drug testing haven't even crossed my mind.  I got an offer for summer 2020 as a software developer intern, and yesterday I was told that I'm getting tested early January, urine and hair follicle. I also recently found out Adderall can be detected by the test as well and is technically illegal. I knew that you needed a prescription for Addy but didn't know it was that serious (wasn't even taking it to get high, just to study). 

As a sophomore I don't have the luxury of shopping around for more liberal-minded companies. Explaining the situation to my conservative parents will be worse than if I came out gay.

I'm fucked. Don't let this be you. Either don't do drugs (obvious), or be more careful in your applications and stop taking whatever you take early on.

Edit: The reality is sinking in lol. I'm extremely fucking drid. Don't be me.",1577174805.0,2019-12-24 03:06:45
356,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?",878,dwdei4,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dwdei4/agile_has_been_a_complete_failure_if_every/,317,"Hey folks. I'm an experienced SDET and in the past 8 years I have worked for 2 companies that have done ""Agile"". To be more accurate, they have done bizarre hybrids that just plain didn't work and made life miserable for everyone. For example, here is my current company's setup:

- We do ""Scrum"" with story points (yes we actually call it Scrum)
- We don't measure velocity
- There are no business analysts
- There are no scrum masters
- We have 5 different ""feature teams"" and each one does ""agile"" completely different
- Some teams do Kanban for some reason?
- Some teams document properly, others don't document a single thing
- Daily standups that go an hour, sprint planning, and sprint review meetings
- With all the meetings and points and discussion it feels like every single thing I do is being tracked and I have no breathing room (other than just over estimating points on purpose)
- When I bring up the Agile Manifesto people literally laugh at me
- On top of all this shit are hard dates for when features will be released (!)

My previous company had its own flavor of chaos that didn't work at all either. Needless to say this has left a bad taste in my mouth on ""Agile"" as a whole with my experiences in the past 2 companies. 

I don't plan on staying at this company forever, so my question is how do you vet companies during the interview process to see that their agile implementation isn't a complete nightmare? I'm 0 for 2 with experiencing anything positive coming out of agile so I am lost as to what to ask for. Any input would be appreciated.",1573784003.0,2019-11-14 21:13:23
357,Bosses Boss Says He Doesn't See My Name on Enough Emails,876,ixvpmn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ixvpmn/bosses_boss_says_he_doesnt_see_my_name_on_enough/,258,"I hired on as a senior at this company, I've been there a while working on the tasks my technical lead and manager has given me. Just chugging along. Not getting a lot of support tasks, but some bug fixes. And lo and behold my Boss gives me feedback that his Boss told him he didn't see me doing anything judging from email traffic, and went into gitlab and started scrutinizing what I'd been doing.

Has anyone else seen this kind of dick behavior? My boss has been happy with my performance but this jackass above him thinks because it's not visible to him, I'm not doing anything. Completely invalidates everything I've done there, very demoralizing and depressing. How would you handle this?",1600835699.0,2020-09-23 00:34:59
358,"CS Recruiters: What was a response that made you think ""You're getting hired""?",874,d8whr9,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d8whr9/cs_recruiters_what_was_a_response_that_made_you/,140,Let's switch this up a bit from [this](https://www.reddit.com/r/cscareerquestions/comments/d8lscf/cs_recruiters_what_was_a_response_that_made_you/),1569403684.0,2019-09-25 05:28:04
359,What are some beginner personal projects you've worked on that has made an impact on your career and would suggest for student starting building his profile?,873,j93g87,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/j93g87/what_are_some_beginner_personal_projects_youve/,171,"Hey guys! I'm working on building my profile as a CS student. I know the basics of Java, Python, C++, HTML/CSS but I've not done much with them outside class. What personal projects would you recommend for people starting out like me, based on your experience?


EDIT: This really blew up, and there are so many amazing ideas out there. I'll defo be replying to each one after a lil googling, thanks guys!",1602442633.0,2020-10-11 14:57:13
360,"Is computer science really this bad, or are people here just way too hopped up on amphetamine?",875,gys259,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gys259/is_computer_science_really_this_bad_or_are_people/,465,"Genuine question. The level of agita here seems to be way beyond that of the normal student, early professional, or really anybody that isn't gulping down Adderall 25 hours a day. People in here are questioning their footsteps to the point of absurdity, and it's counterproductive to any reasonable outside observer, so I wonder if there *isn't* a stimulant problem in programming right now.

I legitimately would like to understand the demographic here better, because at many times I'm reminded of my darkest days down the prescription stimulant tunnel when I come by.",1591620012.0,2020-06-08 08:40:12
361,Other intern in my team is overworking - What should I do?,868,gs8iki,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gs8iki/other_intern_in_my_team_is_overworking_what/,338,"I have a co-intern in my host's team. He would start at 9 am and work till 9 pm. We are supposed to work 40 hours a week (9 am to 5 pm). Sometimes, he would do my work too (without me asking). Our host probably does not know this guy is putting in so much time as everyone is working from home.

I am beginning to get concerned. I hope to convert to full-time at the company I am interning at.

What do you guys suggest? I am thinking of informing my host that I hope my work expectations are independent of the other intern as he is working much longer than required.",1590709105.0,2020-05-28 19:38:25
362,"Petition to start referring to Machine learning / Artificial intelligence / Data science as ""MAD""",868,d953h0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d953h0/petition_to_start_referring_to_machine_learning/,87,"""Oh, so what do you do?""

""I'm a MAD engineer.""

""Wow, you're building killer robots?""

""If I say yes, will you stop asking me to try to fix your printer?""

EDIT: Had a thought. DSML, pronounced ""Dismal""",1569455082.0,2019-09-25 19:44:42
363,I've produced nothing substantial in my ten years of being employed. Am I just lucky to have a job?,871,jg95rc,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jg95rc/ive_produced_nothing_substantial_in_my_ten_years/,207,"I spent a lot of my early years querying databases to retrieve information for ad hoc requests. Then a few years on a team trying to build an ETL solution to combine multiple sources of data. My last few years have been spent trying to build machine learning models that have not proven to be valuable.

None of what I've done over these years have made it into anything valuable. The query results ended up in internal reports or slides, the ETL solution was scrapped, and the models have not been adopted.

Is this at all a typical experience in CS jobs? Has anyone shaken out of this kind of rut?",1603431189.0,2020-10-23 01:33:09
364,"I got it... it took 8 months... but I got it. To everyone here, thank you",873,e234nh,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/e234nh/i_got_it_it_took_8_months_but_i_got_it_to/,73,"I'm not sure if I believe in a higher power, but about an hour ago I was depressed and defeated as I realized that the dream job that could rescue me from 8 months of unemployment, compiling bills, student loan debt increasing, that I was not getting a call from that company...

15 minutes ago, a start up I interviewed with last week, who said they wouldnt call until next week, just called and they're extending me an offer!!!!!!

These last few months have been the worst in my short life. Got fired for something I didnt do, got dumped by someone I deeply cared about, was being crushed by student debt, was told I was overqualified for small part time jobs, and was lied to by countless recruiters. But one thing was always constant, this sub always gave great information, words of encouragement, and excellent advice. 

My final piece, thank you. Thank you so much. I could've been homeless come february, but this saved my life. Thank you everyone, you ladies and gentlemen are absolutely incredible.",1574825728.0,2019-11-26 22:35:28
365,"Why are take-home tests looked at as a waste of a candidates time, but people are fine with grinding leetcode for 4 hours a day for 3 months to prepare for a whiteboard?",870,bk8c0p,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bk8c0p/why_are_takehome_tests_looked_at_as_a_waste_of_a/,339,"And if they both suck, what's the alternative?",1556917939.0,2019-05-03 17:12:19
366,COVID-19 and the rise of unpaid internships,867,hswxdw,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hswxdw/covid19_and_the_rise_of_unpaid_internships/,366," With many people having their summer internships cancelled or delayed, they are worried about their future job prospects, especially since it's possible for the next 3+ years people will be graduating into a bad recession.

Possibly riding off of this desperation, I've noticed a lot of new Linkedin posts for unpaid internships, and most of them have a *lot* of applicants. There was even a Masters required unpaid internship with >300 applicants.

How does this subreddit feel about this? I would normally never take an unpaid internship, but my summer one was cancelled and now I have an offer for some light unpaid work that would still qualify as internship employment. Do desperate times call for desperate measures, or is it better to wait it out and try and apply with no experience?",1595025966.0,2020-07-17 18:46:06
367,"Why Leetcode is a thing, and why you (probably) shouldn’t mind it as much as you do",871,a2aguz,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/a2aguz/why_leetcode_is_a_thing_and_why_you_probably/,290,"In my two years of keeping tabs on r/cscareerquestions, I’ve seen hundreds of threads debating the merits of Leetcode style interviewing. There’s been a lot of insightful debate on the subject, but I’ve also seen a lot of people who have fundamental misunderstandings about why exactly this style of interviewing even exists. So, here I’m going to attempt to offer a thorough explanation of why Leetcode is even a thing at all, for all those out there who don't get why everyone is testing them on dynamic programming and graph theory.

&#x200B;

**Why Leetcode is a Thing:**

The Software Engineering field is one of the most favorable for qualified job seekers, in general. Anyone with a Bachelor’s degree in a technical field who can prove they know how to code and have good social skills should have little problem obtaining a job in the field.

However, there is a very big exception to this general rule: **big name west coast companies**, otherwise known as the “Big N”. These well-known companies in San Francisco and Seattle get WAY more qualified applications than they have available positions. For example, about **1 in 130** Google applicants get an offer, per Forbes. This number is probably slightly more favorable for Software Engineering positions compared to other positions at Google, but you get the picture. Even a very well-qualified applicant faces long odds of getting an offer.

Let’s say Google wants to hire 1,000 entry level Software Engineers, and they get 100,000 applications. There may be \~30,000 applications that are completely unqualified and easy to weed out. But after they do that, they’re still left with 70,000 applicants for 1,000 spots. Most of these people will have roughly equal qualifications: About to graduate with a B.S. in Computer Science or something similar, 1 or 2 internships, a few small side projects. 

How do you pick 1,000 winners out of a pool of 70,000 resumes that all look mostly the same? You interview them, of course. But normal behavioral interviewing is too easy, and won’t weed out nearly enough people. So another method is needed that can weed out a very large portion of the applicant pool, while still appearing fair and somewhat related to the job. Enter Leetcode!

Make all your well-qualified applicants solve 4 hard Leetcode problems. Maybe 10% of them will be able to solve all of them correctly and efficiently in a short period of time, and do a good job of explaining their answers. Now your pool just got narrowed from 70,000 to 7,000. It’s still a daunting task to narrow the remaining candidates down, but it’s now much more manageable.

Those exact numbers are just estimates, and certainly vary from company to company, but you get the idea: Google/Facebook/Microsoft/EveryOtherHotWestCoastCompany have to pick a small percentage out of a massive pile of nearly identical resumes, and Leetcode serves as an effective way of weeding out a majority of the competition in a way that’s (mostly) objective and (kind of) related to the job. That’s really all there is to it.

&#x200B;

&#x200B;

**Why you probably shouldn’t mind:**

If Leetcode was suddenly deemed an illegal hiring practice, your chances of getting hired at your favorite “Big N” company probably wouldn’t increase. These companies would still need to narrow down their massive applicant pools in a way that’s not terribly time consuming, expensive, or overly subjective. How would they do that? Maybe they put more weight on GPA. Maybe they put more weight on where you go to school. Maybe they exclude anyone who’s not a CS major. None of those things are good indicators of who is going to be a great engineer.

There are a few ideas I can think of that would most likely do a slightly better job than LeetCode:

Assigning some sort of coding test centered on solving bugs in a large codebase would be one example. But it would be extremely expensive and time consuming to design and grade enough unique versions of these tests to make them free from cheating.

Placing more emphasis on quality side projects would be another good tool. But taking the time to actually read through the code of thousands of personal projects and coming up with some objective way to judge whose is better seems insanely subjective and time consuming.

Long story short, there’s no “right way” to pick a small percentage out of a massive pool of very similar applicants. There’s no way to magically tell which 22 year olds with minimal experience will turn into amazing engineers and which will just be good engineers. The industry has settled on Leetcode. It’s bullshit, but that’s okay, because the alternatives are mostly bullshit, too.

&#x200B;

&#x200B;

**So you hate Leetcode. What should you do about it?**

You have two options:

**1.**  Stop applying to Google/Facebook/Microsoft/Amazon/OtherHotWestCoastCompany. This is not the end of the world. There are tons of companies that you can easily get hired at without grinding hours of LeetCode. They will pay you extremely well, respect you, and give you challenging work. You may not be the coolest person at your high school reunion for saying you’re a Software Engineer at “random Midwest tech company nobody’s ever heard of”, or ""non-tech company that has extensive software needs"", but you’ll still have a much more stable and enjoyable career than most new college grads can hope for in 2018.

**2.** Grind LeetCode anyways. If you wanna work at to Google/Facebook/Microsoft/Amazon/OtherHotWestCoastCompany, you will probably have to excel at Leetcode. Yes, it’s bullshit, but the alternatives are bullshit, too. At least mastering Leetcode is a clearly defined, bullshit objective for you to work towards.

&#x200B;

And in conclusion, I will add one last thought: If you don't think you can enjoy a software engineering career if it's not at a ""Big N"", you should probably re-evaluate whether you really like this field at all.",1543755160.0,2018-12-02 07:52:40
368,Does anyone feel like their actual job responsibilities is attending meetings?,867,hc2mqs,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hc2mqs/does_anyone_feel_like_their_actual_job/,184,I didn't know it was possible to have 10 hours of meetings in a day,1592609056.0,2020-06-19 19:24:16
369,"Why is the expectation for ""passion"" so high?",868,9leo65,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9leo65/why_is_the_expectation_for_passion_so_high/,437,"I go to class, people are yelling about how they found solution X to the test case at the top of their lungs, 200 other people are doing so in the same room. Lecture is taught by a guy who will spend 1 hour to explain something I can learn from the textbook in 5 minutes (not even because I am good at it, just because he spends half the class telling random stories and quotes). A couple hours before the project is due the test cases change again and everyone's grades drop 50%. the professor tells everyone he won't be checking his email or responding to questions about it in office hours. 1 month later he tells the class that he might maybe regrade the projects. We get an assignment but it is never mentioned in class and many people didn't even know about it and late work is not allowed. (My school is on [this list of top 12 CS schools in the nation](https://www.usnews.com/best-colleges/rankings/engineering-doctorate-computer) and most of my CS classes are this shitty, somehow I still have over a 3.0)

&#x200B;

I get to an interview and I have to act like I care about what I plan on doing for a career for about 30 minutes and keep my eyes from glassing over. Eventually I manage to bullshit a recruiter (convinced that connections are vastly more important than skill) and then while I am doing tedious work all day I am also expected by others to do side projects (why? Do doctors, lawyers, surgeons, businessmen, managers etc do side projects?) because otherwise (one company said this out loud) ""you are doing it for the money and don't have a passion"" (what does it matter if I can get the work done in order to get paid?)

&#x200B;

Why is the expectation for passion so high? We are basically minions for upper management to do the mundane ""computer things"". Most of the work isn't anything groundbreaking, and often the companies do menial things, like sell refrigerators, rent bikes, etc.

&#x200B;

Even if you look at the top companies, what they do is usually pretty uneventful: help advertisers make more money, make analytics for advertisers to make more money, make money by exploiting people's online privacy when they post cat videos and sell the data off to random companies, let people type 140 characters and send it to other people, etc.",1538707506.0,2018-10-04 22:45:06
370,"Started with a 2.5 GPA, almost dropped CS as my major 4 years ago, next week I’m graduating with a 3.47!",863,blzemh,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/blzemh/started_with_a_25_gpa_almost_dropped_cs_as_my/,117,"Just wanted to share that if you’re currently struggling as a CS Major, just don’t give up because things do get better if you put in the work! I made a 48 on my first intro CS course‘s midterm and thought about dropping CS altogether and had a 2.5 GPA my first semester of college. After that, I worked super hard to get better and ended my undergrad career last week a 3.47, 4x semester honors, 3 internships, a full time offer in the Bay Area, and graduating in 4 years exactly.  

I don’t consider myself to be super smart, but I do know how to work my ass off when I have to, and sometimes that’s all it takes. Even in my last semester, I wasn’t sure I’d graduate on time because I was struggling with my Linear Algebra course and made a 40 on one of the exams. I studied for a month and got around an 80% on the final and ended up with a B- in the class that I thought I’d end up failing. 

If you’re really passionate about something, nothing can stop you from achieving your goals! Just keep going at it!

EDIT:
In case anyone’s interested in reading a bit more about my journey, I wrote a Medium article on New Year’s which summarizes my experience which you can find in the comments.

I’ll likely write a follow-up article shortly after graduation maybe going into more details about every year I was in college, and different things I dealt with.",1557309116.0,2019-05-08 05:51:56
371,Name and Shame: IBM,863,97qhdo,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/97qhdo/name_and_shame_ibm/,513,"# IBM's (Terrible) Interview Process

Now that I've finally landed a job for myself, I feel secure enough to go around and name and shame the places which offered a terrible interview experience. In this case, it's IBM.

The general interview process of IBM consists of two, sometimes three parts:

* 1 screening interview

* 1 phone interview

* A ""finish line"" event


## Technical Screening Interview

Basically, you receive an email saying ""congratulations! you're being considered for <x> position!"" This is an automated email. There are no humans behind it, and there is a short deadline to actually complete the screen. If you need to extend the deadline for the screen, tough luck. If you need literally any accommodation, have fun. You won't be getting it. `no-reply`, bitches!

The screening interview requires:

* A webcam with a clear view of you and your room
* Granting a tool (admin) access to your computer to make sure you don't cheat

which alone constitute a massive breach of privacy, in my opinion.

The screening interview consists of a basic coding challenge and *pre-recorded* video questions to which you must give a response. Your response must be in video format - it cannot be written. After you are delivered a question via video, you are given about a minute to formulate your response and then are required to narrate it back staring into your webcam. This is the lamest method of interviewing that I have ever come across. There is no human interaction, so there are no body language/social cues to work off of when narrating your response. It can't really have mistakes and it has to be delivered straight with no interruptions.

Then there are other trivially easy coding challenges which literally anyone could solve, but they also require a verbal explanation of what you did. This is a bit easier because you have had more time to parse through your solution. It's still lame to talk into your webcam like it's a real person.

Whichever brilliant mind at IBM thought video questions and responses were a great idea should be fired. Now that I'm not a desperate CS student, I don't see myself ever applying to IBM ever again simply because of how humiliating the *screening* interview is.

## Technical Phone Interview

The phone interview is fairly normal. You're greeted by a bored interviewer who sounds like he'd rather do nothing more than jump out of the nearest window. He asks some useless brain-teasers (who the fuck does this) and a simple coding challenge. They place quite a bit of weight on the brain teasers - take slightly longer than average to work through the brain teaser and they'll mention it in a negative light. 

Brain teasers are the worst and provide literally no value in an interview. Whichever brilliant mind thought of asking these during a phone screen (looking at you, Microsoft) should be fired.

## Finish Line

The IBM Finish Line event initially sounds fairly neat. You're flown in to one of their Finish Line locations in which you're treated a stay in relatively nice hotels. In the Finish Line event, you're randomly divided into different teams. At the kickoff dinner, you are presented with a problem statement and given 3 days to develop a solution. Your team consists of everything from prospective programmers to project managers to UI/UX designers.

Meals are provided. During the event, IBM will take you on a tour of their nearby offices, focusing almost 90% of their time on Watson. In reality, only something like 10% of offers will be on Watson teams.

At the end of the event, you are to present your product in front of a board of ""executives"" in a standard slide deck format.

I have to give IBM props for the idea here. When executed correctly, the Finish Line event sounds like an amazing way to vet candidates and introduce students to the IBM culture. However, in practice, I find that this fails terribly. It fails because of two reasons: *no technical vetting* and *politics.* And also because IBM has a soul-sucking culture and I'm not sure why they would ever try to advocate it.

Throughout the whole event, there is literally no one vetting the candidates from a technical point of view. Sure, they have ""HR""/social-side employees stopping by at tables to judge the behavior of people and single out people for early hiring, but there is *no one* that is actually trying to make sure that you know what you're doing.

And so often, candidates will cheat on the interview. A girl at my table downloaded Python libraries for detecting faces in videos and claimed it entirely as her own. When asked, she said with a straight face that she wrote it. Bitch, you don't even know Python. You had to ask me for help on what `for` loops and `import` statements are. I had to give her a crash course on running Python code and using Git. This girl was fast-tracked to an offer on the Watson team. None of the IBM employees understood what she was doing because there were *literally zero technical people in the loop* - it just sounded/looked cool so her plagiarism went unnoticed.

And finally, there's politics. Everyone's trying to backstab everyone. Even on your own team, someone is trying to one-up you. IBM makes sure that there are at least two people competing for the same position on each team which inevitably leads to this scenario.

These two issues seemed to summarize IBM. In essence, the feeling I got is that the company culture couldn't give fewer shits about actually creating decent software or solving any meaningful technical challenges. It was all more about keeping up appearances as a ""business."" Business culture first, engineering second. This really rubbed me the wrong way.

The Finish Line event is a solid way to network with both IBM employees and other interviewees. If you can make some friends, you have great contacts to get referrals to other companies. Most IBM engineers I spoke with hated what they were working on. It seems the vast majority of the engineers I spoke with were working on legacy end-of-life technologies with seemingly no way forward for career growth.

Whichever brilliant mind thought of not having literally any technical vetting during the on-site event should be fired.

## The Offer

Fortunately, most people that attend the Finish Line get an offer. Unfortunately, the offer is shit. You're looking at $100k in Silicon Valley. $10k more if you're a grad student. No stock options and negligible raises. 

For comparison, the average new grad offer in Silicon Valley at a FAANG company here is $160k. If you play your cards right, you can negotiate this to $190k+.

Whichever brilliant mind thought that $100k is reasonable compensation in this location should be fired.

---

To summarize:

* The technical screen was shit

* The phone screen was shit

* The Finish Line was mostly shit

* The offer was shit

* Everyone here should be fired

0/10, avoid this company if you can. Feels like it preys on desperate new grads. Aim higher.",1534436418.0,2018-08-16 12:20:18
372,Mayor of Chicago just said all the laid off retail workers should learn how to code,860,jpsta3,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jpsta3/mayor_of_chicago_just_said_all_the_laid_off/,415,"[**https://twitter.com/CurtisHouck/status/1324896645297954816**](https://twitter.com/CurtisHouck/status/1324896645297954816)

This is the link to what he said. Looks like y'all can look forward to even more saturation and competition. 

I give it 3 years before LeetCode has released 2 new difficulties (harder than the hardest currently on the website) and interviews last for multiple weeks (/s)",1604792145.0,2020-11-07 18:35:45
373,"As a dev, the absolute best thing you can be is resourceful and self-sufficient.",864,c8c8uw,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/c8c8uw/as_a_dev_the_absolute_best_thing_you_can_be_is/,74,"General resourcefulness is so rare, but it's beautiful. Meaning that when you encounter something new that you haven't done before: you figure it out. That doesn't mean you're not allowed to ask for help, but it means you *try*. Like, actually try. Don't just get frustrated then stop and hand things over to someone else.

&#x200B;

I've noticed that my absolute favorite people to work with are the ones that, when given a problem -- even if it's a totally new thing -- they'll do the research and come up with a solution themselves. Even if it isn't perfect, they still come up with *something.* They'll brainstorm. They'll discuss the problem. They actually take an interest in problem-solving, which (spoiler alert): **that's literally the whole job**. It's solving problems -- sometimes complex and annoying problems. That's why you're paid well.

&#x200B;

So if you want to stand out and move up in your career: just try. Learn to enjoy trying.",1562118146.0,2019-07-02 21:42:26
374,To those that followed a Computer Science career mainly for money,854,kh89ja,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/kh89ja/to_those_that_followed_a_computer_science_career/,522,"Are you satisfied? Did it meet or exceed your expectations financially?

More importantly, are you happy with your decision? What would you change about it if anything?",1608547200.0,2020-12-21 05:40:00
375,Fired to Hired with 40% raise within 10 days. Rant and Things I learned,853,d6xpep,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d6xpep/fired_to_hired_with_40_raise_within_10_days_rant/,57,"Exactly 2 weeks back I made [this post](https://www.reddit.com/r/cscareerquestions/comments/d0hmux/i_was_fired_today_from_my_job_im_confused/). TLDR is that I got fired from my job which I joined few months back in another country. It was a really sad day and the fear of losing this city and my gf whom I found here was too much. Not to mention the stress from the fact that they didn't think I was good enough. And the pressure of finding a new job ideally in the same city as a foreigner i.e with someone that was willing to sponsor me was unbearable.

But I did it. I applied to as many places I could to and interviewed at few of them and got an offer from my favorite one this Tuesday. And that too at a salary hike of 40% in the same city. And I feel this would be a great fit considering my experiences of working over the past 4 years and my experience talking with the CTO, founder, and other colleagues.

Now when I look back, I am glad that it happened. The first two days were definitely unbearable but by the third day, I realized that I didn't like working here even a bit. It was the city that I cared about and not my job. I learned a lot of things and I would like to share them hoping that others don't make the mistakes that I made. And at the same time, I would like to vent/rant since I couldn't do that in my last post.

(Some of these things might seem very very obvious to others but I would still like to say them because they may be useful to some)

**THINGS I LEARNT  (And RANTS)**

***1.) Be very clear about the kind of place you want to work at:*** Why do you want to join a company? I think sometimes people say, for the paycheck. As practical as this may sound unless that is all you care about you may have a hard time if you agree to work at the wrong place. This is not something that I thought much about earlier. Partly because I didn't have to face this issue before. I was fortunate to work with some amazingly talented and humble people in my career as an Engineer and I was able to see further standing on the shoulder of these giants. And I thought that is how people in the industry are. But I learned that this isn't true once I joined here.

You need to ask yourself what kind of place you are comfortable to work at. Do you care about learning new things and the quality of work or are you willing to do anything and any work as long as you get the paycheck? Are you willing to work on third-grade spaghetti code? Are you willing to do things the way your seniors ask you to despite your experience saying that the approach isn't correct and them not having a convincing reason for that?  Are you willing to work at a place where hierarchies matter more than a spirit of learning and improving yourself no matter your job title? Are you willing to work at a place where a senior might be a bad or average developer whom you wouldn't be able to look up to? Are you willing to work at a place where the developers can write anything as long as the app works a certain way?  Is your answer yes to all these questions just because the pay is OK? I can go on and tbh this can be a post in itself. There are amazing companies and amazing people out there who value developers and are passionate about programming. And then there are places which need developers because it is 2019 and most companies do. You need to figure out what matters to you the most.

***2.) Never be content, know your value:*** This is a big one for me. I think I do suffer from imposter syndrome and many people do. But it is very important to understand your worth. Don't take shit especially when you know that you don't deserve it. I was suffering at this job, not learning anything, getting humiliated by seniors who wrote code which I could see was BAD. But I was lazy and doubted myself especially since they were sponsoring my VISA. The manager warned me and instead of trying to find another job, despite knowing that these people had absolutely poor tech sense, I started to work harder to impress them. Well, I was still fired. And this time I didn't have an option. And this is when I realized my worth. And I am not going to make this mistake again. And you shouldn't either. Never get lazy, never be content, be up to date with things and know that beginning of a job hunt might be at the door. But more than that you should be good enough that such a situation should not be able to hurt you. You should have faith in yourself, your skills and knowledge. And if you don't have it already then improve them so that you can be confident in them.

**3)** ***If they have warned you, they will probably fire you:*** If you get a warning, it is time to find a new job. This was my first time experiencing this but this is a lesson I learned. Not something that happens every day but needed to say it.

***4.) Despite what some people say, your seniors may be wrong and you may be working at a toxic place:*** In my last post, few people commented that this was a typical case of a guy crying toxic place and that others are sympathizing with him. I would just say that having worked with multiple companies and people I can without a doubt say that if you agree to work at the wrong place there is a good chance that you'd find yourself in the middle of a bunch of dufuses. And if that happens you need to find another job. I will be honest, I don't think I am am a coding wizard. And while I was at my previous companies I was always very conscious about my work. Because everyone was doing theirs so good and I wanted to keep up with them. But things were very different here. I could spot bad code from day one, instances of hiding bugs instead of fixing them, disregard for basic software design principles, spaghetti code, things that had the potential to break production which I suggested to my lead but he didn't care much. And one such thing actually did break production a few months later. I wrote about this incident in my previous post. Some people have bigger egos than the willingness to learn things. And if your seniors are like that you should work with them only if they are very very smart. If not then run.

What I say may not apply to everyone. A year ago I wouldn't have cared about these things. But I do now. Now, I have a very clear understanding of what kind of places I want to work in the future and what kind of people I need to avoid. And I can spot these companies and people much better now. I would also start grinding leetcode because I am not willing to settle for anything that is offered. I do need to do the best that I can from now on because I believe I can. And that won't happen if I get lazy or content. Working at my current company had almost killed my programming passion. And just preparing for interviews made me realize that I like programming more than I had recently started to think I do.

The new company seems to remind me a lot about one of the places I worked at and it was my best experience till date. The CTO is down to earth and technically very very good which you can see not only from his resume but also when you talk to him. I had a 2-hour conversation with him and the founder and I realized what I was missing for the last few months. I must say I feel so relieved and free. I am so glad to leave my current job but this was a lesson that was necessary to learn.",1569027171.0,2019-09-20 20:52:51
376,This entire subs comes off like your making 80-90k out of college and anything less is disappointing. As someone who is going back to school for Comp Sci and taking out loans (OSU post bacc) I just want to know the truth.,857,bravyn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bravyn/this_entire_subs_comes_off_like_your_making_8090k/,638,Are you guys all in NY with connections or really talented top tier prodigies? Is 50k really low end for someone with a comp sci degree? I live in NJ make 12-13 with my bachelors in science biology and would kill for just 15. As someone going back to school for comp sci I can’t help but feel this whole sub is a lie. Some of you are making 100k? 90k? 80k? With just a bachelors at the beginning of your careers? I don’t mean too doubt everyone here but the stories on here don’t make any sense unless I make up backgrounds for the people I’m reading and say ah this person went to Georgia tech 3.7 GPA and was programming since high-school like a prodigy.,1558476700.0,2019-05-21 18:11:40
377,Just quit my job as a programmer after my bosses treated me like a replaceable comodity and I feel great,854,57nqu3,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/57nqu3/just_quit_my_job_as_a_programmer_after_my_bosses/,224,"I'm really good at my job, in comparison to those that work with me. This gave me some leeway with my bosses as I could work on projects I liked and so forth. On the ohter hand, I gave them high quality work at a cheap price.

Last month we entered a scheduled contract negotiation and I was basically told not to ask for a raise. They gave me a crap ton of reasons and they even threw to my face that I was on the same level of the coworkers I was training...

I kept my mouth shut and went forward. Two weeks ago, my computer broke down and they replaced it with a worthless 700$ machine. They didn't ask me to choose, they just bought one and gave it to me.

I went to my boss office and told him the truth: that pc was not ok, it's less powerful than the one I had 4 years back, and even though I could do my job with it I there's no reason to use such a pc when I can easily work better with something slightly more powerful. Time, comfort, performance, etc.

He came back to me a day later and told me that that was all they could afford at the moment and, well, other coworkers had the same model so I had to adapt.

Next day, I gave my two weeks. And all hell broke loose. I had been scheduled for several projects until mid-2017 and there was no one available to cover my position. They came up to my face about me being childish, unprofessional, irresponsible and disloyal. They tried to tell me that if a laptop was the problem, they would buy me a new one and I didn't have to act like that. They were desperate because they always worked stretched thin, dumping on us, employees, as much work as possible and when a piece is gone, and promises have been made to clients, the situation suddenly becomes ""serious"". Me getting paid more or working with a decent computer? That's not serious, of course...

I replied that they, my boses, had computers of over 6000$ and wouldn't even consider making me, their only senior programmer, choose my own machine, and that's not ok. I told them that if they could afford such powrful pcs then they can't pretent to make me work with junk.

And of course I also told them that the whole ""you and your coworkers are all on the same level"" excuse they used to not give me more money is a lie, dishonest and manipulative, and that the moment they turn around those same coworkers start asking me for help and can't finish stuff on their own. (Yeah, I lost it a bit there)

They kept me on and made me ""explain"" my ""fellow coworkers"" some critical tasks and document as much as possible my other projects.

I'll be gone next week, and I feel great. I've saved enough to look for another job. I just needed to let all of this out as it's been really frustrating, but worth it.",1476589659.0,2016-10-15 23:47:39
378,"Wanting to be compensated fairly and loving your job are not binary decisions, you're not a bad person for valuing both",848,ghhjhm,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ghhjhm/wanting_to_be_compensated_fairly_and_loving_your/,87,"We've seen it pop up time and time again, ""Am I the only one doing this for money?"" and the occasional ""If you love what you do, you'll never spend a day working in your life"" and other such common phrases that treat loving your job and wanting money as if they are opposite ends of a binary switch.  
  
Don't let people convince you of this.  
  
It will only harm our industry and you personally by making it seem as though if you love your job, you shouldn't job hop for better compensation, negotiate fairly or expect to be paid your market worth. It also serves to make you feel guilty for aggressively seeking promotion and career upgrades, as if you ""sacrificed"" your passions for money.    
  
This is **not** true. It's a *false dilemma* created to convince you that you shouldn't ask for more money if you love your job.   
  
You don't have to choose between loving your job and wanting the money. I, and many others, do both. I love what I do because I wouldn't be as passionate about it or be able to tolerate the compromises I have to make to deliver satisfactory work if I wasn't happy with what I am doing for myself, my company and our users. But I also want to be compensated fairly because I have lifestyle needs and it would be predatory to pay me less than what the market determines I'm worth. It's *exploitation* of labor and that is also not okay.  
  
Some people do this purely for money and have other passions outside of work, that's okay too, they don't *have* to love this career. Although if I were friends with them, I would offer them friendly advice to seek a company or sub-field where they'll still be paid generously but also love the work.  
Some people do this because they love the job and don't care as much about money or at least money isn't the only factor for them.  
I think that's okay too but if I were friends with them, I would ask them to negotiate for better pay because them loving what they do doesn't mean that asking for more money is hypocritical and by asking for more compensation, they're indirectly helping their peers by ensuring that the compensation for the field isn't artificially deflated.  
  
That's all. Good luck out there.",1589203668.0,2020-05-11 09:27:48
379,I want to work only 4 hours a day,848,hm3u4e,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hm3u4e/i_want_to_work_only_4_hours_a_day/,347,"I'd much rather work 4 hours a day and make 60k than work 8 and make 120k. All I want is to make enough money to be financially secure on a minimalist lifestyle and have enough time to devote to serious hobbies. How can I make this happen? 

There are basically no part time jobs in existence. Believe me, I've searched. Is my only choice to stay in full time until I have enough contacts and experience to do free lance contracts part time? I have been trying to get into freelance, but it's not going well. Even when I set my prices low I'm competing against some guy from Ghana who charges $20/hr. I think to be competitive I need to get some experience working in a FAANG so I get more high paying clients. I've thought about starting a business, but I think this would end up taking even more time than a full time job. 

Please help me figure out how I can achieve my ideal lifestyle.",1594053015.0,2020-07-06 12:30:15
380,Addressing misinformation about the Bay Area,848,f5dllg,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/f5dllg/addressing_misinformation_about_the_bay_area/,648,"Yes, every company asks Leetcode questions.  No, writing algorithms is not your everyday job.  Why do they do it?  It's an intelligence/communication test.  They want to see how well you articulate technical concepts and think critically.  They're optimizing to prevent false positives.  And believe it or not, people can pass Leetcode style interviews without grinding Leetcode for months.  Yes, there are people smarter than you, welcome to the real world.

Yes, rent is very expensive.  Yes, California has a state income tax.  No, $180k in CA is not the same as $60k in the midwest.  Especially when you have no dependents.  Yes, you might live with roommates to save (even more) money.  But you don't have to.  Turns out humans are social animals that value friendship.

No, the Bay Area is not as chill as Socal.  Yes, you have to write code at your job that is paying you a lot of money.  The vast majority of software engineers here are working 40 hrs/week or less.  Yeah, you might be at work until 7, but you just hit the free gym, took a shower, ate free dinner, and are about to take a free shuttle back home.  If your company doesn't offer those things, you probably left long before that.  In addition to a ton of perks, many workplaces are flexible, and allow partial WFH 1-2 days/week.

Instead of whining and criticizing others on the internet, many posters here would do better to make an honest assessment of their own weaknesses, put their heads down, and get to work improving themselves.  And I'm not saying your goal should be ""$xxx TC, Google Mountain View"" or some vain, Blind-esque bullshit like that.  I don't care where you want to live or who you want to work for.

If you're unhappy, then harness that negative energy and look inwards, because you are the one that has the most control over your own situation.  Yes, there's enough randomness in life that you can't guarantee any one success.  But give yourself goals.  Challenge yourself.  You'll fail, and that's ok.",1581994655.0,2020-02-17 21:57:35
381,I am now the most senior developer in my company after 7 months working here and I have no clue what I am doing.,844,e5au91,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/e5au91/i_am_now_the_most_senior_developer_in_my_company/,120,"Long story short, over the last 3 months a start up head hunted all of the devs (3 total) that were here before I was hired in March. This includes my former manager and the guy who was promoted to manager when he left, plus another junior dev who didn't deal well with all the turnover and decided to follow his friends.

Over this time we have been desperately hiring devs as fast as we could and what is left is 2 brand new devs and me plus 1 QA tester. All of them are newer than me.

I became the interim manager when the second guy left, as I was the last Senior Dev on the team.

Now here is the real problem: we are a ruby on rails shop and every member of my team switched stacks from .NET to work here.

Our project is a Rails app and 7 months has not been enough time for me to master Ruby/Rails or figure out how all of it works (the language and framework are fine, but our app is complex), and I am pretty quick to pick things up, usually. The rest of my team is basically brand new to Ruby/Rails so it will take a while to get everyone up to speed.

As the interim manager, I am doing my absolute best to restore stability, maintain good moral, and figure out how to run this show... oh yeah did I mention that I am also responsible for ALL dev ops and anything else tech related? I had basically no experience with our hosting environment before I was all of a sudden reponsible for our servers and everything.

On top of that, there is a shit ton of technical debt in our app. It was originally built by a contractor and suffered from being a start up project where speed was more important than quality for years. Only recently has the company been well funded due to an aquisition, but there is huge pressure still because we are not profitable.

I have applied to the management position I am currently in, hoping to make it permanent, but it just keeps getting harder. I am starting to question my prospects here. It doesn't help that I am relatively inexperienced... almost 4 years as a developer but no management experience. I was similarly thrown into the deep end like this at my last job... I delivered but was miserable and on the verge of going crazy the whole time. I feel like I have learned coping skills that are making this time better, though.

Anyway... I am trying to figure out a good strategy for dealing with my situation. The business has ambitious goals and I know for a fact I will be telling them ""no"" and ""that's unrealistic"" like a broken record for their asks, given my team's situation.

How do I create space for myself and my team to get up to speed?

How do we get up to speed?

How do I not have daily panic attacks?

How do I explain to the business how royally fucked our situation is? They are not tech people but I need them to grasp the gravity our challenges... they come from an industry where private domain knowledge and tech stacks are not a factor.

Is my situation as fucked as I often feel it is?

Any other advice is much appreciated. Thank you.

&#x200B;

UPDATE HERE:  [https://www.reddit.com/r/cscareerquestions/comments/e7mb1y/i\_am\_now\_the\_most\_senior\_developer\_in\_my\_company/](https://www.reddit.com/r/cscareerquestions/comments/e7mb1y/i_am_now_the_most_senior_developer_in_my_company/)",1575372479.0,2019-12-03 06:27:59
382,80% of engineers are unemployed in India.,841,dvaxlv,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dvaxlv/80_of_engineers_are_unemployed_in_india/,361,"Edit: unemployable, not unemployed.

What is going on over there? I'd love to hear the perspective of someone in India, though I know it's getting late there.

* Is it a shortage of opportunities/jobs because of a struggling economy?
* Or are the schools just bad and pumping out unqualified candidates?
* What are people's attitudes on the situation?
* How hard has it been for you to find a software engineering job?",1573598842.0,2019-11-12 17:47:22
383,"Just accepted my first offer at 35 years old, apparently this still works!",841,ccc7or,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ccc7or/just_accepted_my_first_offer_at_35_years_old/,114,"TLDR:  'Changed Industries', Got my old ass a job, feels good!

&#x200B;

Long time lurker here, I haven't contributed since I didn't feel like I would be able to add to any discussion.  There are some good vibes and anecdotal stories here that helped me stay positive and confident to execute on a career change, so perhaps this will be helpful to some as well.

&#x200B;

I recently turned 35 and by accepting the developer offer I have successfully transitioned from a career in finance (with most experience from call centers) into a software developer!

&#x200B;

Most of my life, I have been in some aspect of financial services / sales, the pay was OK, work hours comfortable, but man does it suck selling financial products to people that directly conflicts with what is best for their investments.

&#x200B;

My career transition began in earnest around October last year, my office was notified that it was subject to a lay off and me and my peers would be out of work.  I was pretty done working in the personal finance industry at that point, so I started planning my escape.

&#x200B;

Coding wasn't entirely new, so I knew that it could be enjoyable, but was also super frustrating, and I had not coded for 3-4 years.  I has some previous coding experience as a financial research associate, where I worked on some data visualization projects and automated the data with perl (in hindsight perl was an awful language for a beginner and since I was on my own, I was super stressed out and lost for a good portion of this role)

&#x200B;

I decided for me the best option was to pivot to web development the absolute fastest route possible.  I enrolled in a local coding bootcamp (and fairly well recognized locally and nationally) which coincidentally started classes a week after the layoff.  Up until I began the bootcamp, I was practicing front end coding regularly to prepare.

&#x200B;

The bootcamp focused on the MERN stack, and was a 13 week program.   My bootcamp experience was a sequence of emotional highs and lows, but I probably ended up working harder than I ever had my entire life, making up for being a piss poor student in my younger years (not awful grades, I was just super lazy).  When I finished I felt like I didn't have enough grasp of the subject material, however the school asked me to be a part of their intern program to help the next batch of students.  I jumped on this opportunity and it proved to be super helpful in getting my current offer.

&#x200B;

Once the internship wrapped up, I focused my efforts on breaking into the industry.  My search was actually surprisingly brief, a mere 4 weeks, \~30 applications before I hit this lead.  The job was for a full stack developer position using Java / Spring for a fintech SASS company... an entirely different stack than what I studied with exception to React.  I studied the job posting and the tech language used to prepare for the initial phone interview which turned out to be quasi-technical regarding OOP concepts.  I stumbled my way through enough that I got an invite to the second, and the recruiter may have sensed that I was a weaker candidate, so she told me to study up on SOLID design principles and OOP concepts for the on-site.   

Guess what I did all day, every day until my on-site? 

At the 2nd interview, one of the first questions they asked was how familiar I was with Java, I said "" To be honest, I didn't know anything until about a week ago when I had my phone interview, I have been studying it ever since.""  I think that was huge to show I was honest, and I think they took it easy on me when they challenged me to make a Class Map using for a controller.  Lots of ""uhs, ums, I'm not quite sure's"", but I was able to answer questions regarding SRP, O-CP, and also identify where the ""App""  we were white boarding needed dependency injection (after some help from them)

&#x200B;

Somehow they felt I would work.  I think the internship was super helpful, as I got the opportunity to teach and explain coding concepts so I could at least sound intelligent when I knew the answer.

&#x200B;

I eventually accepted an offer for many thousands more than what I had been previously making, and above Jr / entry level developer salaries are in my city.

&#x200B;

A few anecdotes:

* I feel like I had to pull all the advantages I could offer together to successfully pivot into the industry.  I was focusing on fin techs and financial companies since I could point to industry experience.  I got very helpful experience discussing code as an instructor intern, and my sales background was super helpful to be confident in front of strangers, help promote my strengths, etc.
* The only jobs I heard back from (had a couple other interviews) were for Full Stack 3-5 years experience job postings.  Never heard back from any postings for Jr Devs.
* Due to Boot Camps, I  think my chances were improved **because** I applied to a job outside of the stack I was taught.  Less competition and whatnot.

&#x200B;

All I have to do now is not suck.  Which is going to be super hard.  And learn.  A lot.  But shit, here I am!",1562973654.0,2019-07-12 19:20:54
384,Accidentally fell into a SWE position and I love it,844,9gkcsm,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9gkcsm/accidentally_fell_into_a_swe_position_and_i_love/,58,"I saw a post saying there isnt enough positive posts here so I figured Id share my story. 

Less than 2 years out of college (computer engineering) and while it took me 5 months to get a job, I have a great job and great life now. The 5 months was including the fact I had a god awful GPA, and no internship or co-op and really only averaged 5-10 applications a week over that whole period. 

My first position was in Firmware engineering and I quite liked it and the company. Sadly that project got downsized and they had to migrate a lot of people to other projects. Luckily we had a great project manager who put in a lot of work to find us *all* position on other projects. So I got placed on a project as a junior SWE and Ive been loving it. I dont know much yet. But I enjoy the work, the people, and the company. Overall, I have a fantastic work-life balance, can afford my lifestyle, have a great wife, friends, and an awesome dog. 

So my point is. Yes, it sometimes does work out. Not every company is a shit hole. Not everyone is miserable. And you dont have to be top 1% to have a good life. I hope this makes some of you feel better. ",1537220085.0,2018-09-17 17:34:45
385,One hundred years of leetcode. Novel story.,839,arb7a0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/arb7a0/one_hundred_years_of_leetcode_novel_story/,162,"I read this sub and it fascinates and astonishes me how a few corporations had shaped the modern perception of the hiring process for the entry level positions over the past decade. I have my own opinion, and please take it with some grain of salt. Also if you think that I'm shitting on leetcode and related platforms, and despise the brilliant people who can really do cool things about the programming - I apologize, it is not my intent ( and English is my fourth language, so I'm still learning it it my late 30-ies).

I use leetcode and hackerrank and codeforces myself. I used projecteuler and some TopCoder stuff way before those fancy coding dojos were born. **For fun** - because I like puzzles. Many people don't. And I don't use leetcode etc for interviews, ever - for the reason that will be clear below.

I work as a software engineer for almost 2 decades. I've been in the positions of junior dev, senior, principal, director of engineering, CTO. I hired and fired a couple of hundred people, and interviewed over a thousand engineers for various positions during my career. So I know something ( or at least I think so ).

What I learned so far - it is extremely unlikely that the leetcode knowledge of some fancy DP-related problems or optimizations would drive the hiring decision. Seriously. I would literally kick ass of anyone who will assign an entry-level developer a task that requires serious algorithmic skills. **This is not how it works**.

As a junior dev you're supposed to **not damage the system beyond some control boundaries where the damage could be mitigated**. This is what it is. I've seen it way too many times when a smart guy thought that he's the smartest frog in a pond and tried to introduce some optimizations that would crash the integration testing environment ( of course if you have any ). Or tried to replace some ""old and obsolete"" code with a new fancy library that had some unforeseen side effects.

You won't be doing the actual feature/performance related coding from the beginning. Not for a couple of months, for sure. 

Your task would be to **fit the process**. If you can commit some refactoring of some test in a week - that's great. If you can build the project locally with no help, just using (incomplete) README.md and googling the build errors, then **fix** the build and **update that README.md** - I'll buy you a drink.

And this should give some hints on what people like myself would really look for ( may be there are not many ones, but many of my colleagues and random people on various internet forums tend to agree ).

* Git/(Subversion, maybe - but unlikely) - please don't force me to explain how that works. I would love to give you access to the repo and expect that you can setup SSH keys and checkout the sources without me or someone else handholding you around.
* Build - please be familiar with some build tools that are appropriate to your language / platform of choice, like Maven, or SBT, or Gradle, or NMake
* DRY - please, don't copy-paste. Or GTFO. I'm so sick of those rejected pull requests when people don't even bother checking what the static code analysis tells them about the code duplication. And I don't buy the argument that the function call would slow down things - we're seldom competing for nanoseconds, and it's not your call anyway.
* KISS - forget about those fancy code golfing practices you used to impress your classmates. I will accept 10 lines of readable code rather than a line of ASCII art of macros. Also use the most readable implementation of the algorithm, even if it is twice as verbose or uses 10 bytes more memory.
* SOLID - get some basics. Use interfaces and contracts. Define scopes. I'm not talking the design patterns here, yet - but some common sense! Strip off everything that is superfluous and you will end up with the neat set of the interfaces that will promote you to a mid-level dev way faster than any puzzles you solve.

So when I look at a resume for an entry-level or mid-level position, I'm looking for the signs that you know things from the list above. I will look at your github repo. I will browse the code and see whether you have tests. If you have TravisCI badge that actually shows that all the builds have passed - you already in shortlist for an phone interview. If you have clean interfaces that you use instead of implementations ( and you can explain why ) - you're 80% way down to getting the offer. I will ask you for, well, how to find the maximum in a sorted array to understand whether you really attended your classes. May be how to calculate N-th element of Fibonacci sequence. Or reverse that damned array. That's it.

Anything else is pointless. It's unlikely ( but still possible ) that you will be developing a new high-efficient routing table for Cisco or may be throttling for Nginx. Most likely you will be building the systems that should be easy to maintain, easy to fix and easy to understand. And there's no leetcode involved.

Hope that helps someone to review their goals. FAANG is not for everyone, there are plenty of jobs available. And if you hate lettcode and kill yourself trying to solve 1000 easy, 150 hard and 1 super-hard one hoping that it will get you a dream job - chances are you'll just get frustrated and drop off.",1550368757.0,2019-02-16 20:59:17
386,A friendly reminder that regularly working 70-90 hours/week for a SWE job is never worth it.,837,70iedc,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/70iedc/a_friendly_reminder_that_regularly_working_7090/,325,"This comes in response to a [SWE job posting](https://www.deeplearning.ai/fullstacksoftwareengineerjobdescrip) for deeplearning.ai by Andrew Ng. (the posting currently says ""70+ hours,"" which is worse; atleast 90 was a *upper bound*)

Twitter has been rightfully [criticizing the job post](https://twitter.com/AndrewYNg/status/908052152722976768) since then, and I made [a relevant post](https://np.reddit.com/r/recruitinghell/comments/7003zb/strong_work_ethic/) in /r/recruitinghell.

When I posted the Twitter link to a Facebook group with a similar userbase as /r/cscareerquestions, it turns out there is a surprisingly large amount of *disagreement* on this point, with comments such as ""when someone is this passionate about something, you stop counting the hours.""

No. Mental health is more important.

Yes, there can be periods of occasional crunch, and that's expected in the software engineering industry. But as noted in the Twitter comments, diminishing returns hits *hard* in an intellectual activity like software engineering; even after just the 60 hour mark, code becomes sloppy. It's a lose/lose for both employee and employer. 

Certainly working with Andrew Ng would be prestigious and the company could feasibly pay enough money to make working 70-90 hours a week financially worth it, but money/prestige is irrelevant if you burn yourself out of the industry.",1505614237.0,2017-09-16 22:10:37
387,"List of 164 remote jobs hand-picked from ""Hacker News: Who is hiring?""",833,fsi1qs,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fsi1qs/list_of_164_remote_jobs_handpicked_from_hacker/,46,"Hacker News decided to create a new Who is hiring right now? thread to help people looking for jobs during this crisis. And it was a huge hit among companies who are hiring. 

Here I would like to share the entire remote jobs list from the big list of opportunities. All these are 100% remote jobs not just allowed to work from home during this crisis. These are 100% remote jobs and will continue to follow that after the crisis. 

[https://remoteleaf.com/whoishiring](https://remoteleaf.com/whoishiring?ref=reddit)

✅ 100% remote full-time jobs

✅ Spent more than 28 hours to curate this information

EDIT: Updated the link to my original post so that users can filter the jobs based on their location and skills.",1585707326.0,2020-03-31 22:15:26
388,"Guys, it happened.",832,7v0lpc,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/7v0lpc/guys_it_happened/,167,"Non-target school.

Non-CS.

Studied every day since May 2017.

200+ Leetcode questions solved.

2 failed Big 4 first rounds.

1 failed Big 4 on site.

3 failed top tech company on sites.

And after my last scheduled interview, got a Big 4 offer for full time last night.

Couldn't have done it without this sub. Thank you. Hard work works everyone, don't give up.

Edit:

My general plan went as follows:

1. Read through Programming Interviews Exposed 
2. Read and complete every section of Cracking the Coding Interview (excluding ""Hard Problems"" and ""Advanced Topics"")
3. Complete everything in [this](https://github.com/jwasham/coding-interview-university) GitHub study plan through ""Even More Knowledge""
4. Turn phone off and a) Read through a Java (my interview language) or programming related concept I was not confident with. b) Do 3 Leetcode problems per day on paper, only looking at answer if completely gridlocked for 30+ min.
5. At some point around 5 months in, repeat steps 1-3. 


There were two things I personally believe put me over the hump: 1) put my phone away and refuse myself the ability to get distracted for the ~2 hours I was doing the research and problems 2) Stay fresh on Java and programming related concepts such as threads, locks, design patterns and memory. There were several instances where my answers to a DS&A problem branched into a knowledge based question that I was unable to answer. It is absolutely crucial that you stay comfortable during technical discussion. I think if you sound shaky and are reaching here the interviewer will subconsciously and permanently lose respect. Don't let that give you anxiety though, try to channel nervousness into excitement. You've been studying, you want to show off what you can do! If you don't do well, there's always going to be another interview. 

On another note, I was really in the dumps around mid-Fall. I had been studying for 5 months and was still failing interviews, all while reading threads on this sub about people landing offers. STOP READING THIS SUB IF IT GIVES YOU ANXIETY/CREATES PRESSURE. I stopped in late October (for the most part, still occasionally contributed if I happened to see a question I could answer) and this is my first time back. Take the schedule I've laid out above (99% of others will give a very similar schedule), go through it and see where your failures are coming from. Then modify the schedule to accommodate. Additionally, around this time I read Grit by Angela Duckworth which really boosted my morale. I am extremely weak naturally at DS&A questions and also have no formal education on them. The book really helped me look at this whole thing as a basic proportion with 100% equaling getting your dream job. If you have less natural ability, you simply have to work harder, however the 100% is always achievable.

Edit 2 (Getting Interviews):

I applied to all companies via their standard online application. The only exception was Bloomberg where I had a referral and was rejected after the on-site. The biggest key to my resume so far was getting an internship at a small local energy company the summer after my freshman year. That allowed me to get an internship offer each following year. I think interning at a company with better engineering reputation than the last each year was huge. Additionally, I have two side projects which each included full stack development. 

If you have any further questions please let me know!",1517707105.0,2018-02-03 20:18:25
389,I fucking love supportive devs,830,cojblu,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cojblu/i_fucking_love_supportive_devs/,217,"Inspired by the recent 'I fucking love my career' posts, but I have to say as a fellow lady dev, I fucking love supportive lady devs. On the days when the imposter syndrome is crazy high or when the occasional slight happens, other lady devs have come to my rescue to lift my spirit. So shout out to all the lady devs who lift each other up, compliment each other's code and give each other the 'you're doing great, hun' boost of confidence. I appreciate you. 

And similarly, shout out to all devs who encourage, uplift, and give great constructive criticism. You are awesome.",1565479220.0,2019-08-10 19:20:20
390,"If you've applied x-hundred times, please read this before you make a post.",831,7n2eaq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/7n2eaq/if_youve_applied_xhundred_times_please_read_this/,191,"Every day there have to be at least 5 of these posts about applying hundreds of times and getting no calls. It's your resume, folks. If you're somewhat qualified and are able to market yourself, you *will* get at the very least a phone call out of *hundreds* of applications. So before you make another shitpost, please take this advice!  
  
# Your Resume:  
Your resume **is the issue**. It's likely bland, drones on about insignificant things, and doesn't **wow the employer within the first 2 seconds of reading it**. Here are some steps you can take to improve:  
* Post your resume here on Tuesdays or Saturdays for peer review (**less effective**)  
* If you're in college or have access to a career center, have them review it (**more effective**)  
* Stop using the same damned template as everybody else, take a look at LaTeX websites or make your own. One that I use is [ShareLaTeX](https://www.sharelatex.com/templates/cv-or-resume). *Use a template as is, or for inspiration for your own less-shitty resume.*  (**more effective**)  
* Use action phrases and be pithy (**most effective**)  
* Convey career-related details. Even if you're a student, you can pull some numbers out of your ass that will make your calculator project sound more impressive than it is. Talk about efficiency improvements if at all possible: time, lines of code, or money saved. (**most effective**)  
  
# Market Yourself:  
I was fortunate to be in a marketing organization all throughout high school, so I was at the very least exposed to the thought process behind making yourself presentable and, more relevant to the resume step, selling yourself. You *must* realize that if you've submitted hundreds of applications, you're either unqualified or suck at selling yourself. Here's how you can improve:  
* If you're in college, attend the relevant career fairs and prepare a damn elevator pitch. Read [Cracking the Coding Interview](https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/0984782850), specifically the sections on behavioral questions. Write your elevator pitch with some of those answers in mind. (**more effective**)  
* Carefully assess the *design* of your resume. I know we're mostly engineers in this sub, but some of the resumes I see here are literally walls of text. Use white space to help you, font and font size, and carefully thought out sections and headings to draw the readers eyes to your most important work. (more effective)  
* If you don't have a website with some of your work, or at least a personalized email address, you should very much consider it. It comes off as professional and a lot of employers will, subconsciously or not, prefer that to no website or a gmail. (**less effective**)  
* Contact people. For the love of god, the age of human interaction is not dead yet! You *can*, and should, reach out to potential employers. Whether it be a career fair, a contact button at the bottom of any website, or a friend of a friend, **you should be getting in touch with employers**. I've gotten every job I've ever had through contact: Best Buy, I walked in once a week and reminded them I'd applied online and would appreciate an interview; Codecademy, I clicked the link at the bottom of the site (who'd have thought they actually look at that!); Vanguard, I read a book and name dropped like crazy at a career fair. I disagree strongly with the mindset that it can be harmful to contact employers about an interview, so long as you do it tastefully. If you can contact employers in any way, you're absolutely in a smaller pool of people just for doing so. (**most effective**)  
  
# Target Your Applications:  
If you've applied to anything near 100 jobs, it's likely that you don't know what you want to do. That's fine! But you should, by the time you're ready to apply for jobs, have *some* inclination of the field you'd prefer. For me, I chose back end work and preferably in the finance field. So I **read some books relevant to my field of interest** that I knew could be talking points in the future. John Bogle's ""Little Book of Common Sense Investing"" taught me absolutely nothing about programming, but it got me my first internship because I was able to **name drop and talk intelligently about the field**, as much as you can without being in finance anyway. Here's how you can improve:  
* Read some damn books! This won't help on your resume, but it absolutely will help. For us, the hallmark books of the coding craft are listed in the side bar. Books like [Clean Code](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882), even, will give you some talking points, or some idea of how to craft your resume. (**more effective**)  
* You don't positively *have* to narrow your search when applying, but if you've submitted hundreds, you probably should. Take an afternoon to look into what you've done in the past and what professionals in fields like cyber-security, finance, Web, and others, are working on. Then compile a list of companies, their websites (specifically the about us sections), and links to their resumes. Put all this stuff into an Excel sheet and take the time to rank them in order of desirability. Then make minor changes to your resume to point out that you're their keyword hero, as much as you realistically can. For example, I changed my ""Experience"" header to ""Development Experience"" for some, ""Engineering Experience"" for others, and ""Web Experience"" for fewer. I promise the keywords will make a difference. (**more effective**)  
  
# Conclusion:  
Thanks for reading, please go fix your shitty resume! The **most important changes**  I've made to my resume and job search have been:  
* Using LaTeX (or anything but a generic template/wall of text) for a more custom, marketable look,  
* Reading about my field of interest so I can talk to employers about it,  
* And contacting employers through the means available - in person preferably.  
  
Best of luck!",1514680075.0,2017-12-30 19:27:55
391,"In my opinion, University is still beneficial for a Computer Science career.",834,c86lx1,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/c86lx1/in_my_opinion_university_is_still_beneficial_for/,424,"I know that this topic have been brought up many times before. But I still want to express my own thoughts and opinions on this matter.  
  
It is a trend nowadays, especially in the Software industry, to avoid university, and go do bootcamps, online courses, etc. I understand that this might be very appealing to a lot of people, because many can't afford to go to university. But if you can afford to go to university, even only at a decent one (Harvard is definitely too expensive for most people), I think it is definitely worth it.  
  
The main argument against University, is that a degree don't guarantee a job, and it costs a lot. While yes, it doesn't guarantee a job, neither does bootcamps and online courses. As for the costs, while it may be a bit expensive, if you get internships, you will likely pay all of it off before graduation.  
  
Now this brings me to the biggest reason why University is still worth it. Internships. While you can maybe land internships without being in school, it is way more difficult. Many universities offer co-op or internship programs that allow students to do full-time work at a company. These universities also tend to have strong connections to many companies, making it much easier to land an internship. In my university for example, 90% of my CS class landed internships in their third year. And with internships under your belt, the argument, ""College/Bootcamp graduates have an easier time finding jobs compared to University students"", gets kicked in the ass and thrown out of a window.  
  
Who would an employer choose:  
1. College/Bootcamp graduate that only knows coding, and have little theoretical knowledge.  
2. University graduate that has a lot of theoretical knowledge, backed up by coding experiences and work experiences in internships.  
  
Lastly, a perk of University that I mentioned above, is theoretical knowledge. ""Well, but theoretical knowledge is useless, coding is way more important, etc, etc."" is a dumb argument. Yes, coding skills is important, but if you only know coding, you will become a coding monkey and not much else. If you work on any complex softwares, you need good theoretical knowledge of advanced algorithms and data structures. Of course, College/Bootcamp might teach you those things, but nowhere near the same level and depth as in university where these knowledge are taught to you by top professors. Also, university teaches you a lot of Math, which is hugely important, especially for fields such as Data Science and Artificial Intelligence.  
  
So those were my thoughts on why I deemed University to still be very beneficial for anyone pursuing a career in CS. Of course, for those people who has a successful career in CS with no university degree, props to you. I have a hard time finding people like you, and most of the time, I find people who are self-taught, does bootcamps, etc, to have a difficult time searching for jobs. But that is just my take, no hard feelings for anyone who disagreed.  
So, what are your opinions on this matter?",1562084071.0,2019-07-02 12:14:31
392,I'm a former Googler and current Microsoft engineer (and interviewer) willing to give mock interviews periodically this week.,827,4in6ue,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/4in6ue/im_a_former_googler_and_current_microsoft/,191,"Sorry if this violates the interviews daily thread.

So I'm kind of frustrated seeing the increasing number of ""I'm too stupid to get hired as an entry level engineer"", so I want to try and help with that by giving mock interviews (same interview that I give candidates) + full feedback to those who want it.  Hopefully this will help boost some confidence and give some people tips to improve their interview skills.  Anyone have any interest in this?  Any input on how I should go about doing it?

I might do 3-4 interviews a night starting tomorrow, and probably (even more) on the weekend depending on my schedule.  Here's kind of the priority that I want to give interviews in.  I'll most likely work my way up from new grads without jobs up to mid-level engineers.  Sorry Senior SWEs, I'm not really qualified to give you feedback / a good interview.  I'll do interns if I get the chance.

Here are some details/rules on the interview style (up for change if there's a request for it).

* The interviews will be 30 min and 15 min of honest feedback afterwards.

* I won't give out what hire recommendation that I would would have submitted for you.

* 2 questions: one ""foobar"" style question and one hard one.

* Please be honest with me.  If you've seen the hard question before, please tell me, it won't benefit you at all repeating what you already know.  I'll probably just end it right there if you don't.

* The first 5 minutes of feedback, I want you to give me your feedback on yourself.  I've found success by being able to predict feedback from interviews that I've been in.

* TBD on more if I think of any others.

FYI: I am not representing Google or Microsoft with this.  My feedback and style is of my own, you may have interviews that are completely different (that being said it has worked for me getting offers before).  Just because I give good or bad feedback on your interview, doesn't mean that you should assume that you'll get hired or think that you suck because of it.  Everyone's interview experiences are different.  TBD on more?

So I hope this will help some people.  Maybe it's a stupid idea, we'll see.

Edit: Apparently I can't reddit format :).

Edit 2: Sorry, I should say how to sign up for it.  Just send me a message (for now) with your experience (or resume), available times and current situation (i.e. jobless, new grad, job + mid level engineer, etc).  Please be honest with the current situation, I want to get the people in first who are freaking out about stuff.  Then I'll work towards everyone else.  Sorry for the massive paste of ""Please see this edit"" :).

Edit 3: RIP my inbox.  Based on that + the 98% up-vote ratio, I'm guessing that this will help a bunch of people.

Edit 4 (and a good one): /u/Surfcasper has graciously volunteered to do something similar for PM roles [here](https://www.reddit.com/r/cscareerquestions/comments/4in6ue/im_a_former_googler_and_current_microsoft/d2zl4vk).  Be on the lookout for a new post from me (I'll edit it in here once he posts it), send some messages his way as well.

Edit 5 (11:30 PM PST): I'm cutting it off here for tonight to put together a list.  I'll send out info later.  For any overseas people, I'm not sure if I can really work with the time difference, so I'll send you a time that works for me'ish and see if you're available.

Edit 6: Ugh, so tired (read that is ti red :)).  Finally got through everyone's messages.  I didn't expect that.  Thanks for all of them + the feedback here.  **So I'll start to email people in the morning for tomorrow, and probably will start to email others throughout the week with times.  Be on the lookout here and in your messages for updates.**

So I narrowed it down to 25 people, hopefully I can get through those.  Interns, sorry you're out I'm not going to have time.  A couple of you I've reached out to postpone until later so I can provide further help beyond just an interview.  If I don't get to you, it's either that you're in a good situation and you just don't like it (in this case, I won't have time this time around), or you graduated from from a great school rocking a 3.97 gpa and have 127 offers in your back pocket and you're freaking out about the google interview.  Sorry, please refer to the big 4 sticky for those situations.

On a side note.  A few of you need to watch how you send your messages.  You're not texting me so don't do: ""u, i, 60000 character sentences..."".  It will show when you talk to recruiters and managers, etc... You'll be in a world of hurt when it's time for design docs.

So I'll still be here to talk over the week and maybe pick up a couple more people if I can.  **So when this is all done, I'll post a follow up thread on trends that I see and overall feedback.  No video this time, I'll probably stream it on twitch next time.  Everyone is encouraged to post their experiences and feedback on that thread.  When I get done interviewing someone, please don't share the questions with others until I make that thread.**

Edit 7: Gilded!  Thank you kind stranger :).  This is ridiculous, hands down my most popular post ever.  Holy fuck you guys are relentless, alright I'll live stream the interviews when each person gives me permission.  **My only stipulation is that future interviewees don't watch.**  I want to interview you when you don't know my questions.  For everyone else, [this page](https://www.twitch.tv/twitchlearnsprogramming) is my twitch channel.  **I'll probably start live streaming at 7pm every night (with the exception of maybe tonight) into the weekend.**

Also as an edit to edit 6, interns and grads with current jobs may not be turned away just quite yet.  Someone volunteered to help me out with that.

**May 10th Sessions and Updates**

I plan on starting at 5:30 today on twitch to do a Q&A then roll into the interviews.  I have 3 spots today filled.  7, 9 and 10 (with a break at 8).  I sent out 5 invites to fill the ~~6PM~~ and (potentially on how I feel) 11PM spots.  All in PDT.  So please check your messages and send your skype account and if you feel comfortable being on stream.  If those two spots, anyone who messaged me before the cutoff yesterday, feel free to reach out to fill those two spots (first come first serve).

~~**Live Now**~~  Thanks for coming out everyone.

**May 11th Sessions and Updates**

I'll be starting at 7 today (with a potential 6:30 Q&A).  It'll be live streamed again on twitch. The four spots have been sent out so please check your messages.

**May 12th Sessions and Updates**

/u/ashyre has graciously offered to take some interviews off my hands.  So I'm going to take a break and tonight's interviews will be streamed from [his twitch channel](https://www.twitch.tv/ashyre).  The invites have been sent out for today.

**Friday the 13th Streaming**

I'm back to steaming.  Good to have a day off.  I'll be starting today around 8-8:15'ish.  I'm only doing 1 official interview today (doing some over the weekend as well) but will be taking walk-ins as well / Q&A.

**May 14th Updates**

Sorry, I couldn't get around to streaming today.  Didn't feel all that great today, basically spent the entire day catching up on sleep and will continue tomorrow.

**May 15th Updates / Streaming**

Phew, final day.  I'll try and start around 4:30PM today.  I'll send out invites before that I hope, but today might be more of an on the limb type of thing.  I'm looking at using Google forms or something to keep track of people and send out notifications if they come up.  If you haven't been interviewed yet, I'm sorry there was a lot of you, hopefully that'll change later.",1462876796.0,2016-05-10 06:39:56
393,I did it!,827,cxgh71,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cxgh71/i_did_it/,60,"After many years of small projects, 3/4 of a SE degree, and lots of social networking I finally start as a Backend Software Engineer on Tuesday!  I'll make a bigger post with more details soon, just wanted to tell some folks!

UPDATE: [https://www.reddit.com/r/cscareerquestions/comments/cyi65o/got\_my\_first\_dev\_job\_follow\_up\_post/](https://www.reddit.com/r/cscareerquestions/comments/cyi65o/got_my_first_dev_job_follow_up_post/)",1567198205.0,2019-08-30 16:50:05
394,"Getting ripped apart in code reviews, is this normal?",826,9hakaz,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9hakaz/getting_ripped_apart_in_code_reviews_is_this/,260,"I'm currently 3 weeks into my first ever internship and I'm getting ripped apart in code reviews. It's getting to the point where it's seriously impacting my confidence and making me hate going to work. Here are some quotes from my most recent submissions:

>This logic is entirely incorrect. Delete [these lines] and start over. 

>Wrong.

>You really don't understand what you should be doing, do you?

They're not wrong but these comments aren't even helpful. What am I doing wrong? How do I fix it? I've tried asking some engineers in person but they give me this really technical description and I feel even lost after. It also leaks into real life. Like I raise my hand to ask a question during a meeting and one of the engineers rolls his eyes and groans. It doesn't help that there are 4 other interns here and I'm by far the worst (also the most inexperienced to be fair, I don't think I'm less intelligent). The other interns are nice to me but I think they deep down feel bad for me and also wonder how I got hired. I need help with really basic stuff like writing my Makefile, using linux command line (only been using GUI before this internship), how to run my programs, etc. It's all new to me. Am I wrong to think my coworkers are being too savage? It's not like I lied on my resume, two engineers interviewed me and gave me an offer and now they're shitting on my code like wtf did you expect. I guess I'm learning a lot but can't these people just be nicer about my mistakes? ",1537431586.0,2018-09-20 04:19:46
395,Name and Shame: Bank of America,823,9dl5vl,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9dl5vl/name_and_shame_bank_of_america/,155,"I interviewed with Bank of America last year for a Software Development internship.

&#x200B;

First round interview was on campus. This interview went fine and was with two mid-senior level engineers. They asked language trivia and behavioral questions.

&#x200B;

Next round interview was a ""superday"" in NYC.

&#x200B;

Got there and met one of my interviewers from on-campus at a snack/drinks reception. He was drunk talking to 7+ candidates about how he was only in it for the money.  Everyone was clearly uncomfortable.

&#x200B;

Next day I have my 2 interviews. I get into the interview and the first thing the interviewer said to me was ""I'm really not sure why I'm interviewing you. It definitely should be someone on the development side. This is an interview for a Risk Management Analyst.""

&#x200B;

From that point I answered 3 of his behavioral questions and he froze up as he had no more questions. This was literally 5 mins into a 30 minute interview. I then had to essentially conduct the interview myself asking him about what he did (business analyst) and talking about my side projects for the remaining 25 mins. The fact that he wasn't technical at all didn't help.

&#x200B;

The next interview went similarly. This time the interviewer was more social and kept questions coming, despite being completely non technical. I spent most of the time answering her questions about ""How can a machine really learn?"". She was also a business analyst.

&#x200B;

With both interviewers, I stressed that I was interested in a developer position and they assured me that they would talk to the right people.

&#x200B;

7 days later I get an update that I was waitlisted (not rejected) for a business analyst role. Sent multiple emails to BOA asking if I was being considered for a development position. Recruiter wouldn't give me an answer and dodged the question multiple times. Update 2.5 months later with rejection for business analyst role.

&#x200B;

EDIT: More information to address some comments I've seen

\- The title of the job was Technology Analyst. I was then switched (I assume unintentionally) to Business Analyst by the time of my final round.

\- During first round on-campus, we discussed language trivia, version control, personal projects, languages used, etc. It was clearly a development interview. They explicitly said they were interviewing me for a development position.

\- During final round, both interviewers told me something had clearly gone wrong.",1536285292.0,2018-09-06 21:54:52
396,"""A little bit every day""",828,h7mizl,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/h7mizl/a_little_bit_every_day/,138,"So I was reading through some old reddit threads about ""Do you do any programming outside of work?"", and I kept coming across answers/upvoted answers of people who ""code 10-20 minutes a day, but it adds up fast""...

Not trolling here, but people who do this, HOW on earth do you do this? I feel like ""10 minutes of coding"" is about long enough for me to load up my repo, load an IDE, and then read over some stuff, and then start to remember what I'm doing, and then 10 minutes would be up. If I was trying to learn something new, that would be maybe enough time to look up a tutorial, lol.

So people who do this, what exactly do you do for ""20 minutes a day""?",1592003703.0,2020-06-12 19:15:03
397,Leetcode Arms Race,828,degxxd,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/degxxd/leetcode_arms_race/,394,"Hey y'all,

Does anyone else get the impression that we're stuck in a negative cycle, whereby we grind hard at leetcode, companies raise the bar, so we grind harder, rinse and repeat?

Are there people out there who are sweating and crying, grinding leetcode for hours a day? 

It seems to be a hopeless and dystopian algorithm arms race for decent employment. 

I've just started this journey and am questioning whether it's worth it.",1570468300.0,2019-10-07 13:11:40
398,Where do all the average/below average graduates get a job?,823,d1u6v3,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d1u6v3/where_do_all_the_averagebelow_average_graduates/,400,Most of the posts in this subreddit and other places on the internet are about people who get internships/jobs at Big N companies or are from some Ivy League college top of their class. I want to know about the average/below average/slightly above average students like myself. How fast did you get employed after graduation? What is your pay? How do you feel at work in regards to your competence? What did you do after college to secure a job/internship at a Big N company?,1568079621.0,2019-09-09 21:40:21
399,"I just went through the worst prod fire/outage i have ever dealt with. I am utterly baffled by how little most of the other senior developers seem to care, and some are even angry at me for disturbing them?",818,d4jk8v,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d4jk8v/i_just_went_through_the_worst_prod_fireoutage_i/,406,"Basically i was on call this weekend, i watched prod burn for almost 8 hours, 8 hours of product was offline. I literally had pretty much every other part of the company from marketing, to sales, to our CEO, CTO, etc hounding me.

We have \~11 other backend developers aside from myself, and after blowing the emergency Horn of Gondor, only 1 of them actually came to help. I watched a few of them poke their head in on slack, gave me the most benign answers ""Sorry i am having dinner with family, can't help"", to ""Sorry i am out"", to ""I would love to help but i am looking after my kid"". 

It took almost 8 hours for me and my coworker to make prod not on fire, since this is the one area of our backend i know very little about. Even then our ""fix"" is a shitty bandaid on a gaping wound. After a few hours of sleep i basically have to spend all day doing DR.

However the part that gets me, the two people who are experts on what broke basically wrote me messages basically chewing me out for disturbing them. One of them even kindly CC'ed our CTO on an email basically lecturing me on what ""on-call"" means. 

Am i crazy? Or is this bullshit?",1568577777.0,2019-09-15 16:02:57
400,Following this sub's advice is destroying my mental health,823,i9qfam,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i9qfam/following_this_subs_advice_is_destroying_my/,469,"I graduated in June, and everything is a shitshow.
I had an offer pulled in March, and have been applying to 20 or so jobs a week ever since.
If you are in my position and post here for advice, you are *very* often told that ""it's a number's game"", and that you just ""need volume"".

Let me tell you: I've spent 5 months applying to as many jobs as I can find, contacting and being ghosted by recruiters on LinkedIn, grinding Leetcode, and building personal projects to pad my resume.
*This shit doesn't work right now*.
I have only had *a single* interview in this time, and it was because a friend of mine referred me for a position.
That fell through because they were looking for someone with an Master's, but the point still stands.

*Everything that this sub has told me to do has been useless.*

I reached a breaking point this week after being ghosted by the nth recruiter, who just no-showed for a scheduled phone call.
The world is a shit show right now, and there is nothing anyone can do.

My advice is to literally *give up on trying to find a job* if you are a new grad without a connection to a major company.
From what I can tell, there is nothing you can do.
I'm going to apply to my local coffee shop and work there.
It's easier to worry about that than worrying about why my 400 or applications have had zero responses, and questioning if I'm just worthless or not.

Go get a Master's, or something, don't do what people here tell you to do.
You'll have a nervous breakdown like me, after some amount of time.
It's nobody's fault, but it *isn't possible to be hired right now*.
Don't let people here tell you it is, and *don't* tell yourself that you're doing something wrong, or not putting in enough effort, because *you can do everything right and still fail miserably here*.

---

Edit: It's hilarious to me that every single reply is someone sitting with a comfy job telling me I just need to ""try harder"" or ""not give up"", as if the whole point of this post isn't that I *have been doing that for months with no fucking results*.

Believe me, I've tried everything.

- I've tuned my resume to the point where the advice thread said it was ""good"" (which is fucking hard because everyone there is amazingly critical of minor points).

- I blow by Leetcode hard questions easily. This skill is pointless because I haven't gotten any fucking interviews.

- I've made a blog, written posts about technical topics, shared them on LinkedIn and other places to boost my technical credibility.

- I've gone through three personal projects to pad out ""new skills"" into my resume to better fit what I perceive the job market to be.

- I've weaseled myself into contact with recruiters from ten or so different companies. *Every single one has ghosted me thus far*.
Oh, and btw: these 10 only count those who I've had some sort of back and forth messaging with.
I've sent out messages to likely 50-100 other recruiters who just simply ignored my messages.

I don't want to hear ""everyone gets ghosted"", or ""try harder, your chance will come"" because it fucking WON'T.
New grads are invisible in the current job market.
Nobody wants to train them, and all the eyes are on talent who are being laid off.
So fuck off with that ""I get contacted by recruiters all the time"" or ""I know people who were hired recently"" because they almost DEFINITELY weren't new grads.

---

Edit 2: I *did* do an internship, at the wrong place.
I worked unpaid, wasn't given any real development experience, or even a fucking code review.
Obviously I got unlucky there, but it does nothing for me.

And it's cute that people think that just because one person said my resume was ""good"" that I would think that it's good.
I've fucking *agonized* over my resume for the last *year*.
I've written, re-written, and edited it so many god damn times, through so many resume advice threads.
I have asked for opinions on it from practically everyone I know, down to the most minute details.

Nothing is perfect, but it's absolutely insulting that some of you would think that my *resume* could be what's holding me back.

And yes, I live in a major tech hub.
I'm from here, it's my home, but I also gave up on getting a job here months ago and have been applying all over the country.

---

Edit 3:
I really appreciate all the people who have DM'd me offering resume advice and even a few who offered to forward my resume to a recruiter.
To be honest, I don't think that linking an angry, miserable post like this with my real name is going to do me any favors, but I appreciate the thought, anyway.",1597455354.0,2020-08-14 21:35:54
401,"What defines ""very strong side projects""?",820,jhuq4q,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jhuq4q/what_defines_very_strong_side_projects/,247,"I keep seeing mentioned that having good side projects are essential if you don't have any work experience or are not a CS major or in college. But what are examples of ""good ones?"" If it's probably not a small game of Pong or a personal website then what is it? Do things like emulators or making your own compiler count? Games?",1603666838.0,2020-10-25 19:00:38
402,"Just started new job, my mentor works remotely and only has time for me at extremely frustrating hours. Today she told me i was not ""committed"" and ""wasting her time"" and recommended me to find a new job. Wtf am i supposed do?",814,ax3g2d,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ax3g2d/just_started_new_job_my_mentor_works_remotely_and/,157,"I started a new job 2 weeks ago, the job gave me a substantial pay bump and the position was for a role as a senior fullstack developer. I was interviewed by my current mentor along with other people and at no point was it ever indicated that my mentor actually lives on the other side of the country, nor was it ever communicated that my ""mentor"" is only going to have time for me at extremely shitty hours.

Now, i am a fulltime dad with two baby girls, when i was interviewed i stressed this fact and was repeatedly told no problem.  Only when i started 2 weeks ago did i learn that my mentor actually lives on the west coast (i am east coast), this person from what i can tell is basically untouchable and has been with the company since it started. 

My mentor seems to actually start work at around 2-3 pm my time  (but shows up for stand up at 1 pm). Since i have started she keeps making meetings to bring me up to speed at times like 7\~10pm my time. I have told her repeatedly my hours and the fact that i am a dad, however it doesn't seem to matter at all.

After talking to my manager, another senior developer took up the task and brought me up to speed. Which was fine, by last Friday i had submitted about 3 PR's for various issues in our sprint. Unfortunately my mentor has blocked every single one of those PR's with vague comments that nobody can explain to me why, nor does she want to explain to me. I called her out during a stand up because i was fed up and frankly this is shit behavior, which seems to have pissed her off. 

Since we had plans to release by end of next week, i agreed to do an actual session with her today (sunday). Unfortunately almost immediately after starting it my kids started having a meltdown so i told them to give me 5 mins, so i can fix this. 

When i came back she ended the hangout, and sent me a slack message accusing me of ""wasting"" her time, and how i am not committed. Furthermore she recommended i find another job because she doesn't think i am the right person for this role. 

Frankly i am irritated beyond belief, however i get along fine with all my other coworkers and the person who set me up told me to develop a ""thick skin"" because apparently she is notoriously difficult to work with. 

If i sat down with my manager what are the odds i can keep this job? ",1551706078.0,2019-03-04 08:27:58
403,PSA: TAKE A BREAK FROM CODING AND GO OUTSIDE FOR SUNSHINE EVERY ONCE IN A WHILE,819,83edjf,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/83edjf/psa_take_a_break_from_coding_and_go_outside_for/,189,"Hi, as a iOS dev that now has autoimmune disease, I want to let you guys know that you NEED to make sure your vitamin D levels aren't low. You need to take breaks from coding to go outside every once in a while to get some sunlight on your skin, or better yet, code outside if your work permits it. You need to take multivitamins. You need to drink your milk. All to make sure you don't have vitamin D deficiency. 

Smarter people than me have done many studies that correlate vitamin D deficiency with autoimmune disease. Indeed, vitamin D plays an important role in regulating your immune system (specifically, the regulator T cells that affect immunotolerance) and having low levels of it can put you at higher risk for autoimmune disease.

https://www.ncbi.nlm.nih.gov/pubmed/23238772

http://www.scielo.br/scielo.php?pid=S0482-50042010000100007&script=sci_arttext&tlng=en

https://www.telegraph.co.uk/news/health/10686624/Vitamin-D-could-it-stop-modern-diseases.html

As a software dev, it's *very* easy to fall into routine where you don't go outside much. You're stuck in a building 8 hours a day. Often times, there's not much natural sunlight that comes in and hits your desk. You work all day, by the time you're done and have free time, it's already night time. Maybe your diet doesn't include a lot of vitamin D in it. Maybe you don't go out much on the weekends except to drink at bars. When I transitioned from my old life as a college student and settled into my new life as a software engineer, this became me. My doctor's told me that I had really low levels of vitamin D.

In school, our computer lab was called ""the dungeon"". People would sometimes make a comment that they felt sicker sitting in there coding all night for programming assignments. I originally thought they were just joking. Now I realize, they were being serious.",1520705668.0,2018-03-10 13:14:28
404,Should partial WFH become the norm (not just in our industry)?,819,fzz6js,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fzz6js/should_partial_wfh_become_the_norm_not_just_in/,188,"I was thinking about this today. I wonder if after this virus the ideas around work from home and remote work will change and so will how we work in general. Do I think that we will have some sort of revolution where offices are eliminated and every major company is run remotely? Hell no. But I do think that with this global pandemic and the forced trial period of WFH for pretty much everyone in America and all around the world right now, we're going to come out of this with a changed perspective on what remote work is, how it should be done, and benefits and pitfalls. 

Now I'm going to be optimistic here, very optimistic. But suppose that in the next 5 years, most companies in the US (lets say major US cities) decide to institute a partial WFH schedule where employees that can work remote will do so 2-3 days per week. Imagine the impact on traffic in your city if all of a sudden say 80% of the suburban population stopped commuting to work 2-3 days out of the week. I'm not sure exactly what the average drop in traffic would be but I can see that it won't be insignificant.

Another benefit I could see is say you have a fairly large SASS company with a footprint of 1000 employees. If only 300 ever showed up to the office on a given day, you could effectively downsize a 1000 person HQ to a  300 person HQ, significantly lowering facility cost and upkeep. Looking at this  realistically I don't think any FAANG companies are going to benefit from this that much, I would imagine with how much revenue companies like Google, Amazon and Microsoft are bringing in, the cost of upkeep on their headquarters must be an acceptable amount and they aren't suddenly going to divest from any headquarters they've invested in (ie Apple is not moving out of Apple Park into a WeWork).

However where I see this being of great benefit is for current SMB's and future developments from large companies. I could totally see an agency decide that it would be better to move from their 100 person office to a 25 person office, have everyone in only on days they are needed, and save big on rent in whatever major city they are in. As for future developments, while Apple might now downsize their current footprint, companies of that size may choose to use a WFH model to create a smaller footprint in new cities.

&#x200B;

Idk what do you guys think?",1586735831.0,2020-04-12 19:57:11
405,As a developer what computer were you given?,814,jenuh4,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jenuh4/as_a_developer_what_computer_were_you_given/,602,"I work for a Fortune 500 bank as a software engineer. They gave us ancient laptops with old dual core i5s and 8 GB RAM. The worst part is the drive is 128 GB. It was delivered to me with 8 GB available and no way to free up more space. Applications that I work on can just barely run on this and it reduces productivity with apps constantly crashing and having to fight for disk space. It’s extremely frustrating. 

Is it common for a company to issue such basic laptops to developers? What laptop were you given?",1603223072.0,2020-10-20 15:44:32
406,How can someone go through a CS degree and not be able to code?,816,anqc2v,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/anqc2v/how_can_someone_go_through_a_cs_degree_and_not_be/,891,"I'm responsible for an intern that did a CS degree and claims to have 3 years of experience with web dev, but she's unable to write a single line of code and seems unable to think in a ""coder"" way. I just spent 5 minutes explaining all the characters in ""http://"".

&#x200B;

How can a person that went through a CS degree not be able to perform at the most basic level?",1549485814.0,2019-02-06 15:43:34
407,What do you say during standup if you didn't get anything done the previous day?,811,hlpsxc,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hlpsxc/what_do_you_say_during_standup_if_you_didnt_get/,283,"Sometimes, for whatever reason, I don't accomplish anything in a day. In those situations, during the following day's standup, I don't know what to say. The team might as what was blocking me. If there was a technical problem, then I feel comfortable saying that. Thats fine. I probably actually raised that on slack.

However if I merely spent the whole previous day wallowing in self-pity and suicidal ideation, thats trickier. I don't want to make it my team's problem, but I also just.... have no idea what to say. Usually, after an unproductive day, this motivates me to stay up late and try to make up for the lost time. However, sometimes I have therapy after work and that eats into the time I can spend trying to write code. Also, the sleep deprivation, lack of exercise, and loneliness (my marriage would be totally collapsed except she needs to stay with me for my work visa) has increased my frequency of unproductive days. I have concluded that I need to have something to say even if I did *not* make up for lost time.


What do you generally say in that sort of situation?",1593996712.0,2020-07-05 20:51:52
408,Dropbox internship cancelled,810,g5uwfc,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/g5uwfc/dropbox_internship_cancelled/,138,"Poor guy on LinkedIn just put this up:

“I write to you with good news and bad news. 

The good news is, this is my first public post on LinkedIn (exciting!)

The bad news is that unfortunately, Dropbox has cancelled my internship for this summer due to COVID-19. I am now actively looking for a Software Engineering Internship for Summer 2020.”",1587559816.0,2020-04-22 08:50:16
409,"A letter to all ""Please write an original 40-60 word poem about your current or most recent job into the text field""",815,9tyyaj,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9tyyaj/a_letter_to_all_please_write_an_original_4060/,134,"... What the fuck???

&#x200B;

Edit: Downvote me all you want. This is a joke of an application. Complete turnoff for intern applications 

Edit 2: to all asking, company was Hyland ",1541317886.0,2018-11-04 02:51:26
410,Is it normal to have very little problem solving on the job?,811,i1lx4l,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i1lx4l/is_it_normal_to_have_very_little_problem_solving/,261,"I've been working as a dev for a year now (just started my second job and I had two internships prior to these), and so far *all* of what I do is fairly mechanical programming. Like... building an API, grabbing data from a database and putting it somewhere else, parsing out pieces of the data and displaying them... all I really do is google ""how to do a,b,c in framework or language x,y,z"" and then copy the code and adjust it a little.

I haven't used *any* of the algorithm techniques from my classes. I don't do any tricky programming or complex problem solving. It's all just super rote stuff. Is this how most jobs are? I mean, it's fine. But it's not what I was expecting when I was busting my ass trying to understand dynamic programming and solving a lot of the really complex problems from my classes. I assumed as an intern I just wasn't being given the more complex tasks, but it seems that hasn't changed as a junior lol.",1596283336.0,2020-08-01 08:02:16
411,"2 years into career, the mental impact of being in front of a computer for 8+ hours a day",808,dhi1d8,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dhi1d8/2_years_into_career_the_mental_impact_of_being_in/,228,"After two years of just staring at the screen, alone at my desk, coding, for 8+ hours a day, barely interacting/talking with people, not meeting new people, not building meaningful relationships, I'm feeling more and more mentally unhealthy.

I'm sure most people out there would trade their job for mine given the money and the coziness of just sitting at a desk. But this is not normal. Human beings aren't supposed to live like this. Life is supposed to be socially vibrant, we need other people to keep us sane, to relate to. 

I try my best to enjoy the dreadfully boring 5 minute daily meetings we have, and socialize out of work, but living like this for 8+ hours a day, day in, day out, I'm starting to realize the impact. The beginning was all excitement, the money, getting the career/job you worked hard to get. But what the actual f*ck.",1571036814.0,2019-10-14 03:06:54
412,Just had the worst recruiter experience in my life,802,hnkv6c,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hnkv6c/just_had_the_worst_recruiter_experience_in_my_life/,137,"I've been in the industry for over a decade. In that time I had dealt with a lot of bad recruiters, but recently I had one take the cake. He sent me a message on LinkedIn and we setup a time to discuss a potential role. His profile showed that he was a local recruiter who worked for himself and he was located a few neighborhoods away from me (or so I thought). Here is what transpired:

- I asked about what the company did. He told me, ""Well do you remember that mass shooting in Las Vegas? This company insures venues like that"". Didn't expect the call to start off with a mass shooting reference but ok....

- Spoke about the job duties. He said ""we want you to write unit tests for another developer's code"". I told him that the dev's that write the code usually write the unit tests and I would love to have a further conversation with the company if they wanted to talk tech. He said no, this is a hard requirement, I have to write unit tests for other people. Ok that's fine I guess...

- He told me the last person in the role only lasted 6 months, and that the CIO was a hard ass who would grill me during the interview. Um ok.... not exactly selling me on the role....

- We talked about the commute. I was taken aback, on LinkedIn he told me flat out they were open to working from home. He then told me the office is 2 cities away. I told him I didn't want to go into an office anyway due to COVID (the state I'm in is in the worst shape since the pandemic started) so this is a deal breaker. He told me, ""well you're working from home now but keep in mind how lucky you are. That's not going to last."" What the FUCK? There are over 5000 cases in my county and you want me to go into an office 2 cities away and then guilt trip me?

- He emailed me the job description and I clicked the link to his recruiting firm in his signature. It led me to a site that was flagged for a virus. Uh oh, I hope this wasn't an elaborate scam. The company we were talking about was real and they have a job posting up but now I'm skeptical. I was never asked for a social, credit card, or anything of that nature so perhaps he's so fucking incompetent that he doesn't know his site has been hacked.

What a fucking ride. Recruiters haven't become this slimy during COVID.... right? This surely can't be the new normal?

Edit: just saw this same guy spam one of the meetup groups I'm in. No shame at all.",1594256660.0,2020-07-08 21:04:20
413,"Those of you still looking for internships, DON’T EVER GIVE UP.",799,eoq42p,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/eoq42p/those_of_you_still_looking_for_internships_dont/,128,"No matter how hopeless it may seem, no matter how incompetent you may THINK you are, and no matter how many rejections may come your way, NEVER give up. Don’t be discouraged by the one-percenters that are getting overwhelmed by offers. Everyone has a different path to their own version of success and don’t ever let anyone tell you otherwise. Success isn’t FAANG, nor is it a job at a Unicorn, Fortune 500/100/50. 

Take it slow when things seem hopeless, and don’t freak out. Because for those of you looking for internships, there are still FOUR months left. That’s 4 months left of refining your resume, practicing more leetcode (however annoying/arduous it may seem), and just bettering yourself as a programmer. It doesn’t matter how many offers you get because at the end of the day you only get to choose one. 

There has been a lot of discouragement lately on this subreddit and I just thought I’d really give it to y’all straight. We are all just trying to make a living and realizing our passions. Just keep pushing because I promise you after that one phone call and a cringey solo dance in your room, you’ll know that it was all damn worth it.

Don’t. Ever. Give. Up. 
There is still time left and I promise you there are many opportunities and many rocks you have left to turn over. 

Even if you don’t receive anything, don’t let it get to your head. It doesn’t not define you as a programmer whatsoever and there are so many random factors that play into a recruitment process that you shouldn’t feel hurt or rejected after a bad season. In the long run, it won’t play too much into your career and as long as you keep your head up and look to improve upon your current state, life will go on. But don’t let one bad recruiting season turn you away from your programming passions. 

I’ve been at the bottom. I know I’m still not as good as I want to be. But maintaining good mental and continuing to push has made my journey that much better.

I BELIEVE IN YOU GUYS.",1579059181.0,2020-01-14 22:33:01
414,"If you haven't found an internship or job, don't underestimate professors as a resource.",809,a7elhw,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/a7elhw/if_you_havent_found_an_internship_or_job_dont/,58,"After turning in my final, I asked my professor if he'd be willing to meet with me outside of class to provide me with some career advice. We met a few days later and had a good conversation that I wish I would have had much earlier. At the end he said, ""If you're looking for a position at the end of the next semester, there's always an opening for you as a summer intern at my company that could easily lead to a full-time position."" 

No phone screen, no technical interview. 

Your professors, especially those who work in some capacity in industry, are amazing resources who already know your capabilities and are high enough up in organizations that their recommendation will carry serious weight. I am still exploring my options, at his encouragement, but the knowledge that I've got something in my back pocket has taken off a lot of the pressure. 

I don't post often so I'm sorry in advance if I broke a rule or come off as a humble bragging ass.",1545191922.0,2018-12-18 22:58:42
415,"I was fired from my first programming position, went through unemployment, now I work at a Big N. Some advice for people who are ""worried""",807,7e5vb4,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/7e5vb4/i_was_fired_from_my_first_programming_position/,79,"Bio Plug: Graduated with non CS engineering degree from a high ranking school. Hated the field once I worked in it. Visited a friend who was working at a growing SAAS company, now works at Amazon. Loved the environment. Younger people, happy, always new stuff talked about. Studied programming on my own. Passed an interview test, they realized they needed someone more experienced two weeks after I started and fired me after I spent my savings relocating. I was devastated.  
I've also gone through working at a start-up who VC's pulled out from, working at a contractor that started firing veteran employees because management lost a 7 figure contract and now I work at a Big N.  
Here's my advice for the people going through the following stressful situations/tragedies -  
**TLDR Advice -  
For job hunters:  
1. Send out as many applications as you can, even to positions you don't qualify for and the ones you match the most, pay more attention to.  
2. Try to divide your time between accomplishable studying goals and applying.  
3. Be willing to relocate even if you have family, close friends, SO.  
4. Relax and don't blame yourself.  
For those working that are worried or wondering if there's problems:  
1. Got a bad feeling in your gut? Listen to it.  
2. There's nothing wrong with putting a value on loyalty.  
3. Communicate with your boss when you're unhappy, albeit professionally.**  
Detailed -  
**For those trying to get a first job, that seem to never see the end of rejections**:  
1. Send out as many applications as you can, even to positions you don't qualify for and the ones you match the most, pay more attention to.  
I sent out *hundreds* of applications. And when I found a position I really matched, I made the application as personal as I can, often naming the engineering manager in my email, pointing out my knowledge about tech they use and discussing their portfolio directly and relating it to my knowledge.  
It sucks when you make an application personal and they don't acknowledge you, but it's worthwhile experience learning to talk about the tech for future interviews and it *also* sucks for them, to turn down someone who made things so personable.  
2. Try to divide your time between accomplishable studying goals and applying. Pick an MOOC, and ONE only, and spend half your time applying to jobs and the other half on conquering that MOOC. Don't even LOOK at other classes on Coursera until that MOOC is finished and you've completed the final project.  
I did a complete book on a platform I know, and I even did an iTunes University course on DS&algorithms. I never moved on until I finished one.  
By the time I started my first real job after being fired, I had finished 5 courses and knew the in's and out's of my platform enough to talk about it in regular conversation.  
3. Be willing to relocate. Some of you have family, or a girlfriend, or a close group of friends. I'm sorry to tell you this, but you are more of a burden to them than help if you're unemployed especially in the US. The US is harsh and brutal to people unemployed. More so nowadays than before.  
If you relocate, get a job in a low COL, you can save money for plane tickets, fly your SO to come see you, learn more about the world outside of what you know and get experience to come back later.  
I really wanted to work in my college city, so badly that I was willing to take a 20% cut in pay under market rate to do it. That would've been a massive mistake.  
Now, I get job offers for my college city 20 to 30% above what I earn now because I've earned experience and I'm in demand.  
I've lived in three different cities after I graduated because I kept going where the work is.  
You would be surprised what a company will do for you if you're the best person for the job that they can afford. Early termination lease fees, rental truck, plane ticket, crate for your dog, groceries and beer money for two weeks? Done.  
It's true that my first job fired me, I'll talk about that soon. But the next three companies? Hired me, helped me move, took care of my expenses.  
4. Relax and don't blame yourself. No, you're not a shitty programmer. No, you're not ""worthless"" compared to your friend who got hired by Facebook pre-graduation.  
There are literally *thousands* of alumni and bootcamp graduates just like you having trouble getting placed. A lot of companies want Gilfoyle at McDonald's employee prices and it's showing. Companies think that if they hold out enough, they can get some guy who passes all their HackerRank tests who will be okay with $50,000 a year and be grateful because the economy sucks.  
In reality, they're just going to sit around with a job posting for programmers and complain that engineers ask for too much money. Forget about those places, you wouldn't want to work there anyway.  
Focus on the companies that can afford you and deserve you.  
But take time after a busy day of applying and studying to just relax. Go to a friend's house, watch some movies, do yoga, play your favorite game and turn off messages and emails for an hour while you do it. This job is stressful and if you build in this sense of urgency and panic and engrain it too much, you will have trouble relaxing in the future and put yourself at risk for very serious heart conditions.  
**For those who have a job and are unsure about going for something else, how safe their office is or worried about getting fired**:  
1. Got a bad feeling in your gut? Listen to it.  
Is there a guy/girl that works with you that acts like you should never complain about management, work is work and management never does anything wrong?  
Yeah, fuck that guy. That guy is an idiot and in a year or two, you'll be twilights and galaxies ahead of him/her in your career because they would sit around on the titanic playing the violin while you're clawing your way into a life raft.  
There's *NOTHING* wrong with listening to your gut. It doesn't mean you're going to quit if you start asking serious questions and start wondering what's going on with the weather forecast.  
My first company was a start-up. At a certain point, I noticed the founders would go into meeting rooms and not invite any of us. I got a little worried so I started asking my PM for meetings and asking my mentor if I should be worried.  
My coworker on another platform kept saying, ""Dont' worry about it we just need to do our job"". Total company man.  
I decided it's better to be safe than sorry and it's better to have job offers I can turn down than be in the middle of the woods with explosive diarrhea and not a tissue in sight.  
So I started putting out feelers with recruiters, I took on five interviews and I had four hard offers for local companies, all at a minimum of $5,000 over my current salary.  
At the end of that month, founders dragged us all into a meeting room and told us they lost funding and half of us were gonna be fired and they wanted the engineers to work pro-bono for a few weeks on like a ""salary IOU"" while they try to package up our platform and sell it.  
Company man next to me? He had the same look on his face that my friends had when we walked out of a hard calculus 3 final that they bombed and I talked through all my solutions in confidence because the questions were exactly like the ones I got in TA hours, that they skipped because of how much smarter than me they were.  
Luckily for that asshole, who treated me like shit because I wanted to cover my ass, I actually gave his information ""anonymously"" to the same recruiter who placed me and told her, ""Hit him up and be persistent, he's a good coder he just doesn't see the writing on the walls"". My recruiter landed him a position and to this day he doesn't know how the recruiter found him.  
2. There's nothing wrong with putting a value on loyalty.  
[This is what I have to say about loyalty, per Dwight Schrute](https://www.youtube.com/watch?v=8QWsTBvXx_g). Care about you and you only.  
Like your boss? Like your office? Say things like, ""I don't want another job because unlike you guys, I commit to the place I work"". Let me ask you this, will your boss come to your house and carry you to the bathroom when you're retired? Will your boss drive you to pick up groceries when your car breaks down?  
Your company, in the US, only cares about you as much as your value proceeds the worth of your compensation and training. Once those values do not align, *the clock is ticking and you will likely be fucked over soon*. That's the advantage ""at will"" employment gives them.  
They can fire you and unless they tell you publicly, ""I'm firing you because of the color of your skin"", you likely have very little recourse to correct it.  
And they can literally fire you with less than 24 hours notice.  
Your lifestyle? Dependent on your salary? Unemployment insurance is likely a fraction of that amount, so firing you can literally put your life and livelihood in danger.  
Always have a back up plan even if you don't feel like your company is in danger.  
Speak to recruiters, build relationships with other companies in your cities. Always have someone or some company who thinks, ""Man, it'd be nice to have code_4_you here working with us, let's see how he/she is doing"". Those connections are your natural parachutes and help you to not have to relocate again.  
3. Communicate with your boss when you're unhappy, albeit professionally.  
There is nothing wrong with not being sure about what you're doing. Sometimes your boss won't even know there's something wrong. A lot of managers, albeit this is a mistake and any managers reading should pay attention to this and not do it, don't tell their engineers the small combination of words that will make over 40% of them feel happy and STOP looking for new jobs -  
""You're doing great, we're really glad to have you here, this is some of the stuff we have planned next year for you.""  
That's it. Literally 8 seconds of English words and your engineers will feel safe, secure and stop hitting up your competitors for back-up plans.  
That's what my boss said to me two months ago, and now I'm working the longest streak at one company of my career.  
If you don't feel that way, tell your boss, because this paper trail gives you the defense you need to show that you DID try to communicate your dissatisfaction. And it's possible they will try to remedy it by changing your project, putting you under a new senior or offering you some extra PTO to sort things out.  
My story:  
Adapt is the theme of my experience. I was fired, I adapted. I got a job and had a bad feeling about the VC's/founders, I adapted. I got hired by a contractor and had a feeling there was toxicity in upper level management, finally felt ready to work for a Big N, I adapted.  
Now I love what I do and I'm highly valuable.  
Good luck out there!  
Oh and if anyone tries to convince you that we don't deserve these six figure salaries or earning more money than most of their clerical staff/management and tries to say, ""This market isn't sustainable, software engineers are asking too much and companies bleed trying to hire them"", tell them to fuck off.  
That's not how economics work.  
We are in such demand that literally other countries are trying to fly us out of the country and offering us crazy immigration and visa conditions to get us to go there.  
This is a software driven world and it's only going to get better. Self driving cars, smart underwear, more powerful phones... All this shit needs engineering. If you don't want to pay for a good engineer, buy a Safari Books subscription or build a fucking Wordpress site.  
I'm sick of these red pill, economics/management science graduates trying to sneak into /r/CSCareerQuestions and trying to neg us down because they failed to hit their hiring quota for their ""IT"" department, because a UCLA CS graduate didn't want to accept their ""excellent"" offer of $55,000 a year to build their Enterprise Tinder clone or whatever shit idea they think they know more about than us.  ",1511176420.0,2017-11-20 06:13:40
416,"Software developers with more than 10 or more years experience, what are the mistakes you made which you would wish you hadn't made? What advice would you give to newbies?",804,cnlna5,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cnlna5/software_developers_with_more_than_10_or_more/,273,Any technical/non-technical advice welcome.,1565299080.0,2019-08-08 17:18:00
417,Internship as a ML engineer is a living hell.,802,jn6we6,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jn6we6/internship_as_a_ml_engineer_is_a_living_hell/,200,"Last week i got accepted by a company for a, machine learning engineer intern position.

The interview was just a normal conversation between me and 2 company employees (turned out the company doesn't have real HR department).They got excited by my resume and told me to come again for the second phase of the hiring process.

In the second interview i sat down with the company owner and spoke for around 20 minutes about my ambitions and what i like about AI.

He told me that i got the job and that i will start on Monday.

I asked him about the work schedule and he told me its from 9am to 6:30pm. I got that as a red flag

but i didn't reply on that.He also told me to come to work with a suit and a tie. I asked him why and he told me that we have to look more professional because most of my coworkers are young.

On my first day they showed me the space and then i met a team of interns who they were working on small projects to sell on companies.

The owner told me to sit down with every other intern to see on what they are working on.

Every single one of them was assigned to build a program on their own so the company could sell it until their internship ended. Two projects had to do with CV and the other two had to do with NLP.

I learned from the guys that they didn't get any training at all and they were just assigned a job.i got very sceptical about my future there instantly.

On my second day i sat down with my manager and she gave me a dataset from a shipping company.

She asked me to extract information and find a relationship between ship repair time based on damages from past data using regression. 

When i started asking questions she couldn't answer them and told me to ask other co workers for help. After that i just couldn't wait for my day to end.

Today is my third day at work and it really didn't go as planned.I don't know if its me the company or my expectations about my position.

Should i resign and look for a new internship or every job that's  has to do with machine learning will be like that.?",1604421670.0,2020-11-03 11:41:10
418,Comprehensive List of Tech Internships for 2020 Summer,807,cixasn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cixasn/comprehensive_list_of_tech_internships_for_2020/,112,"Hi guys,

&#x200B;

The recruitment season for 2020 has already begun.

One of the biggest pains in internship applications is the process of searching and filtering positions.

Inspired by [this](https://github.com/christine-hu/summer-2019-internships), I created a repo for 2020.

Any contributions/stars are welcome and appreciated!

&#x200B;

Link to the website:

[https://zacklight.com/internships](https://zacklight.com/internships)

Link to the repo:

[https://github.com/Zackhardtoname/internships](https://github.com/Zackhardtoname/internships)

&#x200B;

**Edit**

1. you are extremely encouraged to contribute grad positions, positions in countries other than the U.S., by simply modifying the CSV or creating issues in the repo!
2. Diff between this and other platforms
   1. Not everyone has access to Handshake
   2. You can download all the data from this repo as a CSV file and use Excel to keep track of them
   3. The repo is community maintained and crowdsourced, offering many advantages. For instance, someone contacted me about how bad/shady one of the companies is, and the community can respond faithfully",1564357249.0,2019-07-28 19:40:49
419,I went from $10/hr in retail at 29 to almost quadruple that in 3 years. Here's what I did.,801,bxi6mn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bxi6mn/i_went_from_10hr_in_retail_at_29_to_almost/,239,"Yeah, I know this title is click-baity. But I hope the meat of this post will help someone who needs to see it. I graduated in 2009 with a degree in History. I ended up working retail. For 5 years, I never made more than $11/hr at any job I had. When I got fired from fucking WALMART, I decided enough was enough and that it was time to try for a second degree. I thought I would be alone on an island, and that getting a second degree was something only a crazy person would consider, but I’ve learned since then that there are a lot of people like me in CS. So if you’re a failed liberal arts graduate like me, and you’re wondering if getting another degree is worth it, the TLDR of this post is: DO IT. That being said, a lot of planning went into this before I even set foot back in a classroom, and a lot of hard work while I was working on my degree.

&#x200B;

&#x200B;

**Pre-Enrollment.**

In 2016, I had been out of college for 7 years, and I knew my math was rusty. When I re-enrolled at my old university, I had the option to go straight into Calc 1 because of my old math placement from my first degree. But to do that, I had to re-learn everything starting from college algebra. That’s what I spent most of the summer prior to enrollment doing. I used Kahn Academy to re-teach myself everything from Algebra to Trig to Geometry to Pre Cal. I also had to plan out how long I would be in school, as I knew I’d be working my way through since I wasn’t eligible for FAFSA aid other than Stafford Loans. I settled on three years. First year was to figure out if this is even a good idea, the second was to find internships, and the third as a buffer in case I didn’t find a job in year two. In addition to my fancy new major, I added on two minors in Math and MIS to make sure I’d be enrolled full time each semester. (I usually took 16-18 credit hours each time.) Then it was time for the very first semester back in the fall.

&#x200B;

&#x200B;

**First Year: What the fuck am I doing? Also: I want to die.**

Not gonna lie, for those of you in the same situation as me, this will be the hardest year by far. I had no programming experience. The first two intro to CS courses at my school about killed me. I was also working 40 hours a week while maintaining a full course load to keep my health insurance intact. I didn’t even try to look for internships because I was simply too exhausted and felt like I didn’t know shit. I almost dropped out several times that spring semester. I didn’t feel like I was good at this and it was draining me physically and emotionally. But during that same semester, I got an email sent out to all CS students inviting me to apply for a tutoring position. I said, “What the hell, why not?” I didn’t take advantage of the opportunities afforded to me during my first degree, and I told myself this wasn’t something I’d do again if I went back. Turns out, I got an interview, and then the job. Maybe I did know what I was doing?

&#x200B;

&#x200B;

**Second Year: First Internship: “lmao okay nvm I don’t have a clue what the fuck I’m doing.”**

The main problem with taking the tutoring position was that there was no way I could do that and work full time - meaning I’d lose my health insurance. As much as I will flex on how smart and hardworking I am in this post, I owe a lot to my old retail manager. He told me he thought he could sneak me in under the books if I can wait until September to transition to part time. The benefits would roll over as I was transitioning and I’d slip through the cracks. Sure enough, that’s what happened. I still worked 40 hours a week this year between the two jobs, but because of the free time in the tutoring center where I got paid to do schoolwork when I didn’t have appointments, it wasn’t nearly as bad. I could see a light at the end of the tunnel. But I still didn’t know if any company would actually hire a 30 year old fuck like me. I needed an internship. Your university’s career center, if it’s even anything close to mine, is a great resource. There were several on campus recruiting positions for big financial companies here in Charlotte that were only interviewing students from my school. I applied to every single one. My first interview was a rejection. So was the second. But finally someone said yes. Call them Company A. I had an internship. I was wanted. I won’t go into much detail on what I did since that’s not the purpose of this post, but I anyone in an internship right now who thinks they suck ass, I thought the same shit my dudes. I still got a nice return offer.

&#x200B;

&#x200B;

**Year 3: The home stretch.**

I had a job when I graduated. A good job. A well-paying job. I could have been satisfied there. But the reality was that tutoring and what I saved up from the internship wasn’t enough to pay this last semester. And that job wasn’t gonna mean shit if my degree was being held hostage by an existing balance. My new position didn’t start until July 2019, so I’d need to do something in the interim as well after graduation. It was really nice not working retail for three months over the summer; I didn’t want to go back. The company I interned with didn’t have a business need to keep me on part time while I finished school, so I looked around for a company that did want someone part time. I found one that a friend worked at and applied. (Company B) They brought me in for an interview. They grilled me on the whiteboard. (Company A only ever asked behavioral questions.) I thought for sure I failed it for a reason that in hindsight is hilarious. (If anyone’s curious why I might post it in the comments.) But I got the job anyway.

&#x200B;

&#x200B;

I was able to use this internship as my capstone course, saving me even more work my last semester of college. In the spring, they started warming me up for a potential permanent offer. I really liked Company A, and told Company B this before they hired me. They came back with an offer that was higher than Company A’s, and more importantly, they were willing to start me at my new hourly rate in March instead of July since I technically satisfied the educational requirements of the position with “a degree” already. That meant full benefits package starting 4 months earlier too. (I had lost health insurance from my other job at the first of this year, but already had the insurance waiver for the last semester so it didn’t matter financially, but it did for my anxiety over not having it.) I needed to be able to work 40 hours a week, but I was already no stranger to that. Company A declined to match, so I took Company B’s offer. (It’s important to note Company A thought I’d be coming on board since September, so I’m not sure how much they hate me in doing this, but it was the right decision for me.)

&#x200B;

&#x200B;

I graduated. I walked even though I didn’t want to initially, because graduation is about celebrating all of your friends’ accomplishments with them, not just yourself. I did it. I switched careers and got the kind of life I wanted to have for myself but never could have afforded before.

&#x200B;

&#x200B;

**Conclusion**

While this post is meant to be encouraging to other prospective CS students who already have degrees and are wondering if it’s worth possibly getting into debt/more debt and having to balance work/life with school to come back for a second one, you need to make sure this is what you REALLY want before making this sort of decision. It will be a lot of hard work even if all the stars align for you. I worked my ass off, and if you can’t tell by the overall tone of this post, I’m very proud of that fact lmao. But I also got incredibly lucky. I didn’t have a mortgage to worry about. I didn’t have kids or any real responsibilities preventing me from just up and going back to school full time. These are all considerations some of you may be taking into account into your decision that I did not need to. I also was lucky in that after being fired from Walmart (Fuck you Larry, your mustache makes you look like a pedophile on a pirate ship.) that my next employer was willing to hire me on full-time so that I could afford to even go back to school. (The health insurance cost alone would have fucked me hard if I didn’t get a waiver for having an employer-sponsored plan.)

&#x200B;

&#x200B;

If you do go back, make the most of it. Network with your professors, they’re great potential recommendations for internships/first jobs. Network with your classmates. As a tutor, I have a dozen good friends now who are all smart and either have or will be in good jobs themselves that would recommend me for a position in their company if I wanted it, and I them. And lastly, take advantage of every opportunity you get. Whether that’s career fairs, job openings within your college’s CS department as a TA/Tutor: Anything. I’m not a huge fan of Lib Arts degrees for obvious reasons, but chances are for those of us not where we wanna be in life with a degree in that field, we probably didn’t take enough advantage of opportunities the first time around. Don’t make the same mistake again.









I know this is a huge wall of text, but I hope some of y'all who are in the spot I was in can get some encouragement from it.",1559864511.0,2019-06-06 19:41:51
420,Our company is on the verge of a software engineering mutiny. Does anyone have experience with collective bargaining?,800,8a14yh,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8a14yh/our_company_is_on_the_verge_of_a_software/,304,"I am a senior engineer for a small software company in the USA.  Our CEO has been less than honest with us and there is a lot of discontent at the company.  He wriggles out of paying bonuses, added disguised claw-back provisions to our stock options, and recently informed us that he would not be keeping his word on a major perk that was promised to us in writing when we accepted our jobs.  He tried to isolate us by telling each of us privately that we would not receive the perk, and that we should not discuss it with the other engineers.  This was the final straw.  Yesterday the entire engineering team had a private meeting and it appears that every member of the team is prepared to quit over this.  
  
I know that many of you will say that we should just quit, but many of us feel that we have created a good product that makes a positive impact in many peoples lives.  As a team we are very tight knit and believe in our product and want it to succeed.  This weekend we are having another meeting to discuss our options.  We would like to preserve the company if possible, but are unwilling to allow the CEO to cheat us any longer.  Does anyone have any experience with this kind of situation?  Any advice on how we can use our collective bargaining power to create a more equitable work situation?  Any success or horror stories?  
  
Thanks!",1522974330.0,2018-04-05 20:25:30
421,"I’m Swift, CEO & Co-Founder of Major League Hacking (MLH), answering questions about leveling up & launching your tech career during the pandemic. AMA!",804,itb3h4,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/itb3h4/im_swift_ceo_cofounder_of_major_league_hacking/,180,"I'm Swift, the CEO & Co-Founder of [Major League Hacking (MLH)](https://mlh.io/). I was an aspiring lawyer who switched into Computer Science after attending my first hackathon back in 2010. Before founding MLH I was a software engineer and developer advocate for 5+ years. During that time I built the first platform to help developers showcase the work they were doing at hackathons and eventually sold the company to Intel.

I founded MLH back in 2013. We're a Public Benefit Corporation (B-Corp) focused on empowering our next generation of technologists. Every year we run more than a thousand learning-focused events where aspiring developers learn practical skills to launch their tech careers. Last year alone nearly 100,000 developers attended our events, including many of you here!

The tech industry is going through a lot of changes right now. With so many companies going through layoffs and reducing budgets/headcount right now, it's especially tough for those of you hoping to enter the industry as interns or new grads. For context, this past summer nearly 20,000 developers in our community lost jobs and internships and another 25,000 weren't able to find one directly as a result of the pandemic.

We’ve been doing everything we can at MLH to support and empower those impacted. We committed to running [digital hackathons](http://mlh.io/events) every weekend of the year, started hosting virtual [skill-based technical workshops](http://mlh.io/localhost) every day of the week, and launched an internship alternative called the [MLH Fellowship](http://fellowship.mlh.io/). All of these programs are designed to help aspiring technologists gain the hands-on experience they need to build their resume/portfolio and launch their careers.

I'm here today to answer questions about how to navigate launching your career in all this uncertainty, my experience running one of the largest developer communities in the world, entrepreneurship, and everything in between. AMA!

*This post was approved by the mods. Also,* [proof](https://twitter.com/SwiftAlphaOne/status/1305891745268477954)*.*

*Edit: Wow! Thank you all so much for all the amazing questions. I'm sorry if I didn't get a chance to respond to yours. I hope to do this again some time soon. Thanks again to the mods for hosting me.* [That's a wrap!](https://twitter.com/SwiftAlphaOne/status/1305990095032520706)",1600212758.0,2020-09-15 19:32:38
422,Web development is harder than it seems,805,gy6tyt,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gy6tyt/web_development_is_harder_than_it_seems/,213,"So I work in cloud engineering and architecture and I decided to pick up web development for some side projects. I had done a course on it at university but that was a while ago. In my head here’s how I thought it would go. 

1. Make some containers using bootstrap, html/css and javascript for the contents and UI. Simple really 
2. Php for the backend to pass some information in forms to dynamoDB and do some processing on it. 

Naturally, I decided to start with the front end, got my IDE set up and began coding . Boy I was so wrong, I couldn’t even finish the navigation bar without getting absolutely frustrated. Nothing seems to do as it’s told, drop downs work sometimes and half the time it doesn’t. Then there’s stuff you have to do for different screen sizes. Let me not get started about css, change one attribute and the whole things messes up. Seems like I’ve forgotten most of what I learnt at uni because I’m sure it wasn’t this frustrating then.

Can someone point me to some resources and  frameworks I can use to make this less tedious? I understand the syntax but it seems like I’m reinventing the wheel by typing out every line of HTML, css and javascript myself.

Thanks!


Edit: Thanks for all the information guys, it’s a lot of different opinions but I will do my research and choose what’s appropriate in my situation. All the best!",1591537659.0,2020-06-07 09:47:39
423,How do you learn to enjoy that much freedom in an office?,799,cl53nb,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cl53nb/how_do_you_learn_to_enjoy_that_much_freedom_in_an/,184,"I started working for a company last month(First job in software engineering) and they offer many benefits for the employees:

* Free food(Pizza, Fruits, cake...) almost daily

* You can come in whenever you want as long as you work 8 hours per day

* Breaks whenever you want

* Team events in different countries where the company pays for everything. Last time they all went into a fancy hotel for 3 days and the employees didn't have to pay for anything

* Expensive hardware that you even can take home if you want(got a Apple MacBook Pro 15.4"", Core i7-8850H, 32GB RAM, 512GB SSD on my first day which costs around 3000 Euro in my country)

* Just have to write a ticket to the IT if I want a new mouse or keyboard and they will order it for me according to my selection)

* No pressure at all if you finish your work on time 

* Learning at work is accepted(Finished reading Clean Code while sitting at my desk) and you get an Udemy Business Account so you don't have to pay for courses.

This all feels surreal to me and I really appreciate all the benefits but however I'm kind of surprised because all of this must cost a ton of money and I've never worked in a company that's doing all that stuff for their employees. It doesn't feel like work to me which is pretty surprising because in other fields(worked in a trade before) stuff like this is not self-evident. So should I just enjoy it or should I worry because I get used to that and expect similar stuff in other companies in the future?

Edit: Wow this blew up! Many people asked where I'm working so I will talk about that for a bit. 
The company is a pretty unknown midsized company in the US because I'm based in Germany(not Berlin or Munich, a smaller city). We have around 150 employees and I'm currently doing an apprenticeship there, which is quite normal in Germany. Did an imternship there before and my apprenticeship started last week. Hiring process was also quite enjoyable. Just a normal interview where they asked questions about me and my experience with programming in general combined with some behavioral questions. Had the impression that it is more more important to them if you're a personal fit or not. So no whiteboarding for me which is quite common here, even for experienced developers.",1564786202.0,2019-08-02 18:50:02
424,Promoted to a lead but far from the best dev on team - should I be scared?,798,k8g4i4,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k8g4i4/promoted_to_a_lead_but_far_from_the_best_dev_on/,181,"Hi all!

I've been a dev for the last 4,5 years and last week my company has promoted me to be a lead of a fairly big team (over 20 folks). I know that in my company this job revolves primarily around meetings, managing the direction of the team and making sure stuff PBIs are completed on time - almost no code work, besides reviewing PRs. This is something that I was always interested in and I had the chance to manage some smaller projects - thats why the company decided to promote me.

However, I have two main worries.

1) I will be filling in the spot of a previous team lead that is leaving the company next month, so for most of the folks out there I will be a completely new and unknown person. Did you guys ever had a lead/manager join in from a different team (or even a different company?)? Could you give me any tips on what made him/her bad/good?

2) I DEFINITELY will not be the best dev on that team. My technical skills are average at best (for someone with almost 5 years of exp), I was always better at organizing stuff and making cooperation pleasant and smooth for others than actually creating great code. Do you guys think that an average dev can be a good manager/lead, in your eyes? Do you have any tips from your pesrpectives?

&#x200B;

Thanks in advance!

EDIT: I did not expect this many responses, but I am reading every single one of them and I will take my time to reply as well. Thank you so much everyone for your tips, time and effort in your comments, I REALLY appreciate that!",1607374485.0,2020-12-07 15:54:45
425,I don't even want a top job at this point.,798,hjy7sz,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hjy7sz/i_dont_even_want_a_top_job_at_this_point/,254,"I'm out of grad school since the end of May. I majored in ECE in both of my degrees, and I didn't really take any algorithm classes. 

It so happens that I did an 18-month full stack development internship at my University building a product for them. Wrote the backend in Django on my own, wrote parts of the Frontend in React, pretty much designed the database, wrote the models to create those tables, and wrote API endpoints for the frontend. 

I liked it enough to want to do it full-time. I look for web development jobs and bam! Apparently I need to know C# and .NET really well. I know that the concepts remain the same, they only differ in syntax and tools, so I like try to read some of it. But bam! Apparently every role I come across wants to do Java and Spring. 

In the meanwhile, I created and deployed to Heroku two MERN personal projects. Wrote every single line of the Frontend and backend. I picked MERN because I had to have some experience in it for an interview. 

I suck balls at Leetcode style questions. I realised I don't have the aptitude for it, and as someone on a visa with money running out, I can't be wasting time grinding them out and not actually applying to jobs.

So my hope is companies who will actually take a look at my work and decide to give me an interview or even any shot. But yeah, after 800 applications, and constantly receiving an email that says they found a candidate who closely aligns with their needs better, I'm dead inside. 

I interviewed at a few places, ended with hiring freezes or role cancellations or just got ghosted.

I don't know where to go from here. I can build out a full-stack application with a reasonable level of quality and confidence but I can't get an interview even though my life depends on it.

I'm not even sure why I made this post except I feel defeated.",1593729609.0,2020-07-02 18:40:09
426,9 hours programming test,796,gzjmuq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gzjmuq/9_hours_programming_test/,194,"Not so long ago I received a mail from some software company, located in Berlin, Germany. Something like ""we're looking for C++ developers of all sorts, both senior and junior, since we have a lot of tasks"" and yada-yada. Salary is 80-120k euros per year, relocation to Berlin and all that. C++ is not my main language, but I had some decent experience with it in the past, so I decided to send them a resume, because why not.

Soon after I received an invitation to pass an online programming test, which looked like [this](https://i.imgur.com/9H46lWZ.png).

"" *The solution has to be submitted within* ***a 9 hour time frame****. Excellent C++ specialists will of course solve the problem in 3 to 4 hours, and we leave it to the candidates to test their solutions thoroughly before handing them in (in case they finish early).* ""

Some of you might be even familiar with this form, because, apparently, these guys have been sending those invitations for YEARS (4 is the least, as far as the google search goes). There were even a couple of threads in this subreddit about them in the past. Most popular responses were *""Guys just want a job done for free with this fake test""* and *""9 hours with NDA not worth it""*. After extensive googling I managed to find the test itself. Some really tricky data structure coding. Despite the NDA agreement, people still post it and ask solutions on stackoverflow (who would have thought, wow). I even found multiple mentions of the same task: first mention was dated 2016 and the last was January 2020. Which kinda proves the point, that the test is legit and they don't get ""the work done for free"". **It's been EXACTLY the same test FOR YEARS.** 

After a certain amount of thinking, I didn't attempt to take the test anyway. There are a couple of working solutions to it on stackoverflow, so I could just copy and paste them. Or I could come up with my own solution (though, I'm not sure if I'd managed in 9 hours with proper testing and bug fixing). And it's not that I just didn't wanna bother. But instead something in this whole thing felt fishy.

So, yesterday I've got a mail labeled as *""Reminder: Your company-name programming test"".* Which contained something like *""we noticed you didn't attempt our test. WE BEG YOU, PLEASE DO. It's hard, but very-very rewarding in the end. Working with us is super-cool, you'll love it.""* And it also contained the following sentence: *""In fact, of our now* ***20 full-time developers****, in* ***15 years*** *of company-name,* ***only one*** ***has ever quit*** *their job"".*

Now THIS made me freak like hell. I initially assumed that this is just some semi-large startup company with may be 100 engineers and may be 5 people hired yearly. That would explain a very demanding test and the fact, that they've been doing this since 2016 (at least).

But 20 developers??! Only **ONE ever** quit their job in 15 years? What the actual fuck? Are they really looking for **ONE DUDE** for 4 years??! What kind of dude would that be? God walking amongst mere mortals? Dennis Ritchie spiritual reincarnation?! And if the dude they are looking for has to be THAT good - why would he go with them instead of Google?

&#x200B;

P.S.

Sorry for the long post.",1591723150.0,2020-06-09 13:19:10
427,"Possibly fired from an internship, is this my fault?",794,gci8ve,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gci8ve/possibly_fired_from_an_internship_is_this_my_fault/,226,"UPDATE:  (i'm not fired)  

[https://www.reddit.com/r/cscareerquestions/comments/gci8ve/possibly\_fired\_from\_an\_internship\_is\_this\_my\_fault/fpfdfgn?utm\_source=share&utm\_medium=web2x](https://www.reddit.com/r/cscareerquestions/comments/gci8ve/possibly_fired_from_an_internship_is_this_my_fault/fpfdfgn?utm_source=share&utm_medium=web2x)

&#x200B;

Hey everyone,

I think I'm going to get fired from an internship that's kind of crappy anyway so I'm not too concerned.  But i'm very confused and would like an honest opinion if this is my fault or not.  Sorry it's kind of long.

So around 6 months ago I got hired as an intern for a super small company.  They pay me minimum wage and give me part time hours while in school and there's no end date to this internship.  More like a part time job I guess.  Since starting I was given almost nothing to do, and I asked on multiple occasions.  There were days my manager would give me nothing and then I'd try to look busy if the owner walked past as if it was somehow my fault I was sitting there texting with a blank computer screen.  Needless to say I was learning absolutely nothing at this internship.

Back in March we were notified via email we'd be WFH due to covid.  I had never worked from home before and had no task assigned to me so I logged into my work laptop and emailed my manager asking what to do.  He said he would get back to me and never did.  So for the next few days I would just leave my work email open in the background waiting for my manager to get back to me, while doing nothing.  When it came to log my hours to be paid it was extremely awkward, because I either had to lie or write that I needed to be paid for doing homework and watching Netflix.  I wrote very vague bs and then sent a followup email to my manager once again reminding him that I had nothing to do and asked if I should be working on anything.  He said he would get back to me and of course never did.  At this point my ""work days"" consisted of checking my email and since I had that on my phone I didn't even bother to log into my work laptop.  I was truly doing nothing at all and thought forget this I'm gonna focus on school, I won't try to make them pay me for this, and I'll wait for an email.

An entire month goes by and I don't hear a peep until I get an email from the owner asking if I quit.  I let him know I've been here the whole time but no one has given me anything to do.   He writes back with an email that clearly shows he's upset with me.  Shortly thereafter he calls me on the phone and we have a brief back and forth where he's clearly not happy with me and at one point calls me immature.  He then says he's going to talk to my manager and see what they're going to do and we hang up.

I go back to the email where he wrote that it's not good I haven't responded to emails and I should have asked for a task.  I replied asking him to please show me which email I never responded to (there haven't been any).  I then told him that I did ask for a task on two separate occasions and forwarded him both email chains with my manager to prove it.  Since it's the weekend I'm sure I won't hear back until Monday so I'm not sure what his response will be.",1588498842.0,2020-05-03 05:40:42
428,"What companies would you never work for, for ethical reasons?",793,gft6gn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gft6gn/what_companies_would_you_never_work_for_for/,913,"I'd like to think that there are companies I would object to working for, ethically, but I just applied to Amazon last week so I evidently have no principles",1588973117.0,2020-05-08 17:25:17
429,I embarrassed myself today by thinking that Rubrik were the inventors/manufacturer's of the Rubik's Cube.,796,9jhimg,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9jhimg/i_embarrassed_myself_today_by_thinking_that/,144,"Firstly, I am going to say that I am COMPLETELY to blame for this. I did not do enough research about the company before going into the interview and it ended up making things really awkward.

So I had the most embarrassing interview of my life today. During my Rubrik interview I was asked ""Why do you want to work for Rubrik?"" My response was something along the lines of ""I want to work for a company that will challenge me to solve complex problems, and what more fitting place than at the place that invented the Rubik's Cube?"" I was laughed at for a good couple minutes before they explained that they were not the inventors of the Rubik's Cube. The interview didn't go the entire 1 hour, and I'm pretty sure I am not getting another interview.

Moral of the story: Do at least a little research on the company prior to your interview.

&#x200B;

Edit: I knew they were a software company. I just thought they originated from, and continued to manufacture Rubik's cubes on the side.

 Edit 2: Just got the rejection email. I had the interview less than 5 hours ago. ",1538117103.0,2018-09-28 02:45:03
430,I finally found a job!! Going from front-end to back-end,791,gurh31,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gurh31/i_finally_found_a_job_going_from_frontend_to/,269,"After 800 applications, I am happy to say that I am starting a new job! I am so happy to have gotten a fulltime job in this climate, and I did so in just three months.

I am going from a mostly front-end roll to a back-end one. Is there any change to my approach that will greatly differ? Gone will be the days of ""Will this work in IE"" and in comes the era of microservices and multithreading.",1591069476.0,2020-06-01 23:44:36
431,Can we talk about the difference in salary between the US and Europe?,789,bvjzhk,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bvjzhk/can_we_talk_about_the_difference_in_salary/,622,"The fact that developers in the USA earn much more than their European counterparts is a topic that comes up often on this sub.

&#x200B;

As a junior developer over in Europe I was astonished when I first found out that a starting salary for a developer in SF or NYC can be $70k - $90k, whilst in Copenhagen (where I live) you'd be lucky to get $40 -  $50k! And we pay more taxes!

&#x200B;

This sent down a spiral that I think many young European developers on this sub go down on how to get a job and move to the US for the big $$$. However whilst doing research, reading in this sub and talking to my friends in tech in the states I realized that just comparing the two salaries is a very inaccurate way of looking at things.

&#x200B;

Here's a few of the benefits that I didn't really know were available to me that probably wouldn't be available to someone in the states:

&#x200B;

* My first full time job in tech i was given a company standard 30 days of paid holiday a year - not including public holidays
* If I got my girlfriend pregnant (please god no!) between her and myself we could share 400+ paid days of paternal/maternal leave. Children's daycare is also free or heavily subsidized.
* Healthcare is basically free
* University is free

&#x200B;

I'm not bashing America by saying this, or saying I personally favor one system or another, but I think a lot of the time developers look solely at the number next to their paycheck as a way of judging if an opportunity is worth it. I bet a lot of American developers are wary of coming to Europe for work because of the lower salary, and lots of Europeans just want to go states simply because of it.

&#x200B;

Edit:

&#x200B;

A lot of people seem to misunderstanding what I meant by the benefits I listed. I'm aware that there are some top tier tech companies in the US that offer all of those benefits plus more. But that's exactly my point: ""some"". In Europe those are basic aspects of every single working person's package. If I have kids I know that no matter if they want to study chemical engineering or Russian art from the 18th century they will have support.",1559418441.0,2019-06-01 15:47:21
432,How a handwritten thank you note got me an internship,784,bdy6w0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bdy6w0/how_a_handwritten_thank_you_note_got_me_an/,117,"Hi all,

&#x200B;

I'll keep this short. Recently, an HR representative from a local health tech company came on-campus to give a talk about writing a good resume, and handling the behavioral side of the interview. She was volunteering to do it. 

&#x200B;

I took notes and asked good questions, then  wrote her a small thank you note, so her efforts don't go unnoticed. Fast forward 3 months, we meet at a local career fair. I showed her that I followed her formula in my resume, and BOOM. I got an interview with an engineering lead a week later. 3 days after, I received a software developer internship offer. 

&#x200B;

I've done that to every talk by professors, experts, or anyone who took time out of their day to help students with nothing in return. **A lot of my younger classmates have accused me of kissing ass,** but I think if you're nice to everyone, everyone will be nice to your. The head of advisors once told me, it's a red flag to her if candidates don't follow-up with thank you email/DM/note. 

&#x200B;

Show that you care.",1555472296.0,2019-04-16 23:38:16
433,Name and Shame: Foot Locker couldn’t even be bothered to fill out the fields in its auto-generated rejection letter,778,apoiwp,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/apoiwp/name_and_shame_foot_locker_couldnt_even_be/,90,"This is the email I got from Foot Locker for an entry level SE job. They couldn’t even put in their own name, so it comes out as “Unavailable Variable” lol

> Recipient: Today's Date
 
>Dear LordElysian
 
>Thank you for your interest in Unavailable Variable.  Your application submission and qualifications have been carefully reviewed. However, at the present time no position is available that would utilize your skills and experience.
 
>We also encourage you to visit our website as new positions become available.
 
>We appreciate your interest in Foot Locker employment opportunities and wish you success in your search for a suitable career position.
 
>Sincerely,
 
>Unavailable Variable 

Edit: I really thought this was gonna get like maybe 12 upvotes and maybe one comment about how I still need to keep grinding Leetcode (which I admit I do). But like I’m not bitter, I’m not taking this personally, and in general I’m pretty unbothered. This was one application of many I’ve sent recently, and truthfully I can’t even remember which office the position would have been held at. “Name and shame” is a common phrase on this sub and I don’t mean anything upset by it. I’m sharing this email I got a few days ago because if nothing else, it’s funny and ironic that the email they sent to someone applying for a software position was auto generated by software that itself had issues. I’m sure it’s just a matter of someone taking the time filling out the company name field, and not a breach of national security. In a market where the typical response is none at all, it just made me smile that I got a response like this, even if it is automated.",1549969019.0,2019-02-12 05:56:59
434,I did it thanks Reddit!! Lost STEM grad to fulltime dev @ startup.,784,h9k90w,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/h9k90w/i_did_it_thanks_reddit_lost_stem_grad_to_fulltime/,86," 

My situation is in no way unique (Health Sciences undergrad) nor were there any special tricks or hacks that I used to find a job. Every step you need to take has repeatedly been posted on here by various redditors and so I guess the goal of this post is to encourage those who are sending applications and polishing their projects/leetcoding to keep going. I felt despondent when after teaching myself to code for a few months that the whole job market seemed to be imploding. But the success stories in this subreddit and r/learnprogramming really kept me going.

Guys it’s possible. In the immortal words of Shia/nike. “JUST DO IT”.",1592269368.0,2020-06-15 21:02:48
435,Remember: an !nterview is a two way street,777,k04rgy,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k04rgy/remember_an_nterview_is_a_two_way_street/,107,"Yesterday I had a rather interesting experience. Currently I am casually !nterviewing around to get a feel for the market, and got what I bargained for. For better or for worse.

I have degrees in both Mechanical Engineering and Computer Science, with professional experience in building systems design with an emphasis on developing automated tools for processes. While not a traditional software development role, there is considerable overlap. Overall I have gotten a very good response rate to my applications.

I was invited to a video call with two founders of a small startup. Initially I assumed they had a technical background, but soon realized they did not. 20 minutes into the conversation scheduled for 90 minutes, the founders stated they believed only someone with a few years of experience in pure software could succeed in the role, and that ""[they] didn't want to run [me] through the gauntlet and ask questions [I] won't be able to answer.""

More so, one of the founders dismissively advised I ""seek freelancing work and internships"". No technical questions were asked (I was supposed to speak with their developers afterwards). I thanked them for their time, and we ended the call.

First off, what nerve. No technical background, and you assume someone with professional experience in engineering and dual degrees in very different but technically rigorous technical fields will be unable to answer your questions? More so, suggesting freelancing? Freelancing is generally unsuitable for anyone but senior developers with a strong network, and anyone in touch with the real world would know this.

Either way, I am lucky enough to have a choice, and businesses like such will not be amongst them. I have made that mistake in the past, and advise that you all not repeat it. Pandemic or not, your worth never changes.",1606252479.0,2020-11-24 16:14:39
436,These success stories are getting to my head man.,779,amdu7b,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/amdu7b/these_success_stories_are_getting_to_my_head_man/,354,"All of them are 6 years from high school to six figures and meanwhile it took me 6 years to go from high school to unemployed college dropout who's waiting on an interview for a minimum wage programming job that I'm not even sure if gonna get.

If you all wanna see what failure looks like, I'm right here.

This isn't really a jab at them, I'm sure everyone involved worked a lot harder than I did, but I don't know anymore
",1549141112.0,2019-02-02 15:58:32
437,May 2020 grad here and just got my first job offer!,778,jp36l3,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jp36l3/may_2020_grad_here_and_just_got_my_first_job_offer/,41,"I’ve been a long time lurker of this sub and just wanted to share my experience with other recent grads out there who came out of school without a full time job lined up (I was also a bit dejected because I was unable to secure a return offer from my internship). Like a lot of people in this sub, I'd applied to hundreds and hundreds of jobs for the past 5-6 months, and felt very stressed most of the time.

For context, I’m actually a mechanical engineering major who minored in CS. My job offer is with AT&T in Dallas, TX as a Software Engineer through their Technology Development Program.

I was so, so incredibly ecstatic to get this offer because it seemed like the perfect opportunity to kickstart a career in development. I wouldn’t say I have really strong programming knowledge especially as I'm not a CS major, but I’ve had 4 months of relevant internship experience, a web app project I deployed on the Google Chrome Web Store (I worked on this during the summer after I graduated), and did really well on my behavioral interview, which I think is what got me the job in the end. 

As for getting the interview, I attended my school’s annual career fair in the fall as an alumni. At the time, this particular program wasn’t taking applications yet, but a recruiter sent a link out to be notified when the program was open for apps. I applied right when I got the email saying the program was open, and received an invitation for an interview a few weeks after that.

So my advice is to definitely see if you can still attend your school’s networking events as an alumni if you can! All the recruiters I spoke to were actually very understanding of how I was looking for a job as a May 2020 grad in the crappy COVID economy. Hope this is encouraging to my fellow recent grads out there!",1604689233.0,2020-11-06 14:00:33
438,Got an offer!,774,da63eb,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/da63eb/got_an_offer/,69,"Hey all,

I have been lurking here for at least two years, now. I graduated in 2016 with an EE degree and have been working in that field ever since.

2 years ago I resolved to make the jump to software development. I have been teaching myself, and this sub has really helped me on this long road.

Once I put the work in and built up a portfolio I could be proud of, I started applying a couple of months ago. Through this whole time, I have gone through so many ups and downs in my confidence in myself and my hope for the future to make this happen.

I got an offer this week, and it feels great. I can't wait to be on this career path full time, and now I just hope I can do well on the job.

If you're still in the mix and hunting for a job, then remember this nugget that brought me a lot of value:

If you can manage your emotions through life's ups and downs, then you have a vital edge over most people. Your mind is like a movie screen, and you get to choose what plays on it. Always make sure the script is dynamic and positive.

And be realistic about your expectations and how much work might need to go into succeeding at your goals.",1569645063.0,2019-09-28 00:31:03
439,"It really blows my mind, our career fates can all hinge on a couple minutes-hours.",777,de7889,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/de7889/it_really_blows_my_mind_our_career_fates_can_all/,421,"I ran across some post on Hacker News where someone divulged some information about an informal experiment he did, recording several phone screens for hiring managers and recruiters. They were posted on a SoundCloud account. 

Legal issues aside on right-to-consent recording laws, people have been mainly giving him negative feedback on the quality of his recordings, saying how he may be a decent programmer but ultimately bombing the way he talks (or doesn't talk, in some cases) with deadpan answers or leaving moments of radio silence. Someone else who has been on interviews with hundreds of people has even said he'd put this person in his bottom 5 of people he's heard interview.

And that got me to thinking how so much of our future on our jobs, and careers, disproportionately hinges on a little snippet of performance. And often this happens outside of an actual job, but while interviewing for a job.

I'm now imagining how many more people are out there like him, awkwardly stumbling in his speaking, but could be a great person to work with otherwise. These fools could be sleeping on so many people.

So much for ""talk is cheap, show me results"", and not judging a book by its cover.",1570415458.0,2019-10-06 22:30:58
440,What's the obsession with personal projects?,776,avt2ig,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/avt2ig/whats_the_obsession_with_personal_projects/,410,"I have about 7 months of full time research experience in high performance computing, the first thing recruiters yesterday ask is ""what are your recent personal projects?"" After I explain my research experience. 

I also worked at a prestigious company in my area. 

Why? Why does the thing I spent 10-20 hours on matter more to recruiters than the things I've spent hundreds of hours on, working with faculty etc? Is it to prove that on top of working full time I'll throw away all my remaining time sitting at a computer typing?

Edit- some troll called me out for not wanting to code 24/7 then deleted his account. Lol",1551400432.0,2019-02-28 19:33:52
441,I hate feeling useless starting new jobs,774,gvvlb2,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gvvlb2/i_hate_feeling_useless_starting_new_jobs/,166,"I started a job yesterday and I have the same feeling I always do. (Working to slow, and not really knowing what's going on). Although the feeling is getting better everytime I start a new job, I still fell useless.

This is my 3rd job in 2 years. I was at the last place for a year and I knew the code base like the back of my hand. Does anyone feel like this.",1591225495.0,2020-06-03 19:04:55
442,Name & Shame: LA Healthcare,769,cka07h,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cka07h/name_shame_la_healthcare/,139,"EDIT: D'oh got the name wrong, they're called LA Care Health Plan, not LA Healthcare.

Internal recruiter reached out to me after I applied for a Data Scientist position which took about 3 months. She gave a take home assignment where I had to....
- Import a dataset
- Clean the data
- Manually calculate sensitivity, specificity, area under the curve
- Manually plot the ROC curve.

Okay, a little tedious but I finished it. I send it back and hear nothing for another 3 months. I get another email from her, asking to do the SAME task...to which I just replied with my previous results along with another silent period.

Another 3 months go by, she emails me back and says I've moved onto the next step. The next step had 2 tasks:
- Read and import a given dataset
- Clean the data
- Exploratory analysis
- Plot some graphs
- Build a supervised machine learning model

The 2nd task involved the same thing, but with a different dataset and to build and unsupervised machine learning model. All due in a week. 

I just received this email yesterday. I'm seriously appalled at how much work they're requiring me to do just to even get a phone interview.

Edit: UPDATE - Decided to send this back: https://imgur.com/a/xPkQU7d",1564615947.0,2019-07-31 19:32:27
443,What are things that separate a great programmer from average ones?,772,f9vrq9,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/f9vrq9/what_are_things_that_separate_a_great_programmer/,318,"In terms of what they know that others don't, how they approach things differently, etc",1582763221.0,2020-02-26 19:27:01
444,"Thanks, LeetCode, for the ironic humor",777,b2li8k,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/b2li8k/thanks_leetcode_for_the_ironic_humor/,198,"Read recently on a LeetCode binary tree inversion question:

&#x200B;

>**Trivia**  
>  
>This problem was inspired by [this original tweet](https://twitter.com/mxcl/status/608682016205344768) by [Max Howell](https://twitter.com/mxcl):  
>  
>Google: 90% of our engineers use the software you wrote  (Homebrew), but you can’t invert a binary tree on a whiteboard so f\*\*\*  off.

&#x200B;

It's nice to be reminded that algorithm practice, while necessary for interviews, is dumb.",1552959026.0,2019-03-18 21:30:26
445,My employer fired me and is giving me bad reviews when prospective employers call them for reference check,765,g7cqhk,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/g7cqhk/my_employer_fired_me_and_is_giving_me_bad_reviews/,255,"TLDR: employer fired me, giving me bad reviews when perspective employers ask, I’m thinking of remote jobs from other countries. Will I have the same trouble? What else could I do other than sue?

I’m not sure how much this situation applies to other parts of the world, so for context, I live in a certain Asian country.

My (ex-)manager is a grade A idiot who doesn’t know anything about anything. I was the senior most developer in the team and the only one who would stand up to him when he made ridiculous decisions. I always did this with respect (which he honestly did not deserve) and substantiated any claims or counter ideas properly. He obviously hated my guts, but over the years it had become somewhat of an unspoken rule that he would dick around with new ideas but nobody would implement anything before I or someone else senior in the team had a chance to fix his stupidity.

Around four months ago, the guy decided he’s had enough of me and started making my life hell in any way he could. Abusing me verbally passive aggressively, joking at my expense during corporate lunches and parties and he started pushing all the worst, most inane work on to me. After a month or so of this he managed to completely destroy my work life. I had no motivation at all and my mental health was taking a big toll.

In retrospect, this should have been when I quit the job, but having worked in the company for a good 5 years, I felt there was a real opportunity for me to lead a team in the near future, so instead I decided to fight him. I spoke to him frankly about his treatment of me, but he pretended like nothing was happening and I was just unhappy with the work for some other reason, maybe personal life. I spoke to his senior, but that didn’t do anything either. After a few more weeks of this I filed a formal complaint with HR.

This is when shit really hit the fan. Within a few days HR gets back to me and says they’ve found no wrongdoing on his part and they’re closing the complaint. The next day, the manager fires me citing performance reasons. I tried to fight this as well with HR, but they refused to take me seriously. It was a simple case of “consistent underperformance”

I was devastated and pissed off. This was the only company I ever worked for. I joined straight after uni and worked there for more than 5 years, always delivering more than was asked of me. If I do say so myself, the entire team would be in a significantly worse place if it wasn’t for me.

Anyway, after a few weeks of sulking and punching pillows, I decide to start applying. Within a few weeks I got two provisional offers, but they were withdrawn at the last step - document verification. I asked them why, one of them wouldn’t disclose the reason and the other said when they were doing background checks and checking my references, they called up my the previous employer and got a negative review.

I didn’t know this before, but where I live it’s apparently standard procedure to check with the previous employer when doing background checks.

Obviously you’re thinking I should sue them, and I tried. I hired an attorney and sent them a notice, but they replied that they do not believe they acted wrongly and would gladly fight this out in court. This sucks for me because going to court would be really expensive and would take months, especially with the Covid situation.

So it seems my only practical option now is to look for a remote job from a different country. Now I’m confident I can crack the interviews and honestly wouldn’t mind taking a relatively junior position as the pay would likely still be higher, but I’m worried about background checks and references. Any advice on what I could do? Is it common to speak to previous employers in other countries as well?",1587778631.0,2020-04-24 21:37:11
446,Knowledge gap between CS students and actual Software Engineers,764,8sszw1,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8sszw1/knowledge_gap_between_cs_students_and_actual/,170,"[ ](https://boost.gg)I am a student studying CS. I feel pretty confident in my skills. If I am asked to write a simple program, I can get it done. I have a decent understanding of design patterns, Big O, encapsulation, algorithms, etc. But I feel like there is this huge gap in the software industry though that I am completely unprepared for. The second I go on Hacker News or listen to Software Engineering Daily, I struggle to comprehend what they are discussing. Whenever I hear actual software engineers talk, it is stuff about:

- Microservices
- Containers
- Clusters
- Deployment
- Blockchain
- Serverless
- Cloud Services
- Tech Stacks
- Kubernetes
- Scalability

And I know absolutely nothing about any of these things. It's as if there is this huge disconnect between what is being taught in my CS program and what actually happens in the industry. The worst part is, I don't know how to learn any of this stuff. Like if I want to go learn JavaScript, I can jump in and make a Hello World program to start learning. If I want to learn how to make cloud-based scalable mega app, I don't know where to begin.

Why does it feel like there is this knowledge gap. I'd like to think that if I study for 4 years, that I would have *some* idea about how to understand and use the major technologies in the industry, yet I am pretty sure I am going to eventually graduate and still know none of this. What is going on here and is there anything I can do?
",1529625235.0,2018-06-21 19:53:55
447,Perception: Hiring Managers Are Getting Too Rigid In Their Criteria,773,d7uees,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d7uees/perception_hiring_managers_are_getting_too_rigid/,399,"I had the abrupt realization that I was ""technically unqualified"" for my position in the eyes of HR, despite two decades of exceptional performance. (validation of exceptional performance: large pile of plaques, awards, and promotions given for delivering projects that were regarded as difficult or impossible).

When I was hired, my perception was that folks were focused on my ""technical aptitude"" (quite high) and assumed I could figure out the details of whatever technology they threw at me. They were generally correct.

Now I'm sitting in meetings with non-programmers attempting to rank candidates based on resumes filled with buzzwords. Most of which they can't back up in a technical interview. The best candidates seem to have the worst resumes.

How do we break this cycle? (would appreciate perspective from other senior engineers, since we can drive change)",1569205714.0,2019-09-22 22:28:34
448,Started a graduate software engineer position 2.5 weeks ago and already had a warning for my slow performance,766,bjse8b,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bjse8b/started_a_graduate_software_engineer_position_25/,238,"As the title say...

I work in London UK in a small company (50 people) and yesterday after 12 days my manager pulled me aside just as I was about to leave and said I wasn’t performing up to their standards and the next warning will be a more serious written warning. 

I’m working with Typescript, a language I’m very unfamiliar with and I made that clear in the interviews, and he mentioned he wasn’t involved in the interview process. I also mentioned how I’m constantly working and learning but it’ll take me some time to get up to scratch like the senior engineers. I have submitted 2 PRs in the time I’ve been here and although basic it is in TS and I’ve already learned a lot. 

I’m pretty scared I’m gonna lose my job in the first month of employment. Am I doing the right things for a graduate role? I’ve had a job prior to this but I was a consultant, definitely didn’t have much hands-on programming especially in JS.

**Edit**: mandatory thank you for the gold, I’m sorry my story is like so many graduate/entry level stories but your advice is really helping, thanks for not being hard on me! I’m relieved to know it’s not a problem with me. I’ll update and reply as things develop.

**UPDATE**: thanks again for all your comments, I’m reading through them all. 

I had the meeting with my manager, it seems there was a misunderstanding in expectations on both sides, he said I should be studying outside of work but he apologised for upsetting me. I don’t think he realised how cutting it was to hear such negative feedback early on but he said it’s better to make a point of it now rather than 1 month down the line. 

I now feel quite overwhelmed (but I am drained, it’s been a long day) but I feel a little better about my situation. I’m gonna stick it out for a couple of weeks since the company and our product is really cool. It sucks the industry requires homework outside of work sometimes but I’d need to know this stuff for interviews regardless. I’ll spend this weekend properly thinking about it, reach out to a few people too.",1556813391.0,2019-05-02 12:09:51
449,How are you doing mentally with full time remote work?,764,j0u6gg,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/j0u6gg/how_are_you_doing_mentally_with_full_time_remote/,367,"I loved it the first few months.  The lack of interruptions, useless chit chat, avoiding the commute.  But recently, it's just gotten old and stale.  Maybe it's because we also take COVID seriously and only venture outside the house for groceries and necessities a couple times a week.  I think I enjoy remote work but would prefer an option to go into the office a couple days a week just to break up the monotony.

Otherwise, we go on a lot of walks around the neighborhood to get fresh air.  It's all become very tedious.  I can understand why people are saying F it all and wanting to resume their normal life and take their chances if they are not in a high risk group.  I don't see how this is going to last another 6 to 12 months without people losing their minds.",1601253538.0,2020-09-27 20:38:58
450,dumbest reason you’ve been given for a job rejection?,765,i8y593,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i8y593/dumbest_reason_youve_been_given_for_a_job/,538,"
A few years ago a company put me through their whole 6 hour interview process (including 4h onsite.) We talked in the very first interview about how I didn’t know JavaScript. Wasn’t on my resume or in the job posting. During the onsite I managed to add working features to a React app, live, while being watched by several others - never seen the inner workings of a React app in my life before that, but I figured it out! They rejected me citing I was “bad at troubleshooting and not enough JS experience.” 

What’s the silliest reason you’ve been given by a company that rejected you?",1597346635.0,2020-08-13 15:23:55
451,"Extreme anxiety/issues communicating with team at work, dead silent at meetings.",764,g9404q,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/g9404q/extreme_anxietyissues_communicating_with_team_at/,157,"I've been at my current job for about 7 months now. I was hired as a junior developer and I have no previous dev experience (unless you count side projects + a dev bootcamp). I thought my anxiety would lessen as time went on, but I pretty much still feel the same as when I first started. I usually don't speak at all at meetings unless it's logistics-type stuff (like things I'll be working on during the sprint or whatever). I'm usually alright with one-on-one conversations or small groups, but even then I still get kind of nervous/uncomfortable. My boss enrolled me in a soft skills training course to build on my communication skills and encourage me to be more vocal, but I don't feel like it's been helping. Everytime I have to speak up (like at standups) or when I'm put on the spot, my heart starts pounding and I can't think straight. I find it really difficult to articulate my thoughts out loud, it takes time for me to process things that are being discussed at meetings, and I don't have anything valuable to contribute. I need to spend my own time afterwards going over everything before I can really think of questions to ask/ideas to pitch. Even then, my ideas are dumb trivial ones that everyone else has pretty much already covered. 

I don't know, I've just been feeling really discouraged. I feel like they made a mistake hiring me. Like I'm not the best developer, I'm too quiet, AND I'm passive (not that I don't want to learn/put in work, but I think my social anxiety/low confidence holds me back). I make sure that I'm always working on something, but most of the tasks I do are smaller and tightly-scoped tasks, not tasks that require a lot of abstract discussion and planning around architectural design decisions or tradeoffs or anything like that.

I don't know what I'm looking for here. I wanted to post this because it's been bothering me a lot.",1588033733.0,2020-04-27 20:28:53
452,Is it just me or is Stack Overflow an incredibly toxic place?,766,8ewwjc,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8ewwjc/is_it_just_me_or_is_stack_overflow_an_incredibly/,288,"Whenever I have programming questions I use Google, and if that doesn't work I use Reddit. My coworkers tell me to use Stack Overflow because apparently it's better than Reddit. 

Well I've posted a few questions there, I've never gotten an answer only people who scold me for the way I'm asking my question, telling me to do my own research, etc. 

Is that website always that bad?",1524717634.0,2018-04-26 00:40:34
453,Do you have a list of standard things you do when starting a new job/getting up to speed with an existing project?,766,k7627h,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k7627h/do_you_have_a_list_of_standard_things_you_do_when/,59,e.g. run some code metrics to get LoC by project,1607197216.0,2020-12-05 14:40:16
454,Hired!,765,chxh9v,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/chxh9v/hired/,137,"8 days ago, I was getting very desperate and depressed, and posted here seeking advice with landing my first job. Few days ago I heard back from one of the interviews that I had done and offered me a 6 months contract with a potential to become full time and asked me join immediately. It's a very small start up and I'm their first employee, the product they're trying to build is something I'm genuinely interested in, and they're very unorganized but nice casual people. Today was my second day and I coded something that I thought was the best piece of code I've ever written since I started learning programming. At the end of the day I was showing the only other developer and the rest of the team (basically they're all my managers) what I did, and asked if I'm going in the right direction? ..The senior developer looked and said ""wow I though I wouldn't see this before a week"" and asked to take my seat to check the code and folder structure, and concluded with ""very impressive, I'm very relieved"". I can not explain how I felt that moment, a mixed emotions of accomplishment, humbleness, and crazy amount of happiness. Since that moment I couldn't stop thinking of code and how to improve the project I'm working on and myself as a developer. Taking the decision to change career, and learn programming was the second best thing that ever happened to me after having my son. Now I'm only looking forward for everyday to have an impact and contribute to the team. I want to thank everyone that responded to the old post, and the sub in general for being a great support and a massive help even way before my first post and I wish you all lots of luck.",1564139256.0,2019-07-26 07:07:36
455,Heartbroken and frustrated,759,bo9wgk,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bo9wgk/heartbroken_and_frustrated/,148,"I read the rules and I don’t really know if this type of post is allowed but I just need to rant and let feelings out. 

I was laid off in February along with 100 other tech focused co workers. This was my first job out of college since being an intern. I worked on the CRM team or the “Salesforce” team... working on both backend services written mainly java and developing salesforce code with JavaScript. 

Truthfully I thought I was good at my job. I got promoted twice over the span of about 4 years, even though inside I hated it all. I always wanted more and my co workers were more “I work for the paycheck” kind of people... so if I wanted to do new things I had to just do it myself. Most of the time it ended up being something I learned/read about but never got to implement because there was no enthusiasm. 

Lay offs aside, I figured this was a great chance to find something I truly wanted to do and make my next career move into a more traditional web development role. (If any of you know salesforce, it’s not very traditional and sets some limits on what is possible). So I took the opportunity to build on top of my JavaScript knowledge and just learn for about 2 months. There wasn’t much else I wanted to do. I took Udemy courses on JavaScript and react primarily and feel like I have somewhat of a good grasp on it. 

I then began sending out my resume and all looked promising. Had many phone calls with recruiters and those led to a few in person interviews but nothing has yet to stick. 

Fast forward to today. I had (what I thought) was a very very promising interview last week. It was the 4th round after a tech screen leetcode type google hangout interview, followed by implementing something in react to then a 4 hour in person interview. I received an email from the HR recruiter say “i hope you had a great weekend, the team has made a decision and would like to setup a phone call for later this afternoon”. 

I did not want to get my hopes up but deep down I thought “hey there is no way someone would call you after saying some nice things and using exclamation marks to give you bad news”..... turns out, that’s exactly what happened.

I literally started sobbing in my chair. 

I’m crushed. I’m sad. I feel nothing but dumb. 

And I just don’t know what to do anymore.  

The obvious answer here is... 

“well did they say why? Go take what they said and just go study it more”

“Build more stuff”

“Link your GitHub and contribute more”

“Better your portfolio” 

“Freelance”

These are all obvious to me and maybe I want a pity party but maybe I don’t because only I’m to blame at the end of the day. 

I’m sorry my anxiety is flaring and this is really really hard. And I don’t even know if any of this is coherent to understand

Thanks for reading.",1557813490.0,2019-05-14 01:58:10
456,Having people who care made an amazing difference after being laid off.,752,jihpdf,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jihpdf/having_people_who_care_made_an_amazing_difference/,58,"The company I worked for has been doing layoffs due to how hard our industry has been hit hard during the pandemic. It finally hit engineering and a few of us were laid off.  

I have been practicing a lot and slowly submitting more and more resumés. A good handful were rejected quickly, but I was able to get a hold of a few recruiters.  

The rejections and the sheer lack of any response wasn’t too bad, but then I hardcore failed a coding challenge for a company. A nice little ego-check and I started working on programming problems non-stop. Combine this with how many non-responses and how many places are pushing hiring dates further back, I started to get stressed.  

Then, I got a call out of the blue from someone asking for my resumé. I guess someone at my old job mentioned my name and that I was looking for work. Sent my resumé and the next day they called to schedule a meeting, which happened to be the same day. The following day, I received an offer, which has been the fastest I’ve ever experienced. A total span of three days.   

I called the person who gave my name and thanked them. With the closest opportunity being in January, I am extremely thankful to have something that’s actually starting in less than a week.  

I’m making a post not just to share the amazing experience, or to express how happy I am that someone looking out for their old coworkers lead to this opportunity, but to ask what opportunities other people have encountered just by people looking out for them. I definitely have started to grasp the importance of networking that everyone seems to put emphasize on.",1603758521.0,2020-10-26 20:28:41
457,How in the hell can people write code from scratch?,759,hwnt9s,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hwnt9s/how_in_the_hell_can_people_write_code_from_scratch/,291,"This is just mind boggling to me at my current stage of my web development studies. How the hell do you get to that point?

Is it more of a practice thing that you pick up along the way or is it something you should be doing from the start?",1595566157.0,2020-07-24 00:49:17
458,My lifestyle & budget as an senior-level dev in the bay area -- full transparency & actual spending,761,glmka2,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/glmka2/my_lifestyle_budget_as_an_seniorlevel_dev_in_the/,229,"Hey all,

I really liked the other post that gave a perspective into the lifestyle of an entry level dev in a Low CoL area and wanted to share the same information from my own perspective. Here's a link the the post if you missed it: https://www.reddit.com/r/cscareerquestions/comments/glj6t5/my_lifestyle_budget_as_an_entrylevel_dev_in_a_low/

About me: I work at a private unicorn in SF. My base is 185 a year before tax along with an RSU grant of 120 worth of stock per year bringing me slightly over that 300 mark (Plus 15 in sign on). I graduated from UNCC with a CS degree, a middle-of-the-road school at best imo. I didn't have any internships, but throughout my teenage years I built somewhat successful flash games and got paid via sponsorships. After graduating I moved out to San Francisco to take my first job (120 base with a bunch of worthless options). After around a year at that job, I quit to work on my own startup which ultimately failed a little over a year later. After that I applied to a lot of the more well known companies in the bay area and received a lot of offers similar but slightly lower than the one I ended up taking (Although those other offers were all from public companies meaning the RSUs would have been worth real money immediately). I am single with no dependents.

**The Budget and CoL part**

After taxes & healthcare and whatnot, my net pay each month is about $9000 (Plus that paper money [RSUs] valued at $10,000 pre-tax). I don't contribute to a 401k at the moment which is probably a mistake, but I don't want to have to deal with withdrawing money early with a penalty until I have more savings.

I don't have any strict budget in terms of what I spend my money on, but I do keep a spreadsheet of what my typical spending normally looks like. 

* Rent: Previously I lived in a small studio for $1900 a month, but around half a year ago I decided to significantly upgrade and started renting a stunning 1700 square foot apartment with a roommate on the top floor of the building costing me $3000 per month for the master. Utilities, internet, and all of that bump up my cost to ~$3200 per month total. Definitely much less frugal than I used to live, but it's definitely within my budget and makes it much easier to host people and is only a 5 minute walk from where I work.
* Food: I almost never cook, my company provides free breakfast, lunch, and dinner every day (or at least did before the whole pandemic thing). However I tend to get bored of the food provided and tend to eat out all the time whether getting takeout from my favorite places or eating with friends. During the pandemic I have been spending around $750/month on food, but before my spending was closer to $500/month.
* Entertainment: I budget $500/month, before this mostly went to bars, but now with my new apartment I tend to host most of the time which tends to be a similar cost since even though making cocktails at home is much less expensive, doing it for a lot of people offsets any savings. The rest of this money just goes to doing random events with friends, but usually nothing too crazy.
* Side Projects: I have a bunch of side projects that I run for fun that don't bring in any income. Hosting, emails, database, twilio, etc... run me about $500 per month.
* Travel: I previously haven't done a huge amount of travel, but have started doing more and more recently. I spent nearly $5000 on a 3 week trip around Christmas break (Would have likely costed $1500 or so had I gone during an off time). A usual shorter trip to somewhere in the world will usually cost around $1500 which I was trying to do every few months before we entered a global pandemic. On average I budget to save around $700/month for this.
* Misc: This number always ends up a little higher than I would like, I bought a new computer recently for $4000, a new phone, some new furniture, etc.. This number used to be around $350 before those purchases, but is probably closer to $600-700/month now even though it's trending downwards since I don't feel the need to make any purchases during quarantine.
* Transportation: Luckily SF is very easy to get around without a car so I don't feel the need to own one. Whenever I need to go somewhere far away via driving I'll rent a car, or if it's somewhere close I'll just hop in an Uber. I usually average maybe $100/month on all transportation costs (excluding travel) per month.
* Debts: I was fortunate to not have any student loan debts, but while doing my startup I did end up going into debt of ~$20k before eventually closing up shop. However I have fully paid off everything and am now saving.

My spending for the last 3 months: (These are slightly lower than normal due to the pandemic)

Feb: $2400 + $3200 = $5600
March: $1900 + $3200 = $5100
April: $2200 + $3200 = $5400

This means I'm saving ~$3600 or so per month via my base salary. Then I also save all of my RSUs which on paper are worth $10,000 per month (~$5000 after taxes I will realize when we go public). Making my total savings ~$8600 per month. 

**Takeaways**

I really hope this gives some information in to what it's like living in a high COL area. I see so much mis-information being spread around what it's like to live in the bay area. How much/little you actually end up saving, etc...

I obviously don't live the most frugal life possible. I have friends that rent one bedroom in a mediocre apartment of a bunch of roommates that make more than I do just due to the fact they want to save as much money as possible. I personally like having a balance between having a very nice QoL having a nice apartment, eating out, hosting events, etc... while still growing my savings by a nice amount.

This isn't meant to be an argument for/against moving here and working on bay area salary, but it gives some perspective for anyone who is looking to do so. Another thing that shocked me was just how high salaries really are out here. When I came out here I thought you needed 20 years of experience working at Google as a staff level engineer to make money like this, but that's just not true. With just a few years of experience anyone can command these types of salaries from any competitive company. I'm actually pretty confident that I could easily jump companies right now and get a pretty substantial raise, but mostly don't since I'm pretty happy with where I work and have a very good WLB at a high growth company.

I'm happy to answer any questions that people have.",1589775639.0,2020-05-18 00:20:39
459,Spent 50 hours on a take-home assignment only to be ghosted.,753,bgq8l0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bgq8l0/spent_50_hours_on_a_takehome_assignment_only_to/,314,"I can't believe this is actually happening. I'm graduating soon and had applied for a full-time job at a startup. Around 10 days after I had applied they sent me a take-home assignment, and gave me 2 weeks to finish it. 

I was taken aback by it's length, but it was quite comprehensive in testing my knowledge and the problems were quite interesting. Moreover, the email said that my answers would be discussed in detail in a ""personal interview"". So that encouraged me to do it.

It was also pretty clear that I was one of the first few candidates to have been sent the assignment because there were a bunch of typos in it. 

But I was desperate for a job, and decided to put everything else on hold including college and focus on doing my best. I spent the weekend and a few weekdays to work on it. After one week I sent the answers to half of the questions (something I was asked to do). The recruiter was ""very impressed"" by the answers and told me she's looking forward to my answers for the rest. 

So, I spend another few days, including the weekend to finish it up and send in the rest of the answers. I was quite pleased with the work I had put in. Even though I had sacrificed my studies for it, I was sure I'll at least get an interview.

And then..... Silence. 

It's been 2 weeks since then. I have sent a follow-up email but no response. I'm devastated. As it is I'm having a hard time finding a full-time position. That in turn is making my life miserable, I'm having anxiety attacks. My GPA is also suffering because of all this. Can someone advise me on how to get these people to respond? Do these people have no respect for people's time and efforts? Why get someone's hopes high just to fuck them right in the face?


EDIT: a lot of people are asking me to name the company. While I will write a negative review on Glassdoor, I cannot risk linking my Reddit profile to my real identity.",1556108343.0,2019-04-24 08:19:03
460,Are there any books to READ that can help with general programming/career?,754,faxfaj,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/faxfaj/are_there_any_books_to_read_that_can_help_with/,130,"So what I mean is not a book to necessarily teach you a language, but a book that may help with your thought process or how you approach things or preparation for experiences? Similar to how there are books about starting businesses and making money, but there are also books that are more so experiences and words of wisdom. I'm looking for the latter for programming. I have books that teach you the code itself, but was wondering are there books to read for ""wisdom""",1582936713.0,2020-02-28 19:38:33
461,How I got my first developer job with a 2.55 GPA and no experience,754,9v0dx4,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9v0dx4/how_i_got_my_first_developer_job_with_a_255_gpa/,150,"A little bit of background info before I get started. Firstly I'm a 26 year old fresh CS grad that completed his B.S. last May. I had a problem with depression during my time at college and didn't really do anything to help myself until my senior year. As a result my grades were dropping all over the board, and I wasn't really focused in my classes. Despite that, I still did a lot of self-taught programming on the side, so by the time I graduated I had a few personal projects under my belt and developed several marketable skills that made me valuable as an entry level candidate. I even developed a personal website to display some projects. But other than that, by the time I graduated I didn't have a great GPA and no internship experience. 

&#x200B;

My first job offer I got was during a job fair, where I had an on the spot interview, and an on the spot offer immediately after. However this offer was contingent on my GPA being much higher. After sending them my unofficial transcript which already had that GPA, I was sent an official job offer. I thought I was safe, but in August it was rescinded because when I sent them my final transcript they told me that they would not be able to take me on as a developer with my GPA. So here I was, no job, low GPA, and no applications. 

&#x200B;

Firstly, I rewrote my resume from scratch since I knew my old one wasn't going to cut it, then I started applying like crazy. I spent the next couple weeks applying for jobs, doing code challenges, combing this reddit page, and studying up on my algorithms. 3-4 weeks and almost 300 applications later, the only phone call I got was from Revature (so not really an offer). I was dismal, but I decided to post my redacted resume on this reddit page. **Thanks to the great advice I received from everyone here I had great resume.** (I'll link to the post at the bottom) 

&#x200B;

My resume was looking completely different from what I originally had. I started reapplying immediately after I felt comfortable with my new resume, even to companies I had already applied to. I also re-did my website to look more visually appealing. I made the decision to try to apply to 100 jobs a day, and then repost my resume to be reviewed after every 300 jobs, but I didn't even get to 200 before I started getting calls. Two weeks after I started re-applying I had 3 full-time offers:

1- 65k, full benefits, and .5% equity. (start-up)

2- 80k, full benefits, equity to be assessed based on performance, unlimited paid time off.(start-up)

3- 60k, only healthcare benefits. (Big corporation)

I ended up taking the 2nd option and a month later I'm really enjoying my job. So I guess in the end what really made a difference was my determination and relentlessness, constantly reassessing my process, and most importantly never stopping. Thanks for taking the time to read and I hope others are able to learn from what I went through.

&#x200B;

**TL;DR:** After several hundred unsuccessful applications, I reassessed my process, and got my resume reviewed on this sub reddit and reapplied. In the end I got three offers a few weeks later. 

&#x200B;

**Resume Post:** [https://www.reddit.com/r/cscareerquestions/comments/9cgky6/as\_a\_fresh\_grad\_how\_should\_i\_spend\_my\_time/](https://www.reddit.com/r/cscareerquestions/comments/9cgky6/as_a_fresh_grad_how_should_i_spend_my_time/)

&#x200B;",1541633502.0,2018-11-07 18:31:42
462,"[META] Could we include a rule that if a thread is complaining about being unable to find a job, they must include their (anonymous) CV?",753,6jgvcf,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6jgvcf/meta_could_we_include_a_rule_that_if_a_thread_is/,88,"It just feels like so often in these threads people will complain about all sorts of things, talk themselves up in various ways and blame everything under the sun.... then they post their resume and it's a hot mess. I feel like it should be common sense that if you've applied at 1000 places and you're not getting interviews, there's an issue with your CV, but this is apparently not the case.

Thoughts?",1498454832.0,2017-06-26 01:27:12
463,Warning letter over Glassdoor review? what's next?,748,h0d84k,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/h0d84k/warning_letter_over_glassdoor_review_whats_next/,171,"Hello, need everyone's 2 cents.

So some of us left a company and shared our negative experience on Glassdoor. Now two of us got a warning letter from the company lawyer but the letter wording is soft, and it seems the company is not so keen to make itself more 'famous' with legal proceedings.


warning: do not believe when companies respond with empathic comments on Glassdoor. They still go after their ex employees with legal threat under the table.",1591831837.0,2020-06-10 19:30:37
464,How are you applying to 300+ jobs?,746,k3zjav,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k3zjav/how_are_you_applying_to_300_jobs/,270,"I'm a senior at a top 15? school?  idk pretty good school though, and I've been applying to new grad positions since end of august. I've been seeing posts of people saying they've applied anywhere from 300-500 positions and i'm just trying to figure out where you're finding all these applications. I've applied to basically every single one of the apps in the Pitt/CSC New Grad Github sheet and a good amount of jobs outside of that. But I'm at the point where I just don't know where else to apply. Every app on Indeed / Handshake etc. are all either places i've already applied to or are apps that require 2-3+ years experience and definitely not for new grads. help ?",1606783656.0,2020-11-30 19:47:36
465,Fastest way to learn data structures and algorithms in order to grind leetcode?,748,kevojw,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/kevojw/fastest_way_to_learn_data_structures_and/,131,"About to graduate in April 2021, but I pretty much forgot most of the content I learned in the algorithms class I took in second year. So now I need to relearn the essentials of data structures and algorithms to be able to grind leetcode and perform during interviews.

A study route I read that was suggested is watch the Princeton coursea course on algorithms, read 'The algorithm design manual', work through the CTCI, then grind leetcode.

Is all that preparation necessary to grind leetcode. Any advice would be appreciated.

Thanks",1608232833.0,2020-12-17 14:20:33
466,Name and Praise: Skyscanner - hosted a Zoom talk with interns and new grads currently holding job offers to tell us that our roles are still secure and will be going ahead,743,fsptz5,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fsptz5/name_and_praise_skyscanner_hosted_a_zoom_talk/,27,"In these times, especially in the travel industry, it really eased my mind. They hosted a big 'Ask Me Anything' call with all the new grads and interns that have recently got offers. They told us our roles will be going ahead as planned and gave us a form to fill out with what part of the stack we want to work on. 

Quite refreshing in these times of layoffs and freezes. Just hoping its not a big bamboozle.",1585733087.0,2020-04-01 05:24:47
467,"What should you do when joining a new company? Specifically, what should you do in the first few weeks of onboarding and what should be the 30-60-90 roadmap to create the best impression on your manager and your team.",747,gzx6fv,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gzx6fv/what_should_you_do_when_joining_a_new_company/,120,"I am a new grad and will be taking on a SWE role in the near future, and I want to prepare myself to make the most out of my first job. This is my first corporate experience and I want to create a positive impact on my manger and my team in terms of attitude/behavior, communication and knowledge/skills. What should my plan of action look like?

(Any insight by managers on their expectations of new grads would be helpful too)",1591768407.0,2020-06-10 01:53:27
468,Anyone here genuinely fearful for their future?,747,gm35bb,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gm35bb/anyone_here_genuinely_fearful_for_their_future/,411,"Hi all!

I frequent this sub, and while there are a few doom-and-gloom posts the overall spirit feels like ""yeah things are crazy right now but our market is still looking good.""

I'm 33 with a non-traditional background. I went to well-known Bay area bootcamp and worked as a fullstack dev at an international-level company for 2 years. I left last September to start my own consultancy, which I've had to shutter since the COVID lockdowns.

.

For the past 2-3 months I've been trying to get a dev job. I've cast my net over 3 states (WA, OR, CO) including small-town and govt work. I kept my skills up with LC and can talk the general interview questions. I've gotten a few bits from some larger orgs like Amazon, but nothing's panned out to a full job yet. 

.

Meanwhile I'm sitting in Oakland on unemployment which is a de-facto ticking clock. I'm used to a difficult job hustle, landing my first job out of bootcamp took 300+ applications, but it really feels like the scene hasn't improved even with the added job experience.

So I feel like I'm spinning my wheels. I'm doing the positive actions that will (hopefully) lead to employment, but I can't help but feel a certain sense of doom as I go about this. 

Anyone else feeling like this? Any words of encouragement out there? Are there any less-known paths to employment I may be overlooking?",1589843244.0,2020-05-18 19:07:24
469,"American dev who moved from SF area to Europe, comparing my salary and life to the US",748,8guleh,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8guleh/american_dev_who_moved_from_sf_area_to_europe/,306,"Some background: I'm a 26 year old dev currently living in Stockholm, Sweden. I am a dual EU and US citizen but I lived in the US from age 2 to 24 when my parents moved from Europe to California. I did my BSCS at UC Berkeley, worked for two years as a developer for a company in Palo Alto, and then moved to Sweden at age 24 to study do my MSCS at KTH Royal Institute of Technology. I now work as a software engineer in Sweden.

I've seen a couple of posts on here with American devs wanting to move to Europe so I thought I would share my experience and some information about my salary.

Working in SF area
---
* Gross Annual Salary: $105000/year
* Gross Monthly Salary: $8750/year
* Monthly Taxes: $1550 Federal Income Tax + $542 Social Security + $126 Medicare + $616 California Income Tax + $87 California SDI = $2921/month
* Net Monthly Salary: $5829/month
* Tax Rate: 33.3%

Note: My US paycheck was actually biweekly but here in Sweden its monthly. I just converted the biweekly amounts to monthly amounts for easier comparison.

Working in Stockholm area
---
* Gross Monthly Salary: 53882 SEK/month ($6056/month) (note this is BEFORE payroll taxes. In Sweden it is more common to state your salary after payroll taxes but before income taxes. For example, my salary in Sweden is 41000 SEK/month which is after payroll taxes but before income taxes)
* Monthly Taxes: 10721 SEK ($1205) Federal & Communal Tax + 12882 SEK ($1448) Payroll Tax = $2653/month
* Net Monthly Salary: 30279 SEK/month ($3403/month)
* Tax Rate: 43.8%

So in Stockholm my taxes are around 10.5 percentage points more than in the SF Bay Area. However, I you get an insane amount more from your taxes here in Sweden compared to what I got in the US. 

* Healthcare is 100% government subsidized after your annual 1100 SEK ($123) out of pocket maximum. Perscription medication is 100% government subsidized after your annual 2200 SEK ($246) out of pocket maximum. In the US I was paying around $126 each month for my employer health insurance plan (it was a non-HDHP plan as I am injured often since I play a lot of sports so I see the doctor a lot. I had 2 surgeries in my one year of working in the US after college alone) and my out of pocket maximum was $2500 annually.
* I don't have kids just yet (luckily) but day-care is extremely heavily subsidized by the Swedish government. Many of my coworkers in the US were paying $1200+ for their child's day care. Public schools are 100% free (just like in the US). University is 100% free for your bachelor's and master's and the government gives you around $325 each month just for being in school. You can also take out a low interest loan from the government if you want (under 1% interest rate per year). For PhD studies the stipend is quite high and actually enough to live on comfortably. At my school the average stipend was around 30000 SEK/month (after payroll, but before income tax) or 23248 SEK/month net ($2613/month).
* I could go on but the above are just two points that are definitely quite nice perks!

In the end, I have slightly less disposable income compared to what I was making in the US after accounting for medical/dental/vision insurance and bills, transportation, food, phone plan, etc. I haven't worked in the US or Sweden long enough to give a definite amount, but currently I have around 15% less disposable income after my monthly costs ( after accounting for retirement savings). Here are a few bullet points explaining why:

* Having a car is not necessary in Stockholm and actually can be somewhat of a pain in the ass. I was paying a lot for gas, my car finance payment, the bridge toll, and car insurance in the US. Total it was around $500/month for these. Here in Stockholm I am paying under 9010 SEK/year ($84/month) for the public transport pass which includes access to busses, the metro, the commuter train, the land train, and I believe two ferries. Its extremely easy to get from one place to another and the public transit system is simply amazing.
* Of course, medical/dental/vision are significantly cheaper in Sweden as already explained
* People here eat out way less than in the US. Almost everyone at my office and in general everyone I know here in the work force takes their lunch with them to work and eats at home during the week. Eating out is reserved for weekends on occasion or with friends/family.
* Gyms and phone plans are much cheaper
* Renting rooms is cheaper. You can rent a room in an apartment or someone's house in Stockholm for 4000 - 5000 SEK/month ($450 - $560 per month) versus $1250 - $1500 per month in the Mountain View and Palo Alto area.

The downsides so far have been that electronics are more expensive here (sometimes up to 25% more expensive) and clothes are more expensive too. Also, Swedish people are definitely not as outgoing and open as Americans but once you get to know them they are great people.

Overall, I have enjoyed my time here in Sweden quite a lot! I definitely wouldn't mind moving back to the US at some point and spending some more time in the SF Bay Area as I loved it there too, but I could definitely see myself settling down here in Europe when I get older, especially when I have kids.

Hopefully this helps if anyone is planning on moving to Europe! I know every European country is a bit different but Finland, Norway, and Denmark are all very similar to the above (except you can make a bit more money in Denmark and Norway than here in Sweden). Feel free to ask any questions if you have any.",1525417187.0,2018-05-04 02:59:47
470,My Senior Engineer's birthday is coming up this weekend. He's been an amazing mentor and source of guidance since I started earlier this year. Should I get him something for his birthday? Or do anything special?,746,jgqr17,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jgqr17/my_senior_engineers_birthday_is_coming_up_this/,236,Not sure what to do for his birthday. He's been really helpful and I couldn't ask for a better mentor. Should I get him something to show my appreciation?,1603500246.0,2020-10-23 20:44:06
471,"Employer sent out an ""anonymous survey"" encouraging us to go back to the office",745,gnvo9e,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gnvo9e/employer_sent_out_an_anonymous_survey_encouraging/,283,"I work for a small company and we have been working from home since the start of the pandemic.

A few days ago we were sent an ""anonymous survey"" (they tell us it's anonymous but anyone with half a brain knows otherwise) in regards to returning to the office. In it contained passive aggressive questions asking us how our productivity decreased working from home.

It also floated measures to us like our employer checking our temperature, and us filling out a medical form daily. The most ridiculous idea floated in the survey was us installing a contact tracing app where our employer could track us (no fucking way I'm doing that).

It seems they really want us back into the office because they signed a multi year lease with the building. Honestly I have no desire to go back and risk infection for my family. Hell, we don't even talk to each other in person!

This is a weird situation that I feel a lot of people may be running into and I'm not sure what to do. Any ideas?",1590091698.0,2020-05-21 16:08:18
472,Name and shame: Eventbase (plus bonus buffoonery by me),739,cto2ss,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cto2ss/name_and_shame_eventbase_plus_bonus_buffoonery_by/,176,"So Eventbase is a company in Vancouver, BC, which is a ""startup"" with more than 100 employees and clients such as Microsoft, SXSW, Comic-Con, Sundance and Olympic Games. I need to vent about what a horrible hiring process they have. I applied for the role ""Web Developer"" and got a call back even though there was a skill mismatch (red flag #1).

First, they called me for a ""phone screen"" where they just got to know my background a bit better. This went fine. After that, I was called in for an in-person interview with the team. I asked if it would be a technical interview and the recruiter (head of HR) said no. When I arrive, I am asked multiple technical questions and am asked to solve three coding problems on the whiteboard. This was upsetting and unexpected, but I rolled with it. The team was surprised to hear I didn't know this was happening. 

After the interview was over, I asked what the next steps were, whether or not there would be another interview, or whether this was the end of the process and I would just hear back about the decision. The manager of the team said this is it.

So of course I next get an email from the recruiter asking me to complete a PHP coding assessment. Essentially, I have to spend 2 hours writing an app in PHP that manipulates JSON data. Again, I had no idea this was coming, and in all of our previous conversations I made it clear I have no experience with PHP, and everyone told me that wasn't an issue as I would learn on the job. The email she sent had typos, was poorly formatted, and just looked like she copy-pasted part of it in from elsewhere. Basically, unprofessional. I got kind of mad at this, but after I cooled off I completed the assessment and sent it back with a brief mention of how it was a surprise but I was happy for the challenge. 

When she (the recruiter) replied, she was very defensive and tried to backpedal and say that they made it clear it was a PHP position so an assessment should have been expected. Ok, sure, whatever. After the team reviewed my code, I got another email from her saying the test went well. Here is the exact email she sent (minus greeting/signature):

""Thanks for completing the test for us, it was good!

I want to bring you back in to meet the rest of the team. The reason for this final stage is we want to make sure that you are totally comfortable with the scope of the role, knowing what you know now.

What days / times work for you later this week / early next?""

To me and to my friends and family in the industry, this reads like a ""handshake"" interview where I just meet the team, get a tour of the place, and see if we are a good fit personally. Maybe I was wrong in this assumption, but I think we can all agree this does not read like ""Please come in for a final interview where we will ask you dozens of behavioural and situational questions from a list"" which is what ended up happening.

When I came in for this final interview, as soon as I sat down the team manager basically said ""ok, I have a list of questions to ask you now"". I was really shocked by this because I wasn't expecting this at all. I suppose I should have asked for clarification from the recruiter, so that's partly on me. But here's where it gets fun... this is where I screwed up.

Realizing I was misled by the recruiter AGAIN put me in a really bad mood. I was sick of walking into that building expecting one thing and having a totally different thing happen. If you've been keeping score, this was the third time the recruiter/team misled me about the process. So I was pissed, especially because I thought I was basically already hired (I know, I know, very naive of me). And it showed. I was rude, arrogant, clearly had an attitude, and said some pretty stupid things. I also complained about the recruiter to the team. It was a mess, and when I left I felt really embarrassed about my behaviour. Oh, well. Shit happens. Sometimes you get overly emotional and make mistakes. So I wrote it all off and resigned myself to keep looking for a job elsewhere. I also wrote an apology/thank you email afterwards because I'm not a complete idiot.

UNTIL. I get an email from them a few days later asking for references and requesting a phone call. Over the phone, the recruiter says she would like to hire me and wants to confirm I'm still interested. WTF? After all that, they want to hire me? She asks when I can start and I request like a month from now so I can enjoy some time off where I'm not in school or applying for jobs. You know, a real break. She gets upset at this and very curtly tells me ""No. That is too long. The team needs you NOW."" and that the ideal start date would be in 10 days. What...? Sounds fishy... I say all right, but I would prefer later, especially since I had other companies I was waiting to hear back from.

Then she emails me an offer! I can't believe it. They're actually hiring me. The whole thing made me feel like they had zero other applicants and are just extremely desperate. The offer was for 55k a year with standard vacation/benefits package (nothing amazing). I found this rather low based on my research/conversations with others. For context, I have like 10 friends in the CS industry, my dad has been working in CS for >30 years, and my brother who is also in CS is really involved with the hiring process at his company and says that they just hired a guy who completed a two week coding bootcamp for 55k. My boyfriend's brother got an offer for 65k and he has a two year diploma in CS with one year of industry experience. I have a four-year bachelor's in CS and 1yr 8mo of industry experience. I mean, it's not super impressive or anything, but seems valued at higher than 55k. 

But you know, they intentionally give you a lower offer since they expect you to negotiate (or so I'm told). So I politely reply and ask for closer to 65k and also ask that they include in the contract the fact that overtime is paid in lieu with time off since that's what the team manager told me. The recruiter replied with an impolite email saying the salary is non-negotiable (and is reflective of the market rate!) and that ""If you are looking for a company that follows a much more traditional / old school clock in clock out methodology then you might want to consider not entering start up tech."" which isn't even relevant to what I asked. (EDIT: forgot to mention the contract requires four weeks notice to quit... yeesh)

Basically, the place seems like a shitshow. I should have known from all the negative Glassdoor reviews but I held out hope they were outdated or something. Nope. What a mess. The recruiter seems incompetent and everyone was giving me incorrect information. Their compensation is a joke and their emails are unprofessional. Here's another example of an email sent by the recruiter:

""I didn't back form you on whether you got the offer from me - I need to update the team today, where do we stand?

Wamrly,
<name>""

She also misspelled her own name in another email...

She also kept pressuring me to accept the offer. She gave me two business days to look at it before saying they have a 3pm deadline, and checked in with me basically every day saying she needs a reply. Really, it was only one business day, because she sent it on Thursday evening then left immediately for a vacation until Tuesday. The deadline was Wednesday 3pm. At the end of the day, I rejected their offer and included research about market rate CS salaries in my email.

So there it is. The disaster that is Eventbase. By far the biggest red flag is the fact that they were willing to hire a buffoon like me given how I acted in the final interview. So, avoid!! Or don't, if you want to get hired easily. But it sounds like it's a very stressful work environment with unpaid overtime and involves ""working on 5 different projects at a time in one week"". When I spoke with the team about what working there was like, both team members said it was great because they came from small startups that had even worse working standards... clearly Eventbase preys on the inexperienced who don't know how much better life can be.

I hope you enjoyed this story because now that it's all over I find it pretty amusing how things shook out. Phew.",1566454778.0,2019-08-22 02:19:38
473,Easy Job vs. Software Dev,742,jcp05o,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jcp05o/easy_job_vs_software_dev/,323,"So I'm kind of facing a dilemma right now. I graduated with a CS degree from a decent state university in April 2020. Since then, I've been applying for entry software developer jobs but haven't found any. In the meantime, a friend of mine told me about the place he works at and absolutely loves it, so recommended I apply. I figured I could take this job to pay the bills while I continue applying for software jobs. 

 I was recently hired into the job as basically a handyman for a government-funded transportation agency. The job requires no education other than a high school diploma and CDL license, and no special skills. The thing is, this job is protected by a union and getting hired is typically referred to as hitting the lottery. The only way to get this job is by knowing someone in the company and also getting lucky on top of that.  Pay is around 100k a year if you work enough overtime (which is readily available if you want it) and around 125k after 5 years with pay progression, in a relatively low cost if living city. This job has full benefits, vacation pay, amazing healthcare, etc. The union is very strong and there's basically no way to get fired or overworked. During a typical 8 hour shift, you work for 3-4 hours and can do whatever you want for the other 4-5 hours (sleep in your car, watch netflix, sometimes leave a couple hours early, etc).

Now my dilemma is: I'm kind of enjoying it honestly. I make really good money, have great benefits etc. and don't have to worry about job security. The thing is I kind of feel like a loser for getting all that education and working such a simple job. I almost feel guilty for taking the easy road. But at the same time, if I eventually get a software dev job and leave for it then end up getting laid off after a couple years, I'll most likely be in worse financial shape than if I stayed at the job I have now.

One other issue I have is sort of a double-edged sword: with this job I don't have to worry about staying on top of the latest frameworks/technologies and studying. I can just go to work, put in my time and enjoy the rest of my life without a care in the world about work. With software development it's like you constantly have to be learning and it can take a considerable toll on your time and energy. 

So what would you all do in my shoes? Just count your blessings and stay at the easy, good-paying but simple job or push yourself to earn similar money but have to work harder doing software development?",1602938433.0,2020-10-17 08:40:33
474,"Folks that were laid off, how bad is the job market out there?",741,gtctom,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gtctom/folks_that_were_laid_off_how_bad_is_the_job/,416,"
If there are any international students, I'd like their perspective as well.",1590867075.0,2020-05-30 15:31:15
475,Uber new grad offers rescinded,741,gbtc5q,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gbtc5q/uber_new_grad_offers_rescinded/,264,Just heard from HR and had my new grad offer rescinded. At least the internship is still happening?,1588405971.0,2020-05-02 03:52:51
476,Announcing the Reddit Internship for Engineers (RIFE),738,7788qp,cscareerquestions,https://redditblog.com/2017/10/18/announcing-the-reddit-internship-for-engineers-rife/,1,,1508377367.0,2017-10-18 21:42:47
477,Most of your extremely specific questions whether Did Anyone Intern At Insert Name In Insert Location With X Background and Sqrt(tan(573.2)) GPA While Being Sub-Saharan Minority And One-Quarter Penguin topics belong in the Daily Chat section. Would you at least make an honest attempt of using it?,739,a9icc9,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/a9icc9/most_of_your_extremely_specific_questions_whether/,96,"You know who you are. I won't call you by name, but you know I'm talking to you.",1545801001.0,2018-12-26 00:10:01
478,I am Ammon Bartram and I have done 900 programming interviews and phone screens in the last 2 years. Ask me anything!,745,5y95x6,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/5y95x6/i_am_ammon_bartram_and_i_have_done_900/,309,"As a co-founder of Triplebyte, I've personally interviewed 912 engineers over the last 2 years. I've also interviewed founders and hiring manager at 200 companies about their processes (including Apple, Facebook, Dropbox and Stripe). I like to gather data about technical hiring and blog about it: http://blog.triplebyte.com/bootcamps-vs-college. Ask me anything about hiring / interviews!

Proof: https://twitter.com/triple_byte/status/839245320353546240

I'm heading out, folks. Thanks for all the great questions!  ",1489022011.0,2017-03-08 20:13:31
479,"Stop stressing, enjoy college",742,3vqryn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/3vqryn/stop_stressing_enjoy_college/,355,"I see too many college students on here asking what projects they should be doing over christmas/summer break and attempting to memorize cracking the interview books.  You're working way too hard and you'll be working everyday roughly 8 hours for 40 hours a week for the rest of your life.  Stop taking this period of your life for granted, trust me.
Edit: As other people said, unless you're trying to get into the big 4.  you are overworking yourself",1449487092.0,2015-12-07 06:18:12
480,Just got fired for not being stressed out enough by a difficult project,740,e3gh31,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/e3gh31/just_got_fired_for_not_being_stressed_out_enough/,340,"I worked for the company for 4 months, fresh grad, with decent internship. I asked my CTO for a raise. In the following discussion he told me that even though I finish every task they give me, I am melancholic and not pro-active enough. I told him I don't feel a need to be, since there are already more competent people in my team who seem to manage just fine, and who don't include me in the most of design discussions with a customer. I was also never given any deadline, so I was never really stressed out. CTO's response was that I've surely noticed the difficulty of the project (which I did) and that I should've asked my project manager for more involvement (which I didn't because I always had some work to do).

The next day the CTO fired me, basically for not caring enough, and me asking for a raise is just proof the job doesn't satisfy me. The teammates then personally confirmed to me, that I was doing a good work, even though I seemed uninterested.

My salary was slightly below average for my demographics and area, and I asked for a slightly above average pay. To my best knowledge.

Is this common / valid reason for being fired? Was it really my fault? Should I just pretend my interest in the next job? What are your thoughts?",1575071756.0,2019-11-29 18:55:56
481,Quit my job without finding a new one first,740,dm3u0c,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dm3u0c/quit_my_job_without_finding_a_new_one_first/,172,"This is an update to a previous post I made a couple of months ago.

I'm surprised how things turned out after I left my job so I wanted to create this followup.

So after submitting my two week notice I was immediately asked to talk to the owner and top manager for the company, neither who are technical. They kept asking me why I was leaving and I replied that I was burned out each time, sort of like they didn't believe that to be the real reason.

During this hour and a half chat they kept trying to reassure me I was doing great at the company and that if I wanted more money that I would eventually get it.

Two things really bothered me about this meeting, the first was they never gave me a number and I didn't throw one out there either because I knew I'd probably undersell myself again. The second was that they promised a raise would come first thing next year once the company had the funds. This showed me they weren't serious about retaining me so it made it easier to leave.

After I left I found out that my replacement didn't have the experience they said he had but that he had a lot of ""years experience in the field"", I also found out they gave him 35k more than what I was getting paid. About 40% more than I made. The kicker is that they didn't even do a technical interview, he interviewed for 30 minutes and was hired on the spot.

The pay difference made me fume for a while but then it donned on me that I was going to be severely underpaid regardless of how well I did for the company and that leaving was probably not a bad idea, even as abruptly as I did.

Anyway, I've been out of work a few weeks and I'm starting to feeling human again so that's something. I'm hoping I get the drive to code like I used to, that was my main priority for leaving.",1571885733.0,2019-10-23 22:55:33
482,[Resource]: MIT Career Development Handbook [pdf],743,8rqmsb,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8rqmsb/resource_mit_career_development_handbook_pdf/,68,"Many of us struggle to find a good guide to prepare resume, nail interviews and find better jobs. This is a nice guide from MIT

[https://gecd.mit.edu/sites/default/files/about/files/career-handbook.pdf](https://gecd.mit.edu/sites/default/files/about/files/career-handbook.pdf)",1529266313.0,2018-06-17 16:11:53
483,Why are you a hot commodity?,739,i5akkv,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i5akkv/why_are_you_a_hot_commodity/,507,"For the guys and gals who seem to constantly have recruiters contacting them for well paying jobs ( $100,000+ ), or seem to have constant quick success in the job search; what makes you so valuable?

Provided you are willing to share, what skills do you have that makes you such an asset?  How did you gain these skills?  Is your experience more the reason of your values rather than having a grasp of a certain skill?",1596820284.0,2020-08-07 13:11:24
484,Common falsehoods about big tech,735,eqkbp1,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/eqkbp1/common_falsehoods_about_big_tech/,526,"Like a lot of you I spend a good amount of time on tech career related sites like this one or Hacker News. I’ve noticed that whenever the topic of big prestigious tech companies comes up, there are often a lot of people making strong negative statements that goes against my own experience and that of my friends and coworkers. While there are many good reasons not to work for one of these companies, I do think they present a rare opportunity to advance ones career and financials in today’s market (and who knows how long that will last) so I’d hate to see people self select out based on something that isn’t true. 

To be clear, I’m not saying that these things never happen, just that they aren’t the norm from what I have seen. My personal experience is about 4 years of big tech work, across 3 teams, 2 companies (and a couple of years at a mid sized company and a start-up before then). 

**Big tech companies have terrible work life balance**

From an organizational standpoint all of the big tech companies promote a healthy work life balance. Obviously that doesn’t mean that it actually gets implemented, but in my experience the majority of people work something like 30-45 hours per week.

The people who work longer hours than that tends to be due to the following reasons:
* People who are trying to get on a fast track for promotion. These companies are full of ambitious people so this is relatively common
* Teams that have a bad (often inexperienced) manager. I haven’t seen this personally, but I’ve heard stories
* People who are struggling and believe working longer hours will get them out of the hole. This does not tend to be a good tactic to stop being a low performer

Ambitious people are somewhat common but overall, people really don’t put in crazy hours, and since people tend to come in and leave at very different hours no-one really knows how long you spend in the office anyway. I’ve never heard of a manager questioning how long someone spends in the office

**Unlimited PTO means no PTO**

Unlimited PTO comes with a few benefits to the employer:
* They don’t have to pay out accrued vacation when someone leaves
* They don’t have to track time off as diligently
* Many employees self select into not taking a lot of vacation

For employees it has a couple of benefits:
* You don’t have to be as “tactical” with your PTO, you want time off, you take it. There’s also no incentive to save it so you may as well take it
* If you’re a senior person and/or a high performer it’s an easy “unofficial” perk you can take advantage of. I see people who are doing well taking 8+ weeks of time off and no-one batting an eye

For regular employees you should just consider it about the same amount of vacation as you would get at another company (3-4 weeks). No-one is going to care if you take that much unless your team is deeply dysfunctional. To reiterate my initial caveat, I’m not claiming unlimited PTO is better, I’m just saying for most people it’s about the same as the vacation you'd get elsewhere. 

**The interview process is beyond broken**

There are many issues with the standard tech interview process but lately the counter movement has been particularly rabid. In a normal interview loop you will not be asked to implement a red-black tree. You might be asked how you would find the K largest elements in a list. You will not be expected to silently have written out the optimal solution without any syntax issues within 5 minutes. You will be expected to be able to quickly sketch out a naive solution and start discussing how it can be improved. 

But the most important point: these interviews are not the only type of interview in a normal loop, and they’re really only the *most* important when you have no other experience. I’ve had several loops personally where this style of coding question were fewer than half of the interviews, and as you get more senior it only goes down further. 

**In the Bay Area you're living paycheck to paycheck unless you're making millions**

This one is especially prevalent and seems to come from people who’ve spent 5 minutes on Redfin and called it a day. To exemplify using people most readers here have interacted with (or still do for the students reading): there are currently thousands of grad students in the Bay Area. A large portion of these students are living off a $30K stipend as their only source of income. Their lives are definitely not kush, but they make do, lead enjoyable lives, have hobbies, travel, eat out etc etc. I’ve done this personally. Now, if they all can make do on $30K, anyone on a “measly” tech salary of $100K here really shouldn’t have a problem. Yes, if you have a family the equation change, and you can always come with a set of requirements that price you out (and that’s totally fine, knowing what you want from life is powerful) but this general accepted wisdom that a single person making $100K would be “struggling” here is pretty out of touch. 

**In summary**

These jobs are not perfect, and your day to day won’t be heaven on earth. But they are pretty good, better than most other corporate jobs in my experience, and the pay and benefits are truly outstanding so make sure the reason you don't pursue them matches reality.",1579401549.0,2020-01-18 21:39:09
485,"People Who Make 200K A Year, What do you guys do on a daily basis?",742,cz88l1,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cz88l1/people_who_make_200k_a_year_what_do_you_guys_do/,554,What is the difference in responsibility between a developer making 65k vs someone making 200k?  What is your daily schedule look like?  What type of project do you work on?  Thanks!,1567561762.0,2019-09-03 21:49:22
486,"For those of you who got your internships cancelled or are still looking, Qualcomm is still hiring for summer interns and new grads!",733,fobyaj,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fobyaj/for_those_of_you_who_got_your_internships/,74,"A ton of companies are pulling away internships and freezing hiring. I received and email from my school that Qualcomm is still hiring and this seems to be a good sign that the also don't plan on cancelling their internship either.

Here's the application link for SWE internship:  [https://jobs.qualcomm.com/public/jobDetails.xhtml?requisitionId=1975484](https://jobs.qualcomm.com/public/jobDetails.xhtml?requisitionId=1975484)

SWE New Grad:  [https://jobs.qualcomm.com/public/jobDetails.xhtml?requisitionId=1975746](https://jobs.qualcomm.com/public/jobDetails.xhtml?requisitionId=1975746)

They also have openings for hardware engineering, systems engineering, and IT. ",1585108793.0,2020-03-24 23:59:53
487,"Recruiters, what is your ideal interaction with a student during a career fair like?",738,cs58tl,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cs58tl/recruiters_what_is_your_ideal_interaction_with_a/,134,"What leaves a good impression on you? What do you expect the student to talk about vs. things you find unnecessary? Thanks!

Edit: Thank you so much for all the responses! Working daily on not letting the reddit fame get to my head :)",1566182814.0,2019-08-18 22:46:54
488,Advice from women devs on the everyday slights,732,a6708a,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/a6708a/advice_from_women_devs_on_the_everyday_slights/,377,"I am a fairly new, woman developer, but I keep running into the same problem with some male developers. I am pretty shy and very non-confrontational so it always catches me off guard when I am confronted by it. To elucidate my point, I have listed a few of the interactions.

1)It was the last day of the sprint, and my story required a trivial code change in a file that a  senior developer had written. He was out that day so I sent him an email saying I was making the change due to the deadline. The change was small, it passed unit tests, functional testing, and code review. There were no issues with the code. 
 I was able to finish my story, and we had 100% sprint completion. The next day I was met with a long email with my boss cc'd about how I should not have touched his code in the develop branch.

2)I reserve a room sometimes for instance if I need to talk to Tech Support so as not to disturb my cube mates. A peer stops by when I return to my desk to ask if I am having secret meetings and getting information separate from the team. I am very deliberate about sharing information and helping my team.

3)I work with an older dev who is unfamiliar with some of the tools with which we work. Frequently, he calls me to his desk for help, which I am glad to do. However, in meetings in front of everyone when someone states a relevant point, he will turn to me and very loudly ask, 'you got that, right? You are following this right?' in a condescending tone. However, privately he is always going to me for help with his code.  

These are just some of the more annoying interactions, but I have plenty more. Does anyone have any suggestions or tips about dealing with the onslaught of little daily papercuts? I am finding this to be hardest part with my job.",1544838181.0,2018-12-14 20:43:01
489,I hate every job,732,4wqqvx,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/4wqqvx/i_hate_every_job/,330,"I've been working in software for 10 years. I'm good at it, and I'm at a point in my career where I have my pick of jobs and working arrangements. I am very well paid, good benefits, work from home whenever I want, etc.

Unfortunately, I've come to realize that I hate every job I get, and I'm starting to hate myself for continuing to work these jobs.

Things I hate:

* The endless, mindless grind of capitalism--8 hours a day at least, but why?
* Turf wars / middle managers
* Incompetent people who contribute nothing and slow everyone else down
* Meetings where I am expected to contribute even when there is nothing to discuss
* Executives and their money-grubbing bullshit
* Developers and their arrogant nerd bullshit
* The exhausting office sociopolitical environment 
* The exhausting need to maintain a pretense that I like my coworkers/care about my job/think my company is interesting or unique

I have tried a lot of things: Changing industries, changing jobs, working for startups, mid-size companies, big companies, changing tech focus. I've tried slacking off but then I feel guilty. I've tried working hard and ""doing good work for its own sake"" but I still feel like I'm helping a machine that I'd rather dismantle. 

And I am starting to lose respect for myself, for not finding some way out of this endless rat race. But let's be real here: It's not that easy to become independently wealthy.

My job right now is to build an intelligent system that helps health insurance companies find grounds to deny claims. I'm building shit that I hate, and if I don't build it, someone else will.

If I wasn't building that, I'd be helping with some useless website that wastes people's time, or I'd be helping write code to power some useless physical product that people don't need to buy, or else maybe I could build business systems that help companies lay people off--those are always profitable.

I'm afraid that within another year, I'm just not going to be able to make myself do the work anymore, regardless of the need.

Why is it this way? Do we want it this way? Who decided that things would be like this? Has anyone else ever felt this way? Is there anything I can do?

**edit** Thank you for the huge response to this thread. You guys cheered me up in various ways. I still hate every job, but it's very comforting to know that so many people feel the same way. I thought I was the only one.

It's interesting--this is the most successful post I've ever made on Reddit. Over 300 comments now, and it was at the top of /r/cscareerquestions all day yesterday. At least 50% of responses to my post said some variation of ""I feel exactly the same way."" 

So isn't that a majority? When is the next vote? Or are we all stuck in this Black Iron Prison?",1470699660.0,2016-08-08 19:41:00
490,"CS Recruiters: What was a response that made you think ""Now youre not getting hired""?",726,d8lscf,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d8lscf/cs_recruiters_what_was_a_response_that_made_you/,699,"This could be a coding interview, phone screen and anything in-between. Hoping to spread some knowledge on what NOT to do during the consideration process.

Edit: Thank you all for the many upvotes and comments. I didnt expect a bigger reaction than a few replies and upvotes",1569353078.0,2019-09-24 15:24:38
491,Take care of your eyes!,729,6b13qu,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6b13qu/take_care_of_your_eyes/,91,"""Computer vision syndrome"" is a real thing, especially for those of us that spend at least 8 hours a day staring intently at a screen. Speaking from personal experience, it can significantly impact your ability to code and make your life miserable.

I started experiencing issues with dry eyes around the time I graduated and started my first full time job. Initially I just noticed issues with my contacts getting foggy and my eyes feeling irritated in the afternoons. However, it got progressively worse. I went to an eye doctor who just sort of assumed I had typical dry eye syndrome / MGD and had me do all sorts of stuff that didn't really help. (Went from monthly contacts to dailies to glasses, tried tons of OTC eye drops, a steroidal eye drop, Restasis, warm compresses, and Omega 3 supplements.) It got to the point where my productivity at work was tanking because my eyes felt constantly fatigued, dry, and blurry. I would leave the office and barely be able to keep my eyes open in the sun some days.

I finally went to a dry eye specialist and got some actual help. It seems like the root of my personal issue is primarily bad blinking. They were able to image my blinking and determine that I pretty much never fully blink (there's always a tiny slit between my eyelids). **This is apparently a super common thing for people that work on the computer.**

They gave me some super simple eye exercises to do, and within a few days my eyes were already starting to feel better (in conjunction with still taking eye drops when necessary). The first exercise is the 20/20/20 rule -- every 20 minutes look at something 20 feet away and blink 20 times. The other one is just: close your eyes for 2 seconds, squeeze them shut for 2 seconds, then open them for 2 seconds. This helps train you to blink properly. After all the time and money I spent on other options I'm pretty amazed that something this simple has helped this much.

**tl;dr** - blink properly, take frequent breaks, and see a dry eye specialist if that doesn't help. Life sucks when you have constantly dry/irritated eyes!",1494749579.0,2017-05-14 04:12:59
492,What are some of the odd reasons you've been rejected?,729,fgx9vi,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fgx9vi/what_are_some_of_the_odd_reasons_youve_been/,446,"I was told I wouldn't be advancing past a phone screen because when I was asked what would I do if a method had ""too many parameters,""  I said that I would refactor it into multiple methods. The ""correct"" answer was to put each parameter on its own line apparently. \*cringe\*

What are some of the odd (or oddly specific) reasons that you've been rejected?",1583962652.0,2020-03-11 17:37:32
493,Sick of office people contacting at off times.,719,hpwcmb,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hpwcmb/sick_of_office_people_contacting_at_off_times/,292,"My colleagues message me on slack at times like 9 pm, 10 pm when my work time is from 11 AM to 5- 7 PM. They also call on cell /WhatsApp, send WhatsApp messages after work and on weekends. Sometimes I ignore them but I can't directly ignore all those especially when they are from my manager. Even further one of them calls on weekend to ask if I am free and since I can't deny asks me to do some work because there's a meeting on Monday and there's work pending. I am not sure which would be the best way (i) putting the phone on aeroplane mode (ii) do not disturb mode (iii) blocking all of them. What do you suggest?

Note: None of those has been very urgent yet.

**Update/FAQ:**

* **Timings:** There are no official timings, on my first day I was told I have to reach by 11 and later I observed everyone left by 5.30 or so. They call it flexible timings. So there's no fixed time when to stop working.
* **Company**: It is a startup with 15 people in and everyone is quite frank and the ones at the same experience level as me are more or less like friends. Other companies in my county - which is neither in the USA nor Europe -  have more or less this same kind of bad work culture.
* **Changing Job:** Changing job might not be possible as I might go for higher studies in a year.
* TODO",1594597191.0,2020-07-12 19:39:51
494,Manager is having another developer check my work. Should I start looking for a new job?,723,ggfdu7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ggfdu7/manager_is_having_another_developer_check_my_work/,238,"(5 years Software Engineering experience) I was hired into this company personally by the CTO without an interview, because I had worked with him before (on another project, in another company) and he had really liked my work from the previous job. Before I started the job, he mentioned to me that all of the current developers have made the CEO mad beyond belief because after two years of working on a development process, a better distribution process, and fixing the massive critical issues, they had not made any progress. He told me that they would all ""go away soon"". I have to agree with him, they were the furthest thing from professional developers I think I have ever seen in my career.

The CTO told the CEO about me, and brought me in with a healthy salary. I begin working there and immediately started recommending changes. Which the CTO reinforced. I was tasked with hiring other talented developers. We went from complete cowboy / crank land to using Agile/Scrum, nearly full CI/CD, and our critical issues went down from a couple hundred plus a day to perhaps one to two a day (we had full time staff members dedicated to manually fixing our database, after we got the issues down the CTO fired them). Me and a few other talented developers managed to achieve this within 3 months, and almost all of the previous developers, have been fired (the CTO did it of his own accord).

At 4 months into the job the CTO leaves for a better opportunity. A new CTO was appointed. The new CTO hired some new developers and insisted on keeping the India team. I spend about 50-80% of my 8 hours teach and training them. Then I spend the rest of the time working on my tasks. The late at night I spend my time teaching the India team or helping them. The CTO is well aware and condones that I do this.

Another month goes by and the project manager began having developers from India check my work. They are not the most skilled and simply check if issues appeared in this version but were not in the version before. My problem with this is, our software is so bad, that when you fix a link so that it goes to its required designation, the designation and all of its fields and data is usually broken too. I have also noticed that they are beefing up the India team and have me train them more. Now I am really starting to get concerned. I think I can start to see the writing on the wall. **It looks to me like they are going to beef up the India team and get rid of the onshore developers to save money, now that the software is stable.** Even if they don't get rid of the me, I am being seriously overworked and experiencing burnout anyways.

I have now learned the meaning of, ""programming yourself out of a job"" first hand. I believe in capitalism, so I get that my company wants to offshore the work and fire me (I live in US). But I am also free to move on whenever I like, in a capitalist environment. Personally I try to work longer than a year at every job, but I am seriously considering getting a new job, like now. Though with coronavirus and the world being on lockdown... I am not really sure that I can find a high quality job. Even though I have only been there for 6 months, do you guys think I should move on? Am I being paranoid? Thoughts? I have seen how this company lays people off and they typically blindside people. And they don't give out any severance, not that I have seen.

&#x200B;

**Edit (explains how my work is being checked, and how I have decided to handle this):** Many people are mentioning that checking my work is good. I agree however these are not code reviews. Its just an offshored Developer acting similar to QA. If there is a bug in the new version X.Y.Z and there was no bug in X.Y.Y then it is documented as my fault, and they pick any ticket where my code has touched that feature. I have tried speaking to the Indian developer on the phone and asking how I am responsible (we have multiple developers...). They always agree that it isn't my fault, but keep writing in the documentation that I am the main cause for the issue. I have tried talking to the Project Manager and they always seem ""busy"" or unresponsive when I bring it up. What really bothers me is that this a new thing and is only done for me. Its basically an audit, so if they feel like my work is inadequate thats fine, but not giving me a chance to defend myself? It all seems really shady. Thus I originally asked if I am being paranoid and if this might be happening to other people.

**TLDR:** Me and a few other developers came to a company to clean house, which we did. Now I am suddenly under strange and unusal code audits from the India team that I have to train and that is also getting beefed up.

**Steps I for to take gathered from the advice given:** It sounds like, from the comments here, there are a few things I should do.

1. I need to check with the old CTO if he would be willing to help me out.
2. I need to talk to the new CTO about what his plans are, and see what his answer is (if he is genuine and gives me a REALLY good reason to stay I will). Based on that I will continue to 3.
3. I need to start looking, and even though I like stability (call me old fashioned, but I just want to hone my programming skill and work the same company my whole life, in my home city, but I understand that is not how our industry works), I always should be looking for the next best job. Or apply to a FANG, which I just might do.
4. I need to just smile and do the circus act till I find a better job.
5. **Most importantly** follow helper543's advice. I think it is a really smart way to handle companies like this and make a lot of money. Though I won't know for sure until I try it ;)

My thanks to everyone for taking the time to read this and offer their input!  =)

&#x200B;

**6 month update:** Hey guys wanted to update everyone. After this post I began looking for a new job. I did speak to some of my contacts and found some suitable jobs (work environment wise). None of them paid as high as this one. And non of them offered the benefits I needed. (We are talking a 20%+ drop in Salary.) I have still been looking but I have not found anything that will pay me what I currently get paid. Which means that I have still been working in the same job. While I have been working in this job, I have seen our off-shored contractors royally screw up the software. Multiple times. It was hilarious to watch. I have had to help fix the issues every time. One by one they have been slowly let go (A few every week). Suffice to say 80% of them are gone (in my department). Now we are back to hiring onshore. Honestly, I am now convinced that IT career is a circus. Still looking for a better job, that at least pays close to what I am currently making. Nothing yet. Keep in mind I am paid very well, for my level of experience and location. (Also I didn't get any FANG jobs X/ ).",1589059523.0,2020-05-09 17:25:23
495,I’m being recruited by a porn company - how do I evaluate this opportunity?,722,ajfqr0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ajfqr0/im_being_recruited_by_a_porn_company_how_do_i/,359,"Hey folks -

So I have started talks with a well known, high traffic porn site that’s ramping up hiring. The salary range is +50% higher than I make currently with a significant title bump.

This offer caught me by surprise. I don’t know how to fairly evaluate it against the other positions I’m considering. I don’t know how to think about the impact to my professional reputation, even though the parent company has a very generic SFW name. I don’t know what future opportunities it might close off.

I don’t know what I don’t know.

Given that I am OK working for a porn company, how should I think about this job?

EDIT: thank you all so much for your comments! This thread blew up and I’m doing my best to respond.

EDIT 2: I’m still here (post is 5 hrs old) and reading every comment.

EDIT 3: (post 1d old) thank you to everyone who commented, PM’d, and voted. I have read every single thing shared with me and appreciate your support and thoughts on this complex topic.",1548385256.0,2019-01-24 22:00:56
496,Company I got offer rescinded from is now hiring junior software engineers. How should I approach this?,722,iekdps,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/iekdps/company_i_got_offer_rescinded_from_is_now_hiring/,68,I'm a new grad (May 2020) and had my offer rescinded in March/April due to the pandemic and the company not doing well. I saw that they recently listed postings for a junior software engineer role. Should I try to get my offer back by emailing the recruiter about this position? I know that they're not doing well but I'd rather work for them for now while searching for a different job.,1598138839.0,2020-08-22 19:27:19
497,"No internships, New grad 4 months of hard work and finally done",722,dzo83x,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dzo83x/no_internships_new_grad_4_months_of_hard_work_and/,109,"**TLDR:** 2.9 GPA (good school) but no internships no work exp nothing. Very dumb for sure and was unsure if I was able to do CS or be a software engineer. Said fuck everyone who thinks that (even myself) and went all in. In addition, long time GF broke up with me during the interview process (actually 3-4 weeks before my FAANG onsite) survived and lived to tell the tale.

**DISCLAIMER:** I'm not saying FAANG is the end all for people nor am I endorsing anyone to have that FAANG or bust mentality. I just want to say any company is awesome as long as you the person truly wanted it.

**I finally got a job after 4 months..** I struggled so much during those past months where in the beginning I was failing phoning screens/ online assessments. I remember reading   [https://www.reddit.com/r/cscareerquestions/comments/6278bi/my\_journey\_and\_tips\_29\_gpa\_at\_a\_noname\_liberal/](https://www.reddit.com/r/cscareerquestions/comments/6278bi/my_journey_and_tips_29_gpa_at_a_noname_liberal/)  and I'm sure it won't be as good lol but hopefully sharing my experience can help you in anyway.

*Who am I*

I graduated from a well known university in June of 2019 and to be honest during my undergrad I was almost playing catch up with the coursework. There were several times where I felt like I wouldn't be able to get a job when the stuff I was learning at school was already a struggle. No internships under my belt as well (I'm an idiot I know). and I had a 2.9ish GPA. I was scared about what I was going to do in my next part of the ""job hunt"". I knew that I should have started earlier during my senior year but a part of me was already drowning in my work and being a low-income student I was also worried about other financial stuff that never gave me a lot of time to fully commit to prepping for technical interviews too well. Once summer rolled was when I began to start  studying for companies. I remembered in the first month or so I couldn't even do the online assessments sent out to me.

During those first two months I felt really defeated. I think that a lot of people told me that I would get over this hurdle **but holy fuck.** It did not make me feel any less shitty despite knowing it's a temporary thing. However, I really didn't give up and did try to be more persistent. I then put in hours and hours for my first onsite failed. Then the next onsite failed. Then the next onsite failed. Then I failed another onsite bringing to a total count of four.  I felt as if I began to spiral down as I also got out of a long term relationship during this time and I just was really hard on myself. I had negative thoughts about the whole ""Maybe you're not cut out to do CS"" etc. I think having the whole job hunt and relationship issue really fucked with my mindset and I began to question the ability if anything I was doing was even correct (my studying etc). However after a while I realized I was being very hard on myself that yes I have failed onsite X Y Z but I was better now then I was two months ago (in terms of technical ability). I grinded the daily leetcode and found this list very helpful.  [https://www.teamblind.com/article/New-Year-Gift---Curated-List-of-Top-75-LeetCode-Questions-to-Save-Your-Time-OaM1orEU](https://www.teamblind.com/article/New-Year-Gift---Curated-List-of-Top-75-LeetCode-Questions-to-Save-Your-Time-OaM1orEU)  and  [https://leetcode.com/explore/interview/card/top-interview-questions-medium/](https://leetcode.com/explore/interview/card/top-interview-questions-medium/)  I also purchased interview cake and it was a gentler introduction to all the technical topics (if that makes sense).

In the end I realized that even though I've failed interviews or yadaada it does not define my own ability as an engineer or even a person. Because ironically I got into a FANG type company despite failing interviews at startups and other mid tier companies. Does that mean I'm good because I got into the company? No ofc not. However, I realized that my failures does not define who I am as a person and I began to have a more ""positive"" attitude on this whole process. So going into that mindset for my FANG company I killed the interview and got an offer :).

Also for new grads I felt as if there's a new standard of being asked system design questions in interviews. While I feel like you would need to be working a few years to actually really know what's going on I'd recommend reading the system design primer on github as it helped me keep the conversation going at least during my interviews instead of completely blanking.  [https://github.com/donnemartin/system-design-primer](https://github.com/donnemartin/system-design-primer)

**Honestly though I don't know who needs to hear this but fuck anyone that tells you you're not good enough.** **Fuck anyone telling you how long you ""should"" take to get a job.** At the end of the day everyone moves differently and I feel like there are times this sub is an echo chamber of people saying if you don't do X, Y or Z you're a failure. I hope that any new grads that were worried before are a little more at ease because I was super worried that me not doing well at school or not even having an internship would be the ""end"" for me. However, if you put in the work whether it be from studying / project / resume redesign, etc it'll happen. Different paces for different people though. Don't be so hard on yourself :).

I think that what helped was me redesigning my resume  begging my friends shit on my resume. I think that I redid my resume 10ish times and each time I redid it, it got more and more responses.

*How I studied*

I downloaded this app called Forest since I knew that I often got distracted and would run the app while doing the LC problem and just put 15-20 minutes of brainpower into the question but then if I'm still stuck. I would look at the answer. Another reason for downloading and using forest is that it's nice to look at the end of the week/month how much work you've put in to help quantify your success). I am really okay with looking at the answer (in the beginning) because I felt that it's kind of silly to struggle 4-6 hours on one problem when I didn't even have a good foundation/thought process for these types of problems. In addition to that I know that sometimes you feel as if you're putting in all these hours but aren't going anywhere (my weakest topic was backtracking). However, I realized that realistically once I've put more and more hours  the topic became ""easier"".

I think the reason why most people think like this is because they expect the work/learning output being done to be a linear graph (i.e if you put in X hours you get Y work) So I think of it more like a rollercoaster because there might be even MORE things you didn't know (i.e you not being as good with graph problems as you thought you were) BUT the hours you put in still are helping you with your goal. I think after 100ish leetcode problems I began to be able to pick up the tricks that are used for most questions. I know that some people say you should struggle in the beginning when you're studying but I found that I learned more by looking at the thought process of how some of the solutions were done in since I didn't have a good ""thought process"" I figured why not learn from ""good solutions"" (not necessarily the most up voted but most clear imo).After I began to pick up the ""thought process"", I began to see the patterns. Again leetcode and most of the interviews really test the same concepts it's just that they always have a little trick or two.

*Breakdown of my day to day studying:*

With the forest app I set 60 to 90 minute increments and would do that until I hit around 6-8 hours a day then near the end of my job interview because of the burnout I toned it down to 4 hours a day. Looking back at this I felt that me studying 8 hours might have been much since I was doing this schedule 7 days a week so I think the best way if I were to study again would be to treat the job search like a (ironically) a job. Put in the 40 hours a week type of thing but then on the weekends just relax do whatever but never try to go past the 40 hours. **EDIT: I definitely don't advise everyone to just study 40 hours a week. I tried to imply that you treat your studying like a job and put in a fair amount of hours (say 15-30  hours is more realistic). However everyone's situation is different and shit happens. So you just need to be honest with yourself and ask yourself if you studied enough this week. And even if you didn't (don't be so hard on yourself) because something might of happened that prevented you from studying or not studying as well/much.**

*Burnout*

**Near the end though I did get more burned out and for sure please please please if you take anything away from what I said from the post is to TAKE A BREAK AND BREATHE**. Whether it be hanging out with friends, playing video games or working out. I feel that there are times where there's like people scaring each other about how hard the job hunt is (yes it is hard) but we're only human. If we put in the work it'll eventually pay off. We need to like relax instead of just studying all day.. I realized that if I took a more relaxed approach (not saying I didn't study at all but took breaks like a human being) it would have made my studying more efficient. I realized I was working hard yes but I wasn't really working smart (as cheesy as it sounds). Near the end of my job search me taking a break every hour or so really helped me study more efficiently as I felt that I was learning more than banging my head against the wall at the same problem for 3-4 hours. So to anyone scared or stressed (and sorry if this sounds preachy or w.e)

1. You can do this if you put in the hours (don't compare yourself with others) just focus on being better then you were a week ago.
2. Don't be so hard on yourself
3. TAKE A BREAK AND BREATHE

*Comparing yourself to others*

I realized that once August / Sept hit I  saw my friends who were studying for interviews like me began to get their jobs. I definitely was happy for them but it was almost as if I had this sense of jealousy? I don't know how to describe it really I think I was almost like ""why didn't I get a job yet thank\_you\_friendo"" and was thinking what was wrong with me. However like I said earlier in the post you comparing yourself with others is a slippery slope as you begin to question your abilities in the first place. Eventually it hit me that I wasn't doing myself a favor by looking at other people doing X Y or Z in a shorter amount of time then me. I just had to focus on me and know that I'm slowly but surely improving.

*Failing*

I think with the first two onsites I definitely felt like I was unlucky in the beginning since I was being asked system design questions for a good amt of the questions. However, I realized that my parents said something really profound that I can't change what's out of my control (i.e interview questions being asked). However, I can change my mindest and studying such that I just study these topics so next time a slip up like this won't happen again. I felt like failing the onsites really fucked me up mentally since I had those negative thoughts creeping in my mind again. However, I realized I was at a crossroad. I could either be sorry for myself or say the world is not fair, OR I can just put in my time and work into making sure my weaknesses are fixed. I'm not gonna lie I'm not a smart kid as I remember there was this one phone interview I had that was basically just write recursive Merge Sort and I just blanked. However, with that new mindset I felt as if half way in thing's just started ""clicking"" a lot better for me.

*Linkedin / Github:*

I almost forgot to talk about this part but Linkedin definitely played a part in my job search since I began to have more recruiter's reach out to me from time to time because I pimped out my Linkedin profile. I did not get a job because of just Linkedin but I was interviewing with a few companies because of recruiters from Linkedin. Also be wary of some scammy recruiters or people offering you insanely low numbers. I'm not sure if this is controversial but I actually declined a certain offer because of a number I felt that was too low for me as I knew my self worth. Now everyone's number is different  and time is definitely a factor but you know at the end of the day how much your worth so if you had to push out a few more months to get that good job at company X then understand it's okay to say no. I feel like as a new grad or a student you should definitely try to pimp out your Linkedin profile and try to flex your projects etc etc.

For Github I'm honestly not sure how big of a role it played (since I don't have any quantifiable numbers), I would presume it can't hurt you IF you have good projects on there. Also TRY to have projects that are different then other's. Ours was a really cool iOS app idea and there weren't a lot of these types of projects and my interviewer seemed interested in learning more about it.

*Stats*

4 failed onsite

8-9 failed technical phone interviews

150-200 applications

Ghosted (several times)

Total of 200(ish) LC problems done including the interviewcake / Blind List not all of them were done by me some I just looked at the answer if I couldn't figure it out the solution but really tried to ""understand"" the thought process of the solutions.

Also if any one wanted to know I studied for around 7626 minutes which is 127.1 hours based on the Forest App.

&#x200B;

*End Statement*

If you made it this far I just want to thank the sub for the advice. I feel like there are times in this sub where everyone's very toxic about people in certain situations i.e (""new grad no internships it's your fault for being so dumb blah blah blah""). So hopefully we can change that and really try to help each other because at the end of the day we're all really just struggling people trying to make it in this industry lol so there's no point us gatekeeping people and make it harder for one another.

**EDIT:** I received a fair amount of PM's of people being in a similar situation to me and I'm trying to answer them all but I just want to tell you all who are worried about what this next chapter holds. It's okay to be worried, it's okay to be nervous but never put yourself down and hold yourself to unrealistic standards. Failing a phone interview is fine. Failing a onsite is fine. Hell failing an Hackerrank assessment is also okay (I've failed more than I'd like to admit). However, I will punch you in the face if you are too hard on yourself. Realize that this type of shit might be from outside influence (relationship, money etc) that might make your failures seem much worse than they actually are. I want you to understand that failure will not define who I am anymore and hopefully you can do this too. The dozens or even hundreds of job rejections you have right now I'm sure you will be laughing about it a year or two from now when you're working at your dream company and be like man I stressed out way too much for nothing.",1574392433.0,2019-11-21 22:13:53
498,How do you survive a 40 hour work week?,721,8sj3u0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8sj3u0/how_do_you_survive_a_40_hour_work_week/,626,"I'm only an undergraduate student at an internship so my experience is limited but how do you all survive what feels like a mind numbing 40 hour work week?

I wake up at 8, take a quick shower, get dressed and then commute 20 minutes to work (audiobook is a life saver), 9 - 5 I work on decent tasks but I often find myself struggling to get into flow (still get work done), I get back home at 5:30 and head to the gym till around 7:00-7:30.(1 hour workout following PPL and some abs/treadmill) Once I get back I spend an hour or so doing chores and making food. By the time I finally have free time it's around 8:30 and I only have 3 hours to try and enjoy the time usually working on music production, unreal engine or gaming with friends.(I want to work on computer skills like reviewing CTCI or personal projects but I feel so drained) I eventually drag myself to bed knowing that it all just starts over again. Weekends are the only saving grace. 

It's not even that my work is bad, it's interesting stuff but this kind of repetitive schedule really doesn't sit well with me. 

Is full time like this? Am I just going to have to get used to it?

Edit: I guess I should have just asked how to make work and life feel less stagnant. Many people are saying that I'm lucky to have as much time as I do, and I understand that but I still don't know how to make it feel like I'm progressing. Time just feels frozen. ",1529536533.0,2018-06-20 19:15:33
499,Do you ever feel like you don't wanna live your life sitting in front of a computer?,718,bza0zi,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bza0zi/do_you_ever_feel_like_you_dont_wanna_live_your/,204,"A little off-topic. 

I choose CS as my profession because that's what I always loved to do but honestly I'm office-sick. Remote wouldn't be any better I guess, I would just get lonelier. 

Now that the weather is finally good here, I spent a lot of time outside on the weekend and so many memories came back from my childhood when I spent whole days outside just biking, fishing with my father, doing random stuff and I felt alive. 

And what now? When I get home I'm too tired to do anything. In the weekends I'm busy doing the things that I couldn't do in the weekdays, like cooking, cleaning, studying, meeting friends, and then I'm happy to get a decent sleep. I'm still expected to spend many hours of my free time coding to improve my skills and move forwards in my career. I'm so sick of it. I don't even get enough days off in a year to get a decent vacation, because I'm too young yet. 21 days a year, and at least 15 of them is spent for administration stuff and going to doctors for a checkout in the worst possible time, etc. 

I don't think it's a good idea to change to another field because coding is probably the only thing I'm good at, and I have no idea what I could do anyway. I just don't know how to accept being an office-worm for the rest of my life, really.

Edit: 
the thread blew up and I don't think I can reply to everyone so just to clarify some things. 
I'm not from the US. Yes I heard devs make good money in the US, they make good money here too but not that good. For example, right now I'm living in a students dorm but I plan to move out in the next 1-3 months. A 1room apartment in my city costs 2/3 of my monthly salary, a 2room apartment with a stranger is at least 1/3 of my salary. I'm on a diet and I try to eat healthy, I don't eat a lot but 1/3 of my salary goes to food. Healthy stuff have extreme prices there. So there is really not much I can spare to retire early. My company raises 3% average in a year of salary. And if you think they pay shitty, while it's not the best, most of them are even worse from what I've seen and heard.

So as you can guess I'm coding in my free time to find a way to 1. get a passive income too, 2. have more and better skills to find a better job one day that pays enough to actually have some savings too..

I still don't have my degree, still studying, it's difficult to sell myself to companies without it. Some companies don't give a fuck about degree, while others won't even read your CV without it.
And no I'm not an intern, I'm a full time junior dev for quite a while now.",1560271883.0,2019-06-11 12:51:23
500,Should I inform my colleague of their hilarious pronunciation mistake?,722,jcb4ae,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jcb4ae/should_i_inform_my_colleague_of_their_hilarious/,319,"I work in a semi closely knit team where I'm in a senior position and my colleague in question is a junior. We are native english speakers. 



My colleague has an extra 'r' in his refactoring, which means that he always pronounces it as 'refractor'. He might say in a stand up that 'Ive been refractoring all day'. I only understand refractoring as a post-nut thing which always makes me chuckle inside my head because Im really just a kid in an adult bod. 



Should I tell him or not? How should I go about it?


For those who arent sure what Im talking about:
 https://www.urbandictionary.com/define.php?term=refractory%20period


Edit: Thank you for the serious, thoughtful and funny comments! Its been a pleasure to read them. Ive decided to tell him. Apparently 'refractor' also refers to a spyglass or telescope of sorts. TIL",1602888431.0,2020-10-16 18:47:11
501,"I just want to write C# and SQL all day and earn $80k at a mid size company with good benefits and not work too many hours, how do I get there from here",719,is9bfu,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/is9bfu/i_just_want_to_write_c_and_sql_all_day_and_earn/,335,"I know this goal isn't as exciting as most posted here, but I like to think it's realistic. 

I've been a Software Developer for the last year. I make $55k and don't have great benefits and I work on weekends regularly. 90% is writing SQL procs and 10% is working on a WPF application. 

I'm 31 and almost done with college, I'm getting an Associate Degree for software development. 

I live in the US and would move basically anywhere for work, I have no family or friends holding me in any particular area. 

I like ASP.NET Core but really would be happy working on anything, especially if it's back end.

Here are some things I think I could do, I'd like your feedback on them and also any ideas you have:

* Learn more about Dot Net Framework, I honestly couldn't tell you where that ends and C# begins. 

* Make a website promoting myself so employers can see my skill. 

* Maybe get a Bachelor's degree if I have to 

What else? What ideas do you have?

EDIT: I did not except this much love! Thank you everyone! I promise I am reading every comment and will try to reply to all of them.",1600068669.0,2020-09-14 03:31:09
502,My first negotiation (a success story),721,8cta0d,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8cta0d/my_first_negotiation_a_success_story/,145,"TL;DR spent a few hours reading about negotiations. Was careful not to say a number first. Ended up with a 50% increase in salary.

After working at a government contractor for a couple years, a somewhat soul-sucking experience), I decided to apply for a job at a local, but well-established startup. Heard back after a few weeks, went through a few rounds of interviews, and received a congratulatory email. Woohoo!

I spent the next few days reading about negotiations. One lesson stood out in particular: never say a number first. I had never negotiated a salary before - my defense contractor never gave me the chance.

After reading Glassdoor, I expected to get around 80-90k, a significant increase from my current salary. When it came time for the negotiations, which we conducted over the phone, the recruiter casually asked me what I was ""expecting."" 

Rather than say a specific number, I started talking about the benefits of my current employer - education reimbursement, vacation days, closeness to promotion, profit sharing, etc. They asked me for a ""ballpark number"" but I still didn't budge. In my head, I was thinking around 95k, but I forced myself to not say anything.

After some back and forth, I finally got them to say a number first. They gave me the average range for employees with my experience. To my surprise, it was over 120k. Holy mother, that's a lot of money, at least for me. They also offered me a five-figure signing bonus, as well as stock, both of which were not mentioned on Glassdoor. Feeling confident, I negotiated another 8k for the signing bonus. 

Overall, I ended up with a ~50% increase from my current salary.

The biggest lessons I learned: Don't necessarily trust Glassdoor, and never say a number first.",1523961534.0,2018-04-17 06:38:54
503,I ran untested code directly in production today.,715,bbvhu6,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bbvhu6/i_ran_untested_code_directly_in_production_today/,174,"Last week we had a severe data issue which caused a million bad records to be inserted into several tables.

I've been pressed on this to clean it up, the monthly release is this Friday, business users have been severely impacted because of the bad data and hence they asked me to do a cleanup before Friday.

I ran some data scrub scripts in UAT and other test environments, everything was good and ready to be run directly in production... Except one caveat: the database structure was supposed to change this Friday along with the release and I had done my data scrub testing against a database with the new structure.

So today when I ran my scripts in production, they ofc didn't work because of the old database structure.

So the risk taker in me took the release branch from the past month, did some changes there, and ran the code + scripts directly in production to clean up the bad data.

The corrupted data was cleaned up and business users won't face the same issues anymore, but I may lose my job.


Pray for me bros.

And yes I have write access to production, If anyone is wondering. My company has some bad practices.

Edit 1: since some of you have pmed me asking: No this isn't a a startup or even small business. It's a large corporation with like 80k employees and millions of customers, software isn't the main product but it does assist heavily. I'm pretty sure other product departments in the company have good practices, but not the one I'm in!


Edit 2: looks like my job is safe lolol


Edit 3: to the four of you (probably same person with different accounts) that pmed me calling me a disgrace to the software industry and telling me I should resign and find a different career: Nah",1554983072.0,2019-04-11 07:44:32
504,Manager just exploded on me... should I quit ?,711,9v3wkn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9v3wkn/manager_just_exploded_on_me_should_i_quit/,353,"Im a junior developer at a very small company, so theres no HR and I work basically directly under the CEO. Been working there the last 4 months, when I wasnt working from home I always came in on time, if not early even.

&#x200B;

I came in 3 minutes late (not exaggerating) and my boss went fucking INSANE! I apologized to him about being late as soon as I made it through the door, and he started screaming at the top of his lungs ""theres no fucking excuse why youre late motherfucker,   im a fucking professional and im gonna be treated that way, what the fuck are you thinking coming here late mother fucker you dont know who youre fucking with, are you fucking sorry? ""

&#x200B;

I thought he was joking, all I could think was there was no way someone could be this angry over 3 minutes...It was comically insane.

&#x200B;

He went on for a few minutes at least, spit was flying everywhere, spit was flying on my fucking face, there was a river of spit going down his chin, I couldnt believe what I was hearing/seeing.

&#x200B;

Anyways, I just got back home, still shook af from it.

Should I quit?  

Edit:
Wow, just wanted to thank everyone for the advice and support, honestly this situation left me feeling like shit but I feel a lot better about the whole thing.

Started searching for a new job tonight, gonna wait until I have something lined up before I quit.

EDIT 2:


HOLY SHIT, THIS JUST GOT WAY FUCKING WEIRD

I saw some comments asking for this guys LinkedIn profile, I actually got this job through Indeed, so i knew I'd have to search a little.

After searching I couldnt really find too much on the guy on LinkedIn, however, I looked up my company name and the phone number listed...

I found his number listed under multiple Transsexual Escort indexes... The posts were from over a year ago, before i started working with him.

The name he was using as his alias, was the exact same fucking name as mine...

WTTFFFFFFFFF 

Edit 3:

He's not using my identity, I just find it extremely odd that his postings from a year ago are using the same name as me

I guess this information isnt really too relevant, but i can't be the only one that thinks its a little weird/too coincidental?? Or am i just being paranoid??",1541656992.0,2018-11-08 01:03:12
505,"If I've learned anything during my internship, it's this: The more work you do, the work you get.",717,8ump0j,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8ump0j/if_ive_learned_anything_during_my_internship_its/,195,"You think the boss thinks ""Aww look at this cute employ working so hard, better ask him to relax and leave on time."", Naah son, they're like ""Hey this person can do so much work! Better push him a bit more and he may be able to do more stuff, yay! Aye y'all, throw work at him! "". ",1530243558.0,2018-06-28 23:39:18
506,"With so many people trying out coding, why is there still a big shortage of software engineers and software developers?",715,c7byk1,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/c7byk1/with_so_many_people_trying_out_coding_why_is/,632,"I have seen thousands of posts of people wanting to become a software engineer and starting to learn coding. Then in my daily life, I have also met hundreds of people saying that themselves, or their children are studying Computer Science or learning to code.  

Yet, from my own experience, I have met only a small amount of people actually having jobs in this field. With so many people learning to code, why does only a small amount of these people able to land a job in this field?  

At what point in learning to code, do most people give up or quit?",1561922115.0,2019-06-30 15:15:15
507,Rejections while a senior engineer,718,aobxo7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/aobxo7/rejections_while_a_senior_engineer/,350,"I see a lot of posts here from new grads going through rejection and it pains me to read as I never experienced that. I got a job somewhat easily out of college and have slowly risen through the ranks.. Intern,Junior, Senior, Lead. I feel confident in my skills to get things done. Others look up to me. When it was time to mix things up and apply for new positions I was surprised at how much the interview landscape changed.

Coding problems, 5 hour whiteboarding sessions. I encountered so much rejection it has really killed my self esteem. I think there is something about current interview systems that doesnt quite capture my value but this is where we are. I get it..You have to play the game. I'm almost thinking I need to become a construction worker or something. I've accepted I failed at your companies programming problem (despite practicing) but how do I prove I've constantly been doing good work for 9+ years to others?!

Has anyone experienced this? Just like holy shit.. Maybe I'm not cut out for this - but how did I even become what I thought was successful?!

Shit...",1549622627.0,2019-02-08 05:43:47
508,"I am Steven Skiena, CS professor and author of ""The Algorithm Design Manual"" AMA",715,7vxid2,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/7vxid2/i_am_steven_skiena_cs_professor_and_author_of_the/,160,"I am [Steven Skiena](https://en.wikipedia.org/wiki/Steven_Skiena), a Distinguished Teaching Professor of Computer Science at Stony Brook University.
I am the author of the popular book [""The Algorithm Design Manual”](https://www.amazon.com/Algorithm-Design-Manual-Steven-Skiena/dp/1849967202), which is officially recommended by Google for interview preparation.
My research interests include the design of graph, string, and geometric algorithms, and their applications (particularly to biology). My five other books include the new [“The Data Science Design Manual](https://www.amazon.com/Science-Design-Manual-Texts-Computer/dp/3319554433/) and ""Calculated Bets: Computers, Gambling, and Mathematical Modeling to Win"".
I also served as co-founder and Chief Scientist at General Sentiment, a media measurement company based on his Lydia text/sentiment analysis system.
I received my Ph.D. in Computer Science from the University of Illinois in 1988 and have authored over 150 technical papers.
",1518051530.0,2018-02-07 19:58:50
509,Name and Shame: Samsara,715,e1i32u,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/e1i32u/name_and_shame_samsara/,104,"Went through their interview process for a SWE position a couple weeks ago. Was ghosted, still haven’t heard back after emailing a couple times. Most of my interviewers and the recruiter there were incredibly unprofessional. The onsite had a coding + debugging + systems design + product demo + hiring manager round. I have done 15+ onsites over the past couple of years and this one was by far the worst interviewing experience. The interviewers acted like they didn’t care at all and weren’t engaged with the conversations, and some seemed like they were doing other work/ responding to slack messages during the interview and not paying attention. For such a successful company with smart engineers (lots of ex FAANG + MIT/Stanford/Berkeley grads), I am disappointed at how poorly they treat their candidates. Complete waste of my time. Can confirm the bad interview reviews from Glassdoor and Blind.",1574726769.0,2019-11-25 19:06:09
510,I finally got a job after 2 months of unemployment,712,dj66rt,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dj66rt/i_finally_got_a_job_after_2_months_of_unemployment/,129,"I graduated this year and did an internship with a Fortune 500 company but didn’t get a return offer which was upsetting. 2 months in I go through a break up, parents getting upset for being unemployed, and a lot of crap that no wants to deal with. I posted my resume on here and got feedback and made the necessary changes that people told me to do and it worked. I got a job with the biggest internet provider in the U.S, I start on Monday and couldn’t be any happier. My advice to new grads: keep your chin up, and learn something in your spare time. Applying to work should be a full time job and learning or getting a few certs will look great during an interview!",1571346630.0,2019-10-17 17:10:30
511,"Don't give up, the phone will ring",710,dcayoy,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dcayoy/dont_give_up_the_phone_will_ring/,147,"Hi all,

I joined this subreddit almost two years ago and I posted on [my lack of self confidence](https://www.reddit.com/r/cscareerquestions/comments/987kht/full_of_doubts_lack_of_self_confidence/). This year, I started applying for senior year internship one month ago: 100+ applications, \~40 declined, \~30 ghosted, 13 interviews.

I've started learning Go 4 months ago the only company called me for a Go internship is a mid size startup (\~50 employees). After four rounds of interviewing, I've been offered an internship as R&D engineer.  The project is amazing and I get to work with engineers to invent new stuff! The benefits and pay are excellent and I could not be grateful enough. So I decided to post here and try my best to give back to the community.

For all students over, these are my tips:

* Don't lie on your Resume and it is okay to say ""No, I don't know that"". I was genuinely surprised that my recruiter complimented my honesty when I replied ""no I never heard of that"" to 30% of his questions in the last round. 
* Have a Github account full of your side projects, don't upload rubbish, just stuff you enjoyed working on. This shows passion and believe me from my experience recruiters truly appreciate passionate individuals
* Practice LeetCode, HackerRank and Codeforces as much as you can, this helped me interview better. Make sure that you have no troubles solving easy LeetCode problems and capable of solving medium problems.
* Negotiate your salary if needed. Never settle for something that will make your life hell. The company I got accepted into they offered me 40% raise when I didn't accept their first offer arguing that their offer will result into poor job performance since I'll be stressing over bills.
* Final tip: Remember the first question a technical recruiter ask ""Would I like to have a beer with this person?"". Be yourself, none likes an ass kisser.

&#x200B;

Edit: Formatting and spelling",1570055346.0,2019-10-02 18:29:06
512,Just got my new grad offer revoked because of COBID-19. Anyone still hiring?,714,fq0o36,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fq0o36/just_got_my_new_grad_offer_revoked_because_of/,290,"I signed to a mid-sized travel company in November as a new grad software engineer and (obviously) they’re not doing very well now. Literally just got off the phone with my recruiter, they are in a total hiring freeze and revoking all new grads. 

I’m looking for a job. Anyone know companies that are still hiring new grads?

The company is TripAdvisor",1585357132.0,2020-03-27 20:58:52
513,"New grads, don't come to SNAP",708,85zgyl,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/85zgyl/new_grads_dont_come_to_snap/,226,"I was a new grad joined Snap for a while. I am not happy after joining Snap. Sitting in office today, I thought a lot of things.

I graduated from pretty good universities. Almost all my friends and classmates chose FB and Google when graduating. We all have many other offers and compete our offers, many of my Google friends got 250-325 RSU as new grad, many of my FB friends got 160k to 220k RSU and 100k sign-on bonus. One of my friends chose MSFT, he like relaxing life, his package is 115K base and 150K RSU and espp (Buy company stock with discount). Now, their stocks value are all greater than 250K. Of course, they all have cash bonus from 10% to 20%. And some of them have already been promoted. 

When I graduated I got many offers, like SNAP, FB, Google, MSFT and have many upcoming on-site interviews like Uber and Amazon, finally I choose SNAP and reject all others since I think it is a s tart-up and I can take on many interesting projects and I can get promotion quickly and even is really COOL right. OK, that's where the nightmare began, the worst decision in my life so far.

Compared with my friends in other company, how about me ? The poor guy who chose SNAP.

Working hard everyday. on-call every day. Finish many Jira tickets everyday. Bringing my laptop even on-vacation or in movie theater. No cash bonus. No promotion. They keep saying you will get promotion next time but they fail me everytime.

How about other new grads in this company ? Some experienced endless re-org, project is killed halfway over and over again; Some are working hard, 9 to 9, arriving company at 9 am and leaving at 9 pm; Some are doing really great job but all credits are taken by seniors, some seniors assign them many tasks and email the team 'Hey I introduce you a very powerful thing that I implemented'. Some want to change team but director D***d didn't allow and got piped. Unfortunately many of them are laid off, the 9-9 guy who is working hard everyday is laid off. New grad who joined 1 month ago is laid off. And many many many many............

It is SNAP which we choose as our first full-time company. We believe you, we trust you, we love you so we choose you. But you lay off so many good new grads, some are even in their 1st, 2nd month and some are waiting for H1B lottery.

Our best java expert is also laid off, they are not the lowest performance guys, at least many of them are good, super good.

New grads, don't come. ",1521635852.0,2018-03-21 08:37:32
514,"If you're applying to internships now, make sure you save your answers to coding challenges",709,ct3ps9,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ct3ps9/if_youre_applying_to_internships_now_make_sure/,87,"Keep a spreadsheet of all the places you apply to (with links) and keep a copy of your coding challenges. This will give you a list of companies that you can apply to for full time positions, and sometimes companies don't change coding challenges.",1566354809.0,2019-08-20 22:33:29
515,Great collection of programming interview questions in a no-fuss PDF (good for flights!),703,62sbry,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/62sbry/great_collection_of_programming_interview/,44,"Hey, /r/cscareerquestions! I'm unsure if content like this is allowed here, but after reading the rules it sounds like it is, as long as the content isn't mine (it isn't) and helps others (I think it will.) 

This last weekend I found myself about to board a several hour long flight to an onsite interview. Not wanting to waste time, I looked around quite a bit for resources that I could use offline on the flight, and stumbled upon http://www.programcreek.com/wp-content/uploads/2012/11/coding-interview-6.pdf. It has hundreds of common problems (from Leetcode) along with their solutions.",1491077216.0,2017-04-01 16:06:56
516,I got tired of writing cover letters so I built a cover letter generator!,700,855maw,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/855maw/i_got_tired_of_writing_cover_letters_so_i_built_a/,95,"Hey guys!

When applying for jobs, I got tired of making cover letters for each company. So I thought it'd be useful to make a custom cover letter generator — just input your name, the company you want to work for, some skills and a project and we'll generate a custom cover letter for you! I'd love some feedback on it  you can check it out here:

[Cover Letter Generator](https://www.dailycodingproblem.com/coverletter)",1521340006.0,2018-03-17 22:26:46
517,"Have three fucking insane (to me, at least) offers and I'm freaking out over negotiating for even more",708,cwb7y2,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cwb7y2/have_three_fucking_insane_to_me_at_least_offers/,475,"Ok, so I went through the software engineering interview gauntlet and happily enough I have three offers with three amazing companies. The offers are roughly:

1. Company Alpha: $250,000 + $25,000 signing bonus
1. Company Bravo: $295,000 + $20,000 signing bonus
1. Company Charlie: $280,000 + $30,000 signing bonus

(This is total compensation so salary + equity + bonus)

I'm absolutely shell shocked. Those are all insane raises from my previous job. 

That being said, they say to always negotiate right? Especially when I have competing offers...

I think I might like Charlie the best but I'm not positive yet. 

That being said, **is it shitty of me to use Companies Alpha and Bravo to make Charlie give me a better deal?** Again, I'm not dead set on Charlie yet but I'm leaning that way.

... and **How do I do this?** 

I'm thinking I will:

1. Tell Alpha that Bravo and Charlie are offering more and get them to at least match. (Dunno if that's possible tbh)
1. Tell Bravo that they are offering about the same as Charlie (and hopefully Alpha) and that I need a more compelling offer to help make my decision
1. Tell Charlie about Bravo's (and maybe even Alpha's) new offer and ask them to beat that.
1. Whatever Charlie offers at this point, ask them for a few $10k more and tell them that if they can meet that I'll sign on the spot.

Is this fucked up? Is this too risky? I have no idea what I'm doing and I'm in a bit of shock at this point. Please help!

Ah!!!!",1566971627.0,2019-08-28 01:53:47
518,A New Year's PSA: Please do not seek validation from this sub,704,3yu3j7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/3yu3j7/a_new_years_psa_please_do_not_seek_validation/,208,"As many of you start your last semester or seek out summer internships, I can't help but notice this sub turning in questions about the 'prestige' of certain job, whether or not they should forgo any social/fun aspects of college to focus on studies/side projects, or other questions that mostly involve how they will somehow gain the validation and admiration of their peers.

 All these questions, as well as answers coming from the undergrads who have yet to venture out into the real world, are honestly disappointing. The prevalent attitude on this sub is becoming more and more treating this profession as a means to end to be prestigious or gain some lofty standing in some City Upon a Hill (Working at a 'Big 4' company in SF). The future is becoming binary in that you're either living that dream or you're a failure in life. Why? Quit looking to this sub with the question that boils down to 'Should I be happy in this situation?' The only person who can tell you that is you. 

One of the easiest examples is the multitude of 'Which internship would look better if I want to apply to XYZ later'. Suppose some anonymous person on the internet tells you 'Oh, definitely take Option A because I heard Company XYZ likes that better', are you really going to base a few months/a year of your life on the possibility that this person is right and you MIGHT increase your chance?  Any experience is good experience, as long as you can talk enthusiastically about your internship/projects, an interviewer is going to be impressed. 

The further extreme is obviously 'Would taking an internship at A hurt me later on' when the post clearly doesn't have any other options. Please, for the love of god, lets not have any of this in 2016. Stop putting the cart before the horse and enjoy yourself.  As I, along with any other poster who has graduated, has said, any experience is truly good experience. You can spin anything into being a positive work experience. Working at any internship will only help you in the end. 

The same advice goes to full time jobs. There is nothing wrong with wanting to work at any of the buzzword companies that are discussed on this sub. They are great companies with some truly great engineers working there. However, there is absolutely nothing wrong with any of the companies not frequently or never mentioned on this sub. If you can meet all your bills and live a lifestyle that makes you happy, what else is there? It doesn't matter if it's working at a small dev shop in a non-tech hub city or working in downtown of a major city for a top 10 company. Do what makes you happy, the validation of the people on this sub shouldn't matter. 

There is also nothing wrong with working at a company that might not be your dream job. Treat it as though it was though, gain as much experience as you can and at least open up to the possibility that you might be happy there. You can always apply to other companies later on and who knows what the future might hold, but do not treat it as a dead end or a road block to your future life, treat it as an opportunity and take full advantage of it. 

**tl;dr** The only person you need to be concerned about is you. If you're happy, who cares what anyone else thinks?",1451541670.0,2015-12-31 01:01:10
519,My LinkedIn Mistake,700,8hnsbp,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8hnsbp/my_linkedin_mistake/,155,"I thought I'd share this goof, on the off-chance it helps anyone else.

I'm an experienced engineer who wasn't getting any love on LinkedIn.  A few weeks ago, I finally noticed that **on the Edit Profile page there's a Dashboard block where you set your ""Career interests"".**   I initially joined LinkedIn *years* ago when I wasn't looking for a change.  I don't know if that field didn't exist then, or I set it this way, but it **was on ""Not open to offers""**.

I bumped it to ""Casually looking"" and a lot of recruiters are reaching out.",1525731209.0,2018-05-07 18:13:29
520,I got a software internship and I dont feel like i know anything.,699,hd7ggy,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hd7ggy/i_got_a_software_internship_and_i_dont_feel_like/,154,"Hi, I recently landed a software internship at a startup after completing my first year of software engineering and i feel like i dont know jack shit. The thing about first year is that i only learned engineering courses and had a single c++ course all year. The job i got was a web dev student job and i applied for it for fun in my spare time not knowing i would actually land it. I do have programming experience and a 4.3 gpa but i have no experience in web dev and i feel really overwhelmed. The amount of languages that i have to learn is insane, javascript, typescipt, angular, scss, linux, and much more. I even need to know  loopback and the list goes on. The website source code itself has like hundreds of files and i dont even know where everything is. I really feel like quitting because of how stressed i feel but my parents want me to stay since they're like its a great opportunity. And if you're wondering why i applied for a web dev job if i dont have experience in it, the reason i did was because i found it on a website for getting student jobs and the job title itself was just ""Software developer"" with no description or anything but an email to send your resume to.

So i was wondering if you guys could please give me some advice, and if you had an experience similar to mine can you let me know how you overcame it? Thanks in advance.",1592777093.0,2020-06-21 18:04:53
521,I just had my Internship cancelled at 29 years old!!,699,fp0gze,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fp0gze/i_just_had_my_internship_cancelled_at_29_years_old/,214,"Fuckk!! Studying for 4 years, from 25 to 29, all this effort for nothing...

I was doing an Internship in Europe 500€ fucking euro, first job as a Software java developer at a late age and I just get canceled.

Fuck my life mannn!! I am 29 I was getting experience!!

I want to go to another country, hate Spain right now.

Edit: I'm not giving up but it sucks, I was getting experience to earn a normal salary after this. I was learning Springboot and JPA in my Internship fuuuck.

Any of you knows a good course in Springboot?

Thanks",1585206866.0,2020-03-26 03:14:26
522,"Software Developers, how much of your job is NOT software development?",698,k9k9hc,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k9k9hc/software_developers_how_much_of_your_job_is_not/,176," I was in college studying computer science and I wanted to have some real-world experience and so I sought out and eventually decided to work with a group who would train me in my field and then after 6 months, if I did well enough, I would have an internship in my field of interest. Well, my internship is coming to an end and I haven't done anything related to my particular track. Part of me does believe that this is normal and that internships are typically basic and as an intern, I'm not going to work on anything cutting edge, so I don't believe I had high expectations for what my internship would be like. But to have not done a single thing the past 3.5 months related to my interest has me wondering about this field of work.

Is it normal to spend most of your day sending emails, clicking buttons, and networking as opposed to problem solving? If you had an internship in data analytics or software development, what was that experience like, and did you too do nothing related to your field the entire time?

P.S. Yes, I've asked for more work, reached out to other team members in my field of interest, and whenever I ask my manager how I'm doing he says I'm doing fine.",1607514381.0,2020-12-09 06:46:21
523,"A quick rant: I feel like I learn more during internships than I do at school, and school sucks the energy (that could be going to better things) out of me.",697,dnjjsj,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dnjjsj/a_quick_rant_i_feel_like_i_learn_more_during/,236,"For Context: Currently a second year CS student at a top Canadian school, I’ve been coding since I was 11 (I’m 19 now),  and I’ve held 3  internships, 2x swe internships at a large Canadian company (during high school) and 1x swe internship at a US Big N (during freshman year, returning next summer). If it’s worth mentioning also received 2 other Big N swe intern offers that I turned down during freshman year. Also currently working on a very early stage startup (I’m a solo-founder).

But as the title might suggest, I feel miserable during the academic year. As a whole I feel like I learn, build and just do so much more during the summer period of 4 months (my only time to intern) and the other 8 months of the year I feel completely out of it and intellectual unproductive, I feel like I’m not really accomplishing anything. I know it sounds cocky but I sometimes feel like I’m wasting my energy and potential at school.

And this was reflected in my academic performance during my 1st year, my GPA wasn’t great because I spent a lot of time interviewing/prepping and working on my startup than caring  about/working on school. In fact my GPA doesn’t reflect my CS knowledge at all.

Sometimes I just want to leave school, and go work on building things (my early stage startup mostly). Idk sometimes I just feel like doing something crazy like applying to the thiel fellowship or maybe seeing if I could get my startup to launch faster and dropout to attend YCombinator or something.

Has/Does anyone else feel this way?",1572151756.0,2019-10-27 00:49:16
524,"I sucked at algorithms but got better, and you can too!",694,57hybf,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/57hybf/i_sucked_at_algorithms_but_got_better_and_you_can/,104,"Probably the most click baity title I've written but hopefully this helps more people out.

Alright, so here’s me. I hate CS theory. I recognize it’s important and I’m standing on the shoulders of giants as a coder, and it’s incredibly humbling to learn about the theory behind modern day algorithms and how they fit into real life applications. I would absolutely recommend always taking the algorithms class at your university, even if it is optional.

But I hate it. The tone for algorithms was set when, in my algorithms book itself, the author wrote “it was a wonder how Strassen was able to develop the Strassen algorithm for matrix multiplication”. As I read that sentence it was so discouraging to see that even the publishers were bewildered at how these algorithms were developed. It seemed like everything was a bag of tricks. I was good at pattern matching, but these seemed like there were no patterns. Just clever tricks that I would never be able to figure out, I wasn’t good at thinking outside of the box. I was further discouraged by the fact that there were peers who seemed to ace these classes. They were smart and I figured naturally something just clicked for them that didn’t for me. 

However, upon further investigation, most of these people had a lot of math and competitive programming background. Meaning the key was experience. They had years of exposure to the bag of tricks and so they no longer became tricks. They became patterns.

And so here’s the bright side. They were immensely overprepared for any interviews they got, from what I saw. So that means you need to do far less, as someone who has no algorithms experience, to get into a company with a high hiring bar. I felt that my preparation was sufficient for offers from Facebook and Google. Some of the unicorns have higher hiring bars as well as financial tech, so they may be out of scope for this level of preparation (Palantir, Airbnb, Jane Street, etc.).

So for reference, I did take an algorithms class. To be fair, I felt like I absorbed very little, but at the end of the day I still had some exposure to algorithms. That’s the starting point I’m assuming you have when reading this.

A lot of people recommend Elements of Programming Interviews and Cracking the Coding Interview. They are great resources, but my main source of studying was Leetcode. I feel like kind of a shill writing this out but it was too core of my preparation to ignore. There is some merit in the argument that one should actually practice writing on a whiteboard, etc. If you have a whiteboard at home then you are in a good spot to practice whiteboard management, etc, which is another topic for another time. Ultimately though, I still didn't feel like I was screwing myself over or becoming too dependent on having a keyboard. You literally just need to write out what you would type - you're slower for sure but that's just an issue of time management and choosing a good language (cough cough, Python) for whiteboard coding.

Anyways, there are two main issues I felt when doing prep on Leetcode, and that I’ve seen other people complain about too.

1. In the first few weeks, everything still feels like a bag of tricks. It absolutely sucks and the only way to break through this is to power through that and just keep learning. Do not be discouraged by the fact that you weren’t able to come up with tricks for nearly all the algorithms you’ve tried. I guarantee you will run into an algorithm or problem down the line that rings a bell in your head, and once you feel that, things start to snowball as you kind of get an intuition for approaches to a problem.

2. Momentum is important. I found that I was more inclined to work on Leetcode if I had gotten a problem right. Starting your day off on a hard is shitty, especially if you get stuck and just procrastinate and don’t want to look at the solution. I usually ramped up, if I was doing three questions a day it would be easy-medium-hard. Don’t waste your time on a hard one if you’re stuck past 45 minutes. Do your best to come up with a brute force solution, do not give up on it (this is a good attitude to have in your real interviews too) and implement if you can. Then read the solution and reimplement it.

I feel like once you break the barrier of “fuck, algorithms are so clever and I can’t do them” to “wait a sec, this reminds me of that DP problem I did last week”, you get more confidence and doing these problems actually becomes kind of enjoyable. You just gotta stick out the first few weeks.

All in all, it took me about a month and half of prep and 100 leetcode questions, several mock interviews, a tiny dash of EPI to get to a point where I felt like I had a decent shot at the companies I was applying to. I’ve heard some people studying a lot more, and I may have just gotten lucky on my questions, but at least for personal satisfaction I felt like 100 was enough.

And honestly, that's it. I would assume that a lot of people feel the way I did, especially if they didn't have the prior experience in competitive math or programming like me. I just wanted to emphasize that it is definitely possible to break through that and you are doing yourself a massive disservice if you convince yourself you are just ""bad"" at algorithms.

Tl;dr: Technical interview performance is a function of the amount of volume of problems you ingest. Do more and don’t stop.

",1476499072.0,2016-10-14 22:37:52
525,I feel like I'm just learning an endless amount of business rules and not really learning how to be a good engineer,703,iu41qu,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/iu41qu/i_feel_like_im_just_learning_an_endless_amount_of/,122,"I've been working with enterprise Java for around 4 years, and I feel like there are so many stupid gaps in my knowledge. Like, until 6 months ago I didn't know what the *synchronized* keyword did. I just had to take a step back and ask myself what the fuck am I even doing with my career for not knowing something so basic. 

I have no problem getting a job, so it's not like I'm completely incompetent. But I feel like every job I get amounts to 90% learning business-specific rules and 10% actual programming knowledge. Is this normal? Am I doing something wrong? Am I stupid?

edit: thanks for all the responses, folks, they've all been very useful",1600317193.0,2020-09-17 00:33:13
526,"After 7+ years of working as a ""Software Developer"". Should I now finally start practicing Data Structures and Algorithms?",697,fggxtv,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fggxtv/after_7_years_of_working_as_a_software_developer/,176,"I have been a software developer for over 7 years now. I have been making business applications throughout my career. C#, .NET and a little bit of javascript.  
I never bothered learning/practicing Datastructures and algorithms. 
I have worked in 3 different companies and algorithms have never been a major part of interview in those companies. And I have been doing ""okay""(relatively speaking). I do realize now that if you want to work at a top company , you will have to polish your algorithm skills. I have seen a few cases where young lads who have work experience of just 2 years have landed a job at Google! 

Let's be realistic. I know I may never get good enough to get a job at Google. But I do want to rise up. 
Now I am faced with a dilemma. Should I spend more time learning things that I already know about , such as C# and .NET and angular. Or should I spend my time on learning algorithms and stuff? I do not have a lot of free time on my hands so I can not pick both.",1583888104.0,2020-03-10 20:55:04
527,Why do I feel scared to do my programming assignment?,696,f2bjos,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/f2bjos/why_do_i_feel_scared_to_do_my_programming/,145,"Like the title says, I have this weird anxiety when it comes down to sitting down and programming. I feel like an idiot every time, I feel like I don’t know anything and my class mates ask so many good questions when I’m there wondering what the hell they’re talking about...almost every second of the day I’m thinking of “I should be sitting down and learning this” but here I am afraid of it.   
  
I’m graduating this fall, have no internships lined up, I’m scared and I don’t know anything. I’ve never felt so scared and yet helpless at the same time. I’m not this type of guy if that makes sense.  
  
Edit: Thank you all for responding, I really wanted to vent about my situation and you all have sent me kind replies and helpful words. Thank you again!",1581470540.0,2020-02-11 20:22:20
528,How do you learn from senior engineers without feeling like you're wasting their time?,692,egiv52,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/egiv52/how_do_you_learn_from_senior_engineers_without/,146,Senior engineers are supposed to be a valuable resource for learning. But how do you learn from them without blocking them from their many very important tasks?,1577518787.0,2019-12-28 02:39:47
529,"Feel like I am terrible dev how do I get better? Resources, Videos, Courses",695,ii6tr9,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ii6tr9/feel_like_i_am_terrible_dev_how_do_i_get_better/,100,"I sit writing this as an SDE I at one of the big tech companies who is leading his first major project. It is a disaster! It is 6 am the day of the presentation and my senior dev is having to bail me out for my utter incompetence. I am genuinely overwhelmed. I don't understand the code base and have had trouble even writing the most basic of things on the frontend. I feel terrible that he has to bail me out. I know I suck but I have a drive to be better. If I get fired I honestly deserve it. Are there any stories of younger devs getting overwhelmed and being awful? If so what were the consequences and how did you learn and become better from it? I love engineering, I love building, but I need to be better for my team and company. Any insight would be welcomed. Always growing and learning.

Edit: I didn't think this was going to blow up! I appreciate the kind words and the good advice. The presentation went fine but I need to learn. I talked to my senior dev and he gave me honest blunt feedback. I tried to do too much by myself. I over promised and under performed. I thought I could do it all and got burnt. I am going to get better at communicating when I am getting burnt out or overwhelmed. Thank you so much for your advice. This is one of the reasons I love this sub.",1598649360.0,2020-08-28 17:16:00
530,Never give up!,687,ar356e,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ar356e/never_give_up/,147,"After 8 month of grinding leetcode (195 easy, 155 medium, 8 hard) and many rejections (364+), I was able to get my first job (\~95k). Within a few month, the company got acquired (\~120k).

&#x200B;

I just want to let you guys know that thank you for all the advice you have given me. With out this sub, I would not be where I am right now. 

&#x200B;

This is a bit short so feel free to ask me any question that you have. I want you all to succeed. ",1550304935.0,2019-02-16 03:15:35
531,What StackOverflow post do you find yourself at more often than you like to admit?,686,jane40,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jane40/what_stackoverflow_post_do_you_find_yourself_at/,210,this one for me [https://stackoverflow.com/questions/927358/how-do-i-undo-the-most-recent-local-commits-in-git](https://stackoverflow.com/questions/927358/how-do-i-undo-the-most-recent-local-commits-in-git),1602654811.0,2020-10-14 01:53:31
532,Why does it seem like some CS YouTubers try a little too hard at grabbing attention? The click baiting is out of control..,690,cxtony,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cxtony/why_does_it_seem_like_some_cs_youtubers_try_a/,201,"Sorry to rant, but I’ve been feeling this way since a couple months ago when I felt the need to subscribe to people in my intended career field and see how they go about their lives. From what I found, I became very disappointed. The state of computer science vlogging on YouTube is so unauthentic and goofy. And I want to make this clear before I go any further: this is not every YouTube channel. I actually came across a couple of accounts I liked, such as ForrestKnight.

What really grinds my gears are the insanely-titled, blown-up stories that make you feel stupid for clicking on it by the end of the video because you realize that they tricked you into clicking on the video then tried their best to keep your attention. Another thing I noticed about these guys is they hop to each other’s videos and they are even featured in the videos of brand new CS creators on YouTube. It’s almost like they recruit early just so they remain in the loop and look as sort of reference points for these newer creators, building a false credibility for themselves. 

Now... I know I’ve been saying “they” and “these guys” a lot without really referencing to any real examples so I’m going to link a few for those who haven’t noticed this in these videos yet.

Example 1: Click Bait
Joma Tech titles this video [Guy with 2.9 GPA now makes $300k as a SWE (Software Engineer)](https://youtu.be/YGflHj1SjA4).  The reason this one bugs me is because of the false impressions that it gives off. The thumbnail of the picture shows a young man, he supposedly did bad in school and now makes a shit ton of money... sounds like the same formula “Get Rich Quick” schemes use to attract people. 

Example 2: Making Babies
Clément Mihailescu is a perfect example as a clone of these guys. This guy started THREE MONTHS ago, beginning with videos talking about making $40k per month (featuring Tech Lead, who is a post by himself) and then how to get a SWE Internship (featuring Chris Jereza). He takes on the formula above by talking about how he learned programming in 6 months and got hired at Google, and then takes on what Tech Lead loves to do, which is talking about why he quit from some people’s dream jobs. 

My full-hearted hope is that instead of hopping into each others’ videos to share viewers, I have full faith that if these group of guys were to team up and create one channel of content, it would have potential to be a true and honest representation of a fun, lively representation of the SWE lifestyle. If it does fall into place this nice, I can only hope that the replacement is a better one.",1567269757.0,2019-08-31 12:42:37
533,"Finished Internship today, Didn't receive full time offer",685,i5jz1l,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i5jz1l/finished_internship_today_didnt_receive_full_time/,98,"I just finished my CS internship today and I expressed during my presentation that I wanted to work there in the future. The presentation had a lot of administrative people. I did pretty well during my internship and got a lot done. My project manager told me a lot of how impressed he was. After my presentation, they specifically said ""we hope you keep us at the top of your list and consider us after you graduate(next year)."" What does this mean? How come I didn't get an offer like the other interns from last year? Is it because of COVID?",1596856177.0,2020-08-07 23:09:37
534,Current Product Manager at Google - AMA about Product Management!,689,fcwpy5,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fcwpy5/current_product_manager_at_google_ama_about/,439,"Hello! I'm currently a Product Manager at Google. I've also previously been a PM at Microsoft. I've been lurking this subreddit for a few years now. While there's a lot of good resources for software engineers, the same can't be said for product management. For example, (technical) program/project/product are actually very different jobs! Happy to answer any questions to the best of my ability! 

And of course, opinions expressed are solely my own.

Edit: will try to get to all questions throughout the day, apologies if I'm a little slow :)",1583280289.0,2020-03-03 19:04:49
535,Weirdest fucking interview ever,686,5a2vrs,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/5a2vrs/weirdest_fucking_interview_ever/,163,"**int redFlag = 0;**

So my teacher got an e-mail from a company saying that they're looking for interns. He then forwards it to us so we can apply because we're all actively looking for internships and a local one would be great.

""Awesome!"" I think. I send them my resume, and wait. Not even a day later I get a reply saying that they would like to meet with me for that same day and that they're open late (After 7) **redFlag++;**. I won't say the exact time because I'm honestly scared of them. This internship really weirded me out and I would not want to be identified.

So what does an internship-hungry college student do? Drops all his plans and gets ready for an interview, and that's exactly what I did. 

So I get to their address and go in about 5 minutes early. Only to be greeted by the three interviewers and a student in my class as they were done interviewing. ""Odd"" I think. ""Why are they interviewing in the lobby?"" **redFlag++;**

So they start my interview and this dude tells me about the company, the background, what they do, etc. At this point, i couldn't really put my finger on it, but something was off.

This dude seemed like he was trying to sell me not the company, but himself. For 30 minutes he rambled on about things such as him joining a gang earlier in his life **redFlag++;**, him being evil when he was young **redFlag++;**, last but definitely fucking not least, how when saw god and jesus christ **redFlag+=25;**, he turned into a completely different person. 

At this point I was like ""Oh"" and pretty much had made up my mind about interning there even though they were offering a 15> an hour. 

I was too polite and taken aback to say anything so I just sat there and took everything.

He then starts going on about how his daughters (the two other interviewers) have 10+ degrees between them both.

He then starts telling me that degrees aren't really that important and that I shouldn't even worry about getting my degree and that I should just want to work for them full time if I'm a real entrepreneur.

Okay? Then why do his daughters have that many degrees. (Probably a lie).

He starts asking me about where I'm from. Then asks me if I'm Muslim (because I'm Arab). I tell him I'm atheist, but I don't care about others' beliefs and that anyone can believe what they want to believe. He starts telling me that god comes from the heart and not from the mind and rambles on god and Jesus and prayers for another 20 minutes. So here I am, 40 minutes in, and they finally pull out my resume and start asking me questions. At this point I'm just nodding my head and daydreaming. 

Then they tell me that to work there, I have to work at least 20 hours a week and that a real entrepreneur can't work, go to school, and have a social life so I will have to drop school or my social life. **redFlag+=2000;**

I got up and told them that I didn't know I had to work 20 hours. I told them I will have to see how my schedule lines up and I will let them know what I can do. They thanked me, I shook their hands, and one of the daughters wanted to show me around the ""warehouse"" before letting me go. Not wanting to get sacrificed, I told them I have plans and fast-walked out.

So yeah, r/cscareerquestions, there ya have it.",1477807266.0,2016-10-30 02:01:06
536,Why do some unpaid internships require the knowledge of an entire engineering department?,684,ijryj5,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ijryj5/why_do_some_unpaid_internships_require_the/,228,"Just came across this crazy, UNPAID (NOT EVEN EQUITY) INTERNSHIP that requires you to have the knowledge of most companies's entire engineering/IT department.  Whats the point of even putting up an application like this?? If someone was smart enough to be competent in ALL of these technologies (they need someone to build this from scratch, no product even in production yet), they would already be employed. Why do founders like this exist?

&#x200B;

The ad:

>x is a fast growing beauty & culture tech company. x helps women with textured hair discover & purchase products for their unique hair needs using smart matching tools through a culturally relevant & immersive UX experience.  
>  
>The founder is looking for a highly skilled computer programmer who is comfortable with both front and back end programming. The developer will be responsible for developing and designing front end web architecture, ensuring the responsiveness of applications and working alongside the founder and graphic designers for web design features, among other duties.  
>  
>Responsibilities:  
Developing front end website architecture.  
Designing user interactions on web pages.  
Developing back end website applications.  
Creating servers and databases for functionality.  
Ensuring cross-platform optimization for mobile phones and desktops.  
Ensuring responsiveness of applications.  
Working alongside founder and graphic designers for web design features.  
Seeing through a project from conception to finished product.  
Designing and developing APIs.  
Meeting both technical and consumer needs.  
Staying abreast of developments in web applications and programming languages.  
>  
>Full Stack Developer Requirements:  
Degree in Computer Science.  
Strong organizational and project management skills.  
Proficiency with fundamental front end languages such as HTML, CSS and JavaScript.  
Familiarity with JavaScript frameworks such as Angular JS, React and Amber.  
Proficiency with server side languages such as Python, Ruby, Java, PHP and .Net.  
Familiarity with database technology such as MySQL, Oracle and MongoDB.  
Excellent verbal communication skills.  
Good problem solving skills.  
Attention to detail.  
Preferred: Experience with cloud architectures and a variety of Amazon Web Services",1598878985.0,2020-08-31 09:03:05
537,For people worried about not learning anything useful in their CS degree,684,eunkwh,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/eunkwh/for_people_worried_about_not_learning_anything/,209,"In general, it gets better once you get past the 1st half of your degree. The courses start to become less theoretical and more practical.

Even the super theoretical concepts that you learned in the first two years (i.e finite state machines, discrete math, turing machines, etc.) are useful to know because they are building blocks which can help you understand the material you learn in the second half.

Overall, the most practical advantage to having a degree is that you'll get better at asking the right questions.

With that said, even a little bit of work outside of class on some project/technology that you're interested in can go a long way in building your understanding and advancing your career.

EDIT: silly typo",1580158841.0,2020-01-27 16:00:41
538,My manager told me why I got my return offer.,685,98cpmv,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/98cpmv/my_manager_told_me_why_i_got_my_return_offer/,133,"If it ever sounds like this is me bragging, part of it is, but most of it is for context. Maybe this will give insight to people who are looking to intern.

I started interning at a ""big name"" financial tech company back in May 2018. Worked on distributed systems and budgeting servers. I was the only intern at this company, and I essentially worked alongside the other engineers.

My manager and I had weekly meetings where he would start the question off with questions like ""are you having a good time here?"" and ""What do you feel like you've learned"" but never gave much critical feedback. I thought this meant he did thought I was incapable of improving or that he thought I would be demotivated by criticism.

Often times in these meetings I would bring up things I could be doing better. I don't think it was self deprecating, but in the sense that I wanted to see what he would agree with so I could get some more insight to where I stood.

When giving me my return offer (100k + 20k benefits), he said that the reason he didn't give me much criticism was that anything he could have told me, I would have already thought of myself. He mentioned the differences between my first presentation and my later presentations and how it didn't matter where I was at now because I would keep getting better quickly. He used the word ""introspective"" a lot to describe my approach to work and I realized that it wasn't always about coming into a company as a ""ninja coder"" (I hate that term) but more of just a human that can assess themselves, because we're probably our own best critics.

In conclusion, I think more importantly than just being a skilled software intern is being an introspective one.",1534636890.0,2018-08-18 20:01:30
539,We're subreddit of the day!,682,bjiayl,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bjiayl/were_subreddit_of_the_day/,75,"Congratulations guys! Link below:

https://www.reddit.com/r/trendingsubreddits/comments/bjd4r8/trending_subreddits_for_20190501_rlifeafterschool/",1556752704.0,2019-05-01 19:18:24
540,My internship got cancelled.,685,fkhkc4,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fkhkc4/my_internship_got_cancelled/,201,"I’ve been crying for a while now but the main question is, are there any companies that are still hiring for summer interns this late and would I be able to hold this company accountable for anything given that they’ve given me official offer letter, cpt letter,amongst other documents? 
This honestly feels so surreal and I just wanna bury myself into a hole in the ground.
Edit: wow I’m baffled by the number of kind people in here but also surprised that some people will do far as shaming woman in tech in my PM. Wth is wrong with y’all?",1584525117.0,2020-03-18 05:51:57
541,Rant: Open Letter to Recruiters and HR Departments,683,9fb220,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9fb220/rant_open_letter_to_recruiters_and_hr_departments/,259,"**Scenario:** 

* Recruiter (internal or external) contacts ME about a job they think I am a fit for
* Recruiter phone interview = 30 minutes
* Company / Product Research on my part = 1 hr
* 100 question online  personality test = 1 hr
* Online IQ Test  or tech assessment = 1 hr
* General interview prep = 1 hr
* Video interviews with 6 people (peers, tag teamed)  = 3 hours
* Video interview with the hiring manager = 1 hour
* Thank you emails to every interviewer = 30 mins
* Positive  feedback from recruiter indicating you are a super strong candidate and interviews went very well.  We will let you know by the end of next week.
* You follow up with the recruiter via email 1 week AFTER they said you would hear back  and receive no response

**Final Result:  You never hear from them again, or 6-8 weeks later you receive a ""dear candidate"" decline email**

**Total time invested = 9 hours**

Companies complain of shortage of technical talent.  Well guess what, the tech talent is going to leave you negative feedback on company review sites and the top tier (and even mid-tier talent) will not want to work for you.   Why?  Because you are inconsiderate.  Because you did not show professional courtesy by contacting me ""by the end of next week"".   Because you could not take 2 minutes to respond to a polite email inquiring about a status update.   Because you took 2 months to even send me a form letter email saying you moved forward with other candidates. Because you wasted 9 hours of my fucking valuable time.  

Thank you and have a nice day.

&#x200B;

&#x200B;

&#x200B;

&#x200B;",1536810564.0,2018-09-12 23:49:24
542,Had a scumbag recruiter lay this one on me today.,682,6gvzpt,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6gvzpt/had_a_scumbag_recruiter_lay_this_one_on_me_today/,241,"After refusing to disclose my current compensation he said that typically companies only give a 10% bump when switching jobs.

I presented him with the following scenario.  lets say you have a developer who has 8 years experience, but for some reason works at a company that pays really low.  Dev in unaware until now, but makes $50k.  According to your logic, he's only eligible for $55k, even though he has 8 years experience?

Recruiter says the following:  ""Pretty much,  years of experience don't really matter, my client wouldn't be happy if they knew someone was getting a 30-40k bump off of them.""

I told him that I didn't feel like he could help me, and hung up the phone.",1497338438.0,2017-06-13 03:20:38
543,Nothing feels interesting anymore,678,keb0f0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/keb0f0/nothing_feels_interesting_anymore/,178,"This might sound like a bit of a depressing sob story but its just how I feel. I am in my final year of my bachelors degree and its really becoming difficult to decide what to dedicate my time and eventually my life to. I want to say right at the start that I really really love technology and I love building stuff and making things work. I enjoy the creativity of my work.

I have explored quite a few fields in my four years of study and although things are good when they first start out, I seem to always hit a wall with most things and not be able to get past a certain level of mediocrity in how good I am at that thing. 

I started with C/C++ and really loved the intense nature of competitive coding, staying up all night with friends trying to solve things in 24 hours. Now that feels like being a hack and I often find myself thinking what even is the point of that. Then I moved on to webdev, which worked out okay and I've built real event websites, platforms etc for clients although I don't feel like I want to build websites for a living till I'm 50. *How long can one keep doing React, Angular and stuff anyway...*

Now I've started with machine learning and that has also been interesting at first despite the **endless** courses, tutorials and things people try to shove down your throat. I like the discovery aspect of this field where you surprise yourself with what some silicon and electrons can be made to do. But with the giant corporations now involved, research is mostly driven by them, it makes you feel like you're only good enough to use whatever the Google and OpenAI gods have sent to you from on high.

&#x200B;

Sometimes I watch Youtubers like Applied Science, Thought Emporium and Nile Red and I think *these guys are absolute geniuses*... I wish I could also do cool science like that in my field. But no, I have to put my nose to the grindstone and slave away at a software firm.

So yea that's my state of mind right now. Thanks for reading to the end.",1608160580.0,2020-12-16 18:16:20
544,"Interns, what have you fucked up so far this summer?",680,8xujzz,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8xujzz/interns_what_have_you_fucked_up_so_far_this_summer/,304,Last summer I brought down a production server. I really hope I don't top that this year. ,1531295125.0,2018-07-11 03:45:25
545,Laid off. Burnt out. Do I go back to tech?,677,jkcfk6,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jkcfk6/laid_off_burnt_out_do_i_go_back_to_tech/,116,"**Long venty version**: I picked up the CS major when I was a Philosophy undergrad. I loved logic, I loved reasoning, I loved the abstract data structures. After years of ""deconstructing"" in Philosophy and English, the concept of programming really appealed to me: with a given set of tools, that have a given set of rules, you can create *anything*.

I graduated with high honors. Unlike my classmates, I loved writing, I loved solution design. I loved the theoretical ""Societal impacts of technology"" course. I even loved low-level programming, logic gates, and circuit design. And compiler design! So much fun!

I was pretty ambitious and bright-eyed leaving college, so I moved to a totally new city and got a job as a programmer at a small company. I solved weird problems and had a lot of passion and ownership, but I felt like I wasn't writing ""real"" code because I was customizing some pre-built application for my clients. Plus I didn't have mentors or senior engineers, so...

I joined a corporation. A big one that's highly regarded as a great place to work. I still remember my old boss telling me I'd be seen as a number. I guess it's a lesson I had to learn myself.

Five years at that corporation showed me just how much effort can be wasted on ""solving"" meaningless problems.

But here's the thing. I've never been interested in programming for programming's sake. Not once in all these years did I actually pick up a coding project at home, because I never wanted to. My coworkers would get excited about new libraries and tools and yeah, usually they added some cool benefit, even when the cost to integrate them into our product was often a bigger pain in the ass.

I have friends that work on ""legacy products"" and they feel pretty good about not having to learn anything new, even though that means they'd be shafted if they lost their jobs. I guess it's only natural that I daydream about that life, where I can solve problems in my own little bubble and not worry about having to ""keep up"" with tech. Part of the struggle is that the Kool Aid at these big corporations sells the idea that you have these 10x engineers that live and breath tech and it's all they think about every night.

I know I'm not that person. I know I shouldn't be in a position where I'm basement silo-coding or trying to overhaul the tech stack. I don't even know if I should be in tech anymore, or if I'm just jaded and burnt out and a year on unemployment will sort me tf out.

Unstated positive thing: years of working with engineers made me realize I'm more of a ""people person"" than most, and that I like the complicated conversations, workshop sessions, and customer interviews most of my engineer cohorts avoided as ""time-sinks"" that could be better spent coding. I've been told by many I'd be a great dev manager, or HR person, or recruiter.

But maybe I just need to stay out of corporate.

**TL;DR** I don't love coding for coding's sake. I got laid off from a corporation I was sick of anyways. I've been resisting the idea of grad school, because even though I love tech theoretically, I feel like my lack of desire to program is probably criminal. How do you know if it's just the company (and you should move on to programming at another company) or if you should change careers? Does anyone have experience they can share about being burnt out and not wanting to code anymore, but changing companies did the trick?

&#x200B;

**EDIT:** I know it's corny to do these edits, but thank you all so much for your advice! I'm still reading through and pondering!",1604015078.0,2020-10-29 19:44:38
546,"Protip: Give yourself more than one week to search for an apartment, sign a lease, and move.",677,ea5qzc,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ea5qzc/protip_give_yourself_more_than_one_week_to_search/,165,"I made a particularly big oopsie this past week.

I start a job with a BigN on Monday, and this past Monday was my first day off from the job I'll be leaving that I could use to go apartment hunting. Welp, the application process for the apartment will take longer than expected, and I can't get everything situated in time for my move-in date, so I technically I'd be homeless and working at a BigN for some amount of time.

I'm not sure what to do at this point. I've already delayed my start date, and I don't think they're going to let me delay it again for my own incompetence. I have some friends in the area that I could bum some help with, but they live like an hour away.",1576281415.0,2019-12-13 18:56:55
547,Why unemployment was the best thing that happened to me.,669,azffj2,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/azffj2/why_unemployment_was_the_best_thing_that_happened/,182,"I've seen a lot of people on this forum struggling through unemployment and depression, and as someone who has been through that path, I'd like to offer my own unique perspective as a member of the bottom percentile. 

When I started college, I was 18, lazy and immature. I chose computer science because I saw the movie 'The social network' and thought it was cool, and I also double-majored in some business degree. My objective was purely instant gratification, and taking full advantage of the newfound freedom that was offered to me. 

Most of the time I was barely passing courses, I did try sometimes, but I could never manage to get anything beyond mediocre in terms of marks. I foolishly believed that finding a job wouldn't be difficult because CS was in hot demand and I came from a reputable university. Regretfully, I spent most of my college days playing DOTA 2, Netflix and getting involved in weird-ass subcultures. 

When mid-2018 rolled around and I had graduated with borderline marks and no experience, my pathetic attempts at job-hunting were unsurprisingly met with rejection after rejection after rejection. Looking back now, I have realized that my resume was completely garbage at the time, filled with bullshit like 'Proficient with Microsoft word and Powerpoint' and 'Enjoys playing video games'.

Anyways, it was during this period where I fell into a state of depression and anxiety. The safety net of college was over and I was thrust into a foreign world. Pressure from family members, as well as watching my peers succeed while I languished, left me feeling like complete shit. 

Throughout the next couple months, I switched gears, I started scouring forums, asking people and reading books. I found out about Leetcode, CTCI and Hackerrank, I grinded the shit out of it. I built anything and did everything I could think of to build my portfolio. Kaggle, Mobile Apps, Websites, WebApps, Hackathons, Tensorflow, AWS, Cloud Databases.  

My study and practice schedule changed from 2-3 hours a day, to 5-6 hours, and soon enough I was consistently pulling around 12 hours a day of study. I was driven and fueled by my despair. Every day was spent min-maxing my output, I would eat meals in front of the computer, listen to podcasts as I exercised and commuted to my library. Music was too distracting so I deleted my entire playlist and replaced it with classical. I used Cold Turkey to eliminate all my distractions and I used toilet breaks to stretch my legs. I cut out all sugar as it interfered with my focus, cut out coffee, and stopped going to the gym because it was a waste of time. 

It was hard, some days I cried at my stupidity because I couldn't get through a LeetCode easy after 2 hours of brainstorming. I limited social contact with friends, and my family. I did burn out sometimes and spend a whole day playing games and watching TV to rejuvenate myself, but that was quite rare. 

But after something like 6-7 months, I rebuilt my resume from scratch filled to the brim with some kick-ass projects and some bullshit college ECs. I carefully crafted CLs for all the companies I applied to, and started sending out applications everywhere, with hundreds of leetcode questions under my belt I managed to slide through some phone interviews and I finally landed a 100k Job. 

I remember my heart racing so fast when I realized that it was over. I sat down on a park bench for an hour and for the first time in a long time, the weight was lifted off my shoulders and I felt I could breathe again. 

Nowadays, I'm working, but I still carry that work ethic with me. I do a bit more social things now with family and friends, but after work and on weekends, most of the time, I continue to study, build on projects and my own skills. I've learned my lesson and I never want to go through that despair again. I am also seeking to pursue a masters degree soon, while working, because I need more work on my fundamentals and a more palatable GPA. 

I took the long way round, but in hindsight, I am grateful for that period of unemployment, because I can honestly say, I have become a far more mature person as a result. For those people who are still trudging through this period, keep going, and perhaps in the future, you'll look back on this moment, your progress and how far you've come. ",1552251756.0,2019-03-10 17:02:36
548,"How do you ""mentor"" younger developer?",678,k57hor,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k57hor/how_do_you_mentor_younger_developer/,140,"I thought that working more than 20 years in software development I could ""mentor"" younger people.

In my last role, indeed I was just staying in the background helping to solve nasty problems and promoting initiatives and projects.

I thought I was ""mentoring"". However technology has changed so much that in the last 2 years, I worked with 23-25 y.o. people that were so much more skilled and updated than me that I didn't find  anything to mentor about.

I was actually learning from them, and they actually started to override my decisions or opinions, often rightly so. My bosses also started to listen more to them than to me.

My role was reduced basically to say ""yes"" to everything.

After being fired, I started studying like crazy, but I feel I'll never catch up.

I think my only hope to find a job now is to present myself as a mentor, but I don't know exactly how.

Probably the mere fact I'm asking here means I'm not a mentor, though.

Looking for ideas and similar experiences.",1606936899.0,2020-12-02 14:21:39
549,You’re as likely to hear back on a job you applied to for meeting 50% of job requirements as meeting 90% of them.,680,a5pfvc,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/a5pfvc/youre_as_likely_to_hear_back_on_a_job_you_applied/,78,"Not sure if there's a way to have the graphic embed itself directly in this post, but I saw another interesting post releveant to cs career advice.

Graphic:
https://talent.works/blog/2018/11/27/the-science-of-the-job-search-part-vii-you-only-need-50-of-job-requirements.png

Link to story:
https://talent.works/blog/2018/11/27/the-science-of-the-job-search-part-vii-you-only-need-50-of-job-requirements",1544699091.0,2018-12-13 06:04:51
550,"Two years after asking for help, I finally got my first coding job",675,9zyc9m,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9zyc9m/two_years_after_asking_for_help_i_finally_got_my/,52,"Hello all,

On Nov 16 two years ago, I created [this post ("" Almost 30, zero experience and I feel VERY inadequate"")](https://www.reddit.com/r/cscareerquestions/comments/5dcc0q/almost_30_zero_experience_and_i_feel_very/) asking for help. Yesterday, I accepted an offer to officially become a developer. It has been a very interesting journey from which I have learned a lot and I would like to share some my story (mostly me thinking out loud) and insights while keeping a full time job. *I was only planning on posting this on my blog but felt I needed to share it on Reddit.*

&#x200B;

**Immediately after reading the post responses**

Two things encouraged me the most:

1. Finding out there were/are others on the same boat. I was feeling inadequate, which was true... I was (am?). However, others felt the same way. And others were also inadequate. There was nothing **wrong only with me**.
2. There are tons of people out there willing and happy to help. I had no idea this was ever going to be the case, and I found this true throughout my entire journey. The advise given by almost everyone was extremely valuable. Some of it worked, some of it didn't (*ymmv* of course). I would summarize the advise given as: **focus** on something, **participate** in CS communities, **learn** through books/courses, **contribute** to open source, and **build** stuff.

&#x200B;

So, **what did I focus on**?

Honestly, I was unable to focus on only one thing/stack. I had to dip my feet into a couple of technologies before I was able to focus on *one*.

I first tried with **C#**. I started gathering online resources and even purchased a Kindle book someone recommended online (I can't remember which one). However, I did not even create a 'Hello world' app with C#. I found I do not engage with books that much, so maybe that's why C# did not happen...

Throughout the resources I gathered, someone recommended **The Odin Project**. This clicked a little bit more with me and I was committed to learn **Ruby** and **RoR**. I went through all HTML, CSS and JS sections. And right before getting into the backend, I found **NodeJS**. Turns out, people were saying Node was getting super popular. They were also saying Ruby's popularity was declining. Even better, what I had already learned throughout the JS section could be applied to the backend. I ended up giving Node a shot and focus on that.

&#x200B;

**How did I learn**?

Enter **Udemy**. When I found them, they were having a sale I thought was incredible at the time. *""$10 for a $200 course? I'll purchase 3!*"". First one I completed was the Web Developer Bootcamp by Colt Steele. Second one, the Node.js course by Andrew Mead. I went halfway through Maximilian Schwarzmüller's React one. I know now that the value of these courses is closer to $10 than to $200, but don't regret purchasing them. They kept me engaged, they helped me learn.

Then **YouTube**. There are great free tutorials and content there, which one could argue are better than Udemy's content. **Coding Train** content is awesome. Made me learn that the inadequacy feeling will stick around, and I feel Dan S. is incredibly engaging and a great inspiring educator. **Traversy Media** and **The Net Ninja** both produce great tutorials\*\*. Coding Garden\*\* is also great, I learned a lot watching CJ live code and dealing with problem solving, and as the **community** is smaller than the ones above, I liked better **participating** there (*senpai noticed me!*).

&#x200B;

**What did I build?**

**A lot**. I took dozens of side projects, which completed maybe 5%. I don't think that's a bad thing... I usually started a side project was I was interested in applying a specific skill. Once I applied it and understood it, another skill I was interested in showed up.

Someone had recommended to create a **blog**, so I did.  I purchased a domain for it, I built the layout of the site and power it through Jekyll. Throughout these two years, I barely have 3 posts created. Funny thing... I received an email from **Skillshare** saying that they were impressed with my expertise and wanted me as an educator on their platform. ***WHAT?*** How did they even find me? I have never self promoted anywhere. My posts are all entry level, if at all. Thinking they had massively sent that email, I tried Googling online if that was the case but I am still unsure. It's cool to be noticed like that, even if I don't know how it happened. Maybe as a middle-term plan...

I'm most proud of a full stack app which is still undergoing. I'm building it with the **MERN** stack. It's a soccer pool webapp I use with my friends mostly, but it has full authentication and all those good things. I'm currently building a '*forgot your password*' functionality. I find the feature building process extremely satisfying: *OK, let's build X feature ... Let's research how others have implemented it ... Trying ... Works? No ... Trying again (ten times)... Now it works!*

I have also posted a couple of tutorials on YouTube. Nothing to be proud of yet. Like with other stacks, I still dipping my feet into stuff to figure out what works for me.

&#x200B;

**Job applying and interview process**

I started applying to jobs maybe 9 months ago. Overall, I think I submitted about 40 applications. Out of those, I maybe received 5 responses: 3 screen calls (failed 2), 3 coding tests from home (failed 2, never received a response regarding the third), and only one interview which eventually turned into the offer I accepted.

The hiring process of this company is interesting. Nothing like the experiences I read online. They had a normal phone screening process in which they briefly asked if I was familiar with HTML/CSS/JS/React/Node. I said I was and directed them to the full stack app as my primary example. Shortly after that I received a request to interview onsite.

I researched on Glassdoor what people were saying about their interview process. It matched what the recruiter told me: It's just going to be a conversation between you and the hiring manager. And it was... I was asked close to 30 questions related, again, to HTML, CSS, JS. It's impossible for me to remember every question, but the interaction was something like this:

>Q: *Tell me what you know about the difference between HTML4 and 5.*  
>  
>A: *I know it introduced new tags, like X, Y and Z. I've actually used them on* ***this*** *project,* ***that*** *way.*  
>  
>Q: *Cool! Yeah it also* ***changed this*** *and* ***that***\*. Now, what can you tell me about CSS pre-processors? Have you used them?\*  
>  
>A: *Uh, no I haven't used them. It's definitely part of my to-learn list. I have heard of them before, and I think they do* ***this*** *and* ***this***\*.\*  
>  
>Q: *Well, kind of. They actually do* ***that*** *or* ***those***\*. But I'm glad you have heard of them and that you're planning on learning.\*

That was it. No coding exercises. No whiteboard test. Just a conversation (driven by a questions of course), which I felt went pretty well. I was told I would receive a follow up call some days after that.

&#x200B;

**The offer**

Like I said before, all this happened while I still had a full time job. My current compensation is good. Between mine and my wife's compensation, we're able to pay our house, the bills, save and travel. I'm not on an entry level position even though it's not related to coding at all.

I received a call from the recruiter saying they wanted to offer me the position. Considering how ""easy"" the interview process was, and that I would definitely start from the bottom, I was expecting them offering me less than my expected compensation (I told them I was hoping to be paid the same). Turns out, they matched it and I gladly took the offer. I'm starting in two weeks. #heavybreating

&#x200B;

**What did not work?**

I think it's unfair to say ""did not work"". It's more like ""what I didn't do""... I did not participate in open source projects. It was on my to-do list, but it's daunting *af*. It will still be on my to-do list, and I hope it becomes less daunting as I learn to interact with a team.

I did not go to meetups/conferences. There aren't too many interesting options in my country. I went to one, but some people were clearly extremely uncomfortable to interact and the others were already friends with each other, making it hard for me to introduce myself.

&#x200B;

**Conclusion**

It has been an incredible interesting journey. Some things have worked for me, others did not. I could have perhaps gotten an offer sooner, but I wanted to maintain a balanced life.

**If you're reading this while you start your journey**, I strongly encourage you to try everything you can. Some thing will click, others will not. And that's OK. Take it one day at a time. And build, build, build, build and build. The first things you'll build will suck. That's fine. As you learn something new through a tutorial, build something different with it. Learn, reapply.

If you're reading this as an established developer who likes helping others: **THANK YOU**. Thank you for investing time in the development of others when there's nothing in for you. Your share is invaluable. I'm slowly working towards a position where I can also give back.

If you have any questions or need any help, feel free to hmu on the comments below or via PM.",1543093810.0,2018-11-24 16:10:10
551,When does the grind stop?,678,hlf9sa,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hlf9sa/when_does_the_grind_stop/,298,"EDIT: thanks for the comments everyone -- didn't expect this to blow up as much as it did. Will be reading through them all, looks like I should take some time to self-reflect and ask myself what I want to prioritize in my life.

Not super sure if this is directly applicable to this sub (maybe I just have my own issues) but given that it's related to me pursuing a career in CS I figured it's pretty relevant.

I'm currently a college student, interning at a FAANG company for the summer, and I just don't see how the kind of life I've had the past few years is really that sustainable going forward. At every point in my life, I've always been thinking about/working toward the next step in my life, and looking back, it's all been just a constant constant grind. Before college, I was in HS and grinding to get into a good college. When I was in freshman in college, I was so stressed about finding an internship for that summer that it just ate away at me, the entire year. I felt a lot of external (and self-inflicted) pressure to find one for that summer (because my older sibling snagged a really good one when they were a freshman) and felt so bad when I wasn't getting interviews, even though I knew that I shouldn't expect much as a freshman. And though I found one that year and eventually ended up at an even better place now, I've found myself stuck in a rut where I simply can't get out of the mindset that I should be doing more as I'm about to graduate; ie. I should be trying to work at a company that pays even more than FAANG-level companies.

I come from a family/cultural background that places a high emphasis on your level/worth being tied to your income (i.e. if there is any chance you could be making more money, then you should be working toward that) and I think that mindset has caused a lot of this. I'm sure many of you know what I'm talking about :).

And a lot of it has been caused by my own jealousy -- ie. seeing other people who are doing better than me and myself wondering how come I haven't been able to get to that position in life too. But I know deep down that I'm already in a great position to be successful when I graduate, so why can't I be happy with what I have already?

Call me lazy but I genuinely don't want to even think about about working hard 8+ hours a day at my internship to try and secure a full-time return offer while simultaneously grinding Leetcode or whatever on the weekends to prep for full-time interviews at other companies. And I don't know what my life is going to be like when I graduate, but I really want to be happy/satisfied with where I end up but I don't think that nagging feeling is going anywhere soon. And I also want to start to focus more on non-work aspects of my life.

And I know this post may sound conceited because it doesn't sound like I'm happy with where I am. I am happy and feel very lucky with what I have but I just can't shake the constant feeling that I could be doing more.

So that was kind of long-winded, but the question I would like to ask to you full-timers is whether you have been faced with any of the above feelings that I mentioned throughout college/later and how you have dealt with them throughout your career?",1593945081.0,2020-07-05 06:31:21
552,Remote internship advice so you make the most out of it this summer,673,gc7dmb,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gc7dmb/remote_internship_advice_so_you_make_the_most_out/,49,"With many remote summer internships starting in about a month, I wanted to share a few pieces of advice that helped me have an enjoyable experience and get return offers from the last 4 internships and land my 5th at GitHub this summer:  

- Reach out to your manager if you haven't already, say hi, introduce yourself and share the excitement about the internship. Don't overcomplicate it; they're just individuals like you and me. Getting to know people before starting to work with them is a great start.

- Ask for a project-specific tech stack and look for stuff that you might not be familiar with. One month is enough to cover the basics of anything you didn't learn at University and will save you lots of time (and stress) once the internship starts. (eg. for my last internship that was RxJS as whole application state management was done using Reactive observables)

- Define with your team when you should ask for help. You'll run into obstacles every day. Some might take 30 minutes to solve, and others might take forever. Find a balance - You don't want to interrupt the whole team every 30 minutes, but don't let one problem turn your internship into an unpleasant experience.

- Practice [rubber duck debugging](https://rubberduckdebugging.com/). You don't want to schedule a 30-minute meeting with your team and 2 minutes into explaining the problem you get to the _aha!_ moment where you figure out the solution to the problem.

  - In a nutshell, before asking for help, try to explain the problem you're having to a random object. Most of the time, during this process, you'll get new ideas and solve a problem by yourself without needing somebody's help.


- Most likely, you won't be micromanaged, but it's a good idea to keep everybody updated on your progress. Doing this, your team might offer some useful advice based on your progress or prepare you for upcoming obstacles in the task.

- If time allows it, plan virtual pair-programming sessions with your teammates. Once a week, pick a short task and try to solve it together. Doing this, you will pick up domain-specific knowledge faster, learn how to navigate new codebase efficiently, and improve your problem-solving skills.

- Socialize with other team members on Slack channels like _#random_ and _#watercooler_. Just because you're new to the team doesn't mean you shouldn't participate in casual conversations with other employees. They are social beings too and are probably looking forward to getting to know better new colleagues.

I wasn't sure how long Reddit post should be, so I put a full list inside tiny GitHub repo here: https://github.com/fejes713/remote-internship-advice

I hope this helps! Have fun and productive summer friends.",1588458611.0,2020-05-02 18:30:11
553,Seattle 'Up or Out' Tech culture finally caught up to me,678,9t06mp,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9t06mp/seattle_up_or_out_tech_culture_finally_caught_up/,236,"I had heard of the ""Up or Out"" nomenclature before moving out to Seattle, but I did not really understand what it meant. I figured it was something along the lines of getting pushed out of the tech industry if you didn't stop learning. Which, of course, we read that in tech blogs and community posts all the time. But that is not what ""Up or Out"" means, and I can now describe it from my experience.

From the start of my job, the higher-ups in my company (not big-N) had always mentioned that we need to keep growing collectively to succeed. I was thinking, cool, I will help hire more resources and show them the proprietary ropes. So we kept hiring new grads and mid-levels with little to no Senior hires over the course of the past 2 years. For me, I have been in cruise control pretty much the whole time performance-wise, because I am happy with my pay to the point where I am content with average or no quarterly bonus, so I never chased that carrot-on-a-stick. That was mistake #1 in this tech bubble game. I did not show personal growth.

I began to have conversations with my manager about his concern for my ""on-par performance"" like it was a bad thing about 8 months ago. This is when the ""Up or Out"" idea started to hit me. Tech bubble companies think that if you are not slowly gaining more responsibilities quarter over quarter and delivering at an increasing rate over time, then you are not a valuable asset. There is no such thing as comfortable. I was delivering all my work for 6 quarters straight, and I was punished for getting comfortable rather than reaching out for 3x the responsibilities for a little more pay.

Yesterday, I was told by my manager that because I have stagnated that I should consider moving laterally in the company to a Support Engineer role (have been an SDE for 6 years).

&#x200B;

Welcome to the tech bubble life. I can't wait until I move away from here. Tech companies in more rural areas care far more about the human behind the computer screen.  


Have any of you experienced this ""Up or Out"" culture in other tech bubbles around the world?  
",1541031047.0,2018-10-31 20:10:47
554,Does anyone else feel that their internship “spoiled” them?,671,d1235h,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d1235h/does_anyone_else_feel_that_their_internship/,225,"I did an internship this summer at a big N and ended up with a return offer, but due to some personal/family reasons, living in SV or Seattle is not an option for me right now.

I live in the mountain states and while there are some good companies here, none of them will ever treat me as lavishly as my internship did. I’m talking about stuff like catered meals, cushy benefits, high comp.

Now I feel like a child actor who is past their peak! Does anyone else feel like a full time job will never be as cushy as an internship, or is it just me?",1567921200.0,2019-09-08 01:40:00
555,Can we please stop with the panic threads?,671,fj8lo0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fj8lo0/can_we_please_stop_with_the_panic_threads/,214,"I get that there is a spreading pandemic, but the constant repetitive posts regarding cancellations and asking us to predict the unpredictable aren't really constructive. Maybe we can have one pinned megathread?",1584335277.0,2020-03-16 01:07:57
556,Some advice for people who feel tired at work,670,c5mjuj,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/c5mjuj/some_advice_for_people_who_feel_tired_at_work/,252,"I don't know if it's the same two posts I'm seeing over and over or if there's multiple people posting about this, but it seems like there's a lot of young people feeling drained out at work. I used to be one of you, and I switched up some things a year ago, and I feel a lot better.

* Get enough rest. If it's your first time in a big city, you're going to be tempted to socialize late. Don't. At least only do it once a month or less. Go the fuck to sleep. Don't stay up watching things. I've done that for years. You don't gain a single thing from it. Sleep is better.

* Eat breakfast. If you don't eat breakfast, you get hungry and you're hanging around the free snacks by 1030am. They are all usually garbage, and make you feel like garbage. Eat fruit and yogurt if you don't have time for anything else. 

* Make sure you're getting your vitamins and minerals. Fatigue is often a symptom of deficiencies. Iron deficiency leaves you tired. Vitamin D and calcium deficiencies make your body hurt from even a little activity and, this is anecdotal, but make your depressed. So eat leafy greens, dairy, and take supplements. I didn't believe supplements did anything, but I feel less shitty since I started taking them. On the same note, probiotics. Yogurt, pickles, sauerkraut, kimchi... Just have some with every meal. 

* After lunch, don't sit down to work. Take a stroll. And if you have a standing desk, stand for an hour or two after lunch. 

* Exercise. If you have a little space you can disappear to in the middle of the day, do stretches. I found a disused meeting room, and I spend 15-20 minutes doing stretches in the middle of the day. When I don't do that, I feel way shittier than when I do. Add some breathing exercises and a few minutes of meditation to it if you can. If doing it during the workday is hard, do it before or after. But do it. 

* Cut out garbage foods. No fried food, no cake, no cola and severely limit the alcohol. Oh, and cut out coffee and energy drinks. Drink sparkling water or weak tea if you want the feel of drinking something. 

* And when you're done with work, be done. Actually switch off mentally and go do something else. This one eye on the work slack thing will keep you agitated and your body won't relax. 

* If you're in a situation where you need weed to sleep, consider weaning off it. Weed makes your mind sleep dreamlessly by suppressing some parts of your brain. The problem is, that's how you brain processes memories and strips them of emotion. You need your mind to do that if you want it to be healthy. 

Ultimately, your body takes some time getting used to a work environment where you need to be around people all the time, and need to be productive most of the time. It's going to be awful for a couple of weeks. But that's precisely why you need to give yourself extra care with all these things I've mentioned.",1561560813.0,2019-06-26 10:53:33
557,Anyone else here plotting their long-term escape from the industry?,662,ae77s8,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ae77s8/anyone_else_here_plotting_their_longterm_escape/,341,"By all rights I have an amazing job. I'm overpaid, I work for a reputable company, and I work on interesting, engaging work with a fair degree of autonomy. But part of me is seriously considering going the FIRE route and moving to some LCoL area and focusing on entirely different aspects of my life. I feel like I'm missing that ""self-actualization"" piece of Maslow's pyramid, if you believe in Psych 101. And writing code for someone else isn't going to get me there.  
I think another big part of it is wanting freedom from the corporate life. If I were able to make my own hours and dictate my own work, I'd probably be happier. But tbh consulting seems like more work, not less. Maybe I could supplement FIRE by teaching part time.  
Another else in this position? How are others thinking about their exit from the industry?  
EDIT: Thanks for all the responses people! This is a very interesting discussion!",1547072151.0,2019-01-09 17:15:51
558,Self-taught dev on the verge of giving up. Need advice.,668,hu2w9a,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hu2w9a/selftaught_dev_on_the_verge_of_giving_up_need/,119,"To preface this, I have a bachelors degree in mechanical engineering. However I have no interest in that. My GPA was pretty good all things considered but I still wanted something else. A few years ago I started programming. Java to be exact. Then I learned a bit of Python and C++ but nothing worth mentioning in any official capacity.

3 months ago I graduated but I haven't really started looking for a job since I didn't think I was ready for it. A few of my friends recommended open source contributions to get the hang of it. I said cool and started to look for some of those projects on Github. I quickly found this repo on github

[https://github.com/MunGell/awesome-for-beginners#java](https://github.com/MunGell/awesome-for-beginners#java)

Extremely motivated, I started diving into the issues they have to find something I can help with. Only after an hour of scrounging the repos It dawned on me that I couldn't contribute a single thing to those projects.

Take a look at this open source project for example

[https://github.com/JabRef/jabref/labels/good%20first%20issue](https://github.com/JabRef/jabref/labels/good%20first%20issue)

There are several issues marked as ""good first issue"" yet I couldn't even begin to come up with a proper solution for ANY of those. The code base is just too large. Like, where the hell do I even begin to look? 

I really thought I was good at solving programming tasks, I completed every single Advent of Code challenge without help (which was pretty challenging actually), I solved around a 100 project euler tasks and completed an ungodly amount of challenges on codewars, leetcode and the rest of the ilk. Turns out none of that actually helps when you're getting smacked in the face with 100 classes and have no idea what they do without spending hours and hours on end reading through them. I actually worked on a few personal projects aswell, I wrote an api wrapper for a media database (nothing extravagant, just wrapped http requests and turned JSON data into java objects) and a few classic games like tetris using design patterns like MVC.

I am honestly wondering what the point of those programming tasks even is. I read cracking the coding interview and the author suggests that a junior dev should know about basic data structures (linked list, array list, trie, hash tables, sets, trees, graphs) and sorting algorithms and basics like recursion. No problem I thought. I breezed through most of the book before putting it aside to work on real world stuff.

Like the repo mentioned above. But I feel like I hit a dead end. I feel like this is the moment. The moment I realize that it was just a pipe dream. How the fuck am I supposed to work in a professional environment if I can't even solve things considered ""good first issue"" by actual devs? I feel like a total loser.",1595203570.0,2020-07-19 20:06:10
559,"For an advice subreddit, you guys can be pretty nasty and unhelpful",665,hex6i8,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hex6i8/for_an_advice_subreddit_you_guys_can_be_pretty/,177,"On my normal account, I frequently use this subreddit because I have found some genuinely fantastic advice from here.
However, this advice has always come from a top post of the day.
*Every* single time that I've asked a personalized question, the experience has been absolutely awful.

For example, the resume advice thread is almost useless for getting any real resume feedback.
The feedback that I have gotten so far, from posting in 5-6 resume threads, has been ONLY THE FOLLOWING:

1. My font is too small

2. Stating ""references are available on request"" is useless, even though it pads out a section that would otherwise be blank.

3. The use of white space is weird (?)

4. ""Read the FAQ""

That's *it*.
Notice how absolutely none of these actually have anything related to the *content* of the resume?
Just skim the resume threads.
Hardly anyone ever actually gets feedback on anything other than the visual appearance of their resumes.

On top of that, every thread that I have posted has been met with mostly hostile responses.
I asked a question about filling out online applications and the two responses were ""*I* don't have this issue"", and a snarky ""yeah, I'm sure that [the issue] is what's holding you back from getting hired during a pandemic"".
No actual response to the question, just two snarky responses.

Another time, I asked about mentioning a standardized test score in interviews.
The responses were first to mock my school for using said standardized test, and then call my education ""useless"".

I don't post on here any more; I just read the top posts because often the top comment will actually have useful information.
Still, just scrolling a little bit down on the front page yields more of the same - Some new grad posts a thread asking for some specific advice, a few snarky comments later, and the thread is downvoted out of existence, with no real advice ever being given.

I guess this ended up being more of a complaint post than something which offered a solution, but I wanted to get this out there.
This subreddit is extremely toxic for some reason.
Some of you really need to do some personal introspection.

Edit:
I regret mentioning my resume feedback at all.
Everyone is right, that *some* feedback is better than none, and I was just trying to highlight an example of how, generally, the resume feedback isn't very useful.

My main point was in how questions are responded to.
It's *very* demoralizing to have multiple responses to a question which all either outright ignore the question and attack some small part of the phrasing, or dismiss the problem stated as a ""nonissue"".
From my experience, it takes a certain critical mass of attention for a question to get a decent response.
The first 3-4 responses are almost always somewhere between useless and detrimental.",1593015337.0,2020-06-24 12:15:37
560,Interview tip: know your hobbies,662,5ivbzo,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/5ivbzo/interview_tip_know_your_hobbies/,299,"I recently went on an interview and was prepared to answer all the questions that I had read were asked by the company. They suddenly asked me what my hobbies were. Suffice to say - i have none (unless you include smoking weed and msturbating to online porn a hobby), i did my best to try to come up with some stuff on the spot. Nervous i blurted out ""restaurants."" The interviewer kind of laughed and was like ""um like working in them?"" I responded ""no just going to restaurants. I like to eat there"" they all chuckled and asked what kind of food. I again nervous (didn't want to say Taco Bell or 5 guys) just blurted out ""american bistro."" I never got a call back.

 Lesson- have some hobbies lined up. ",1482022521.0,2016-12-17 19:55:21
561,CS is broad as hell. What is your specific occupation like?,662,ci91ep,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ci91ep/cs_is_broad_as_hell_what_is_your_specific/,392,still in college want to hear about different specializations.,1564206616.0,2019-07-27 01:50:16
562,Because of the way linear time works eventually junior engineers are going to be senior engineers. Won't that make the saturation at the senior level be just as bad as at the junior level?,663,ijaych,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ijaych/because_of_the_way_linear_time_works_eventually/,541,It's not like the current juniors are just going to disappear in smoke and no longer compete for jobs when you're a senior or anything.,1598813814.0,2020-08-30 14:56:54
563,Getting lazier since WFH,660,hashcu,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hashcu/getting_lazier_since_wfh/,101,"I'm not sure where to post this, if I should have gone to r/productivity please tell me but I think this has something to do with me being a bad software engineer.

These past 2-3 months of WFH, work has been unbearable and around 3 or 5 PM, I would want to stop work when actually I can only stop at 6.30.

I think the reasons are these:

1. I'm not confident in my skills and I feel incapable of completing the cards assigned to me

2. Some of the work I'm doing is insignificant but if I do get significant work, I feel my skills don't qualify and other peers should have do it

3. When the product requirements are unclear, I reach out to my company's product team but they are busy doing something else so they might not answer at all or answer in 1-3 days. They also don't make enough cards to satisfy the product requirements

4. Very small percentage because of this covid situation that doesn't enable me to socialize with other people and other depressing situation such as paycut, colleagues leaving etc.

I really, really feel bad that I can't maximise the time that I have from 9-6.30 but I really don't know what to do, I'm really unmotivated and very slow to get work done these days. I am afraid to communicate number 3 to my company because I am just a junior engineer and the product team has people with higher positions and have worked a long time in this company. Thank you for reading",1592433791.0,2020-06-17 18:43:11
564,Am I fucked?,662,k5mpw3,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k5mpw3/am_i_fucked/,336,"Long story short, my gpa is shit (2.9, failed 2 classes this past semester so it will drop). I was supposed to graduate next semester but now I'm on track to graduate May 2022. I've done nothing in college but the bare minimum, so I have retained barely any knowledge of the last 3 years of schooling(tried an easy leetcode question and had no idea where to start lol). Needless to say I have nothing to put on my resume and idk how I'm going to get an internship before I graduate. And the icing on the cake: I have pending assault charges against me(I know I didn't do it, and it was in a mental health center which has cameras so I'm a little optimistic but still scared). Sorry if it just sounds like I'm ranting on how much my life sucks but I kind of am lol. Anyway, do you guys think there's any hope for me to get a job in this industry when I graduate? I'm going to do my best to try to catch up and work my ass off. I really need some side projects but I have to learn how to do them first lol. I have a LOT of catching up to do if I wanna be able to at least get an internship after I graduate. Do you guys think there's any hope for me in this field?",1606985540.0,2020-12-03 03:52:20
565,Finally made it!,660,cfrkvu,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cfrkvu/finally_made_it/,38,I don’t post here often but I just wanted to share! I was a physics student with an okay background in doing some python analysis stuff. Got an internship at a large health care company making windows applications. Loved the job and my team. Point blank asked my boss if I could stick around. Turns out I get to stick around! I finally have job security! I can pay my bills and support my family while my wife finishes up her degree! I’ve always been a pretty poor dude. I’m still not rolling in the money but it just feels so good to finally make it!,1563689376.0,2019-07-21 02:09:36
566,You will make it.,659,97ehoz,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/97ehoz/you_will_make_it/,133,"I am someone who did not start programming until I was a freshman in college. Upon changing my major into CS I quickly realized that CS was not to be taken lightly. Throughout university, I have worked full-time jobs in the service industry to pay for school whilst taking a full course load. I have spent many days and hours filled with depression and worry if I could ever graduate let alone become a software engineer. I have failed tests, turned in terrible programs, and failed in many other ways. 

As I go into my final year of undergrad I have not figured everything out by any means nor will I but I do know that everything will work out. I just finished an internship and received a great full-time offer for a Software Engineering position in a major East coast city. It was not easy, I have worked my ass off and networked until I was blue in the face, but I MADE IT.

You can make it too. I remember seeing posts on this very sub similar to this one and remembering the hope and reassurance they gave me. I am here to tell you, it will all work out. Put in the work and you will be rewarded.",1534327938.0,2018-08-15 06:12:18
567,[Resource] Interview Questions - My massive cheat-sheet of questions I ask in Software Engineering interviews.,665,4ce2s3,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/4ce2s3/resource_interview_questions_my_massive/,71,"This is a copy of my ""Interview Questions"" google-doc I've updated over the last 2 years.  Primarily, I am screening for (1) work-life-balance (2) professional advancement and (3) comfort/happiness.

**Disclaimers:**

Before we dive into the cheat-sheet, a few important disclaimers.  This cheat-sheet is NOT designed to get you hired, in fact, it's designed to do the opposite.  It's designed for cynical ""old"" bastards who don't want to waste their time on high-stress, unfulfilling, abusive, or low-quality jobs.

Some of these aren't ""questions,"" but rather research items.  I don't ask every question in every interview, but I'm also not afraid to ask multiple interviewers the same question to see if they're genuine or polishing a turd.  The cheat-sheet is intended to be concise, not precisely worded, so phrase these however comes across naturally.

If you're unproven and have few job prospects, you may wish to be ""tactful"" in regards to some of the work-life-balance questions.  You may also wish to defer questions like ""do you offer free lunches,"" and instead do research on their careers page, glassdoor, or simply taking careful note of the office-environment when you do the on-site.

If you don't understand why I ask some of these questions, just ask, I'd be happy to share.  Feel free to add your own, or provide feedback.  Enjoy!

-----


**Interviewer**

* Name - (Write it down!)
* Your role?  Which office do you work at?
* Time with company?

**Company**

* Years in existence?
* Core Product(s) & Core Software Product(s)?  Who uses the software?
* Total employees?  Total technical staff?  Tech-staff breakdown (dev,qa,ops,etc)
* Business model?  Customers?  Clients?  Specialties?

**Office**

* Location - Commute, Stuff nearby
* Environment - Cleanliness, Comfort, See where Engineers sit, Desk Size / Monitors / Standing desks, Nearby Sales teams, Breakout rooms, Personalization (desk toys or pictures?), spacious vs sardines, kitchen area
* Seating - Open office, cubicles, shared office, private?  Spacious vs sardines?
* Equipment - Monitors?  Keyboard/Mouse?  Desk?  Standing Desk? Anything expensable?
* Other - Dress code?  Parking cost?

**Happiness:**

* Me - “Tell me, do I want to work here?”  “Why?”  “Why might I not want to work here?”
* Motivation - What do you find motivational about working for [company]?
* Trap - “What do you find the most challenging or frustrating working at at [company]?”

**Work-Life Balance:**

* Hours - Average # of hours YOU work?  Any after-hours or weekends?
* Office Hours - What are typically required office hours?  WFH/remote?
* Crunch-Time - How often is crunch time?  What causes it?
* Other - Travel?  On-Call? Remote teams (late/early meetings)?

**Work**

* Development Process - Step me through your development process, from a ticket/task, to code on production.
* Design, Planning, Coding, Code Reviews, QA, CI, Testing, Deployment, GIT?
* Management / Agile style?
* Meetings - What meetings? Time in meetings?  Estimates?  Client/Customer?  Scrum meetings?  Retrospectives?
* Work Examples - Examples of tasks YOU (interviewer) recently worked on, or currently working on?
* Needs - What need(s) are you trying to fulfill with your open position(s)?
* Daily - What kind of tasks/work should i expect daily?  Any non-specialty or non-dev tasks (i.e. SysOps work?)
* Tech Stack - FE, BE, Deployment, 3rd party Integrations, Libraries, Languages, Architecture.
* Team Breakdown - PM, QA, DevOps, FE, BE, SQL, etc.
* Tech Debt - % time for tech-debt, refactoring, readability, automation, or improving the code base.
* Experimental - % experimenting with libraries / languages / techniques?

**Deadlines & Tasks**

* Task Source - Who decides what gets worked on?  Where do features/tasks come from?
* Influence - How much influence do engineers have over features/tasks?  % of tasks driven by Engineering team?
* Autonomy - How autonomous do you feel in your daily work?  Why?
* Deadline Source - Who creates deadlines? Where do they come from?
* Deadline Pressure - How much deadline pressure is there? 

**Resources**

* Software Licenses? - IntelliJ / etc.
* Learning Resources?
* Provided food/snacks/drinks?
* Any office perks?

**Professional Development**

* Motivation - How are engineers supported in their continual professional development?
* Resource - Can any professional development resources be expensed, such as books, training materials, classes, or conferences?
* Mentorship - Does your company specifically practice mentoring?  What does that usually look like?
* Events - Internal classes/presentations?  Hackathon week?

**Flexibility**

* How strict are times employees are required on site?
* Work from home?
* Dress code?

**Perks**

* Health Insurance?
* Lunches?
* Company Activities?
* What can be expensed?  Learning resources?
* Raises?  Promotions?

**Human Resources**

* Steps required between now & actual employment - or anything that may prevent employment after an offer? Drug tests, references, security clearance, other paperwork.
* Copy of employment contract / Agreements.  IP Assignment clause & non-compete.
",1459257022.0,2016-03-29 09:10:22
568,PSA: Not everyone has to work at a big company or with the greatest and latest technologies. There are plenty of jobs and not enough people to fill them.,654,86m09b,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/86m09b/psa_not_everyone_has_to_work_at_a_big_company_or/,460,"I see a lot of college students here talking about how difficult it is to get over the ""new grad"" wall. Then I see the thousands of jobs lying in waste all across various sites and I'm left in a state of confusion.

Not everyone is going to get into a Big N, a finance firm, or a medium/huge sized corporation. It seems like the majority of people are only targeting those and if it doesn't work out they say ""there are no jobs.""

I know that my city government has software needs all of the time. 

As do my local universities and my local K-12 school board systems.

So do these other places:

* Local mom and pop's.
* Restaurants (My good friend got an awesome job at one for 3 years!)
* Churches and other religious organizations 
* Volunteer and local non-profit organizations. (Yeah, they might be volunteering orgs, but they do have funding, and they do pay people to get their apps done.)
* The state and city library system.

The list goes on and on.


No, they do not pay six figures and they do not have all the bells and whistles. They don't have sign-on bonuses. They don't have stock options. They don't have a lot of things a lot of you guys think is the bare minimum to be considered a ""passable"" or ""decent"" job.

But they do have jobs. Jobs that most of you guys are not applying to or taking!

Think outside of the box. Sure, you might not get to work on that cool block chain product or the machine learning application you wanted to, but you will have a job and you will be gaining experience.

The market is crazy right now. There is an overabundance of software needs and not enough people to fill the positions.

Of course if everyone targets the same 50-60 positions the ""cool"" companies might have, then many people won't be getting them.",1521851606.0,2018-03-23 20:33:26
569,"Is this a red flag, or I am just overreacting?",652,dfgucr,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dfgucr/is_this_a_red_flag_or_i_am_just_overreacting/,227,"So today our boss has announced that we are going to use Hubstaff(aka the legal spyware), and our payment will be based on our performance and work we done in our working hours. If you are below 70% performance for 3 weeks, you are going to be fired. You cannot go for payed vacation until you are with the company for half a year. You cannot swear or you are gonna get penalty. (Idk what kind of penalty) When I came to this company he promised me 1150$ per month. (In my country, it is a pretty good money.) Now as I saw my ""performance"" i would barely make around 600$ per month. This thing is lowering my performance every time I open the browser, or the frickin' Google. I am a junior dev, probably I would die without Google. It is tracking how fast am I typing as well... I think it is really unfair as well. Constantly taking screenshots from my computer, and tracking my location as well. If you are out taking a peepeepoopoo for more than 10 minutes, basically you are losing money. I forgot to mention I am a webdev, and everytime I open the browser for literally doing my work, my performance is dropping. my average percentage is 60%...  


Edit: Commonly asked question is that where I am from. It is Hungary. Also, it is a small company, there is only 6 people in the company. I am not going to say the name of the company, because I would break my contract and I do not want any kind of law problem after all. Everyone who says it is fake, it is not. Why would anybody think that is fake?... Jeez. Do you guys think I came up with this ''brilliant'' idea about torturing myself? Also an update is coming in the comments as well.",1570655540.0,2019-10-09 17:12:20
570,Is it normal to be absolutely incompetent at hackathons?,655,engwaq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/engwaq/is_it_normal_to_be_absolutely_incompetent_at/,175,"I thought I was a decent programmer but so far I have attended 2 hackathons and have gotten overwhelmed at both. After the first hackathon I spent some time learning how to download packages, and use APIs and thought that I had made progress. Now at the second hackathon I’ve spent around 12 hours trying to create a simple Flask or Django web app and I can’t seem to get it to even work. Every tutorial seems to do the same broad steps (create routes, render html pages, etc) but at the end of 20 hours of hacking (I slept at night) I have basically nothing to show for my hard work. Is this normal or am I not just cut out for hackathons?

Edit: For anyone who doesn't want to go through many comments here is what I have learned. 
- Hackathons are about cool ideas and sexy UIs (the latter became very apparent during the project expo when winning teams didn't have an app but rather a sketch out of an app)
- Hackathons don't simulate real world coding and many people don't enjoy coding for 30 hours straight.
- People who are out to win generally have templates for everything (web apps, mobile apps, react apps, etc.) from past projects so they can worry about implementing their ideas and creating sexy UX/UI",1578821873.0,2020-01-12 04:37:53
571,"FINALLY got my first offer, a year after I graduated!",655,bg5aqw,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bg5aqw/finally_got_my_first_offer_a_year_after_i/,171,"Hey guys, 
Wanted to share the news that I got my first offer!! Graduated in May 2018 and after a year of countless applications, a bunch of rejection emails, failed interviews, I landed my first competitive offer!

It’s a SWE 1 role that will pay to train me overseas for a few weeks with great pay and benefits. However, it is located on the east coast and I’ve lived west coast my whole life. If you guys could give me any tips starting a new job in a new place then that would be appreciated, I’m pretty nervous.

Regardless I’m very excited, and I just wanted to thank you guys for helping me out and providing me stories that made me more optimistic and hopeful. I hope I can do the same for someone when I say just keep studying your ass off, talk to all the people you can, and never give up.",1555985306.0,2019-04-22 22:08:26
572,Where to draw the line helping co-workers?,648,j0h4ub,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/j0h4ub/where_to_draw_the_line_helping_coworkers/,135,"I have co-workers for whom I am their go-to for answers. It's stuff like, ""hi, my code to do X isn't working"".

My first response is usually: ""okay, did you try {insert some debugging step}""?

""Yes"", they say.

Then I see their branch and it's just.. quite wrong.

So I tell them what the issue is and get back to my own work. But sometimes I have to really spell it out for them.

What really grinds my gears is that I stressed about finding this job and doing the interview, and here they are being paid to ask me things they should either 1. know, or, 2. write down for future reference.

I work remotely, so I'm reachable ""at all times"" throughout the work day (I have grown to despise the new chat message notification). My manager is fully aware these co-workers will not complete complex tasks in a timely manner, so I am given *every* complex task.

Should I just stop being so available? Should I pretend I don't know the answer? I always tell myself I'll draw the line but then I just give in and respond.",1601194939.0,2020-09-27 04:22:19
573,What is your most frustrating moment while working remotely?,650,ikqceg,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ikqceg/what_is_your_most_frustrating_moment_while/,440,"Hello, fellow members of the tech industry! I came across this blog post about [the most frustrating things about working remotely](https://www.netmotionsoftware.com/blog/mobility/the-most-frustrating-things-about-working-remotely) and I thought it’s a good thing to discuss especially during the COVID 19 times. To start, mine is the constant nagging of my kids while attending corporate meetings! Totally frustrating. How about you guys?",1599015173.0,2020-09-01 22:52:53
574,For the imposters here: if I were your manager I would be ashamed of my leadership. I am failing you.,655,f0xmic,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/f0xmic/for_the_imposters_here_if_i_were_your_manager_i/,72,"I notice the imposter posts here, and I have to just say many times these ""imposters"" are reassured by the comments from other devs here on Reddit. Where are these helpful commenters in the real world? How much of their ""imposter"" feeling could be alleviated by having good mentors? If I were a lead developer and somebody on my team was firing off on Reddit about how much they feel they don't fit in, I would be embarrassed for myself and my company. 

Let's establish a baseline for junior developers/fresh grads:

* They did make it through the hiring process. The company/team wants them here versus the rest of the candidates.
* They did survive whichever school or training they had previously. They have the ability to learn..something.
* They did decide to pursue computing for a reason. There must be some underlying motivation that energizes them. They want to be here, be it a salary, social status, technical reason, a specific industry, peer pressure, etc.
* Everybody has a different learning style. Nobody was born learning to program clean code. Feeling like an idiot early on during a discovery phase is natural, but reassurances can alleviate this. Confidence is built through experience, but there is no reason to feel like a failure every step of the way there. 

Imposter syndrome is a phenomenon, but it is not a given. My favorite mentor used to remind me that this stuff is hard, and outside of the dev-pit, people have no idea what our job is like. Are there seniors that think being a nervous junior developer is some kind of rite of passage? How exactly does the team benefit from this? Is it possible that you take 15 minutes out of your week to check-in with your juniors/interns how they feel about the job? Even off-hand at the water cooler? 

I think we should all work on finding the imposters on our team and reassuring them they belong.",1581224310.0,2020-02-08 23:58:30
575,Is it really alright to just... not do anything work-related once I get back home?,648,c4fumf,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/c4fumf/is_it_really_alright_to_just_not_do_anything/,195,"I know that this sounds kind of weird and may, for some, sound counter-intuitive, but I recently got myself a job as a software engineer, and it's just so weird that, whenever I come back home, I'm free to do whatever I want.

I was a student before this, so ""work"" sort of just came home with me. I'd wake up at 7 in the morning, go to lectures, come back to my dorm by 4, study, eat dinner, then go back to studying, and repeat the same process. Weekends would consist of studying as well. I basically spent a lot of time during my week planning out my weekends carefully to prepare for exams, pop quizzes, etc. My life was just on autopilot to prepare for exams and the like.

So far, I haven't done anything like that for work. I wake up, get to work by 9, leave at 5 sharp (sometimes 5-10 minutes early. Don't even know if that's allowed, but nobody's screamed at me, yet), get back home, and then that's it. Nobody gave me homework. Nobody's given me a syllabus of dates, when exams would come up. It's literally just... nothing. I just chill and relax at home, and it just feels so odd and so... *wrong*.

It feels the most wrong, when it's Sunday night because it's the day before work, and I haven't done ANYTHING work-related for two-and-a-half days (Friday after work \~ Sunday). Then, I go back to work on Monday as if nothing happened.

Is this normal? I feel like I'm being an underachiever here, but I don't know what to do if someone hasn't assigned me work or hasn't given me notice of an upcoming exam. Maybe I was too sucked into the student life and, quite frankly, being an overachiever during school. Idk. Should I be trying harder? Should I be messaging my boss during the weekends / after I get back home from work and ask them if I should do any work at home? Should I ask for more work outside of the workplace? I don't know.

Sorry if these questions are annoying, but I kind of feel lost in all of this, and this is all a first, especially since this is my first job. Quite frankly, I'm asking all of this because I'm scared that my boss and the people above are thinking, ""Wow, this kid doesn't do any work at home. They don't seem to be working hard enough. Let's see how they do for the next month and see if we'd like to fire them by then.""",1561366718.0,2019-06-24 04:58:38
576,I want to get laid off,651,g9gweb,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/g9gweb/i_want_to_get_laid_off/,236,"I know this is a super weird thing to say. I'm a new grad who has some other open offers from companies that are doing well right now and actively hiring. However, 7 months ago, I  joined a company that has been hard hit by COVID-19. Half my team has been laid off but expectations of output really haven't dropped. I am working a lot more than I was working before WFH and I feel very burnt out. There's some weird internal politics to deal with too as our team is reporting to a new manager and it's  stressing me the fuck out. I desperately want to get laid off so I can keep my sign on and relocation (nearly 50K) because I am not going to be able to keep that money otherwise. The company I'm at is probably going to do another round of layoffs in the next month or two and I'm desperately hoping I'm laid off because I don't know how much longer I can work this way. Sorry, just wanted to vent.",1588078588.0,2020-04-28 08:56:28
577,I'm hosting a remote intern,650,g3pnet,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/g3pnet/im_hosting_a_remote_intern/,91,"Background: I work at a large tech company. We transitioned all of our interns to a virtual internship because of coronavirus. 

I've been an intern before at this company a few years back so I knew what to expect of my intern. We've also gone through training on how to provide our interns the best experience. 

Now because of this whole coronavirus stuff, we had to transition out interns to online. We have less guidance on how to do this because this is a first for us. 

I want to ask current interns what you would ideally like your intern manager to do for you during your virtual internship. What can I do to help my intern do better and get a meaningful experience out of the internship from the perspective of a current intern? 

I'm currently thinking of doing daily video calls to talk about project progress, anything they're stuck on, and just chat about whatever. I'd also like to get my team together in a group call and have the intern join where my team can just have a fun time chatting or play some simple games together to help build some community for the intern. 

Of course, the intern will be joining all of our meetings, such as team stand-ups and whatnot. 

But I'd love to hear thoughts from current interns who are doing a virtual internship, those who are going to do a virtual internship, or those who are also hosting a virtual intern.",1587253776.0,2020-04-18 19:49:36
578,Company e-mailed me to take down their tech challenge prompt from my Github,645,f7cjwi,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/f7cjwi/company_emailed_me_to_take_down_their_tech/,200,"I am currently unemployed and looking for a data science job. Many employers send out tech challenges to prospective hires during the interview process to test their skills. After receiving a rejection from one of the start ups that I had interviewed with, I posted the prompt that was given to me by the company and my code onto my personal Github. I figured that my work might as well not be wasted and a future employer would maybe be impressed by it.

I guess somehow they found out it and are asking me to take it down. Do they have an legal standing to ask this? I wasn't compensated for the work so I'm pretty sure they don't own it. Should I just paraphrase the prompt and leave my code up?

This is in NYC. I posted to r/legaladvice but only got like 1 response

Edit: so based on all your responses, I want to clarify that I never had the company name on my github. Just their prompt and my code. 

And based on the responses here I took down the prompt and reworded stuff abit. Hopefully this will get them off my ass. 

And also fuck the company too because I had to email them like twice to even get a rejection.",1582327218.0,2020-02-21 18:20:18
579,Can you survive being average in this career?,646,k4f5ru,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k4f5ru/can_you_survive_being_average_in_this_career/,237,"I have realized that I don't posses the same level of enthusiasm and passion I have seen many having it. 

What I wanted to know what future would be like for an average Joe like me? 

Will I eventually have to leave or it will eventually make me leave or I would be able to get by fine to survive till I retire.",1606831703.0,2020-12-01 09:08:23
580,Advice: Interviews are not 100% technical.,646,76zbx9,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/76zbx9/advice_interviews_are_not_100_technical/,185,"I keep seeing people posting about how they rocked their interviews but didn't get the job offer. There are multiple reasons this could happen, but one that doesn't get talked about enough on here: **interviews are also a way to see if people want you as a colleague**.

Sure, you need to demonstrate a minimum level of aptitude and coding ability. There's no denying that. However, it seems like people are way too focused on the technical, spending hours reading CTCI and practicing on Codewars and HackerRank. But so much of interviewing is also about your ability to communicate your ideas in a clear way, ask the right questions, and be honest when you don't know something or are struggling.

Case in point: I'm in my first developer job after attending a bootcamp. I had three offers, all given within a week of each other. I got my first offer three weeks after finishing bootcamp. I don't pretend to be an amazing developer, but I know that I'm good at interviewing. The job I ended up taking was from a company that was impressed with the fact that I said ""I don't know"" to some of the questions.

Some advice: practice the soft skills. Smile, be friendly, and treat your interviewers like they're your colleagues. If you get really nervous, just pretend you already know them and that each interview is a problem-solving session with a partner.

TL;DR: Spend some time on the non-technical aspects of interviewing. You can be the best engineer in the world but if people don't see themselves liking working with you, you're not getting an offer.",1508283386.0,2017-10-17 19:36:26
581,Received an offer for a lower title at a smaller company but $40k more total comp,641,kcaxcc,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/kcaxcc/received_an_offer_for_a_lower_title_at_a_smaller/,171,"I’m an engineering lead at a Fortune 500 company which I’ve been at for around 4 years and am getting somewhat bored with our current work so I’ve been interviewing around. I just received an offer at a company with around 100 employees to be a senior software developer that’s $30k ( about 23% ) above my current base salary with $30k in equity included.  They also promised based on my background I’d likely get promoted to engineering manager within a year. Overall this comes out to around $40k more than my current total comp, but I’d only be a senior engineer again for a year. Should I take it? What questions should I ask before accepting or declining the offer?",1607896267.0,2020-12-13 16:51:07
582,"If you got fired or quit a toxic first job, what are you supposed to do now? Never got benefit of good mentoring or anything and now new jobs think your ""experienced"", when you aren't.",646,jwi4l4,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jwi4l4/if_you_got_fired_or_quit_a_toxic_first_job_what/,157,"So, I am at a lose of what someone is supposed to do in my situation. Lets say you graduated with a CS degree. You also got a full stack web developer job and got about a year experience out of it. But, for whatever reason, it wasn't a good job. No mentoring from senior devs, toxic work environment, and everything else. Basically, you learned a little but not a whole lot. You lost that job (either by quitting or getting fired).

Well, now applying for jobs, it feels like the worst of both worlds. Basically, I no longer have access to any entry level ""recent grad"" roles because I graduated over a year ago. But, I don't have really the experience needed for other roles. If I got hired for one of them, people would eventually find out I didn't get much experience in my previous role.

WTF is someone supposed to do in my position? Just leave the field? I am trying to learn what I can on my own time while applying for jobs, but the expectations of job roles seems to be through the roof. Everyone wants an expert in everything, even the entry level roles.

Am I just supposed to go homeless? Like, sorry, I am just honestly at a lose what to do right now. Can anyone provide any guidance?",1605743281.0,2020-11-18 18:48:01
583,A Guide to landing a Data Science/Machine Learning job.,647,92ouzd,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/92ouzd/a_guide_to_landing_a_data_sciencemachine_learning/,120,"I've been seeing a lot of posts lately on people wanting to break into the DS/ML area, so I thought I would make this post. I'll break it into three audiences: researchers, career changers, and new grads/current students.

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

**1. Researchers**

You have:

* Background in a quantitative field such as economics, math, physics, etc.
* PhD in a STEM from a top program
* Track record of publications in conferences and journals
* Basic proficiency in Python, Matlab, R, or C++

Jobs you should target:

* Data Scientist
* Machine Learning Researcher
* Quantitative Researcher/Analyst

Obstacles you may face:

* Weak programming interview skills
* Hard transition from academia to industry
* Fierce competition for coveted research positions e.g. FAIR, OpenAI, DeepMind
* Lack of business perspective and ambiguous job responsibilities

How you should be job hunting:

* If still in Academia, try to submit to top AI focused conferences e.g. NIPS, ICML, ICLR, CVPR
* Attend conferences and other relevant meetups (these places almost always have industry booths that are dying to hire top talent)
* Use your department's network to find openings; reach out to others in your cohort who have switched to industry
* Consider applying to larger companies in established industries that will have research labs set up such as banking, pharma, automotive, etc.

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

**2. Career Changers**

You have:

* Professional masters in a quantitative field such as data science, financial engineering, operations research, etc.
* 3-5 years in experience in industry, hopefully working in a technical or data intensive role
* Projects that highlight your familiarity with frameworks such as Scipy, Tensorflow, Spark, XGBoost, etc.
* Intermediate proficiency in Python, Java, and C++

Jobs you should target:

* Applied Data Scientist
* Machine Learning Engineer
* Data Engineer
* Quantitative Developer

Obstacles you may face:

* Lack of seniority in data science and machine learning
* Unfortunately a M.S. is like the new B.S. in that everyone in the area now has one and even top Uni's like UC Berkeley and Georgia Tech have cash cow programs in data science that churn out tons of masters students.
* You will be at a disadvantage if you did not do any data science / machine learning internships during masters or undergrad

How you should be job hunting

* Leverage your domain knowledge from previous work experience and look for data science and machine learning applications
* Search for smaller companies like startups that have looser filters than Big-N
* Apply for more applied positions instead of research oriented ones
* Do informational interviews with data scientists to see what they hire for
* Find out which interview skills are important for you (they vary from normal leetcode, project based, implementing research papers, SQL, ML theory, statistics puzzles depending on the company)

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

**3. New Grads / Current Students**

You have:

* Bachelors in Computer Science, Statistics, or Math
* Intermediate-advanced proficiency in programming (relative to the other two groups)
* Knowledge of data structures and algorithms i.e. leetcode
* Knowledge of SQL, Spark, Hadoop, AWS
* Projects in machine learning or Kaggle competitions

Jobs you should target:

* Data Analyst
* Data Engineer
* Software Engineer in Machine Learning
* Software Engineer in Data Science

Obstacles you may face:

* You are looking for that rare, sweet spot in data science for entry level/new grad roles
* Every data science position you find online will have many applicants with a graduate degree so you will need to stand out somehow or get a referral
* Your lack of work experience will usually disqualify you for senior roles at larger companies and early hires at startups
* Avoid companies that do not have proper data infrastructure pipeline set up (they will likely bait and switch you or try to make you into a jack-of-all-trades data person)

How you should be job hunting:

* Consider data science roles at non-tech companies in data driven industries like healthcare analytics
* Network with your professors and classmates
* Next to a graduate degree, an internship in data science and machine learning is the next best thing
* Research experience is also really good to have and make great talking points in interviews
* Find out which interview skills are important for you (they vary from normal leetcode, project based, implementing research papers, SQL, ML theory, statistics puzzles depending on the company)
* Get into a Big-N as a regular software engineer and try to transition to their data science teams

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

Hopefully this guide helps and answers some reoccurring questions I see in this subreddit.",1532835941.0,2018-07-28 23:45:41
584,This is what happens when an intern writes the Job Posting.,640,7lnmr6,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/7lnmr6/this_is_what_happens_when_an_intern_writes_the/,56,"https://imgur.com/a/nIsqQ

https://www.uber.com/careers/list/35653/

An interesting point :-
DO NOT use “new grad” or “recent grad” in any JDs",1514046895.0,2017-12-23 11:34:55
585,G to Keep Employees Home Until Summer 2021,642,hysho8,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hysho8/g_to_keep_employees_home_until_summer_2021/,339,[https://www.wsj.com/articles/google-to-keep-employees-home-until-summer-2021-amid-coronavirus-pandemic-11595854201?mod=hp_lead_pos3](https://www.wsj.com/articles/google-to-keep-employees-home-until-summer-2021-amid-coronavirus-pandemic-11595854201?mod=hp_lead_pos3),1595886158.0,2020-07-27 17:42:38
586,What do you talk about during one on ones?,642,gu0r4v,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gu0r4v/what_do_you_talk_about_during_one_on_ones/,104,I’m an intern and have 1:1’s with my manager every week. I’m not really sure what to talk about in these 30 min. The last two weeks I’ve just been asking them random career questions but our conversations don’t really have a “flow” I guess. Any advice?,1590966692.0,2020-05-31 19:11:32
587,I can program but ....,640,dira2b,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dira2b/i_can_program_but/,160,"Does anyone else feel that you got programming down and you can do a task, sure maybe you need some help, or you're not sure how to do something, but you can google it amd learn it. And then it comes to other things like Docker, Kubernetes, AWS, Jenkins, Terraform, Maven, Kafka, Elastic and so on, you just get stuck. I feel like I can't really get a good grasp on many of these things, sure I've used them, and set things up, but i don't really get it. 

If this is you what have you done to overcome this? (I'm trying to get better here).",1571270197.0,2019-10-16 19:56:37
588,Took a while but I finally got a job that I want. Thank you to the people of this sub!,642,ag0bog,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ag0bog/took_a_while_but_i_finally_got_a_job_that_i_want/,95,"This subreddit has helped me in so many ways. Whether it's resume advice, knowing what to study/learn, knowing I wasn't the only one struggling to find a job or just being told that it'll all end up being okay eventually. 

A little bit about me: I graduated from a state school in California with my BS in Computer Science in June 2017. I didn't have any projects or internships or even a good GPA. I would go to school and do what the classes required and that was it. I was barely getting any call backs from companies and even the ones that I did, I would end up failing the interviews in one way or another. A lot of it definitely has to do with luck because there were countless moments where I thought that I would get an offer for sure only to find out that I wasn't selected. Other interviews I had bad luck where the interviewer seemed to be really rude and dismissive from the start.

The only experience I have had till this new job offer was a contract position that bait and switched me after I agreed to work there. I was told I'd be a developer and learn all these technologies but they ended up having me as help desk. Worst of all, I was getting paid $16 an hour. 

I start my new job next month and I'm extremely excited. I'll be making alright money (~66k + 5k signing) but I'll actually be a software developer this time around. All this wouldn't have been possible from all the people who helped me on this sub. The kindness of strangers is truly remarkable. All the advice and resume help really changed my career outlook.

My advice to people on this sub who are struggling with finding a job is:

* Apply everywhere and anywhere. Even if you don't meet all the qualifications. Keep applying
* Go to career fairs and talk to the recruiters face to face. This is what helped me get this job
* Don't doubt yourself. It's a numbers game. Don't overthink everything.
* Everyone has their own journey. As long as you work towards your goal, it'll happen even if it takes longer than you want it to.

**There's also a downside to this sub that is toxic.**
There's people who act that if you're not working at a Big N, that you're a failure. That if you're not making 150k + 50k in stock entry-level that you're a failure. Those numbers aren't practical outside the Bay area.
Working for the government or defense has a taboo on this sub as well. The job offer I got is actually for the government. 

People will really bash on you for where you work or they'll hate on your resume but when you check their post history, you'll see that they're a sophomore in college still and regurgitate everything they read. 


**TL:DR** Graduated in June 2017. Worked a crappy help desk job that I was bait and switched into.  Finally got a job to actually start my career. Thank you to the people of this sub!",1547528406.0,2019-01-15 00:00:06
589,"Why can't HR just reply ""sorry, no offer"" or something? Why the radio silence?",641,cuh0f1,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cuh0f1/why_cant_hr_just_reply_sorry_no_offer_or/,139,"I'd totally appreciate a simple and small message saying I got rejected, but not replying to my mails, or ignoring my calls, that's just rude. Why would I even wanna work for a company with such an HR policy?",1566610024.0,2019-08-23 21:27:04
590,Is it just me or are standups used to make sure people are getting work done and are not being lazy,646,bidgx7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bidgx7/is_it_just_me_or_are_standups_used_to_make_sure/,184,"I'm interning at a small start-up and we have a standup every morning. From my experience, the boss goes through every developer and asks them what they've done, how much they've done, and how long it has taken.

This usually leads to ""well done, you did a lot of good work"" or grilling employees with things like ""Why are you taking so long?"".

It makes me seriously nervous when I go into standups, I usually get my work done on time but there's cases where it takes me longer because I get stuck, or it was a harder/longer task than anticipated. One time he gave me a task that I was supposed to complete in 3 days, I spoke with the other developers and they said it was way too hard to get it done in 3 days. It took me a week and he just kept grilling me every standup after the 3rd day.

I get panicked now when I get stuck on problems because I know I'll get shit on during the standup if I don't get it done fast enough. This doesn't only apply to me, he does this for the other intern and developers as well.",1556500289.0,2019-04-28 21:11:29
591,"2.1 GPA, non-CS major, no internship experience. Just received a 6 figure offer in Seattle after graduation. THANK YOU!",637,3q7re4,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/3q7re4/21_gpa_noncs_major_no_internship_experience_just/,195,"Hey guys and gals. I just wanted to express my sincere thanks for being such an active and approachable community. I'm using a throwaway at the moment, but I've posted multiple times here looking for advice and everything I've gotten has been productive and has led me in a good direction. Even without posting, the archive of information available here is extremely useful and I'd have been lost without it.

I'm a senior at a target university, majoring in biology, and have no internship experience whatsoever. I've always been really scared to apply for anything CS-related because of my GPA and major. Software development is my passion, but I don't have the numbers or the formal training and so I've always been very discouraged. This was my first stab at the application process, and I was completely lost.

Over the past month and a half I've gone from 
    
    Clueless about how to construct my resume ->
      Nervous about interacting with career fair recruiters ->
        Crazy scared for my first technical interview ->
          Anxious about the on-site interview process ->
            Literally shaking as I waited for final round results
and today I finally heard back from the very first company I interviewed with! Ngl, I broke down and cried after hanging up with the recruiter. For years I've told myself that my plan for graduation is to continue my job as a fast food manager, using my spare time to program, and eventually build enough skills to be employable. To have received an offer at all is a blessing, but the fact that it's such a great offer with a great mid-sized startup that I'm actually passionate about is unbelievable.

I've obsessively reached out to this community and its collection of advice throughout every step of that process above, and I have no reservations in saying that I would not be anywhere near as prepared as I was if you guys weren't here to guide me.

I'm not sure how common these sorts of threads are, or whether  they're viewed favorably, but I felt like I had a responsibility to share my experience and say thank you. So, **thank you**.",1445847471.0,2015-10-26 04:17:51
592,Getting blamed for poor algorithm performance when in fact it is the input data that's bad.,643,ddkmdp,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ddkmdp/getting_blamed_for_poor_algorithm_performance/,98,"For the past several years I've been working at a small company as the sole engineer developing a highly specialized algorithm. It is a very hard problem but after spending years on it, it is the pride and joy of my life with 10x the speed of existing state-of-the-art algorithms while being just as accurate.

Let's imagine it's a panorama stitching algorithm, that stitches two or more photos into a panorama by aligning them.

The thing is, my coworkers keep trying to run my algorithm on crappy data totally outside the operational domain of my algorithm... for example a totally black photo without anything in it to align, severely blurry or grainy photos, or two photos that don't overlap at all.

Then they blame me for writing an algorithm that doesn't work.

I've spent literally the last two years just adding workarounds and hacks to accommodate the bad data that people submit.
But then, if I throw an exception or emit a warning when the data is bad, they blame me for ""spammy error messages"".

When I look at other companies solving similar problems, they are usually very large companies with a very robust research and development team of many people implementing this sort of algorithm, whereas I'm just one person getting swamped.
Since I'm spending all my time adding workarounds to deal with bad data, I'm not able to work on implementing new features or do anything new or interesting at all.
As a consequence, my upcoming performance review is looking very bleak.

I'm tired of saying every day, ""dude my algorithm isn't designed for this kind of input, please refer to the documentation on what it is designed for and what it is not designed for[.](https://i.imgflip.com/3cfzf9.jpg)"" What else can I do?",1570293473.0,2019-10-05 12:37:53
593,Are offices shifting away from the 'open office' concept?,640,fepfeb,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fepfeb/are_offices_shifting_away_from_the_open_office/,341,"I'm hoping by now companies realize that this clown concept costs them money in the long run from decreased productivity than they save from reduced space. Ultimately, I believe an office that has both open and closed spaces for concentration are the best.

Do you see a shift away from this full blown open idiocy?",1583580668.0,2020-03-07 06:31:08
594,A Little motivation for all the stressed out college students.,635,8k0l37,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8k0l37/a_little_motivation_for_all_the_stressed_out/,96,"Today I had a internship interview for a software developer intern that wasn’t even paid. For 40 our of the 45 minutes I was absolutely roasted and honestly wondered why the hell am I in this major. He asked questions that I had zero knowledge of. He asked questions about projects I’ve done and I couldn’t even answer those. The interview was a train wreck one hundred percent. I’ve never felt worse in my life, I even cried a little bit when I sat in my car. I was absolutely devastated. But when I got home I called my dad and talked to him and he told me you can’t rush things. Everything will happen slowly and eventually will fall into place in ways you didn’t even know were possible. I thought it was all bs, until I got a call a hour later. The call was from my number two option, telling me they want me to start Monday and actually be paid for my work. The moral of the story is eventually everything will fall into place, so relax don’t stress about finding jobs, about being rejected. Everything will find it’s way. The number one advice I’ve seen on this sub is to delete this sub. This only causes unneeded stress to our already stressful lives. Believe me, everything will fall into place, it just takes time. With that, I say delete this thread, enjoy college cause your only there for 4 years. The best thing I got out of that shit interview was if the only thing you learned in college was computer Science, then you did college wrong. Go out there and keep trying. It will all fall into place! Good luck guys! ",1526551930.0,2018-05-17 06:12:10
595,The important thing is being in control,631,iv8m0w,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/iv8m0w/the_important_thing_is_being_in_control/,73,"A lot of ""I love working from home"" and ""I hate working from home"" posts recently.   
I wanted to share my input for what it's worth, and that's that the important thing is being in control of your own life.   


If you have it dictated to you that you must be in the office X times a week between Y and Z hours, you must sit here do this etc then, rather than being a human-being with a life you live you're a pawn in someone elses show and you're just watching your life, on rails, waiting for 5pm every day until you die...   


If you are empowered with the ability to make decisions - work from home if thats how you work best, come into the office, work 0600 to 1100, go to the zoo and then work 2100-0000 if you want, it's up to you, the decisions are in your hands then all of a sudden you're a human being living a life that you have control over - you will be able to do the things you need to do to make your environment optimal so you can get into flow state and deal with the workload.   
With this freedom comes responsibility - you have to communicate with your team, you have to make a publicly available calendar with your times so people know when you will be around and you may have to compromise once in a while to attend a sprint-planning meeting when everyones available or whatever.   
If you want you can even commute to the office 5 days a week and sit at a desk 9-5, the point is you're choosing to do it, you're not coerced, you are a human not a resource and now your mental health improves..   


Thats my thoughts on it - but I would like to hear what more experienced engineers think?",1600473030.0,2020-09-18 19:50:30
596,Old guy trying to not get laughed at,641,i6rvei,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i6rvei/old_guy_trying_to_not_get_laughed_at/,73,"I have been working on my computers at home to make things complicated for the hell of it. I have taught myself how to build a computer, get a type 1 Hypervisor running. I have gotten comfortable with CLI's and Linux. Learned how to get working with Docker and stringing different programs together. Pretty comfortable with networking, both physical setup and configuring. 

So, frankly, what is this type of stuff called? I dont know whats ""I.T."" whats ""I.S.""? One company I work with recently changed theirs to ""I."" I'd love to keep learning and maybe even consider a career change, but dont know the first thing about this as an industry. 

I'm guessing I'll get some mocking, but I'd love some answers. 

Thanks ahead of time.",1597038328.0,2020-08-10 01:45:28
597,"How accurate are these ""Day in the life of a Software Engineer"" videos on YouTube?",637,givph9,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/givph9/how_accurate_are_these_day_in_the_life_of_a/,304,"Every day in the life video I see shows these people going ""hmm I don't feel like sitting at my desk so let me just go walk halfway across the city and work from my local park,"" or them saying their 1 hour lunch breaks are more suggestive as opposed to a rigid hard time, or like free breakfast and lunch provided. I understand that this is how it is for big silicon Valley companies faang, big n etc, but for everyone else, is this how it is as well?",1589390863.0,2020-05-13 13:27:43
598,"What is the best way to say ""I want to work in a company that uses a modern tech stack""?",637,e4j6hb,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/e4j6hb/what_is_the_best_way_to_say_i_want_to_work_in_a/,118,I don't want to use legacy code that breaks when you input a number larger than 32 bits into your database anymore.,1575244857.0,2019-12-01 19:00:57
599,Believe in yourself and it will happen,628,dtxzfn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dtxzfn/believe_in_yourself_and_it_will_happen/,77,"Hey guys. I started reading a decent amount of posts on this subreddit this year, most of which were helpful but filled me with a deep sense of existential dread regarding finding a job as a new graduate. I figured I should share my experience and give at least a few people a little hope.

I graduated in may from a somewhat good liberal arts state college in the north east. The CS program wasn't terrible, but it definitely didn't prepare me to find a job as a software developer. My last year in school, I applied to roughly 80 jobs in NYC since my immediate family lives there and I didn't  have nearly enough money saved up to move to a different city to pursue a job. I didn't hear back from most. Ended up getting two Skype interviews that lead to rejections, but that's as far as I got.

After graduating, the immediate pressure and anxiety of finding a job set in. I spent a decent amount of time working on my resume and cover letter. In terms of my relevant experience, I would consider myself more prepared than most, but not nearly enough to distinguish myself in the thousands of applications that tech companies get. I had research conference experience programming robots, personal full stack web development projects, two somewhat related internships, knowledge in some relevant languages, and a decent amount of relevant coursework. BUT I graduated with a 2.9 GPA and not much in terms of connections and professional networks.

I finally landed a job in late September, about 5 months after my initial search began, and what I can only describe as the worst period of my life thus far. I knew half-assing my job search wasn't going to cut it in one of the most competitive cities on earth for tech. I spent 8-10 hours a day, 5-6 days a week purely studying and applying to jobs. I applied to over 250 jobs through linkedin and glassdoor. Mostly got no-responses or rejections. In total, I went through 12 interview processes, had 10+ in person interviews, and got rejections from most of them.

I terms of my studying, I spent the first two weeks reading a java textbook from front to back. The rest of my 5 months involved learning technologies through online classes on udemy and texbooks. I spent most of my time learning Spring, relational databases and SQL, Java, Python scripting, modern Javascript, Git, and a few others. I was trying to learn as many relevant technologies as possible. Just enough to know the basics of what companies were asking for, but not too much to spread myself thin. Around august I used a lot of what I learned to make a very basic Spring based application. Nothing special, but something decent to talk about during interviews.

After months and months of rejections, I truly stopped caring whether I got a job or not. In early September the stars aligned and I got several in person interviews with three companies. I went into every interview hungry to share my experience, but also not giving a fuck whether I got these jobs or not. I had accepted that this was going to take a lot longer than I though, and continuing to let each rejection get me further into my hole of self loathing wasn't going to make it any easier. I got offers from all three companies within 24 hours.

Now, that's enough about the day to day. Looking for a job and preparing for interviews are only half of the battle, at lease in my case. The other half was being extremely mentally disciplined and overcoming the constant self doubt that this industry instills in us. Most of the people on this subreddit are probably sitting at home looking for a job right now. The only advice I can give all of those people, and to my former self, is that you have to want it. You have to want it more than anything else in your life. You have to tell yourself that you don't care what happens, and your only goal is to get that job that you know you'll love.

Everyday this summer, I woke up to the the same thoughts: ""Fuck, another day of this shit. Another day of sitting in  my parent's basement, studying for hours, not talking to another human being for who knows how many days"". It was a brutal experience for me. I lost a lot of my support network of friends after graduating, got broken up with after a two year relationship, sat at home every single day trying my hardest while dealing with constant dark thoughts and emotional distress. It wasn't fun, but I wouldn't change anything I chose to do or the way that my life turned out. It ended up leading me to the life that I live now, and it's not so bad.

I'm sure plenty of people reading this are going through similar experiences. For some of you it will be easier, for some of you it will be a lot harder. No matter what your situation is like, you have to believe in yourself. If someone else has done it, you can do it. We're all just people trying our best. That constant self doubt is going to creep into your mind on a daily basis. Don't let it tell you that you can't achieve what you set your mind to.

I've never considered myself a smart person, but I knew with true determination and effort, I could make it happen. You can too. This world will take and take until you feel you have nothing left and your self worth is non-existent. When that happens, look into the mirror every morning and tell yourself that you're gonna make it happen.

And that's it man. I believe in yall. This industry needs more people with true determination and passion. Get to work and show this world who the fuck you are.",1573345084.0,2019-11-09 19:18:04
600,We have an intern that's deathly afraid to make any mistakes. How do I get him to chill,629,chgama,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/chgama/we_have_an_intern_thats_deathly_afraid_to_make/,164,"He's been asking me questions sometimes 3 times in a row to double triple make sure the git command to merge or how to do something and it is getting kind of annoying to be honest.

He's a very good intern and does his job and never comes eat lunch with us but he's super afraid to make a mistake.

It's getting annoying and time consuming for me to answer super detailed questions.

How do I get him to relax a bit?",1564042357.0,2019-07-25 04:12:37
601,[Success Story] From $35k to $110k in 3 years,632,almghm,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/almghm/success_story_from_35k_to_110k_in_3_years/,182,"I've been seeing to much depressing crap on this subreddit, so I thought I'd share my story.

My story starts a little over 3 years ago. I was 20 years old and didn't know what I wanted to do with my career. I did work as a caretaker in a nursing home for a little over a year, worked at Walmart for a few months, but didn't have any direction. I graduated high school with my associate's degree, but I just didn't have the patience for college. I also married my girlfriend that year, and we were barely scraping by with both of us working full time.

That's when I heard about code bootcamps from a friend. I remembered that I liked my programming classes from high school, and if I did get a degree it would probably be in CS. So I figured I'd give it a shot. I got a 10k loan from my grandpa and did the 12 week code bootcamp.

I wish I could say it was all breezy from there, but it wasn't. Let's just say the bootcamp made getting a job seem easier than it actually was. I was unemployed for 3 months, but looking back it was mostly my fault as I didn't put as much effort into personal projects and applying as I should have.

I got desperate enough that I took an unpaid internship at a small startup in downtown Provo, UT for 15 hours a week. It was a web marketing/development company doing WordPress sites. At this point, I just took it to get some real world experience, with the hopes of proving myself and being hired on full time.

I did just that - they hired me on full time as a junior web developer after a few months. Even though it didn't pay very well (Salary was $32k a year.) I was grateful to just have a job. However, it wasn't a stable environment, the lead developer quit 9 months after I was hired on, and I realized that staying there was not a good choice.

So I was back on the job hunt after a less than a year of employment. This time, I found a job at a slightly bigger company in SLC doing full stack JavaScript. My starting salary was $45k - again, not really making market rate, but I was glad to get some experience.

This is where I kicked into overdrive. I was learning a lot about AWS - more specifically, serverless architecture on AWS. I started doing projects outside of work and speaking at meetups. I got an outside offer for $60k at another startup and ended up using that to negotiate a raise to $70k from $45k.

At this point, I was living comfortably, but I wanted more. I continued my personal projects, started a blog site, and even spoke at a tech conference last year, culminating in me getting my AWS Solutions Architect Associate certification.

I started getting contacted by recruiters, and had 2 companies interested in me at the beginning of this year, mainly because of my experience with AWS and serverless architecture. This allowed me to take my time, and I ended up accepting an offer from another startup for $110k a year, plus equity. The other company was a large financial company, but I liked the team and environment at the startup much better.

So that's pretty much it, that's my story. In June of 2016 I was making $32k, now making $110k now in a medium CoL area, with room to grow in an exciting new company using AWS and serverless architecture.

**TL;DR did bootcamp, got paid shit, now I'm not.**",1548943063.0,2019-01-31 08:57:43
602,A LeetCode Grinding Guide,631,6luszf,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6luszf/a_leetcode_grinding_guide/,127,"Seeing how users in this sub and interviewers oppose to grinding LeetCode, I have decided to write a guide to help those who need to grind LeetCode.

First of all, if you think studying CS fundamentals alone can land you offers, you may stop reading here. This guide is intended for those who would like to equip themselves with the necessary skills through LeetCode to tackle technical interviews. Grinding LeetCode is more than just memorizing answers, you have to learn the problem-solving patterns by heart and apply them to similar problems. The number of problems you have solved in LeetCode is only one of the indicators of your familiarness to the patterns, learning the patterns is more than only numbers.

**Checkpoint 0: Beyond the CS Fundamentals**

This guide assumes that you have at least heard of the basic tricks such as two-pointers and bit manipulation from CTCI or similar books. You do not have to master them, knowing what they are can help you study the solutions from LeetCode better. If you have studied only the CS fundamentals, you may want to have a quick look at the books before starting LeetCode.

**Easy Problems**

Easy problems are intended to help you get familiar with the basic tricks. Usually, they have trivial brute force solutions. What you need to learn is to apply the tricks to improve your brute force solutions.

**Checkpoint 1: Practicing the Basic Tricks**

If you randomly open a few easy problems of each data structure or algorithm and you can pinpoint the optimal solutions and implement them in a few minutes, you may move on to the next checkpoint.

**Study Guide**

1. Sort the problems by acceptance rate descending. Problems with higher acceptance rates are relatively easier among the pool of easy problems.

2. Try to solve the problems with no hints at least with brute force solutions.

3. It is tempting, but not helpful, to abuse the ""run"" button. Try Easy ones with a goal to get accepted on the first submission, since this more realistically models a whiteboard situation. It forces you to think of all the use cases yourself. Thanks [/u/dylan_kun](https://www.reddit.com/user/dylan_kun) for the tip.

4. Study how the top solutions apply the tricks to improve the performance. Sometimes solutions are up-voted just because they are short and they may not be well documented. Read also the comments below and do not feel shame to ask for clarifications.

5. Once you are comfortable with the basic problem-solving patterns, go back to checkpoint 1 and decide if you would like to move on.

**Medium Problems**

Medium problems are intended to train your skills in seeing through the problems. They are usually disguises or variations of easy problems. Brute force solutions sometimes may lead to time limit exceeded (TLE). What you need to learn is identifying what solving patterns the problems are asking for.

**Checkpoint 2: Problem Pattern Recognition**

If you randomly open a few medium problems of each data structure or algorithm and you can identify what problems they are disguising at and can implement close-to-optimal solutions within half hour, you are ready to challenge the hard problems. 

**Study Guide**

1. Carefully read each word of the problem statements and look for hints about solving patterns. For example, the number of ways for a task indicates DP, string transformation with dictionary indicates BFS / DFS / Trie, looking for duplicate or unique elements indicates hashing or bit manipulation, parsing indicates the use of stack. If you need a compiled list of tricks and indicators of when to use what, you may check out the book [Competitive Programmer’s Handbook](https://cses.fi/book.pdf). Thanks [/u/ShadowOfOrion](https://www.reddit.com/user/ShadowOfOrion) for the tip.

2. When you have a rough idea about the direction, you are half way to go. Try to at least implement a suboptimal solution. It is okay that yours is not optimal, people spent much effort to polish their solutions to optimize them.

3. Once you have a suboptimal solution, you may head over to the top solutions to learn what you can improve and any alternative methods to solve the same problem.

4. Try to thoroughly understand the thought process and implement the optimal solutions based on your understanding without looking at any hints. 

5. Once you are comfortable with seeing through the problem patterns, it is time for the grand challenges.

**Hard Problems**

Hard problems are bar-raisers. They are intended to be hard and make you struggle. Usually, 45 minutes are barely enough for you to come up with a working solution. What you need to learn is identifying the right directions to solve the problems more than just brute force.

**Checkpoint 3: Graduation Check**

Hard problems usually have constraints that make the typical tricks not applicable. If you are comfortable with improving existing tricks to solve those problems more than brute force, you are good to go. The time limit is not that important here, you need to learn how to bridge the gap between typical tricks and those constraints.

**Study Guide**

1. Solving the problem is more important than finding the optimal solution. Your first task is to at least come up with a brute force solution. Dropping the time and/or space constraints usually help you identify one.

2. Identify what parts of your solution can be optimized to satisfy those constraints. This has been covered by many books and articles such as the [BUD approach](https://www.slideshare.net/gayle2/cracking-the-coding-interview-abbreviated-aug-2016/26) from CTCI so I would not go into details.

3. If you struggle to improve your solution, time to head to the top solutions. Understanding the thought process is critical here. You need to learn what are the right data structure and algorithms to use and how those solutions handle the corner cases.

4. Once you are comfortable with the stress from the hard problems, try to solve other hard problems with suboptimal solutions.

Thank you for reading. Hope you find this guide helpful. All critics and suggestions are welcome. ",1499473780.0,2017-07-07 20:29:40
603,What are your 90% / 50% / 10% predictons for the programming industry in 2020 and upward?,624,ejd3iu,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ejd3iu/what_are_your_90_50_10_predictons_for_the/,437,"Example:

90% sure if you know Java, you will have no trouble getting a job in the next decade, but it is likely to involve more maintenance than greenfield work.

90% sure that Machine Learning hype will significantly deflate and it will become more of a ""the right tool for the right job"" instead of a hyped miracle cure.

50% sure React will become the framework of choice for front-end, removing Angular and Vue from competition. 

50% sure Kotlin will be the language of choice for any non-iOS mobile development. 

10% sure Kotlin will become as huge as Java for any corporate greenfield development.

10% sure Haskell / Elm / Elixir / other functional languages will become much more commonly used.

1% Java popularity declines and it becomes the new COBOL full of legacy interactions and nobody to understand them.",1578072199.0,2020-01-03 12:23:19
604,My experience becoming a software engineer - a positive story,629,a8uoaa,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/a8uoaa/my_experience_becoming_a_software_engineer_a/,132,"So during past job searches I have spent a bunch of time on this sub. By doing so, I've seen so many posts about the struggles of the job hunt. Hell I've made a few of them myself. So, given where im at right now, I wanted to share a bit of my story. I feel there aren't enough people who do these kind of posts. Maybe we feel it's an ego trip, ""hey look at me I'm successful"". But sharing experience, especially positive and successful experience, in a place where I feel people are looking for it can only be beneficial.

I don't have a CS degree. I have a bachelor's degree in a completely unrelated field, and for many years after graduation I worked in a completely unrelated field. Around 26 I realized I wasn't happy, and I knew something needed to change. I left my job at the time and moved back in with my parents.

Many members of my family were in software, and I had dabbled in it before, mostly in Java, but I was far from an expert. Living at home with my folks, I dedicated myself to studying the language. I was fortunate I had some money put away from my years of working so I could do this. For the next year all I did was study Java, plus a little SQL thrown in. I got certifications, including the Oracle Certified Java Professional certification.

Just a side note, if you're thinking about going for these kind of certs, my opinion is go for it, but don't expect them to carry weight. Whenever I brought up having this cert in an interview, no one even knew what it was. Having it didn't open doors for me. However, the process of studying for and obtaining the cert I absolutely feel made me a better Java developer. The skills I gained from that process were absolutely invaluable for me later on.

So, after a year of studying, I started applying for jobs. I obsessed over my resume for a bit, but ultimately I needed to just stick with something and send it out. I used various sites to spam it everywhere. Job hunting is a numbers game, and at this point I just wanted to get my foot in the door somewhere. Of course I got bombarded by recruiters. Most tech recruiters are the worst, but you've just got to put up with them.

I started getting interviews. I got a bunch of second and third round ones too. But then the rejections started coming in. A self taught engineer with no CS degree, I just couldnt beat out people with professional experience or more traditional education. I got rejected a LOT, and it was a painful, crushing experience.

It didn't last though, and after a few months of searching I got hired at my first job. I had to move across the country (NJ to FL), but I found a place to hire me. The job... It wasn't the greatest software job in the world. The people I worked for were great and they treated me well, but I spent as much time if not more helping our clients use our software as I spent developing code for it. There wasn't a great long term product strategy, the tech stack was attrocious and outdated, we didn't follow any real developer methodologies, etc. I still got tons of valuable experience there, though. I was exposed to many technologies I probably would never have picked up otherwise, primarily through the work we did with our clients (ie, Hadoop, mongodb, etc). I learned how to develop in a professional environment and work with clients and their demands. I also learned a lot more about what does and doesn't work in big development projects, stuff that you don't learn just monkeying around at home.

Outside of work I was still studying. Being self taught I guess I've had this chip on my shoulder where I have to work super hard to stay up to date and knowledgeable about various technologies so broaden my skills. I learned a bunch of new languages, frameworks, tools, etc in my spare time. My big investment was in JavaScript and front end development, which fascinated me.

After 3 years at this job, I had enough. I wanted something better. I started my job hunt again. It was totally different this time. With 3 years of experience, not only did I find myself more in demand, but the experience and skills I now had were far better than they had been. I could walk into interviews with a confidence and strength that I didn't have before.

Within about a month of interviewing I got hired at a very, very big company. Like near the top of the Fortune 500 big. This was a full stack engineer position on a fancy new webapp. It is a true software engineer job, with a very good development team. When I first took my last job my salary was towards the bottom of the pay scale for entry level positions, but now I'm making 85k. In Florida, which is a very low cost of living state. And that's a huge jump in pay after only 3 years in the business, so I am confident of my ability to continue rising through the pay grades going forward.

So if you're struggling to get started, just go get your foot in the door. Start getting that experience, even if it's not at the best place to being with. Engineers are hugely in demand these days, there are tons of opportunities if you look for them. Just be persistent and don't give up.

Have a very happy holiday season everyone, and may 2019 bring lots of great career opportunities to those who need them.

Edit: holy shit someone gave me gold. I literally don't even know what that means, never got gold before, but thank you.

Edit 2: ok now I have two gold. If someone could comment and tell me what this actually means, that would be great LMAO. I really appreciate the responses to this post. Thank you all and have a great holiday and new year.",1545600779.0,2018-12-23 16:32:59
605,What are your must haves for home office since switching to WFH?,618,k3kjiu,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k3kjiu/what_are_your_must_haves_for_home_office_since/,464,Looking to snag up some items during Cyber Monday.,1606723507.0,2020-11-30 03:05:07
606,Why,624,bih4ne,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bih4ne/why/,117,"Have been applying for entry-level positions for about a month now. Just came across a gem of a post tonight and I thought I'd share as it gave me a chuckle.   


Position Title: iOS/Android App Developer - Intern

Job Description: Normal intern description 

Bolded letters in the description: ""This is an unpaid internship and may be done for college credit only""

...at this point I'm thinking ""I'm no longer interested, I need money""...then I scroll to the bottom 

Experience: 

\- Javascript: 3 Years (required)

\- Java: 3 Years (required)

\- C#: 3 Years (required)

\- iOS: 3 Years (required)

Education:

\- Bachelors (preferred)

&#x200B;

So they want to hire an application developer to intern who has years of experience yet give no pay and offer college credit despite wanting the person to have already have earned their degree. 

&#x200B;

This would be a little funny except it seems about half of the job posts (at least that I've seen) for new grads want people with many years of experience.",1556520584.0,2019-04-29 02:49:44
607,A lucrative tech job might not be what you actually want,629,8b3adn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8b3adn/a_lucrative_tech_job_might_not_be_what_you/,454,"Just thinking about this today. I used to pour over this sub; I perfected my resume, got 3 great internships, studied really hard for technical interviews and got pretty much my dream position out of college: 6 figure salary, huge signing bonus, reputable company with a great culture on the east coast. 

After about 9 months I can tell you that I don't even want to be a software engineer anymore. It's not that exciting to me, and after I got off the treadmill of doing this for the sake of proving to myself and my peers that I could, I realized that CS isn't even what I want to do with my life. 

Anyways maybe that's not the case for you, but please, ask yourselves if this is what you really want. I've seen a few other posts like this on this sub before, so I know other people have felt this way. Make sure you're chasing that Big 4 job not because of what it says about you, or what your parents or friends think, but because it's what you actually want.",1523347624.0,2018-04-10 04:07:04
608,"It seems like devs who use linux are preferred, why is that?",619,fz6aj9,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fz6aj9/it_seems_like_devs_who_use_linux_are_preferred/,544,I don't get it. What does linux provide that makes it better for developement compared to a mac or device that uses windows ?,1586643891.0,2020-04-11 18:24:51
609,I can't pass Calculus 2 so I can't become a programmer,619,cpeqlz,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cpeqlz/i_cant_pass_calculus_2_so_i_cant_become_a/,443,"So at my college in order for me to have a computer programming degree I have to take and pass Calculus 2. I've taken it 2 times now and have fail both times. I want to go into web development or CS field. I considering going into the design degree so it can reflect in my web development. I guess I'm asking for advice on if it would smart to go into a design degree or something else.

&#x200B;

\[UPDATE: It's unbelievable how many of you failed Cal 2 along with me but kept going for it. Everyone who has commented personal stories and advice I want to thank you truly they were inspirational. I've decided to go for the Design degree. It won't set me back by much and it would allow me to focus on my own programming more than doing the CS course work. I'm not happy with how the CS program is layout at my school it focuses on concepts (which are important) and the languages C++ and Java. I think it's better for me to swap so I can focus more on Web Design / Development (HTML, CSS, JS and some other JS libraries). I already have the first two certifications from FreeCodeCamp then getting this design degree will allow me to also go in to fields such as UI / UX, font-end, and just design in general.\]",1565656136.0,2019-08-12 20:28:56
610,"One year ago, I thought about quitting CS and was told I would never fit in. Today, I finally received my first offer!",619,b6nzjp,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/b6nzjp/one_year_ago_i_thought_about_quitting_cs_and_was/,36,"Hi r/cscareerquestions,

About a year ago, I posted a link about failing in my courses and how I wasn't able to fit in CS  [https://www.reddit.com/r/cscareerquestions/comments/85m095/i\_have\_failed\_my\_intro\_to\_programming\_ii\_second/](https://www.reddit.com/r/cscareerquestions/comments/85m095/i_have_failed_my_intro_to_programming_ii_second/) 

After reading many of the comments both encouraging and discouraging (but regardless informative), I took a lot of that to heart and decided to turn my life around. I began learning Python again over the Summer to learn the core concepts of programming and ever since, I have improved in my classes and started to work on the lab assignments independently with help from great sources such as YouTube and StackOverflow. I have befriended many CS students which led me to be an active member of my Computer Science club. They have taught me a lot of valuable information such as knowing how to approach whiteboard problems as well as helping me understand important algorithms and data structures more deeply. I now also work at my University as a tutor teaching students in Math and Computer Science courses.  

As for the internship search, it took me more than 100 applications with a lot of trial and error and 7 months to eventually find a company that would accept me. The search ultimately taught me how to act professional in both behavioral and technical matters. 

Overall, I wish to thank the amazing community here for bringing me where I am at today. If I never heard from y'all's criticism, I would stay at the same place I was a year ago. As for the ones still looking for an internship, don't give up, don't give in, and never surrender. With every rejection, you are much closer to your goal than you were previously. I believe in you. 

I still have a long way to go, and I with this internship, I hope to learn new and exciting things that will further peak my interest into programming!

&#x200B;

Thank you all for everything.

Update: since the post has been deleted in the past, here are the screen grabs

(https://i.imgur.com/FudL8J5.jpg)
(https://i.imgur.com/YKIQBVv.jpg)
(https://i.imgur.com/ebJSGxK.jpg)
(https://i.imgur.com/jfPIxys.jpg)
(https://i.imgur.com/aC3K7yV.jpg)

&#x200B;",1553834270.0,2019-03-29 00:37:50
611,Are online coding exams getting harder?,622,dfxhtf,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dfxhtf/are_online_coding_exams_getting_harder/,363,"Is it just me, or have online coding exams gotten harder and harder? 

I took a test yesterday that had me answer 8 questions in 2 hours. 

The weirdest thing is none of them tested my knowledge of data structures or algorithms (to some extent). They were all tricky puzzles that had a bunch of edge cases. In other words, a freshman in college would have enough coding skills to answer them if he/she was good at general problem/puzzle solving.

Needless to say, I'm pretty bummed and got a rejection letter the next day. 

I'm not even sure how to study for these kinds of tests, since they test one's ability to solve puzzles moreso than how much one knows about common DS or Algs.",1570740322.0,2019-10-10 16:45:22
612,Do you feel bad about leaving jobs when you worked for a cool team?,624,jee1f2,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jee1f2/do_you_feel_bad_about_leaving_jobs_when_you/,127,"It's really common in this industry to change jobs, there are always better opportunities.  Most of you have left good teams behind for better opportunities.

I kind of feel bad about leaving my current team.  They're not perfect, but they're good people overall.  I enjoyed working with them.  I dread putting in the 2 week notice on Monday.  It's gonna suck.

Logical justification for leaving still prevails obviously - the new opportunity, as is usually the case, would be the best thing for my career and my family.  But it's still gonna suck.",1603180491.0,2020-10-20 03:54:51
613,I underestimated just how easy it would be to find a developer job...,621,bzguaw,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bzguaw/i_underestimated_just_how_easy_it_would_be_to/,344,"In addition to not getting callbacks, all the ""we thank you for your interest but... we need someone more experienced/ we found some errors in your project assignment/ you failed our codingame test (i was nervous ok?) / we are still interested in your resume and will keep you posted for more positions""

&#x200B;

I honestly thought I would find something right off the bat because ""theres a huge demand for developers"" but a lot of companies seem to want to pay a junior salary with senior experience in a dozen frameworks 

&#x200B;

Anyway, I suppose I am just venting. just this job hunting isnt going as easy as I thought lol.",1560309319.0,2019-06-11 23:15:19
614,"Would you be in favor of, or join, a labor union for Software Engineers?",618,bint0s,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bint0s/would_you_be_in_favor_of_or_join_a_labor_union/,754,"[This post](https://www.reddit.com/r/gamedev/comments/bi5sxu/video_game_workers_need_unions/?utm_source=share&utm_medium=web2x) in /r/gamedev was discussing a labor union for video game workers due to the notoriously long hours. Would you, as software engineers, be in favor of, or join, a labor union for software engineers?",1556561659.0,2019-04-29 14:14:19
615,I'm burnt out. I want to quit my job and take a 3-6 month tech hiatus without having a job lined up.,613,evtgyx,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/evtgyx/im_burnt_out_i_want_to_quit_my_job_and_take_a_36/,204,"I know this is a bad idea but I'm single, no kids, no mortgage, no debt, have large savings, and still relatively young (30). I think I can recover from any negative consequences this hiatus may create.  I guess I would like to hear from other who have done something something similar. I would like to hear your story. What went wrong/right, was it worth it(?), And anything you might have done differently.",1580361506.0,2020-01-30 00:18:26
616,"Upcoming AMA - Reddit engineers to talk CS career paths, bootcamps, and mentorship on May 30!",617,8l2gr7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8l2gr7/upcoming_ama_reddit_engineers_to_talk_cs_career/,75,"On Wednesday May 30 we’ll be welcoming four of Reddit’s own engineers to do an AMA: u/gooeyblob, u/ktatkinson, u/SingShredCode, and u/toasties. We’re bringing these folks together, as all have followed unique career paths that in some way touched one particular bootcamp - HackBright Academy - either as graduates or mentors. For those of you who are unfamiliar, Hackbright is an engineering school for women in the Bay Area with the mission to change the ratio of women in tech. They’ll be around to answer all your questions about their own CS careers, experiences with coding bootcamps, and how they landed their current gig at Reddit. 

The AMA will take place on Wednesday May 30, 2018 from 1pm to 3pm EDT (10am to 12pm PDT).",1526951435.0,2018-05-21 21:10:35
617,"I feel i am doing something wrong, as recent hires seem to be quitting on mass on my team.",621,ddzc27,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ddzc27/i_feel_i_am_doing_something_wrong_as_recent_hires/,296,"Between February and March 5 recent grads were hired to expand the team i currently am considered lead on (quasi management/developer role) to fill roles as junior developers for our backend team. The pay is competitive, we don't do crunch, and we have a relaxed environment. Our primary tech stack on the backend is GraphQL (Postgraphile) + Koa + Typescript.

They were basically all mentored by me/other developers for almost 2 months training all of them on the standard things from Git, how to handle issues, our workflow, typescript, nodejs, graphql. Between July and now 3 out of 5 of them have given their notices.

I did exit interviews with  them, and they all complained that they felt our tech stack was ""boring"", or they felt they weren't making a huge impact. I asked if compensation was an issue and they said no.

On Friday the 4th one gave me his two week notice, and basically he confessed he wanted to work with more exciting technologies. I asked him what, and aside from ""React"", he couldn't really give me anything else. I asked if more money would sway his opinion he said no.

At this point i just don't really know what i am doing wrong. On top of this this is my first real time being a manager. None of the senior developers have left or seemed unhappy and nobody has made complaints that they don't like working with me. I just don't really get it.

I mentored / had senior developers mentor them extensively. I don't think our tech stack is ""boring"". Considering the team i am on is now 8 people, it just feels kind of weird.",1570370339.0,2019-10-06 09:58:59
618,Do you have an alternative lifestyle? I wanna hear about it,611,ch7ed7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ch7ed7/do_you_have_an_alternative_lifestyle_i_wanna_hear/,583,"Computer Science as a career with its remote work offerings and its x day work from home policies seems like the place to be if you don’t just wanna grow up marry, spit out a few kids and die (Exaggeration, chill). Do you save your fat computational stacks to pay online artists to draw suggestive pictures of your 2d wifu? I wanna hear about it. Do you live in your childhood treehouse while writing code that ends up in space? I wanna hear about it! Are you a digital nomad? Tell me what life on the road is like. I got inspired by this article about a [Homeless Google Employee](http://www.themoneyfam.com/lunch-homeless-google-employee-hes-suprisingly-clean/). I’d love to hear about anyone using CS as a tool to live a less than traditional lifestyle!",1563999198.0,2019-07-24 16:13:18
619,How to avoid the leetcode grind,615,cess9o,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cess9o/how_to_avoid_the_leetcode_grind/,260,"EDIT: After reading through all the comments and seeing some agreements and disagreements I think I should make a few adjustments to my post. To get away with doing as little leetcode as I did you definitely have to be really lucky, and the more you prepare the less lucky you have to be. However it also seems to depend on which Big N you're going for. Apparently my advice is unlikely to get you through some companies' final round, most notably G or FB. A few people correctly guessed I got into MSFT, which I guess my description of the interview process gave away. I still think my advice is at least helpful for people who want to prepare for slightly less brutal companies or how to leetcode more efficiently.

&#x200B;

tl;dr: Practice behaviorals and soft skills, take courses in school that actually challenge you instead of inflating your GPA, do a few leetcode problems thoroughly instead of powering through a whole bunch mindlessly

&#x200B;

I recently accepted a new grad full time position at a Big 4, and I got it by only doing a few leetcode problems a day starting less than a week before my final round interview. Throughout the whole recruiting season I went through the interview process for four companies out of the many I applied to- two no-name companies and two of the Big 4. I got two offers, one from a Big 4 and the other from one of the no-names. I had one internship at a no-name company previously. Now obviously as a new software engineer straight out of college my advice may not be the most well-informed, but I think I can at least help a few people on this sub.

&#x200B;

I've lurked for a couple of years and I always see posts about how much people hate grinding away at leetcode. People seem to have done hundreds of problems and are still failing interviews which I imagine must feel awful. I'm going to talk about a bunch of things I did that were less painful than leetcoding all day and that I don't see talked about on this sub a lot. I think most of it boils down to ""work smart, not hard"".

&#x200B;

For my final round I had three technical interviews on the day, all of them started with a few behavioral questions and then whiteboarding. For the first one I wrote out the naive solution, explained the problems with it, and then gave a high level explanation of how to use heaps and some other tricks to improve it. Then the interviewer asked about the big O analysis which I did correctly. The second interview was a system design question with some OOP stuff, which I got without many problems. Since I finished it early they gave me a follow-up question about DP (I didn't realize it was DP at the time of the interview though). I gave the naive solution and identified that it was inefficient because there were so many repeated computations, but I didn't have time to actually figure out the optimal solution. The interviewer told me not to worry about it because it was a ""bonus"" question anyway. For the last interview I had to do a graph traversal question which I got without any problem, including the big O analysis. Then I was asked a follow-up where the optimal solution needed a union-find data structure, which I had never even heard of. I didn't really get anywhere close to coming up with the solution on my own. At the end the interviewer pretty much just explained what union-find was and how to do it.

&#x200B;

So it seems like I did okay but not great on the interview from the way I described it, but I still got an offer. While of course there is some luck involved in getting the offer I think there are ways to increase your chances without having to be a leetcode God. Here is my advice for people want to get a good job with a less monotonous way of preparing.

# Work on your communication skills

While my leetcode skills aren't great, I think one thing that I did well in my interviews was explaining my thought process. Even when you're just writing out the naive solution to problems make sure you explain what each part of the code does, how you know the code you're writing is correct, and in which situations you think it might crash or get an error and how to avoid them. Then you can clearly state where the possible inefficiencies are what your method of optimizing will be. Even if you don't immediately know how to do the question, if you're explaining yourself along the way it will be easier for your interviewer to give you a hint to help you move along with the problem. This can be practiced by taking classes that have a lot of presentations or discussions or even just doing your schoolwork in a group where you have to talk out loud about all the problems.

# Work on your fundamentals

There are a lot of really complicated problems you can get that rely on really obscure data structures or some random weird trick. A lot of these aren't really feasible to figure out 100% after your first time seeing the problem, especially in an interview setting. However these problems are often related to more common types of solutions, and they're usually the minority of possible questions anyway. It's extremely rare to have ALL of your interviews rely on obscure knowledge. If you're good at your fundamentals then you can quickly identify where to use a heap or when to use bfs vs dfs or whatever else. And when I say good fundamentals I mean a little bit more than just knowing all the data structures and how to implement all the sorting functions, you should have a good intuition of how each thing works and when they're useful. An easy way to practice your fundamentals is to actually pay attention in your DS&A classes in school and try to ace them instead of complaining about how ""no one in the industry uses merge-sort anyway"". Even better, if you school has enriched versions of those classes you should take them. If you really work hard in those classes then you will have an easier time doing leetcode too.

# Work on your math skills

On this sub and in real life people always complain about being forced to take Calculus or Discrete Math or Intro to Proofs or whatever other math courses. While no one in the industry is going to ask you to solve an integral or write a formal proof I think these courses are far from useless. If you're good at calculus you can do big O analysis without much problem. In fact doing the big O analysis of a solution can even give a hint of whether or not that solution is optimal. For example, if a programs requires an input of an array of size n, a solution that's O(n^(2)) is usually not the best. Being able to do proofs is also helpful for a couple of reasons. If you have good proof-writing skills you should be good at explaining to your interviewer why your code works. If you have good logical deduction skills then you can prove which parts of your code you're 100% certain are correct and which parts could have bugs. I would recommend taking the advanced math classes at your school or even taking some proof classes as electives to practice math.

# Practice behavioral questions

I think the Big 4 interview that I failed was due to my answers to the behavioral. It wasn't even final round and the coding question was very simple, just reversing a list. However my behavioral answers were pretty questionable. I stuttered a lot and had to spend a lot of time thinking just to give mediocre responses. Make sure you can talk about things you did in your past that you did well, as well as things you didn't do well and how you learned from them. Also try to talk positively about all the people involved in the situation instead of saying things like ""No one on my team knew how to do anything so I was able to create the whole thing myself"". Don't be afraid to brag about your achievements but don't sounds like a jerk while you do it. Maybe say something more like ""My teammates had much less experience than me so I had to teach them how to do xyz. Once I did they all performed really well and we finished it together"" or whatever. If it's a big company you can also search up stuff about the company culture or values and try to fit those in to your answers.

# Pay attention when doing leetcode

I hear so many stories of people doing a million leetcode problems a day and still getting rejected. While this can be attributed in part to bad luck, I think there's something fundamentally wrong with your preparation if you're doing a millions problems a day. After taking however long you need to attempt a problem, whether you solve it or give up, take some time to reflect afterwards. Think about any other possible solutions you could do. Maybe try it in another language. Think about how you could explain the problem and solution to a high school student vs your professor, as that will help you explain it to your interviewer. Even if you solved it, read through the solution and the hints that leetcode gives to see a progression of how they expected you to figure it out. Go through the other submissions and think about what you like or don't like about each implementation. Revisit the same problem a few days later and try it again. All of these things will you give you a richer understanding of the problem, so even if in an interview you get something you never saw, you'll probably be an expert in something similar.

# Talk about problems with people smarter than you

Going through a homework problem, leetcode problem, or even a random problem that just happened to come up with someone smarter than you for one hour is probably more helpful than thinking about it for five hours on your own. Most of us are average intelligence, but if you're in university there's probably at least a couple of really smart people around you. Ask for help with prepping for interviews or doing homework and see how they think through problems and figure out solutions. Maybe they're very good at solving problems but bad at other aspects like explaining the solution or doing the big O analysis. In that case try to think about how you could even improve further on their methodology and apply it to yourself. Also you can do problems with people dumber than you and basically teach them what you know. This will reinforce the knowledge that you already had as well as your communication skills, and you might even learn a few tricks from those people too. You can always learn something from anyone.

# Challenge yourself

I've alluded to this in my other points, but I think it's a waste of time to ever take easy courses just for the sake of inflating your GPA. Most companies don't even care about your GPA anyway. Take classes where you will learn new things, either advanced CS/Math classes or electives about stuff you're weak in. Don't join clubs or code toy projects for the sake of resume filler. Actually try to get positions where you will have interesting responsibilities and do projects where there is something to actually learn. I don't have any problems doing big O analysis or explaining my thought process in interviews because I put in the extra effort to take more advanced math classes and join clubs where I had to do a lot of public speaking. While you don't have to focus on those skills in particular, (Like if you hate math or have social anxiety or something) you should try to find some other way to challenge yourself while in school. In fact doing this can even be fun. you'll make more friends by being in classes you wouldn't normally take and you'll pick up some hobbies by joining clubs.

&#x200B;

So that's my advice on how to get a job without intense leetcode grinding. I know it's a bit arrogant to write up a whole guide on getting a job when I literally just graduated and I'm in my first job out of college but I think some of the points I made don't really come up on this sub often. And of course if I were to go back in time, I'd still try to do a bit more than one week of leetcode practice before my interview because a lot of it still came down to luck, but at least it worked out for me in the end. Let me know what you think!",1563486856.0,2019-07-18 17:54:16
620,"Struggling really hard even on ""Easy"" questions.",620,aqx5d5,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/aqx5d5/struggling_really_hard_even_on_easy_questions/,129,"So I graduated with a CS undergrad degree in 2016, and been working at a small retail analytics company since I graduated. The work I do is pretty easy (even someone with little programming knowledge can do it). It's on my part that I've kinda slacked off in the last 3 years by not  changing companies or learning new languages/work on personal projects. 

So recently. I've began working through problems on Hackerrank. And I am so bad at coding and have such horrible coding skills that I am struggling really hard even on the easy questions. Even when i occasionally do get a question right, it is definitely not optimal/efficient. 

How do I get better at solving these problems efficiently? Are there courses/tutorials that I need to take/look at? Do I keep doing these questions even though I don't get a lot of them correct?

I am so frustrated and demotivated knowing that I cant even get simple questions correct, but at the same time I want to be able to get better at it.

Any advice would be really appreciated. Thanks.",1550270174.0,2019-02-15 17:36:14
621,"[OFFICIAL] Exemplary Resume Sharing Thread :: September, 2020",609,ioozqm,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ioozqm/official_exemplary_resume_sharing_thread/,308,"Do you have a good resume? Do you have a resume that caught recruiters' eyes and got you interviews? Do you believe you are employed as a result of your resume? Do you think others can learn from your resume? Please share it here so that we can all admire your wizardry! Anyone is welcome to post their resume if you think it will be helpful to others. Bonus points if you include a little information about yourself and what sort of revision process you went through to get it looking great. 

**Please remember to anonymize your resume if that's important to you.**

This thread is posted **every three months**. Previous threads can be found [here](https://www.reddit.com/r/cscareerquestions/search?q=Exemplary+Resume+Sharing+Thread&restrict_sr=on&sort=new&t=all).",1599577272.0,2020-09-08 11:01:12
622,Does anybody not use LinkedIn?,614,in273i,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/in273i/does_anybody_not_use_linkedin/,178,"This is probably a strange question, I know. But I'm teetering on some possible career changes (either laterally within the industry or out of it all together). 

I understand LinkedIn from a networking perspective why it's useful. At the same time, I find it the most toxic of all social media sites because it seems as though it's basically a requirement for any professional these days; but it promotes FOMO and comparison to others like nothing else at a professional level. Facebook, Snapchat, Instagram, Tiktok, etc are all toxic on a superficial level. LinkedIn is toxic where it counts.

For someone struggling psychologically in their career, I had to set myself to invisible to keep recruiters at Bay and keep me off the site for a bit (as checking my messages are the only reason I used it)

As far as resumes are concerned, it seems as though most employers want to see your LinkedIn profile on your resume somewhere and I'm always like ""why? It's basically just my resume.""",1599345607.0,2020-09-05 18:40:07
623,"What does an entry level programmer need to know exactly? Everything just says ""a good grasp of X""",613,drz9bs,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/drz9bs/what_does_an_entry_level_programmer_need_to_know/,176,"I cant seem to google a straight answer on this one. A lot of jobs I've looked at just say "" needs a good grasp (or strong foundation in) x coding language "" or an anecdote on how entries ask for help a lot. 

My specific question is: 

What concepts of programming are entry level jobs looking for? 

What specific skills would be a good gauge of a programmer's skills?

Edit: Thank you all for the detailed replies! I will work through them one by one as I dont know many terms and have to look them up. Thank you for taking the time!",1572989918.0,2019-11-05 16:38:38
624,[Success Story] Are you in a career change into software development with no CS degree? Here is what I did...,612,9rag1k,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9rag1k/success_story_are_you_in_a_career_change_into/,118,"I was in a social career the last four years, and decided to change careers in January of 2018. I started studying while working, and in June I quit my job to code full time. By July, I had applied to about 30 companies. Two of those applications, I had references to, and received a phone interview as a result. I didn't pass either of those phone interviews. In hindsight, I wish I had saved those references until I was more ready. One of the applications, I got an online C++ coding challenge that I took with little to no sleep due to my child having hand foot and mouth disease that weekend. I failed the challenge by 8%.

I took a break from applying and took up a friend's web app idea and worked on it for 3 weeks. I deployed it on AWS and learned a lot in that process, particularly since I had little to no experience in the web development world. I thought I didn't like web dev but I really enjoyed the process from start to finish. My friend paid be $200, and that was nice of him since I wasn't expecting anything, I was just doing it to learn. I provided him with an amateur website but it had all the functionalities he asked for. Once I was done with this project, I updated my resume and started applying again.

A week ago, I got a cold email from a recruiter (I keep getting these). It was for an interesting project using tesseract optical character recognition (OCR). I was actually pretty put off by the recruiter on the phone, but decided to pursue it anyways since I was unemployed. I got a phone interview, mostly because I had another personal project in which I used tesseract. It really wasn't much of anything, and the tesseract part was probably like 3 lines long, just calling `image_to_string()`.

The phone interview went great, asking about projects I had done and giving clarification on a particular project they are trying to solve with this new hire. The next business day, I was told I got an in person interview to my surprise. I had a week to prepare, and I spent a lot of time preparing for the interview. I had a sense that it wasn't going to be a coding question, but rather more questions about the problem they are trying to solve. I drew up a workflow diagram of how I would tackle the problem.

At the interview, I felt relaxed because I felt I had understood their problem quite fully. At the right moment, I presented my workflow and they really liked it. I got the offer the next business day and negotiated for a little more pay and accepted. I have NO CS degree (I have a masters in a social science), no internship experience. If you are in my boat, hope this is of some encouragement!

&#x200B;

EDIT: [Here](https://medium.com/@endyd/zero-to-hero-a-self-taught-software-developer-667c007efc80) is a breakdown of the process of my career change, if you are interested in what/how I studied. ",1540504028.0,2018-10-25 17:47:08
625,I got my dream internship in my dream city!!,614,axl1uy,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/axl1uy/i_got_my_dream_internship_in_my_dream_city/,151,"I've been interested in front end web development for as long as I have been a student in CS. It's the reason I switched my major from art to computer science. My experience is mainly in HTML and CSS (from graphic design/web design classes), plus the Java and C++ I've learned through my studies in the computer science department. On a whim, I applied for a front-end centric web development internship in Denver and I just signed my acceptance letter yesterday!! I will be living in Denver this summer and I am so excited! 

I never thought, as a former art student, I could get an internship like this and I am so excited not only for the job itself but also the possible doors it will open for me in the future. Just thought I would share my own little ""success story"" for all of those feeling hopeless about their job search. You can do it!! :-)",1551820637.0,2019-03-05 16:17:17
626,"I'm Vivek, founder/CEO of HackerRank. I was a developer myself and wanted to build a product that can match developers to the right jobs. Happy to answer any questions on HackerRank",612,6x1urp,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6x1urp/im_vivek_founderceo_of_hackerrank_i_was_a/,203,"I graduated from NIT in India, and worked as a software engineer at Amazon after college. I spent hundreds of hours interviewing other developers and wanted to make the technical hiring process more efficient. I cofounded HackerRank, the first Indian startup to graduate from Y-Combinator in 2011. Our team has also built a community of 2.5M developers who can practice solving coding challenges.

Thank you to UT Dallas for this idea of doing an AMA. For anyone who wants to practice their coding interview skills, we have a job interview prep course designed with the help of our advisor and friend Gayle Laakmann McDowell: [Cracking the Coding Interview.](https://www.hackerrank.com/domains/tutorials/cracking-the-coding-interview) 

Happy to answer any questions on technical hiring and the future of how hiring!

Proof: https://twitter.com/rvivek/status/900431952133595136

Thank you for the AMA. We will add the code stubs! Feel free to email me vivek@ for more suggestions/feedback on the product. Thanks.",1504152615.0,2017-08-31 00:10:15
627,"Story time: You aced the interview, but one glaring reason kept us from hiring you. Here's why...",612,66c78h,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/66c78h/story_time_you_aced_the_interview_but_one_glaring/,302,"I want to pass along some advice to you CS redditors looking to land your next gig. This isn't my main reddit account (which has my initials in the user name), and it isn't a throwaway either... but out of respect to the person that this story is about, I'm just going to be extra safe to try and not dox anyone. I'm posting this story specifically in /r/cscareerquestions because the person I'm talking about posts somewhat frequently on this sub-reddit. I just can't convince myself to DM you, so I'm casting a wide net and hoping others learn from this as well.
 
At my last job, we were looking for a new CS engineer to come in and help us grow our small team. This company mostly operates on a SaaS business model, so making our online presence known was a big deal. Therefore, a lot of clients would send me friend requests on LinkedIn or would follow me on Twitter or whatever.
 
We interviewed someone that seemed like the perfect fit to join our team. From the company perspective, we were dead set on hiring another individual that our clients could learn about through several of our marketing channels. When I interviewed this person, I gave my boss the recommendation to hire you because you seemed to have the skills we were looking for. You were very easy to talk to and you appeared to be a great fit for our culture.
 
After the interview, a few of us looked at this candidate's LinkedIn profile, and somehow we found their twitter profile. At this point, everything seemed normal. However, we googled their twitter username and found that they use the same name in several other social accounts. What really screwed things up was when we found their Reddit account.
 
Ultimately, we chose not to hire this person because
 
* This person's public multi-reddit contained aggregates of porn/nsfw-related subreddits
* Most of this person's posts were about how they basically don't do anything with their personal time except play video games and get high. Some of the posts went into detail about doing harder drugs, but I digress.
 
I'm not saying there is anything wrong with playing video games or whatever you want to do in your spare time. In fact, we didn't even drug test our employees and our executives even made it clear that we could do whatever we wanted in our spare time as long as it didn't interfere with work. However, we couldn't hire this person simply because they made it so easy for professionals to find information about them that makes our company look bad for hiring them in the first place.
 
This happened a couple of years ago, and here I am at my new startup and once again, we're looking to hire someone like this person. Out of curiosity, I looked them up again and found nothing has changed.
 
So all I'm saying is... You can be whoever you want to be on the internet, just know that a lot of CS opportunities hold you accountable for what you portray on social networks. Please know that I'm not trying to condemn anyone for their lifestyle choices. I know that nobody is perfect. But if you want to land your dream job, please take this story into consideration.",1492656271.0,2017-04-19 22:44:31
628,What happens when I don't get a job for a while?,613,j8r0nq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/j8r0nq/what_happens_when_i_dont_get_a_job_for_a_while/,212,"I graduated with a BS in CS last spring and have been applying to places ever since. Like many others, I've heard almost nothing back on all of them. I've accepted that I probably won't get a CS job for a while, and I'm assuming that a recent grad will look better than an old grad with nothing since then.

My question is this: assuming this trend continues and I can't get a job for a significant amount of time, what should I be doing to maintain/increase my odds of getting hired? Personal projects? Leetcode? Heck, do people put leetcode stuff on their resume?

Thanks in advance for any advice! :)",1602388253.0,2020-10-10 23:50:53
629,2 years ago I graduated with a MATH BA and a 2.2 GPA. Today I'm a full time Software Engineer II AMA,608,8dwe0b,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8dwe0b/2_years_ago_i_graduated_with_a_math_ba_and_a_22/,278,"Short story, I fucked around in college and got most Cs...got a B every once in a while and a Single A. I graduated in 4.5 years with a Math BA, CS minor and no internships or personal projects.

It took me 4 months to find a job, which in hindsight, relative to people that post on this sub seems like a miracle. I stayed at that job for 8 months. Once I had experience, I didn't have a problem getting interviews. People stopped asking about my education and GPA. I took a job that doubled my salary. I went from 40k to 80k. I have been working for over a year and two months ago I got promoted from a junior dev to a full dev. With the salary to match. 100k, two years after college with 2.2 and no cs degree of internships.

Also, Its a second rate state college that no one ever heard of.",1524352920.0,2018-04-21 19:22:00
630,"People here who work less than 40 hours a week, how did you do it?",610,gx8bh7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gx8bh7/people_here_who_work_less_than_40_hours_a_week/,238,"I work 30 hours a week as a dev because I asked my employer, I took a 25% salary cut but I would make that deal anytime since my hobbies are cheap. But now I want to change jobs while keeping the work/life balance.",1591404965.0,2020-06-05 20:56:05
631,How to work at a hip startup as an older man.,608,4tsd7x,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/4tsd7x/how_to_work_at_a_hip_startup_as_an_older_man/,72,"Hello Reddit,

A few months ago, I made [this](https://www.reddit.com/r/cscareerquestions/comments/4caue0/older_guy_new_job_at_startup_is_taking_its_toll/) post about having some trouble with my coworkers due to my age (53). You all gave me some great advice, and were sympathetic.

I have since resolved all of these issues, and I have grown to love working at the company. As an older man starting out in this field, you may not be able to out-code the younger guys, but believe it or not they will still respect you, and even look up to you. Instead of getting discouraged when they joked about my age, I embraced it and joked back with them. Eventually, they started to invite me to social gatherings outside of the office. I could've been the grumpy old guy that doesn't join in on the fun, but I decided to go with the flow. Now they regularly shoot the shit with me during the day, and some of them even come to me for advice -- about anything from their first mortgage to women.

To any older guys out there who are considering software development as a career change and are worried about fitting in at a hip tech company, I'd encourage you to give it a try and don't back down. It took me some time to get used to how fast everything moves here in the bay, but now I feel like a young man again, and I'm excited about my new career.

",1469065505.0,2016-07-20 21:45:05
632,Recently quit a $120K high stress job as a developer (fresh out of college). What are some sensible options for a lower stress career under the umbrella of computer science?,609,a0v9m8,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/a0v9m8/recently_quit_a_120k_high_stress_job_as_a/,305,"The title basically says it all; I couldn't handle the standard of knit-picky perfection set for production software. Endless code review hell was my whole life for 4 months. I will be relocating to Raleigh for a lower cost of living. Through university, an internship, and now my failed attempt at this job, Seattle has eaten me alive.",1543357305.0,2018-11-27 17:21:45
633,Peloton HackerRank - WTF? (rant),608,9l6vzp,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9l6vzp/peloton_hackerrank_wtf_rant/,362,"Just closed my HackerRank after doing 2 questions of the 4 with like 30 min remaining. Not doing this shit. Why does a company that makes fucking exercise bikes need me to come up with some advanced graph traversal algorithm and find out ways I can arrange K elements of some given array that sum to N given a bunch of constraints? Like, why? How advanced could your bikes possibly be? I get they want problem solvers, but at least be reasonable.

Seriously, they can go fuck themselves. Was expecting a fair, doable HackerRank, but 75 minutes to solve essentially 3 medium-hards and 1 easy? Nah. Good luck in your recruitment.

Is this what I should expect from HackerRank challenges? Will they be this frustratingly annoying (not just difficult wise, the amount of time required to complete it + difficulty)?

EDIT: If anyone wants to take a look at them, I'll add an imgur link later in a couple of hours. I don't give a shit if they don't want me to share the questions.

EDIT 2: I managed to grab the 3 ""non-easy"" questions. The first one was just removing elements > x in a linked list, so it was very straightforward. Question 2: last 2 images. Question 3: First 3 images. Question 4: Middle part about the graphs.

Link: https://imgur.com/a/38F04p9

EDIT 3: I honestly did not expect this post to gain this amount of traction. This was just a rant, just being frustrated at the first HackerRank I've had (all others were other kinds of challenges) being on the harder side, and being caught off-guard with 3 questions being worded confusingly. I didn't mean to shit on Peloton for making bikes lol.",1538640904.0,2018-10-04 04:15:04
634,Will taking a year off to travel @ 34 fuck my career?,611,glj1nd,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/glj1nd/will_taking_a_year_off_to_travel_34_fuck_my_career/,332,"My career so far:

+ Various three letter agencies.
+ Masters degree from a top school.
+ Various cybersecurity certificates.

- No specialization.  I've never stayed in one position longer than 2-3 years! (I did however, spend 5 years at one three letter agency in which we were encouraged to change jobs within the agency).  
- Currently job is maintaining some legacy buggy Java/Struts POS.  Make $100k in the Midwest (govt contracting), which is really not bad at all.  It is a chill gig - telework allowed, and technically aren't supposed to put in more than 40 hours a week. Not the best for keeping skills up to date, though.
- Skillset is out of date.  I'm not super comfortable with Node.js, Kubernetes, Python frameworks, Angular/React front end frameworks.  
- Skills are not competitive enough to get a remote private sector job. Tried for 4 months. 
- Never had a leadership role besides mentoring 1-2 individuals at a time, due to poor soft skills (I'm shy/passive - am comfortable asking for help but not driving a project).
- Poor mental health.  I struggle with suicidal ideation, anxiety,  and planning ahead/meeting deadlines.  I am getting treated for it.
- Lame GitHub.
- Not that great of a dev - I could (and have) built full stack apps, but struggle a lot.  But, I have gotten decent feedback about my job performance.

I've been at my current position since September.   Been saving up $20k to do a world trip.  I have a partner, but no kids.  I will absolutely, 100% regret it on my deathbed if I don't make it happen -- but there is a good chance I would lose my clearance over it.   How should I minimize the damage to my career?

EDIT:

No plans to have kids ever.
Partner is currently a PhD student in the humanities, so yeah -- limited employment prospects.  He's actually a good practical dev- but doesn't want to pursue it for a career.
I will have limited other savings after this that aren't already tied up in retirement.
I have lived abroad before, and have taken two two-week long international vacations in the past four years.
I've been on therapy/meds for the past two years, but sadly isn't a cure-all.",1589764066.0,2020-05-17 21:07:46
635,3 years ago I graduated with a MATH BA and a 2.2 GPA. Today I'm a full time Software Engineer II,607,btrq99,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/btrq99/3_years_ago_i_graduated_with_a_math_ba_and_a_22/,184,"I had an AMA last year and for months people were still PMing me so instead of all the humble brags this sub gets, here is an underdog story:

Short story, I fucked around in college and got mostly Cs...got a B every once in a while and a Single A. I graduated in 4.5 years with a Math BA, CS minor and no internships or personal projects.

It took me 4 months to find a job, which in hindsight, relative to people that post on this sub seems like a miracle. I stayed at that job for 8 months. Once I had experience, I didn't have a problem getting interviews. People stopped asking about my education and GPA. I took a job that doubled my salary. I went from 40k to 80k. I have been working for over 2 years and a year and two months ago I got promoted from a junior dev to a full dev. With the salary to match.

Also, Its a second rate state college that no one ever heard of.

The link to my previous AMA: https://www.reddit.com/r/cscareerquestions/comments/8dwe0b/2_years_ago_i_graduated_with_a_math_ba_and_a_22/",1559021871.0,2019-05-28 01:37:51
636,To the College students with no passion...,607,b3luy3,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/b3luy3/to_the_college_students_with_no_passion/,79,"I made this post in another thread because I get where this guy is coming from. And /r/cscareerquestions is fucking depressing most of the time. So, here's some positivity.

Funny story, I thought I didn't really have a passion for CS and that I just wanted to use it to get bread and live comfortably. I got hired by a big government contractor, heard how the works slow and not very fun, but steady and easy at these contractors with about 85% salaries compared to the industry (good enough to someone who grew up in the lower working class).

Plot twist; I got hired to a brand new team who's internal role is literally to test out new products and decide what the company should look into. DevOps, CiCD, Frameworks, whatever. I'm talking stuff that's like in Beta, even contributing to OpenSource projects if we need to for tools we think are beneficial. I FUCKING LOVE MY JOB. I might be brainwashed after a year, idk. But I seem to literally love my job. There are headaches sometimes with other devs, and our agile team is kinda big (almost 20 devs now!) so the code base gets messy between Sprints. But I've seriously come around and legitimately have never been happier in my entire life. I think it was by luck, but you might end up doing the same thing.

Alright, point is, I did not care much in college and definitely could have been a better student. My only motivation in college was thinking about the $75k+ salaries when I graduated (specifically East Coast/MidWest, was never really Silicon Valley bound). I graduated, make way more than I expected to (turns out government contractors actually are paying the industry rate because people leave once they get experience otherwise), and legit hope others stick it out and find the same. College was worth it. I would try to find a company you want to work for, but honestly I didn't, I applied everywhere and just took the highest paying job that came my way. I couldn't ask for a better start to my career, and I'm legitimately excited for my career now.

There's a huge variety of work in this field also. We have these Systems Engineers who don't write much code outside of test coverage, but their job is to handle deployments and ensuring the code base actually does what it's supposed to. Of course you have software devs who write software. But then theres project architects as well, which aren't actually super experienced like I thought, but seem to only have around 5 years before that's an option. So, you don't have to be a coder forever, but even if you aren't the best coder you will have options in this field. I think the only field in CS I've seen that's truly a nightmare is healthcare, not shitting on it but I have a few friends in healthcare systems who are actually miserable or just bored. But manufacturing programming, tech, finance, government, all seem to be pretty great and stay competitive pay wise with one another. So you have tons of options. There's a big light on the other side.",1553168901.0,2019-03-21 07:48:21
637,PSA: Christmas is Today,607,7m1edz,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/7m1edz/psa_christmas_is_today/,62,"Among the hustle and bustle of grinding LeetCode, rereading CTCI, hammering out that next cool feature on your side project, and tweaking the font on your resume for the 15th time (Just use Helvetica, it is fine) don’t forget to enjoy the holidays.  Your parents will only be around for so long - so take some time to celebrate how far you’ve come and how far you plan to go by taking some time to celebrate the moment with them.

Also, don’t forget to check your production jobs to make sure they are still running.",1514238060.0,2017-12-25 16:41:00
638,Nervousness before standup calls is ruining my mornings,605,jzzxby,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jzzxby/nervousness_before_standup_calls_is_ruining_my/,171,"I am Software Quality Engineer. And 5 months back I had a job change which brought me more incentives and greater responsibilities.

I had worked as a quality analyst in my previous company, and was reporting to a Quality Lead then. But in this new workplace I report directly to the Project Manager.

Testing the entire project and working on client feedbacks have been my major roles and responsibility here. Which is a huge jump from what I was doing in my previous company.

I tend to get nervous everyday before standup. Nervous about weather my daily updates makes sense to the boss or the team. Although I was lauded by one of the collegues for being precise and thoughrough in my daily updates, last month; I still tend to get nervous. Which puts a bad start to my day.

In a nutshell: I am very nervous everyday right before my stand up calls, and would like any tips/ suggetions to counter it.",1606228823.0,2020-11-24 09:40:23
639,Take care of your eyes,601,beanue,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/beanue/take_care_of_your_eyes/,163,"Just want to remind everyone to take care of their eyes. Consider it an occupational hazard and something to take seriously before you have problems. Get your eyes checked every year, even when you feel fine. Take breaks every hour that *involve stepping away from a computer and changing your focal distance and light exposure*.

I know when you're fine it seems like ""yeah whatever I know"" but things catch up with you. Take care of yourself. Just because we don't work on a construction site and we mostly have nice working conditions doesn't mean our job doesn't come with health costs. Take care of your eyes.",1555551485.0,2019-04-17 21:38:05
640,Company ghosting me after spending 25 hours doing their coding challenge?,603,c5szrs,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/c5szrs/company_ghosting_me_after_spending_25_hours_doing/,235,"I am a recent grad looking for my first job, i applied to a company and after initial hr call call they sent me a coding challenge(design and code a small application).  I spent about 25 hours finishing the assignment(working code with no errors, well documented and basic error handling), its been 3 weeks since i sent them the challenge and it seems like they are ghosting me now. I have emailed the hr 3 times and called twice since then but shes not responding back. What do i do?  i am honestly so bummed, the company is small but they are working on a really interesting product, hr seemed nice aswell. why do companies do this? :(..i am honestly fine with them sending a rejection email but ghosting someone after they spent 25 hours doing your coding challenge is a horrible thing to do.",1561600257.0,2019-06-26 21:50:57
641,You can get unstuck,595,b924fq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/b924fq/you_can_get_unstuck/,103,"I made some posts here a year or so ago. I was having a really hard time landing a job out of college. It took a year after having graduated before I got an offer, and it was a temporary job with pretty low pay. For that year, I was horribly depressed; I constantly felt hopeless and ashamed. I contemplated leaving my industry. I almost signed an offer from Revature. Those were truly dark times, haha.

Less than a year later, I've been working at a better job for half a year, and I just got news that I've passed my Google on-site. I didn't come here to brag (okay, maybe a little), I came here to let you guys who are having a hard time know that you can climb out of the hole you might be in. You don't need to be perfect to build career success, you just need to be competent and patient. 

So if you're struggling, keep your head up. A gap won't kill you!",1554346870.0,2019-04-03 23:01:10
642,Why are SO MANY companies using CodeSignal over other platforms?,602,iqq8bc,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/iqq8bc/why_are_so_many_companies_using_codesignal_over/,280,"Can a recruiter at Uber/Asana/Databricks/Datadog/Robinhood/Quora/etc.. please explain why in Holy Jesus's resurrected grave's name all these companies have switched over to CodeSignal in the past year? 

The platform is absolutely abhorrent. I can't even debug my code because it doesn't print any logging. The input types make it incredibly difficult to create correct output. The speed metric makes no sense. Their algorithm seems to be a weighted sum of speed, correctness, and complexity. Their speed metric is calculated using how many times you've switched from one question to another.

Why is my ability to solve 4 randomly selected questions that may be any of {Easy, Med, Hard, NP-Complete} in 70 minutes based on how fast I solve them?

I'm graduating in 2021 and this platform has single-handedly boosted my anxiety levels because unless I get lucky, the maximum score I'll get is like a 780. I was okay with it last year because I had ONE CodeSignal assessment from Quora. Now EVERYONE is using it.

/endrant",1599858890.0,2020-09-11 17:14:50
643,"Got Job offer out of state, moved to new state and now they pulled the offer.",600,czvjmt,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/czvjmt/got_job_offer_out_of_state_moved_to_new_state_and/,161,"TL,DR: Got job offer, accepted and signed all paperwork. Moved to new job state and now they won't hire me but want me to interview for a similar position. Should I ask for compensation if I don't get the job?



3 weeks ago I got a job offer to work as a developer for a very large financial firm. Accepted and said I can start on monday september 9. Filled out all the neccessary paperwork and background check requierments. 

Last week told my recruiter twice I'll be moving to new state by the end of the week. They said they would keep me updated and to have a safe drive. 

Get here this past Saturday, find an apartment and sign the lease on sunday. Emailed recruiter on monday If I'm starting this week or next week on September 9.  Get a email on tuesday saying let me talk to my manager and find out. 

Today I get a call saying they won't hire me because they are switching technologies. I was hired as a hadoop dev. They offered me a similar position (this one is more of a support role) in another team for the same company this friday, however I'm really afraid I'm going to screw it up. The interview that landed me this job was on the phone. This one on friday is in person. 

I'm sad, angry, furious at the fact that I drove 15 hours, signed a 1 year lease to have the rug pulled from under me.  Yes, I should've got an Airbnb before making such a commitment. Yes I should have confirmed a starting date before moving. I could have been more careful but I thought everything was good to go since I signed all the paperwork and got the offer letter and my recruiter said it was good to move.

I've spent at least $3k and 3 weeks of my time getting to this point, could've been doing other interviews in that time. If I don't get this other job after Friday's interview, would I be entitled to some compensation for my finances that were wasted in my move here to this new state? This job is contract based and they didn't offer any relocation fees.",1567683764.0,2019-09-05 07:42:44
644,"""You have all the right qualifications and knowledge, sadly you have no degree so we can't employ you...""",601,ei4qq8,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ei4qq8/you_have_all_the_right_qualifications_and/,227,"This isn't what happened to me, but to a close friend. They went through a learning program with me to learn java development. They already had personal coding experience, but could not afford college. He was a mastermind. Every coding assignment he knocked out with ease and our instructor was always impressed with how well his code was written. He had been coding for a while and also tutored people on how to code. He actually worked part time at a coding training camp for kids/teenagers. 

He went to one of the coding challenge meetups and had excellent code. One of the employers there called him to the back after the event to have an interview with him. Gave him a coding challenge which he completed in a short time. He aced the interview and technical questions. They absolutely loved him. So they gave him a job offer as a Entry-Level Java Developer making $87,000 in the DFW area. He was excited! They were excited! Told him he is by far one of the most educated entry level candidate they interviewed. We were all super happy for him.

Then, a week later, they rescinded the offer. Told him they won't be able to employ him. Though he had all the technical knowledge needed to perform the job, they can't hire him because he doesn't have a bachelors degree. They were under the impression he had a degree when he said no such thing and had nothing on his resume stating that. So now he's back at square 0, because apparently having all the knowledge in Scrum, Java, Front end dev, SQL, AWS etc and being able to prove it, means nothing if you didn't spend $65,000+ to learn how to do so.

Okay, rant is over. I feel like a degree shouldn't be a deciding factor for an entry level position in CS or IT, it should be based on knowledge and personality.

Company: Infosys",1577837172.0,2019-12-31 19:06:12
645,Experienced folk of the industry: what's the one thing you wish you did early on in your career but never did?,597,bl1mb7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bl1mb7/experienced_folk_of_the_industry_whats_the_one/,318,"I start at my first full time job in a couple months after an internship, and I'd like some advice on how to make the most out of my career.",1557111881.0,2019-05-05 23:04:41
646,A startup company I worked at wants to use a continuous performance management software on their employees. I don't know how I feel about this.,597,j7dh26,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/j7dh26/a_startup_company_i_worked_at_wants_to_use_a/,203,"The software is called 15five, and it is making me uneasy why they are introducing this in the first place. Full disclosure I haven't used it yet but the managers talk about gamifying the employee's performance and all. I don't know this feels like it will create a very toxic workplace.   


Does anyone have experience on this?",1602194177.0,2020-10-08 17:56:17
647,"Relax! Don't worry so much, it'll be OK.",599,55ovk3,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/55ovk3/relax_dont_worry_so_much_itll_be_ok/,88,"So, I've been in this field a while now. Most of the people posting here haven't, and they're anxious about it. Let me tell you a few things:

I know getting your first job out of college is hard. It is. For everyone, and I don't mean every CS graduate. I mean everyone. Go talk to your friends who majored in business or art or chemistry or anything else and see if they're having an easier time. They're not. You'll get through it and you'll be OK.

I went to an average state school, I went through LinkedIn and looked up some of my former classmates. Some of them were at really ""cool"" or ""prestigious"" places. There's people there who are now working on high performance computing at Lawrence Livermore National Labs, working on Destiny for Bungie. Working at Apple. And some of them are at boring places, like the California Franchise Tax Board. So far as I can tell, none of them are destitute and living out of a van (though, yeah, they might not update LinkedIn to reflect this). I literally know (knew) more people who have died surprisingly at a young age than who graduated with CS degrees and can't make a living. One of my closest friends from high school went to UC Santa Cruz, majored in CS, thought he wasn't very good at it, and ended up working for a school district doing tech support for computer labs. Guess where he is now: He's married, bought a house, has two children, and plays in a band on the weekends. He's OK.

Do you need a GitHub? Not really. I [have one](https://github.com/tylerkaraszewski), and have for over five years. I don't think anyone's ever commented on it in any job interview.

How about a personal website? You don't really need one of those, either. I've had one of those [since 2005](http://www.tylerkaraszewski.com/). It rarely gets updated. One time, an interviewer asked me about designing surfboards, because it was something I said I did on that site. We had an interesting conversation, and maybe it helped me get the job, but that was the only time I can remember my personal site being mentioned in a job interview.

So you might look at what I just posted and say, ""Well, of course it's easy for you, you have so much more experience!"" and what I want to say is: YES! That's what happens! My first job wasn't something super-special. I had to interview at shitty companies for relatively low salaries and get turned down for jobs, just like a lot of people. And then I got a job, and I worked, and I got other jobs, and a decade later, I have experience and a solid resume and things are easier for me, and I make more money, and I have more choices for jobs. This is what happens, and it'll happen for you too. But it takes years to build experience *in any field* and coming straight out school is that hardest time to find work. Don't give up on the industry because people who've been doing it for five or ten years look so much more successful than recent grads, because of course they do.

And please don't follow up the discussion of how helpful experience is with a concern about ageism in the industry. Maybe there's some bias against people in their forties or fifties with no related experience. That might make it tough for people to switch into this field as a second career. But if you're 45 and you've got 20 years of experience, you're doing great, you'll have no shortage of opportunities.

You'll be fine. I know getting started is tough, but you'll get through it, even if you become a lab tech for a public school district. You'll be alright.",1475545373.0,2016-10-03 21:42:53
648,"From a purely financial point of view, im struggling to justify staying in Europe as a software dev",599,jaga0z,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jaga0z/from_a_purely_financial_point_of_view_im/,915,"Compared to the US, European software developer salaries are a bit of a bad joke. When you start looking at no income tax states like Texas or Washington state, things just start getting ridiculous (Good luck finding a country in Europe where you only pay like 24% tax on $100k). 

I kind of feel like i need some perspective here just make im not being blinded by dollar signs, because obviously working in the US isnt all sunshine and roses. Did anyone here make the move to the US because they were offered way more money than they could ever hope to make back home?",1602633467.0,2020-10-13 19:57:47
649,I got fired.,599,b9rfmv,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/b9rfmv/i_got_fired/,206,"I worked as a full stack developer with a startup. I got fired yesterday because my cofounder said they don't have enough funds. This was my first job after school. I am really scared and confused. What should be my next steps?

Edit: I got laid off. I didn't really know the difference. I really appreciate the advice and kind words. ",1554500965.0,2019-04-05 17:49:25
650,Has anyone else seen what they do negatively effect people?,594,8dpd18,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8dpd18/has_anyone_else_seen_what_they_do_negatively/,206,"In November I started an internship at a fairly large tech company. The department I worked in dealt with security cameras. My team specifically worked on the ""smart"" security ceras that would generate statistics based on counting people entering and leaving the store, seeing how much employees engage with people, and stuff like that.

When I first started, we had just installed cameras at a large department store chain. My dad just so happened to work at one of the branches near by. I told him the company I worked for and he saw the name on the cameras. I thought it was pretty cool at the time that my dad could see the stuff I actually worked on.

Fast forward to Easter when we get dinner together. He likes to talk about stuff that happens at work, especially the like layoffs and such. He starts talking about how they are trying to cut hours on everyone. They were trying to get as many people below 36 hours as they could so they would lose their benefits.

He then starts describing the analytics they used to determine when and where to cut hours. He said that they were counting people entering and leaving the store and they were able to see how much employees engage with people.

Well, those types of analytics sounded very familiar. So, it seems that they are using our system to figure out ways to schedule people less frequently, to make all their employees loose benefits. Now I understand that is kind of the point of the analytics, to save the company money. But like, it's now effecting my dad's job negatively. 

I thought it was interesting to see how something I do impacts other people's jobs directly. Has anyone else had similar experiences?",1524273986.0,2018-04-20 21:26:26
651,Should I tell my boss he's about to get steamrolled?,600,cnd3b4,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cnd3b4/should_i_tell_my_boss_hes_about_to_get_steamrolled/,97,"My boss is a pretty great guy to work with. He's down-to-earth, transparent, and respectful of my personal life. I'd consider him a friend outside of work.

But... he fucked up at work. He screwed up a project big-time, and now a few of us are being asked to look into it behind his back. I dislike this sneakiness, and there are questions we're having a hard time answering, but they don't want to ask him because they're worried that ""he'll justify it"".

To be clear: if you make a mistake, sometimes you just gotta take your licks. I get that. I'm not trying to save him from getting in trouble, per se. I'd just like to give him a heads-up in case he wants to start looking elsewhere for a job.

FWIW, I'm planning to hand in my two-week notice for unrelated reasons in a week or so anyways; I've already accepted an offer with another company. The new job is in a different industry, so it's highly unlikely that even if it's discovered I've told him, that it'll ever come back to bite me in the ass.",1565247689.0,2019-08-08 03:01:29
652,"New scrum master hired at my company, he seems to have it out for me..",592,c2kg3c,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/c2kg3c/new_scrum_master_hired_at_my_company_he_seems_to/,258,"So the company I work for has hired a ""scrum master"". He manages all the daily morning standups and sprint planning meetings. The problem is from day 1, he seems to be quite rude to me and only me in the team. When I gave my opinion during the first meeting, he flippantly ignored my comment and said ""Ok! I guess we're all done then!"". Other times when I voice my opinion he just stares blankly at me. For voting on things, he asks if everybody agrees but skips over me every time. Now I have always been kind of a person that people discount in group settings, I'm a skinny minority guy with a milder voice, this may contribute to that. However it is really starting to bother me greatly and affecting my work capacity. Today I was distracted by his rudeness towards me, and when it came my turn to speak up about an issue, I wasn't able to concentrate and I just passed. He smirked and then wrote something down on his notes. I feel as though since he is newly hired he feels like he has to prove himself and has set his sights on me to set an example, as he may think that I may be a weak member in the herd. How can I deal with this situation? Usually in real life I confront directly and escalate if necessary, but this is a work situation and I am not good in dealing with conflicts in office environments.",1560996453.0,2019-06-19 22:07:33
653,Why are online programming forums so toxic?,594,awjxog,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/awjxog/why_are_online_programming_forums_so_toxic/,232,"How come there is so much toxicity and online trolls in most programming forums/blogs?

I've been interested in programming blogs but stopped shortly after reading 2-3 blog entries on Medium. It's like most programmers who blog try to justify their point of view as much as they can. Some examples are:

\- People who brag about working 14+ hours a day and say that anyone who thinks otherwise is ""pedestrian"".

\- People who brag about how they are gods because they are a CEO and that junior devs are idiots compared to them.

\- People who brag about how college grads wasted their life by going to college because self-taught web-development is the future and everything else is the past.

&#x200B;

I mean, software development is though as it is, why make it even more hard and depressing by being such a douchbag online? Is this something common or what? Even on this subreddit there are some people like the ones I've metioned... look [at the post regarding personal projects](https://www.reddit.com/r/cscareerquestions/comments/avt2ig/whats_the_obsession_with_personal_projects/), the OP said that someone called him out for not wanting to code 24/7. When I commented on that some people called me out for not wanting to do it too.

&#x200B;

**Edit: I wasn't referring to Stack Overflow or Q&A sites where people don't do your homework for you. That's not toxic, that's just the way life goes. I was referring mostly to forums/blogs related to software development discussion,**

**for example where people tell you ""what you need to know about X"" or  ""what I think about X"" and then bash the hell out of everything they don't like.**

Exhibit A:

[This comment on a post on Medium.](https://medium.com/@tomharrisonjr/you-can-read-my-bio-or-look-at-my-avatar-i-am-old-3d70709a1c96)

Are people like that Tom common in this industry?

&#x200B;",1551576068.0,2019-03-02 20:21:08
654,Fastest way to become employable?,591,i4pg2x,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i4pg2x/fastest_way_to_become_employable/,251,"Greetings all, I am a 25 year old CS major who has never held a full time job before and it's gotten to the point where it's starting to drive me insane and I've been losing sleep just thinking about it and feeling like I've royally effed my life up. I have graduated back in 2019 and still haven't been able to get my foot in the door even to this day. I feel like I've been spending too much of that time pursuing dead ends such as reading about machine learning(which you'll need a master's degree to get into apparently). I think my resume could be trash since I literally have nothing to put there besides having a GPA of 3.5 and some class projects, even then I doubt it matters much. Recently, I have applied with a company that's supposed to be the last resort for CS graduates(Namely, FDM group), due to their two year contract, initial 4 months on minimum wage for the training period, and 40k-45k CAD salary in these two years and yet I have been rejected after finishing their last interviews. Now, I am wondering if it's possible for me to land an entry-level software development position, perhaps even land a job opportunity that's better than FDM group's, within 6 months provided I go ham on leetcode, personal projects, and Github in that time frame. For Github, I have looked into it but a lot of the projects there look incredibly complex and difficult to dive into and I'm not sure exactly how I'm supposed to get my foot in there. In addition, I'm wondering if there's any good resources out there to help practice with interviews since I get nervous as hell and can't talk properly during interviews nor can I think straight when doing white board questions.",1596739155.0,2020-08-06 14:39:15
655,I got my first full-time SWE offer!,596,8zvmgu,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8zvmgu/i_got_my_first_fulltime_swe_offer/,103,"Just wanted to say thanks to this community for all of the solid advice over the last few years. I am interning this summer at a big company in my area, and accepted an offer for a full-time SWE position at an even bigger company! The pay is great and the benefits are something most people would envy. I still have 2 classes to take in the fall before I graduate, but the manager said he will work with my school schedule. 

Again, huge thanks!

Edit: Wowwww thanks everyone!",1531950321.0,2018-07-18 17:45:21
656,Company just laid off 10% of the employees yesterday. Do I find a new job now or wait to be laid off so I can collect unemployment,595,ftlbxr,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ftlbxr/company_just_laid_off_10_of_the_employees/,207,"Company just laid off 10% of the employees (company of 200 people... now 180). We dont have a lot of liquidity (or any, I think). 

Should I wait to be laid off, or should I find a new job now? If I wait to be laid off, i can collect unemployment, but the job market might be a lot more competitive. If quit now and find a new job, I cant collect unemployment.",1585858647.0,2020-04-02 16:17:27
657,Unsolicited advice to new and aspiring programmers from a grey beard,587,47r9kc,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/47r9kc/unsolicited_advice_to_new_and_aspiring/,159,"Here is some advice I wish I had gotten 25 years ago.  I'm sure some of this will be controversial.


**Prioritize your health**
You are about to start on a career that is tough on the body.  Not in the same sense that a physical labor job is.  But, the human body is not designed to sit all day or deal with chronic stress.  Before you get into bad habits start making good health a priority for you.  Eat well, exercise regularly and learn to deal with stress.

I highly suggest reading [The Health Programmer](https://pragprog.com/book/jkthp/the-healthy-programmer).


**Learn development fundamentals**
Technology is what we do.  So, you'd think that learning the intricate details of your favorite language or framework.  But, things change so quickly that it's difficult to become a master of them.  I've found that it's not worth it to bother.  Learn the fundamentals of CS - data structures, algorithms, etc. - and how to write good software - how to design api's, create maintainable software, testing, etc.  These are things that rarely change, or change slow enough that you can truly master them.


**Learn how to identify and solve problems**
Fundamentally, that's all we do - solve problems that a business has.  There are many people who can code up the most beautiful UI, or the most scalable backend, etc., but don’t actually solve any pain points for their users.

I’m constantly surprised at how much money businesses will throw at technology that doesn’t actually make their life easier, or make them more money.


**Do important work**
This will probably be controversial, but it's based on my experience.  Most work in this industry is a complete waste of time.  Creating a new crud app that lets somebody input some accounting info because the company doesn't want to invest in a ""real"" system wastes your time and talent.  You will quickly become disenchanted, bored and then want to leave.  In the off chance that you can't leave (maybe they pay really well), you might end up bitter and 

Find work that you actually believe in.  Work is difficult enough, without doing stuff you don't want to do.  Doing work you love will make the world of difference to your mental health, your performance and your overall life.


**Soft skills are more important than you think**
Many of us got into this line of work to get away from people.  But, if you can't communicate well with others you won't get very far (you will end up stuck being a ""coder"" - something that might sound OK now, but won't in 10 years)


**Learn how to teach**
This is somewhat related to above.  Eventually you will become more senior and maybe one day you'll be a team lead.  At that point in your career it will be important for you to be able to show others how to do what needs to be done.


Now, let the down votes fly... :)


",1456548885.0,2016-02-26 23:54:45
658,I just walked out of my first developer interview in the middle of taking a programming test,597,3mdghh,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/3mdghh/i_just_walked_out_of_my_first_developer_interview/,147,"Because I heard the boss cussing out one of his developers in the next room! Wow! He was screaming at him for 5 straight minutes! He was saying things like, ""What the f--k is wrong with you, you piece of shit! I don't have time for your bullshit! Don't f--king tell me something is done when it's not! If you have a f**king question then ask me!""

 I was in shock! I left my code on the screen and walked out and got in my car and drove home! Ridiculous! 

I was excited for my first interview, and thought I was doing well on the test (some JavaScript stuff). But wow! 

Time to keep looking for a job.",1443237782.0,2015-09-25 23:23:02
659,"Started my first full-time job a few weeks ago. After just a few hours at work, my brain is fried and I am completely mentally drained. Will I get used to this?",592,clxqnp,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/clxqnp/started_my_first_fulltime_job_a_few_weeks_ago/,181,"I have a hard time getting any work done after a few hours. Staring at the screen for so long is frying my brain. By the time I get home, I can't even do the stuff I want to, like play guitar, because I'm mentally exhausted. Is this something that will go away or get better with time?",1564962346.0,2019-08-04 19:45:46
660,Some figures from my summer 2019 internship search,593,ah24t0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ah24t0/some_figures_from_my_summer_2019_internship_search/,166,"CS majors, if you're still looking for an internship next summer, I thought I'd give you some numbers from my experience. I'm too lazy to make a cool infographic like everyone else, but here are some numbers from my summer 2019 CS internship search, which I began in November:

* **190** applications
* **133** different companies
* **129** ghosted applications
* **58** rejections
* **3** offers
* **1** accepted

***Edit:*** Since I left out a lot of helpful information (oops!):

* **School:** No-name state school in the midwest
* **Graduation:** December 2019 (senior)
* **GPA:** 3.84/4.0
* **Previous internship experience:** none

Some approximate interview numbers:

* About 20 Hackerrank challenges
   * These seemed to result in about 40% rejections, 40% ghosted, 20% invitations for interviews (just an estimate)
* 4 phone interviews
   * One rejection after this
* 3 video interviews
   * Got offers from all three of these companies.

Finally, about the internship:

* **Location:** NYC
* **Company:** Not big N, but you have probably heard of it
* **Role:** Android developer
* **Time frame:** 3 months in summer 2019
* **Compensation:** $7,060/mo + $1,800/mo for housing (before taxes), and flights to and from NYC

***Edit 2:***

[Here's my resume](https://i.imgur.com/i0rED42.png)

[Here's the list of companies I used to find openings](https://github.com/j-delaney/easy-application)",1547785917.0,2019-01-17 23:31:57
661,Lifestyle in different tech hubs,594,hhnxx4,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hhnxx4/lifestyle_in_different_tech_hubs/,329,"For those of you who’ve lived/worked in different tech hubs in the US (Silicon Valley, Seattle, LA, NY, etc), what are your thoughts on the pros/cons of living in those cities? I’m particularly interested in the experiences of those who’ve had the opportunity to experience multiple different locations. For reference, I’m a 25M going to school in LA for CS and will be looking for a software job in 2021 when I graduate

EDIT: assuming a post-covid world where we can work and play with others in person again",1593412324.0,2020-06-29 02:32:04
662,Can I still be a decent Software Engineer if I'm slow and not intelligent?,590,9iarz3,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9iarz3/can_i_still_be_a_decent_software_engineer_if_im/,261,"Hi r/cscareerquestions. 

I'm a sophomore computer science student. Long story short, I am not very smart as compared to some of my peers. I say this because it generally takes me 4-5x as long to solve problems compared to them. I generally have to put in wayy more effort than others to learn something new and my retention is not that great either. I am however very passionate about what I do but it's just very frustrating when I can't keep up with what they do.

Is it possible to be a Software Engineer and not great at problem solving/ algorithms? Have any of you overcome this problem?

edit: Thank you for all the helpful responses! This has definitely been eye-opening.",1537757141.0,2018-09-23 22:45:41
663,Risk work-life balance for triple salary?,590,aw9wse,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/aw9wse/risk_worklife_balance_for_triple_salary/,276,"Received an offer from a FAANG for ~$240k. That's obviously huge. However, the team that offered it to me at this particular company has a ... less than stellar reputation (from what I can tell just by talking to people at the company) regarding WLB and internal toxicity.

Their offer is triple my current salary. That's fucking massive. Do I risk it for the biscuit?",1551504214.0,2019-03-02 00:23:34
664,"I made it guys, thank you for all the support",585,gcsako,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gcsako/i_made_it_guys_thank_you_for_all_the_support/,65,"Hi everyone,

I kind of lost of my previous account (dont remember the email), but [this](https://www.reddit.com/r/cscareerquestions/comments/bpqbei/can_i_salvage_this/) and [this](https://www.reddit.com/r/cscareerquestions/comments/cdzmvd/rant_bombed_my_first_one_so_hard/) are previous posts I made.

A tldr of the 2 posts is, I failed a course during my Masters (yes, my Masters), had no experience before, couldn't get interviews, studied hard, got few interviews, failed them over and over.

Now, I got an 8 month internship at a pretty huge bank. I know the title could have misled you into thinking I got a FT offer, but no, this is my first ever work experience. It won't stop here though, I've studied and struggled for way too long to leave it at an internship. I'm going to enter the SWE field as a full-time once my internship ends, one way or the other.

I've never been happier in my life you guys. I've lurked in this thread a lot, I know a lot of you are struggling with the pandemic and finding jobs. Please understand that you're not alone. It took me a long time to get over my self-pity, but when I did, I was way more efficient with everything. Did I get MORE interviews? No. Did I do better in the ones I had? Yes.

Anyways, I have no idea what I'm saying, I'm just so happy. I start tomorrow. :)

Thank you to everyone who supported me back then, and to everyone who still supporting people like me right now.",1588547911.0,2020-05-03 19:18:31
665,"I did it! (With no degree, at all)",583,f3o4fc,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/f3o4fc/i_did_it_with_no_degree_at_all/,126,"Today I received my official offer letter for Associate Software Engineer, 75k salary. I have no degree, not even a gen ed AA. I hope my story will encourage some others. 

Edit: I'm a 29yr old woman. I work in Seattle and commute about 2hrs one way every day. I was making 52k. 

My background has been customer service. Since I was 18, working in call center type roles. 2.5yrs ago, I took a job at a tech company doing a not-really-techy job. I worked with customers to customize their semi-custom wordpress templates websites. It was very customer service heavy and we didnt do any heavy customizations. I learned html and css (I had learned in HS, but that was back when inline styling was acceptable and tags were in all caps). I started to learn some JS and jQuery, but my company was acquired and my team was laid off, leaving me to do the job basically on my own. 

I got to know people in the tech org and developed a friendly relationship with the director of Engineering and a bunch of devs. The director is the biggest reason I'm where I am now. He was a huge advocate for me, he got me moved from my sad isolation up to the engineering floor so I could be around more tech people. When one of our junior engineers quit, I went to him and said ""I want her job. Seriously. How do I make it happen?"" And he told me to learn ruby and rails and some basic stuff. I started learning ruby, totally on my own. I used ""Learn Ruby the Hard Way"" but knowing I know now, I wouldnt recommend it. 

I started going through it in May, finished around July. The director quit at the end of May, but had made the plan known enough that the other members of leadership knew they needed to follow through on it, even though they didnt know how to do that. There wasnt a plan put together before he left and things were in flux. This was all new territory for everyone involved. It also turned out that they had been planning to restructure my job and basically get rid of my position, so moving me around worked out for them.

 In August I joined one of the dev teams and basically learned full time while helping where I could. It wasnt particularly effective. They told me originally that I would get up to speed and then they would promote, then they changed and said I had to be ready by end of year. I floundered for a while, trying to meet standards that hadnt been decided, let alone communicated to me, and wondering what was going to happen with my job. 

Mid October one of the senior engineers on another team found out what was going on and insisted to mentor me. I would not have been successful without him. At the end of October I got a 4pg list of things I needed to know to be considered ""jr dev"" material. It was a huge range of things, including some of our internal tools, interactive rebase, polymorphism, ActiveRecord, concerns and presenters, etc. I studied my ass off and completed an informal evaluation with our CTO and 2 of my work-friend devs in the end of December. I made the deadline! Wooh! 

Wrong. At the end of the evaluation, it was announced that I would now have a part 2 in January. I had 3 weeks to learn one of our services. Too bad the only guy worked in it was on vacation for 2 of those weeks. That evaluation ended up being pushed back a week, and I passed that with flying colors too. 

The last month I have been continuing to contribute to sprint work while my status was in limbo. Thankfully the director (the one still working here, not the guy from the beginning) did all the negotiating for me and sent my offer to me earlier today. 

In less than a year, I learned a new skillset and got a 42% pay raise. I didnt go into debt to do it, i didnt take time off. 

I realize that a lot of this story is ridiculous and totally unusual, but to **tl;dr it - If you want to work in tech, get a tech adjacent job and network. I wouldnt have made it this far if my company didnt have a weekly board games event, which is where I met the director and devs. And it is possible to do this without a degree or a bootcamp.**

ETA:  yes, I do realize there was luck involved in this, things had to come together. But please dont discount my hard work. I worked my ass off and I advocated for myself constantly in a way I never have before, and it was very difficult and uncomfortable. Think of the amount of luck involved in getting a job the ""normal"" way.",1581690099.0,2020-02-14 09:21:39
666,Is working at a top tech company really that great?,583,cqhchi,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cqhchi/is_working_at_a_top_tech_company_really_that_great/,348,"Getting hired at a Big N (Google, Facebook, Microsoft, Amazon) seems to be the main goal for a lot of people. Kind of similar to getting into a top school for college. I’m wondering how fulfilling working at one of these places is though. 

After college, I worked at a software company (global, but not Big N) for 2 years. It wasn’t a bad company and the people I worked with were nice and professional. I had a group of other new hires that I would hang out with occasionally. We had a ping pong table, dress standards weren’t super high, I wasn’t micromanaged, and could even work at home occasionally. 

However, I found the work, technology, and field that the team I was on to be very boring and unfulfilling. I was basically a .NET engineer and worked in C# and C++. We had code/tools/engines written as far back in the late 80s that a lot of our products were built upon. I was fixing bugs and extending functionality of existing features. I realized that if I wanted to become a main contributor on the team, it would probably take me 5-10 years to learn all the foundational technology and pick up the necessary domain knowledge. Sure I would gain skills and experience, but a lot of it would also be specific knowledge that wouldn’t translate to any other company.

I was pretty frustrated and eventually moved to another company that I enjoy much more. The team is much smaller and newer, so it’s much easier to make an impact and to learn the structure of the project.

In my mind, the issue is with working at a large enterprise company on a team that’s been around for 20-30 years. Working at a Big N, isn’t there a very likely possibility that the same thing would happen? No doubt there are probably a lot of cool teams sprinkled throughout. Isn’t there a good possibility if you joined google as a new hire you’d just be put on the “maps” team with a group of 5-10 people working on some microservice. Or if you joined Microsoft you’d be working on supporting some feature in windows 7 or something? Maybe that’d be interesting. Or maybe you’d have to go slogging through millions of lines of source code that was written in the 90s. 

Is working at a Big N really that great?",1565852111.0,2019-08-15 02:55:11
667,[UPDATE] Started a graduate software engineer position 2.5 weeks ago and already had a warning for my slow performance,587,bx5mih,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bx5mih/update_started_a_graduate_software_engineer/,139,"[Original post here](https://www.reddit.com/r/cscareerquestions/comments/bjse8b/started_a_graduate_software_engineer_position_25/?)

That post was 5 weeks ago, yesterday I got let go because they “couldn’t support me”. I’ve been working quietly in my spare time doing some self-learning around JavaScript frameworks I was working with but I think they made up their minds a while back. 

I’m half in shock, but the other half was anticipating it. I’ve had my eye on available jobs for the past week but I feel awful that I’m in my early 20s and now I’m unemployed. I haven’t even told my parents yet. On the bright side, I learnt at hell of a lot in 2 months about JS and also what to ask in interviews!

If anyone has any useful websites for London/UK job listings, or knows any entry level software engineer jobs listing soon I’d be eternally grateful. I’ve been looking and applying all day today but tips are always welcome. 

Thanks for your support on the previous post, here’s to the future.",1559786202.0,2019-06-05 21:56:42
668,"Amount of third party software is driving me crazy, does anyone else feel this way?",584,g6xy95,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/g6xy95/amount_of_third_party_software_is_driving_me/,266,"I work on a team where the senior engineers make all the calls for what tech we use. Whenever there is a new requirement for a feature, the solution that the seniors demand we use is always some bloated third party library. For example, I get a simple task to make a Tooltip saying that a new feature will be implemented soon on the website. I think: ""Cool, a few lines of CSS, maybe some Javascript for positioning, and we're done"". However, I've learned  that the ""proper"" way to make a tooltip is to fire up NPM and install another 1000 lines of random module code. The library we're supposed to use is a huge, bloated tooltip library that ""automatically adjusts"" the tooltip, even though it is only supposed to appear on top of the text. We also can't write standard CSS, we have to use ""Stylized"" Javascript, which adds another 1000 modules to our project, all for a task that can be completed in a few lines of standard CSS.

After that, the senior engineers will un-ironically complain that our project takes a very long time to build. 

Sometimes I feel like my job is to just  copy and paste code written by some ""expert"" instead of writing it myself, and that is deflating. Anybody else feel like this?",1587715121.0,2020-04-24 03:58:41
669,Has anyone been ever asked to turn over ALL personal electronic devices to ensure no intellectual property theft when leaving a job?,590,8zh510,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8zh510/has_anyone_been_ever_asked_to_turn_over_all/,229,"Long story short, company Foo i work for is in the final stages of an acquisition by Company Bar. I am not continuing on with working for Company Bar, since i don't want to relocate to keep my job. My current position has pretty much revolved around our Cloud infrastructure (\*-ops), and as a backend dev for some of our legacy services.

Today is my final week of work, and i was pulled into a meeting basically telling me i need to turn over all my electronic devices. Including any personal electronic devices i have at home (Desktop/Tablet/Cellhpone/etc) to their IT team, who will go and ensure no company IP will remain on my devices.

Their entire reasoning for this is, revolves around the fact that they have a record of me using the work VPN from home over the last several months (i have always used my work provided laptop, and work provided cellphone), and apparently the mac id, does not match their records (they refused to divulge the mac address they have that doesn't match my work devices).

Apparently i have 48 hours to provide them with my electronic devices, otherwise they will serve me with 'legal papers',  frankly i think they can go pound sand.

There is nothing about personal electronic devices in my employee contract. Does anyone know if this is allowed (NYC)?

\*Update\* I told them:

* No i don't have any IP on my personal devices
* No they cannot search them

They did not seem very happy, and gave me a huge amount of bullshit about how this is the standard operating procedure, etc, etc. However they didn't fire me nor did they threaten legal action anymore. ",1531821912.0,2018-07-17 06:05:12
670,I am a terrible developer,580,eccrmw,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/eccrmw/i_am_a_terrible_developer/,166,"Edit: I do test my code, but maybe not the right and not enough.

I also agree my communication skills are lacking and I need to learn not to take things personal. 

I also need to ask for feedback before it is given. Everyone is busy/

I just started my first job as software developer,8 months in. I work for a small company with a group of 6 IT people. We all test each other's code. I am very new to this environment so screwed up the first few months. Listening to music while working, not testing my code before checking in and deleting a record from the database. Recently, while at a weekly meeting, I was called out on the spot for checking in changes without commenting out code properly. That very morning before the meeting, my manager did not greet me as she does every morning and basically avoided me till the meeting.

My only problem with all of this is, I was not shown the code i screwed up on. i felt that was not helpful as I need feedback and evidence to not make the same mistake again.

My question is when and how can I get better at developing, testing? when Do I actually get good?",1576705288.0,2019-12-18 16:41:28
671,"Having worked at Big-N companies and startups, I'm getting pretty tired of things and not sure where to go from here.",581,d788o3,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d788o3/having_worked_at_bign_companies_and_startups_im/,175,"Maybe I'm just burnt out in the field? Not sure. For a long time I thought working for Google, Intel and Oracle would be pretty great, but after a few years at each I realized they were all boring as shit. I was surprised by how many shitty engineers managed to stick around as well. The amount of dead end projects I worked on, that were in no way interesting or challenging, was the reason I finally decided to leave the whole Big-N scene.

So I left, and I started working at a startup. It was a lot of fun honestly. We were figuring things out, and I was working with a really smart/capable team of people. Being part of every aspect of the company was great. Infrastructure was a team discussion. Code was a team discussion. Every aspect of engineering was a team discussion. And we were working with cutting edge technologies. Not some internally created garbage that has no use outside of the company.

But then, we got bigger, and things became more like working at the Big-N companies. Endless meetings, projects that go nowhere, useless project managers, etc. After a while, it got boring, so I decided to leave.

The problem I have is that I want to build things. I want to actually work on things that are interesting. However, I also want stability. I don't want to hop around from company to company; yet, I can't seem to find a stable company with a stable product that isn't dreadfully boring to work for. Anyone in their career who has been at this point, how did you deal with it? Do you just go for the comfort of working on boring shit yet having a stable job, or what?",1569086003.0,2019-09-21 13:13:23
672,Depression Far Too Common Among Tech Pros: Survey,588,a3zp2r,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/a3zp2r/depression_far_too_common_among_tech_pros_survey/,262,"Sorry if already posted. But this is too concerning if it hasn't been yet...[https://insights.dice.com/2018/12/05/depression-tech-pros-common-study/?CMPID=SM\_FB\_UP\_JS\_US\_OG\_&utm\_source=Facebook&utm\_medium=Social\_Media&utm\_campaign=Advocacy\_Ongoing&utm\_postid=6f8557e5-b212-474b-a5d2-18bc5330b07b&fbclid=IwAR30\_QTYKxHSVlCE0gXWLtGdoT62XC5jcbnSokQK6XkW-9XyNb5Itjlu8wM](https://insights.dice.com/2018/12/05/depression-tech-pros-common-study/?CMPID=SM_FB_UP_JS_US_OG_&utm_source=Facebook&utm_medium=Social_Media&utm_campaign=Advocacy_Ongoing&utm_postid=6f8557e5-b212-474b-a5d2-18bc5330b07b&fbclid=IwAR30_QTYKxHSVlCE0gXWLtGdoT62XC5jcbnSokQK6XkW-9XyNb5Itjlu8wM)

My thoughts:I've been in tech for 20 years and I can see why this survey may be accurate. I don't have it because I honestly think I have other hobbies that get me outside, exercise, a good spirit/soul and having a family.... all of this helps.

&#x200B;

If there are software engineers that code all day, go home and play video games to midnight, go to sleep until 7am or so... and repeat day in and day out you could eventually fall into the depression category. Do something else besides being stuck in front of a monitor (video games included obviously). Get exercise, talk to people not in IT, go to church (if that's a thing for you- just a suggestion), and by God turn on the lights and open up the blinds. The vampire nature is not helping.

&#x200B;

Oh and learn to say NO to people wanting you to do more work.",1544216842.0,2018-12-07 16:07:22
673,How can I advance my software engineering career if I'm a slow-thinker who doesn't contribute much at meetings?,584,8bvpu3,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8bvpu3/how_can_i_advance_my_software_engineering_career/,93,"Hi guys,

This has been something that's been bothering me for years. I'm a slow-thinking engineer...I guess framed positively: (I've heard) the term ""deliberate"" engineer. I don't consider myself intellectually incapable of coding - went to an Ivy League school to major in a technical subject, if that counts for anything. And I've been working as a dev for about 3 years now, making above average salary at a unicorn.

I like to think things through, visualize them, diagram them, soak things in on my own time, etc. This has caused a tremendous amount of distress in even routine things as planning meetings, and especially when we have to discuss on the spot the implementation of business decisions, and consequent back-and-forth with product managers. I have difficulty following along and contributing at planning meetings b/c everyone goes really fast, and I'm always playing catchup...it sucks that I have to continually ask questions and slow down the flow of the meeting, so often I end up staying quiet.

I enjoy coding itself, but I fear this weakness will severely set me back in my career - and honestly it affects me mentally, making my job a drag anytime I come out of a meeting. I know I can perhaps adjust my perspective, but realistically I'm not sure if it's my particular company's environment or something else. I try to improve at it, but at my rate, I do think I'll always lag behind somewhat, so I'd prefer to be in a position where it's de-emphasized, if such positions even exist.

Are all coding jobs like this - or is this something that varies company to company? Are there any specialties (""hardcore"" backend engineer maybe?) that don't require constant communication with product in face-to-face meetings? I'd also love to hear your experiences if you've ever experienced similar sentiments...thanks all!

",1523613962.0,2018-04-13 06:06:02
674,Why is on-campus recruitment so much easier to get in than off-campus for the same role by the same person?,587,gpw16y,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gpw16y/why_is_oncampus_recruitment_so_much_easier_to_get/,126,"Top companies like Google and Microsoft end up taking freshers and interns from my university but they don't care about the skills you have or projects you've completed. But if I apply outside, they sort of expect you to be an expert in the field and list down a wide array of skills necessary.

So the process is also very short on campus. We have a maximum of 2-3 rounds per company and at most 2 one hour interviews but off campus, people usually have 7-8 rounds involving DSA, system design and even behavioral rounds.

Why is there such a stark contrast? Why do companies even take people who have nil projects and skills just because they passed the much easier and shorter interview rounds but reject people who aren't simply but the best off campus who could end up doing much more work?",1590378393.0,2020-05-24 23:46:33
675,"Had four amazing intern offers last month, and I accepted one offer. Today, that internship was cancelled too, and I have no internships today. I’m feeling so down and depressed.",585,fwo9q0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fwo9q0/had_four_amazing_intern_offers_last_month_and_i/,72,"Worked so hard to get 4 offers, accepted the best one and that got canceled. To all the guys who lost their internships, I feel you. And to all the great companies who are trying to continue the internships in some form, good on you! I just hope the company that cancelled it would’ve informed me a little early so that I could continue the job search. Will still try to find any opportunities tho.",1586308157.0,2020-04-07 21:09:17
676,My startup says they have money for three more months of operations and nothing more. Should I be worried about my job?,585,fnmvde,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fnmvde/my_startup_says_they_have_money_for_three_more/,212,"I have been working at this startup for over 7 months, I joined as a fresher. I have worked on two projects, one with a senior developer and one on my own besides various bug fixes. Generally I feel pretty useful but during the last three weeks I have felt that I don't contribute a enough because I have just been working on tiny fixes which often involve me asking a senior dev for input. The last project I worked on was towards end of February.

The CEO sent us all a mail this morning telling us about how we would go through this situation and how loans from the US and Australian government are an option. 
Considering my company has three months of bandwidth, should I be worried about my job? My startup is a product based company that, software that is sold to governments across 5 major countries.



Edit: its more of a small company than a startup and has been around for 10 years. I mentioned startup on the title because what they call themselves. We have a dev team of 40 people and another 40 sales/marketing people. We are spread across 5 countries. So I always got a feeling that we are on good footing, but this latest mail where they talk about how they have stopped hiring and are talking about cost-cutting is a bit worrying.",1585009791.0,2020-03-23 20:29:51
677,Nobody wants to give me any work to do?,586,dot8xc,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dot8xc/nobody_wants_to_give_me_any_work_to_do/,210,Anyone ever had this situation? You go round asking for work and get nothing from your managers. They seem content to pay me to do nothing.,1572399563.0,2019-10-29 21:39:23
678,Is anyone here a time thief?,583,athza8,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/athza8/is_anyone_here_a_time_thief/,280,"I work remotely for a big corporation. Sometimes the management sucks and doesn't distribute work, leading to me having a ton of free time. I would consider myself a time thief because I'm not putting in the required time per week (salaried worker but 40 hours is the minimum and must be tracked).

The issue is, I don't consider this a bad thing because I simply am not receiving many tasks from the very many managers who are above me. I also have a lot of guilt from this, but the sweet free time is just too good! 

Is anyone else a time thief?",1550873148.0,2019-02-22 17:05:48
679,Studying Leetcode while on Depression/Mental Health Issue?,581,igqoha,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/igqoha/studying_leetcode_while_on_depressionmental/,128,"Hey

I was recently diagnosed with depression and everyday is a struggle for me. I don’t have the motivation to do anything at all. 

I have a current job (which I dislike) and I’m trying to transfer to another company as an entry/mid level  software engineer. However, I’m struggling to study Leetcode and HackerRank because I’m finding it hard to find motivation for it. I’m also constantly thinking that I will fail any future interview and that demotivates me even more.... 

Has anyone here been through this? Anyone with a medical condition (like ADHD or depression, or anything in general)? How were you able to manage studying and acing your interviews?

EDIT: wow I really did not expect to see a lot of responses. I want to thank everyone for the support shown. It means a lot. I guess you all are right... I’ve been neglecting my mental health the past months/years and focusing more on my job hunt... I will take it one step at a time now",1598438375.0,2020-08-26 06:39:35
680,My regret of choosing to work at a no-name startup instead of NASDAQ,586,etq8ku,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/etq8ku/my_regret_of_choosing_to_work_at_a_noname_startup/,289,"So about a year ago, I posted on this sub that I got two SDE offers after graduation - one from NASDAQ and one from a no-name startup and was confused as to what to choose.

The opinions on reddit were quite varied, with a lot of support to go with the startup since I'll get a lot more experience and can wear more hats. A lot of people said NASDAQ wasn't even a Big N company so it won't matter to recruiters.

So I've been working at the startup for over a year now and here's the deal. The startup has definitely been awesome in terms of experience. I've had a chance to work with literally everything I wanted to work in - AI, Machine Learning, Python, Android development, Kotlin, backend work with C#/.Net and even DevOps stuff. There's absolutely no way I could've done all that in NASDAQ since it was going to be a full-on Java role. No doubt about that.

But I regret not going with NASDAQ. Why? Because ultimately, name does matter.

I've been wanting to move to Europe recently and applied to about 10 companies in Germany as a Junior Dev. Got 5 rejections straight up, no hackerrank, no skype calls, nothing. And the other 5 didn't get back to me. I was quite shocked since I'm currently working with the hippest tech stacks and hottest trends in the market.... figured I would at least get a chance to interview.

So then I changed my resume, and put my current job as NASDAQ with some boring Java work mentioned. Applied to 10 other German companies as a Junior Dev. Didn't hear back from 6 companies, got rejected by 1, BUT 3 companies actually reached back and were interested to proceed to hacker ranks / phone interviews.

So do I regret not going with the big name company? You bet I do. Ultimately, prestige and name brands do matter. Your experience is nice, and probably helps in your hometown. But if you have plans to move about internationally, a big name on your CV definitely opens doors..... regardless of how boring your tech stack was.

Hopefully this helps some other graduate who's in the same position I was in last year.",1579984352.0,2020-01-25 15:32:32
681,I scraped data from the intern salary sharing threads and made a visualization out of it,579,ba6j9t,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ba6j9t/i_scraped_data_from_the_intern_salary_sharing/,226,"[https://i.imgur.com/WjV19xq.png](https://i.imgur.com/WjV19xq.png)

&#x200B;

So I was somewhat bored over spring break and I thought it would be fun to extract, clean, and display some of the salary data that's been accumulating over the years in the 'official salary sharing' threads. I also have a somewhat vested interest in interpreting this data, since I am a student myself and will be an intern this summer. 

&#x200B;

Do note that this graph only shows salary data **averaged** across each company. Some companies only had one salary listed, and thus, may not be accurately represented by the salary sharing data. For example, Two Sigma is listed as over $80/hour because of one salary, but in reality, most interns will not get that (there was a bidding war for the person with said offer). If you are unsure of why something seems off, I would advise looking at the raw data below, since the graph was constructed from whatever is listed.

&#x200B;

I choose to ignore additional details like housing stipends and signing/relocation bonuses. Everything was converted to hourly rates by using the following metrics: 40 hours/week, 4.35 weeks/month, 52 weeks/year. matplotlib was used to plot the data.

&#x200B;

This was originally posted earlier under a different title, but I re-uploaded it after fixing a few things.

&#x200B;

Offer data in JSON format: [https://pastebin.com/jUQB6bX4](https://pastebin.com/jUQB6bX4)

GitHub repository: [https://github.com/dmhacker/cscq-salaries](https://github.com/dmhacker/cscq-salaries)",1554599543.0,2019-04-06 21:12:23
682,"If StackOverflow went down permanently, how long would you last in software development?",576,7zwe7h,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/7zwe7h/if_stackoverflow_went_down_permanently_how_long/,240,,1519505366.0,2018-02-24 15:49:26
683,"[OFFICIAL] Salary Sharing thread for NEW GRADS :: September, 2020",579,itqq04,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/itqq04/official_salary_sharing_thread_for_new_grads/,550,"**MODNOTE:** Some people like these threads, some people hate them. If you hate them, that's fine, but please don't get in the way of the people who find them useful. Thanks!

This thread is for sharing recent new grad offers you've gotten or current salaries for new grads (< 2 years' experience). Friday will be the thread for people with more experience.

Please only post an offer if you're including hard numbers, but feel free to use a throwaway account if you're concerned about anonymity. You can also genericize some of your answers (e.g. ""Adtech company"" or ""Finance startup""), or add fields if you feel something is particularly relevant.

* Education:
* Prior Experience:
    * $Internship
    * $Coop
* Company/Industry:
* Title:
* Tenure length:
* Location: 
* Salary: 
* Relocation/Signing Bonus:
* Stock and/or recurring bonuses:
* Total comp:
        
Note that while the primary purpose of these threads is obviously to share compensation info, discussion is also encouraged.

The format here is slightly unusual, so **please make sure to post under the appropriate top-level thread**, which are: US [High/Medium/Low] CoL, Western Europe, Eastern Europe, Latin America, Aus/NZ, Canada, Asia, or Other.

**If you don't work in the US, you can ignore the rest of this post.** To determine cost of living buckets, I used this site: http://www.bestplaces.net/

If the principal city of your metro is not in the reference list below, go to bestplaces, type in the name of the principal city (or city where you work in if there's no such thing), and then click ""Cost of Living"" in the left sidebar. The buckets are based on the Overall number: [Low: < 100], [Medium: >= 100, < 150], [High: >= 150]. (last updated Dec. 2019)
        
High CoL: NYC, LA, DC, SF Bay Area, Seattle, Boston, San Diego
        
Medium CoL: Orlando, Tampa, Philadelphia, Dallas, Phoenix, Chicago, Miami, Atlanta, Riverside, Minneapolis, Denver, Portland, Sacramento, Las Vegas, Austin, Raleigh

Low CoL: Houston, Detroit, St. Louis, Baltimore, Charlotte, San Antonio, Pittsburgh, Cincinnati, Kansas City",1600268534.0,2020-09-16 11:02:14
684,I think I'm headed for a career suicide.,578,6xahmn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6xahmn/i_think_im_headed_for_a_career_suicide/,173,"EDIT: I am slowly going through the responses I've gotten.  I'm sorry my own answers are a bit sparse.  Oftentimes I don't have anything to contribute to the conversation/suggestion yet and I need to think for a while before sending my reply.

Hi.  I'm on a throwaway.  I'm a programmer with 10 years of experience.

I initially studied in software engineering in university but quickly found it was all theory and no practice, so I switched to the more hands-on ""computer science"" program in a trade/craft school, and passed with high marks after a few years of fairly unchallenging courses.

I'm not one of those ""passionate"" programmers who works on side projects at home.  I'm interested insofar that I get my work done cleanly and properly, but once I'm home, I'm done.  I don't want to think or talk shop until the next morning.  For most of my career, the choice of language and toolkits was imposed by the people upstairs, and all I had to worry about was how to use these to make the customer happy and give them what they wanted.

I think this ended up hurting me.  While doing analysis meetings at my latest workplace, my teammates are knowledgeable about tons of things: many programming languages, database engines, cryptography, unit and integration testing - the works.  They have lengthy discussions about the pros and cons of each.  I know two programming languages and two database management systems.  If I was asked to make a comparison between them, I wouldn't know where to begin.  The thought of which language, which DB, which whatever to use on a given project has never once occurred to me.  I have next to nothing to contribute in meetings on the level that my teammates can.  I feel like the stupidest, most inexperienced person in the team.  When came time for my yearly evaluation, I was told my skill level was ""junior, maybe intermediate in some areas"".

After ten years of being a programmer.  Being told that felt like a kick in the gut.

I tried reading some ""hacker news"" or whatever is trending in the programming world as a whole... but to be honest, most of the subject matter flies straight over my head, and the articles bore me to tears.  I can't muster up any interest in them.  I feel like I read them by obligation or duty.

Do I like programming?  I think I do.  I like to... solve problems?  Optimize processes?  I can't find the right words.  But I feel like my development was stunted, and I stopped improving after learning only the most basic of concepts.  I feel like somebody who knows all the ins and outs of a screwdriver but can't figure out which end is which on a power drill - and what the world wants more and more is people who know how to work power drills, which do the job of a screwdriver ten times faster.

My team leader told me about it.  He was stunned that I appeared to show no interest in programming outside of work.  That I read no publications, no articles, nothing of that sort.  I guess he's right.  Today's average programmer keeps abreast of all the news, stays current on the latest technologies, and whatnot.

It might sound entitled to say, but in a way, this isn't what I signed up for.  A bunch of professions incorporate training as a facet or a process of the day job.  Programming is one of the few notable professions where people are expected to improve their skills outside of company time, at their own expense.  I'm in a field where I have to fight tooth and nail for perks that are considered the bare minimum and come standard in other fields.  Negotiating salary is a magnificent bluffing game - and I am TERRIBLE at it.  Knowing other people's salary is impossible.  If I ask, they flat out refuse to answer.  Even if they're employed at a completely different company.  I feel like I have to prove my worth every day, but only have enough steam to be mediocre.

I feel like eventually I'll be that old fart who's refused to evolve, surrounded by young folks who can run circles around me.  I'll be convinced to briefly try out a latest gizmo only to throw my hands up in frustration after a few minutes.  My attempts at learning more is like pulling teeth.  I'm sitting there watching/reading the lessons and keep thinking I'd rather do *anything* except that right about now.  I'll probably either get quietly laid off once I've outlived my usefulness, or I'll finally lose whatever little of my confidence remains, and hand in my resignation to switch to another career.  Thing is, programming is the only thing I know how to do, that brings a steady paycheck.  Were my job to somehow vanish overnight and were I magically plopped back into school... I wouldn't know what to major in.  Nothing strikes my eye.  Without programming, I am nothing.  With programming, I am but little.

I wonder if what I feel is shared by anybody else.  Did I lose my flame somewhere along the way or was there never a spark to begin with?  Has anybody else gone through this?  What did you do?  How did you pull yourself out of the pit?

Help.",1504248915.0,2017-09-01 02:55:15
685,Late Bloomer (38m) trying to find a path out of retail (sub $30k/yr) into programming/tech.,580,ibax3v,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ibax3v/late_bloomer_38m_trying_to_find_a_path_out_of/,382,"I have been stuck in retail for a long time.  

Back in HS I was the type to program my TI 86 calc to do my Trig homework before the Teacher was done teaching the materials.

I never did much with it tho.  Learned some basic HTML and PHP/MySQL back in mid 2000s to do.some eBay script from a database or product was probably the extent. 

Tried community college a couple years ago and while I loved Systems Analysis, Database Structure and Querys, found the programming side of things to be so slow and rudimentary.  That I lost drive and focus when deaths in the family hit home.

Now I look at the systems at work and be like, really?  They are doing this?  Granted my knowledge is limited or I gather some limitations of different companies and programmers following one another but doesn't seem right a system for a major company has such slow aspects.  I do wonder how much is the on hand hardware/system setup 🤔.

Overall how do I turn this talent and latent skill into I employable as quickly as possible.  I'm in my late 30s making less than 35/k a year.

Update. 

Holy Hanna did I poke a bear or something 😂.

Seems many have taken an exception to what I've said or how I said it,  I don't know what to really say to you other than thanks for added attention and exposure!  I appreciate it!

For those of you with helpful and real advice.  Or those offering support and encouragement.  I am grateful.  This week is jammed for me but will go through all the replies as I'm able. 

Thank you all and stay tuned.  My update may just spur more comments and attention 😎",1597685285.0,2020-08-17 13:28:05
686,What are some red flags to watch out for when a company gives you a coding challenge?,578,k7xqut,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k7xqut/what_are_some_red_flags_to_watch_out_for_when_a/,220,"I've been on the job hunt for a couple weeks now and received a few interviews, all giving me some coding challenges after. Most of the time they're things like simple tasks on HackerRank, or some timed multiple choice questionnaire, or even a downloadable file with some pre-written code I had to fix.

I've received some fairly sketchy coding challenges too, but I can't tell if it's just me not wanting to build out basically an entire application for what's supposed to be a simple coding challenge.

Does anyone have any advice on what to watch out for when companies send coding tests?

Edit: I should've been more clear, I'm not complaining at all about the 1-2 hour tests that are dummy problems. I'm talking more about the 1 or 2 person startups, that have a shitty website, that send you a couple days worth of front-end work that needs to integrate with their very specific backend.

Thank you all for offering advice on how long these should take and what they should look like!",1607304051.0,2020-12-06 20:20:51
687,Got a Junior SE offer without prior internships!,576,f6ng3b,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/f6ng3b/got_a_junior_se_offer_without_prior_internships/,90,"I finally got a full-time SE role! This sub helped me with my job search and I would like to give back by sharing my stats and tips.


I graduated from a ~~ivy league~~ good university in May 2019, was a very bad student, did the bare minimum for most my 3rd and 4th-year courses and had to retake two courses. I spent most of my time playing video games and by the time I graduated I had no recent projects or internships on my resume.


**Stats**:

Duration: May 24th, 2019 - Feb 18th, 2020. In this duration, I applied on 46 days.

Area: Vancouver, Canada.

Applied to: 173 jobs.

Phone interviews: 6.

Coding challenges: 3.

On-site interviews: 4.

Offers: 2.


**How I got my shit together**:

1. **Created a resume and kept improving it over and over**. Asked some of my already-employed friends to share their resume with me and compared it to mine. This showed me what I'm lacking.

2. **Worked on 2 projects and added them to my resume**. This was time-consuming and it's what I started with after I realized my resume is trash.

3. **Studied data structures and algorithms every day for an hour from Dec. 2019 till now**. This really helped raise my confidence as I slowly started solving Leetcode mediums without peeking at online solutions.

4. **Practiced interviewing with friends and family**, both the behavioral and technical parts. I made sure I can confidently speak about each of my projects and what made them challenging.

5. **Go to career fairs and meetups**. The first offer I got was from a startup I applied to in a career fair (didn't accept because of the way they treated me in the on-site was very unprofessional). The second offer I got was from a meetup I went to; I said hi to a random person and asked about his company, he gave me his card and I landed the interview and got an offer that way.


This whole process took around 8 months. At times I felt it was impossible to find a full-time when I got rejected from intern roles. Towards the end of 2019, companies stop hiring and that's when it was most difficult. I was full of hope again in Jan 2020, started going to meetups every week and said hello to every person. I wish I started going to meetups back in May.


I realize my stats are nothing compared to what others posted here. Having a good school on your resume with a few projects and a lot of luck and helpful friends is important. I salute those of you who are making the best of dire situations and I hope 2020 will be your year too!",1582201035.0,2020-02-20 07:17:15
688,"If ""top-tier tech companies"" are so much better than everything else, why do many employees leave them and never look back?",578,b2b8j7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/b2b8j7/if_toptier_tech_companies_are_so_much_better_than/,251,"I've been interviewing with multiple small and mid-sized companies and startups in the Bay area, where I seem to meet a lot of engineers who were formerly at ""top-tier tech companies"".

These engineers left ""top tier tech"", not looking back, and found employment in decidedly non-top-tier companies and startups. Not just unicorns either - many of them work in companies you've never heard of.

What's confusing me is that there's a pervasive perception, here and in many other similar forums across the web, that there's a well-defined set of ""top-tier tech companies"" which are in a league of their own, far and above all other, ""lower-tier"" companies and startups where so many ex-top-tech engineers eventually land.

By this perception, any engineer at the top-tier would fight tooth and nail to remain in that tier. They might hop between different companies at that tier, but they'll strictly avoid a ""downgrade"" to anything ""lower"".

Is the common glowing perception of ""top-tier tech"" simply inflated? Are there any other factors at play here? Else, why would ""top-tier tech"" engineers be so content to leave the supposed ""top tier"" behind, and settle down in ""lower tier"" companies without looking back?",1552892449.0,2019-03-18 03:00:49
689,"Deaf, no connections. Getting frustrated. 10 years experience.",576,dzfqz6,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dzfqz6/deaf_no_connections_getting_frustrated_10_years/,129,"Hi. I'm not trying to write my life story here, but I guess some background is warranted. I grew up with hearing aids and gradually lost more and more of my hearing as time went on. Nowadays the hearing aids don't provide me with enough information to follow a conversation as I have severe to profound hearing loss in one ear and I am totally deaf in the other. This has really caused me a lot of problems finding job opportunities as I can't do phone interviews and the jobs I have managed to find have all come from personal contacts, but as I've grown older and been less able to communicate I don't have the same level of personal contacts I used to. A lot of companies tout their diversity program but in my experience, HR is and always has been allergic to those of us who require some level of accomodation in the hiring process. I always thought gaining more experience would be the cure for this, but my resume is mostly treated like nuclear waste. Any advice on how to find people willing to hire a deaf guy? The client who had hired me to design him custom circuit boards for his company is having some business cash flow problems, so I've got to find something before I'm out of money.

I only have a decade of work experience but growing up my hobby was computers and electronics, so I've been programming since I was like 10 years old. I have a degree. I can reverse engineer binaries and electronics. I have designed a sound card, 250W/channel audio amplifier (loud enough even I can hear it), a USB to RS485 PC board, and some RF stuff (I'm into radios). In addition to designing the circuit boards, I dealt with the Chinese assembly plants to populate the boards with components to complete them. I can code web frontend (I hate it, though), backend, x86/arm/avr assembly language, linux device drivers, embedded C, C++, Java, Python, whatever, I have skills. I just need to find someone who wants to hire me for them and doesn't have an HR department ready to light my resume on fire the moment I mention I can't talk on the phone.

Thank you in advance and I apologize for the rantiness of this post, the job hunt grind is really grating on me this time around.",1574349973.0,2019-11-21 10:26:13
690,Six Bay Area software engineering job offers in one week,577,air0vy,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/air0vy/six_bay_area_software_engineering_job_offers_in/,134,"[https://blog.usejournal.com/i-interviewed-at-six-top-companies-in-silicon-valley-in-six-days-and-stumbled-into-six-job-offers-fe9cc7bbc996](https://blog.usejournal.com/i-interviewed-at-six-top-companies-in-silicon-valley-in-six-days-and-stumbled-into-six-job-offers-fe9cc7bbc996)

&#x200B;

Saw this and thought it could help people here as much as it's helping me. Studying for tech interviews is hard and this guy seems to have gotten it down enough to get offers from 6 tech giants at the same time. I haven't seen anyone else go as in depth on the hiring process for these bigger companies yet.

&#x200B;",1548217453.0,2019-01-22 23:24:13
691,I worked a college career fair earlier this week - some advice,577,9fiaz8,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9fiaz8/i_worked_a_college_career_fair_earlier_this_week/,200,"I spent 5+ hours talking to prospective candidates for internships and full time positions. I met a lot of great people. I met a fair number of hard passes. Here are some things I'd recommend for career fair attendees, at least at the college level.

1. These things are meat grinders. You need to stand out, in a positive way, in a short timeframe. That being said, the bar for standing out is pretty low. We have to get through a large number of candidates in short order and I'm looking for something, anything. This environment is pretty much terrible for actually interviewing so we're going to keep it light but you have to give me something.
2. Phone screens or interviews will always follow the career fair and we'll get more detailed and technical then. Remember, this is a meat grinder - not an optimal interviewing experience.
3. Most of us are looking for people we want to spend 40 or so hours per week with. Things that positively stand out are bubbly personalities, some kind of interesting activity, the ability to answer questions in a conversational nature, displaying interest in what I'm saying, laughing, some kind of technical or non-technical project, etc. Remember, meat grinder. The bar is low for this stage.
4. Keep the technical detail relevant but somewhat minimal. If I ask you for more details, provide it. But don't bombard me with highly specific domain knowledge in some field I probably have never worked in nor know anything about. Even if I do know about the field, I don't want to hear about it. I've been talking for hours, there are people in line behind you, and I just don't have time to listen to high technical specific information. 
5. They can become loud, especially during prime time. Speak up. If you're soft spoken you need to work on that. If I constantly have a hard time hearing you I'm going to pass.
6. Prime time is probably the worst time to go. Try showing up at the start of the career fair when there are less people there. Once it's prime time the meat grinder is in full on churn mode and we have to cycle through people more quickly because long lines won't stay long for very long as candidates drift away.
7. Dress appropriately. Suits are fine but not necessary. Don't wear shorts and sandals. I'll fast track you for the ""no"" pile before I even say a word. I'm not looking for the next cover model of GQ (but if you can pull that off by all means do so).
8. Don't try to bullshit me. I'm older, have a fine tuned bullshit radar, and have many more years of bullshitting experience than you. I'll pick up on it. You're still in college and haven't saved the world yet, otherwise you wouldn't be talking to me. Just be honest about your experience.
9. Know what you want to say about yourself beforehand but be prepared to deviate from the script. Handing me a resume and standing there like a log is bad. Nothing too long, please; if it's long I'm just going to cut you off and start trying to do my thing instead of hearing you ramble on. I would say a few, 3-4, sentences about who you are and what you're looking for is a good way to start the conversation. ""Hi, my name is ABC, I'm a sophomore in CS looking for an internship this summer. I have interests in both data science and cybersecurity. <some personal fact>."" Boom, great intro.
10. Remember, meat grinder. Stand out. You're not going to get leetcoded and we're not going to leetcode. Meat grinder.",1536876603.0,2018-09-13 18:10:03
692,"Is it just me or do companies call themselves ""startups"" as some sort of gimmick to exploit employees?",570,7hz2te,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/7hz2te/is_it_just_me_or_do_companies_call_themselves/,168,"I've been working for startups for the past 8 years now and I've interviewed with tons of startups as well. Over that time period I've come to notice that people use the word ""startup"" as gimmick to exploit their employees. Here are just some of the things I've experienced:

- ""We can't give you a raise/promotion/401k because we're a startup"" after they get million and millions in VC that you can clearly see on Crunchbase
- ""We need you to work 60 hours a week because we're a startup""
- ""We started our company nearly a decade ago but we call ourselves a startup because reasons""
- ""You're going to have to do 3 jobs for the price of 1 because we're a startup""

There is also this confusion as to what a ""startup"" even is. I was talking with a co-worker about how the startup he worked for had fantastic benefits. I looked it up and the company was started in 1998 and he left in 2015. That is not a startup, sorry. 

Granted not every startup is like this, but the majority of the ones I've come in contact with were. What do you think?",1512606176.0,2017-12-06 19:22:56
693,The most important thing to understand in job searching,573,ayr13k,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ayr13k/the_most_important_thing_to_understand_in_job/,94,"In this post I’d like to talk about what I think is the most important thing to understand in job searching: value.

I'm currently working as a Senior Front-end Engineer and I'd like to share some of the things I learned about job searching and interviewing in the past 10 years.

I hope this could be helpful to some of you who are currently struggling to land your dream job, or finding a job at all.

I learned the hard way the importance of having a deeper understanding of *value* and how it can benefit us.

In order to understand value on a deeper level, you need to first understand that **everyone can create value.**

## Everyone is valuable
This may seem a cliché to a lot of you, but everyone is valuable.

Obviously, everyone could create something, and that's why people even have jobs to begin with, duh.

But a lot of times, when people are in the job application process, or during an interview, they completely forget that they could add a lot of value to the company they're trying to get into.

A lot of people would lack the confidence to believe that simply because they are beginners.

I’m here to tell (and hopefully show) you **everyone** is valuable to someone.

You have to remember that you’re here to bring value to a company; you're NOT begging for a job or anyone’s sympathy. **You are here to create value,** solve a problem, generate new ideas and help grow the business.

My point is, employees are paid for a reason:

if the employee adds value to the company, the company gives the employee values in return (e.g. money/salary).

There’s no need to feel insecure or insignificant about yourself when dealing with larger entities of people, be it the BigN, or your dream company.

Now, this is not to say that having value to add guarantees you a job at your dream company because another thing you need to understand is fit.

I don’t want to go on a huge tangent and talk about fit, but the basic understanding should be that sometimes the values you bring to the table may not be what the company is looking for at the time.

It’s just luck sometimes: this particular department in this company is looking for a particular skillset for this particular project at this particular time.

So don’t be too hard on yourself when you get rejected.

And definitely don’t shy away from following up a couple of months after rejection.

Most of the time though, you can still get your dream job if you understood how to align values.

## Value alignment.

For the majority of my career, I had been a freelancer.

In the beginning, I was just being, you know, a typical freelancer.

I was doing web development and design and a little bit of Internet Marketing, but it was mostly spec work.

People would come to me and give me detailed requirements, both technical and design.

And they would ask me to code it out, be it a website or a web app, or a mobile app.

I was doing what a good developers/designers would: follow industry standards and best practices.

I cared about things like code maintainability, separate of concerns, responsive design, etc. And on the design front, I was keen on simple and minimalistic designs that create great contrast and hierarchy.

I was also advocating all of those things to my clients to *educate* them about the technical side of things.

Believe it or not, I was actually very proud of myself for being a freelancer who doesn't just do the work, take money and be gone, but instead be the one to help clients understand what goes into the work.

It all worked out fine until one day, one of my clients said to me

> Dude, I appreciate you telling me all about the technical stuff. It sounds cool, though it sometimes sounds foreign to me. But honestly, **I don't give a shit.**
> I care about getting more customers and having steady cashflow much more than responsive design or whatever.
> And now, I just want a goddamned website.

And he was right.

In that moment, I felt both embarrassed and relieved because I finally figured out what I was missing:

**I was too caught up in what I valued and completely neglected my clients’ values.**

It’s true that I could just bring up some UX research on how the boring “technical stuff” can help drive revenue, I chose to be humble and embrace the mindset change.

Information about responsive design or functional programming or whatever may be *interesting* to the clients, but most of the time, they would much rather talk in terms of customer acquisition and revenue.

So from then on, I’ve learned the importance of **value alignment**.

I learned to think in my clients’ shoes and figure out how to use my skill set, based on what I value, to help my clients achieve their goals.

Of course, I didn’t stop trying to create beautiful designs and maintainable code.

But once I was able to align our values, I ended up creating more value for my clients and increase my own self-worth in the process.

A healthy side effect of this is I also started getting better clients and charged more.

Applying this to job searching or interviewing, I was able to align what I had to offer with what the company needed based on my research.

I was more valuable when I focused on how I could add value to the company and help them achieve goals than when I was only thinking about my own values.

At this point, you might be wondering:

> What happens if I don’t any unique set of skills to differentiate myself from others?

As I mentioned before, everyone can create value, even beginners (*especially* beginners sometimes).

Being able to align values **will** make you more valuable and stand out amongst crowd given that:

1. You understand the big picture: values and alignment;
2. You can adapt/align your skill set to the company’s need specifically: good fit.

By understanding value and communicating how your values align, you can more or less make it a no-brainer decision to hire you!

## Making it a no-brainer

Building on top of that, you can dramatically improve your portfolio or resume if you could clearly convey the values you provide and how they align with the company’s value to stand out even before interviews.

After all, the interviewer’s job is to fish out what value you bring to the table and whether or not it can help the company achieve goals.

This could take in the forms of a case study or a hand-picked mini-portfolio made specifically for the company you are applying for.

What this does is it takes out a lot of the doubts that the interviewer may have about you and drastically speed up the hiring process because all the answers are presented to them without them needing to think.

---

Annnd that’s it for now. I do hope this information is valuable to you all and help make your job searching journey easier!

**Edit:** I just [published this on my blog](https://ilovecomputering.com/the-most-important-thing-to-understand-in-job-searching-value/) which should be easier to read.",1552085029.0,2019-03-08 17:43:49
694,How to deal with people more successful than you?,572,ji5k7l,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ji5k7l/how_to_deal_with_people_more_successful_than_you/,273,"I need someone to just let me know what your experiences are and how you deal with someone more successful than you particularly in such a hierarchical field(I feel CS/IT companies have “tiers” i.e. FANG, Big 4).


Background: My grades were never that good, barely passing by. I graduated last year and was lucky to find a job just before Covid, working at a large insurance company in Australia. Work experience has not been what I thought, I've been mostly learning some tools e.g. Azure DevOps, PowerBI and excel spreadsheets I code some scripts to help out repetitive tasks. Recently we had a university student as a part of their study they interned with us for 6 months, 2 months in, and they received an offer and leaving our team to work for Microsoft.


I know it's absolutely absurd and there's always people better than me. Even writing this I've considered deleting this post several times because of how attention seeking this sounds and to be honest, it kind of is. 


I know i shouldn't feel this way and if anything I should be happy for their achievement but for some reason either a defense mechanism from myself or I'm just jealous, I feel so gloomy and down about my own future, seeing someone years younger than me, having better grades than me, more successful than me. I don't even hate this person, I'm good friends with them but it feels like I'm about to be left in the dark while others are leaving to greener pastures.

**EDIT:** I'd like to remind everyone that not everyone will be top of their class, some of us are, like I said are ""barely passing"" though. I just wanted opinions from more experienced people in the industry whether you experience this and how you overcame this feeling if at all.

Also thanks to everyone's input",1603704417.0,2020-10-26 05:26:57
695,My office is shutting down for the month: how do you stay sane/productive on a long-term WFH?,568,fh5crn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fh5crn/my_office_is_shutting_down_for_the_month_how_do/,105,"The worst thing about college was the lack of separation between work and home. Now I’m back in that mode for the foreseeable future. I also rely on my workplace way too much for basic needs like social interaction, food, etc. So I've got to figure out a whole new rhythm for staying sane and healthy in my day-to-day. Any advice?",1583993197.0,2020-03-12 02:06:37
696,"Got told I'm unwanted, but I still have three months left? [FINAL UPDATE: Fuck it, I quit]",572,e61gcd,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/e61gcd/got_told_im_unwanted_but_i_still_have_three/,86,"Everyone was so helpful the last couple rounds of questions I'd thought I'd give a third and final update to the debacle that has been my job for the last few months...but really it's been a debacle since day one. 

While I was happy that I was getting moved to a new team, I decided to take the opportunity to reach outside of the company and see if I could get a few interviews elsewhere. There have also been some massive layoffs at the company and reorgs galore. Honestly if the company spent half as much time reorging and actually put that effort into making some good products, it'd be in a way better place, but who listens to /u/unwanted_engineer? No one, that's who.

Long story short I found a position at another large local company and I couldn't be happier to be leaving. I know it's not a magic bullet and that everywhere you go there will be corporate BS to deal with, but everyone I've talked to who worked at this company says they loved it and would totally go back. I'm going to a team that's working on modernizing some legacy systems, so it's not the most exciting work or stack, but my boss and coworkers seems really cool and enthusiastic. 

Just a tip to everyone out there: WORK YOUR NETWORK. Seriously! You don't have to be best friends with your coworkers, but have relationships directly at companies will get your resume to the head of the line, every single time. I know this because this is literally how I got this gig, I knew someone who put me in contact with the hiring manager. I only filed 6 applications in total in this job hunt, that's a very good ROI for just taking out a buddy or two to tacos once in a while. 

The offer is a nice pay and title bump. The stack is outside my wheelhouse but my new manager has made it clear that he expects me to take 3-6 months to get up to speed and integrate with the team, and they just thought I'd be a cool person to work with, so at least I have that. 

Thank you to everyone here for all the advice and help.",1575504726.0,2019-12-04 19:12:06
697,Can people stop answering questions they aren't experienced enough to answer?,566,63mxk5,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/63mxk5/can_people_stop_answering_questions_they_arent/,275,"I remember this being touched on in the sub survey megathread but haven't really seen it since. I've noticed, particularly recently, people answering questions they are in no position to answer. Just a few examples are someone with a ""Sophomore"" flair answering a question for new grad positions, someone with ""Big 4 Intern"" flair answering a question about mid/senior level career paths, and the one that got me the most - someone with a ""Looking for internship"" flair giving advice on someone's resumé who was LOOKING FOR AN INTERNSHIP  
  
At best, you are just parroting something you saw someone else post/say that *may* be true, and at worst it's just wrong.  
  
/rant",1491441375.0,2017-04-05 21:16:15
698,I want to give up.,572,ahtpeq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ahtpeq/i_want_to_give_up/,180,"I'm a final year computer science student and I've recently joined a startup as a blockchain intern, The thing is the company is of just two people (one of which is the CEO and other is a senior dev) and no one who actually knows much about it. Other than me there are 3 interns.  A little more background the company, they work 6 days a week with at least 10 hours a day.

First day here I was assigned a  sprint(alone) to work on a project on hyperledger fabric using Go.  I was new to hyperledger, new to Go and no one bothered to make a plan to achieve this target. For two weeks I was spending all day reading source code and a little bit of information from code documentation on GitHub to make the channel manager, and at the end of 14 days I still haven't been able to complete the task,

Now for three days past deadline I've been working my ass off to fix a problem (which still isn't fixed) and in the midst of it, CEO want's me to now learn Java and Mongo for next sprint, he even asked us to spend Sunday learning it. This is where I started losing my shit. I can't seem to catch a break from self-doubt and sadness. I called my parents and started crying on the phone just as I started talking to them.

I am thinking if it's all worth the toll on me and if I should just quit.

Update: After reading through some of the super helpful comments here, I decided to call and let CEO know what was going on and had a good talk with him. I told him about the stress and how I couldn't meet his expectations, he was surprisingly supportive and said he notices my hard work and understands things might take more time. He told me just work to my ability and even then if I can't finish then so be it, they'll reschedule it for future. So, I'm thinking of giving this another go as it isn't everyday one comes to learn at this pace, but I've also decided that if things get too tough for me to handle I'll let him know and leave the place if nothing improves.

&#x200B;",1547983376.0,2019-01-20 06:22:56
699,"8 years into this career, prob 16 years of coding, I still never found a personal project motivating enough to work on.",568,cn0u42,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cn0u42/8_years_into_this_career_prob_16_years_of_coding/,228,"How do you guys with impressive open source contributions do it? I don't lack willpower or have ADHD, when it comes to work; I code all the time for work. But try as I may to figure out some project or find some open source project to contribute to, I just don't really care. Other things in my life always take precedence (health, gym, relaxing, other hobbies, etc...). I am not trying to abandon my preferences; I just want to know what inspires you guys to work on your personal projects! How do you get motivation? How do you come up with ideas that interest you enough to work on?",1565178953.0,2019-08-07 07:55:53
700,How are Cloud Engineers / Dev Ops Enginners / Infrastructure Engineers etc. |nterv;ewed and evaluated as compared to Software Engineers?,565,k91jd2,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k91jd2/how_are_cloud_engineers_dev_ops_enginners/,173,"The question is kind of broad, but - I've passed my AWS Cloud Practitioner recently - which for a developer just means ""I was able to make a hashmap of keyword -> AWS service in my head"" - and now I'm studying for Cloud Developer to take in Q1 2021 or even before if I really get my ass in gear about it.

And I wonder - when the day arrives that I apply to jobs that have cloud as their main focus, what can they ask of me,someone who is trying to pivot into this from a software engineer. I obviously don't have prior cloud experience. To the best of my knowledge, there isn't a sort of AWS Leetcode I can do. And outside of doing some toy-level projects, I'm looking for a way to give some foundation of trust from myself to the employer that I can do the job, not just ask them to trust me blindly.

And regarding the actual on-the-job performance - what goes into it? If your days are relaxed because you didn't need to do a 80 petabyte data migration across five data centers, and all autoscalers scale correctly - are you ever asked ""so what exactly do you do here?""? 


The intention with this thread is that I don't intend to fall into ""you need experience to get experience so here's an underpaying job"" meme. Right now I'm a backend dev that wants to know some cloud, but I'm aiming to be a Cloud guy that also can do backend.

 It's 2 am where I'm writing this so forgive if this sounds scatterbrained.",1607450067.0,2020-12-08 12:54:27
701,My last 4.5 years in the industry as a non-CS major,569,f3g22l,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/f3g22l/my_last_45_years_in_the_industry_as_a_noncs_major/,86,"Hello everyone. I've been part of this sub for a while now, both using this account and my main account (which I don't remember the password to and am too lazy to try to recover). Over the past couple of years I've had plenty of people asking me about how I got to where I am today. Although I am always more than happy to help and share my story, it gets tiring writing the same thing over and over again.

I've decided to post my entire career progression in order to share the experience with others. I do not mean this to be a humble brag, rather just a reference point for those who might be in the same situation that I was 4 or 5 years ago. Keep in mind this is **entirely subjective and anecdotal.** Everyone's situation is different. Everyone has a different skill set. Again, only use my story as a reference, and **not** a guide. My goal is that it at least provides people with a bit of hope to pursue their goals. I'm also still pretty early in my career (4.5 is not a very long time), so take this with a grain of salt. There might be plenty of people out there with tons of more experience than me who might be able to offer better advice.

I attribute my success to my wife who's always supported me emotionally, my hard work and perseverance, and, most importantly, dumb luck.

I've broken up the entire post into different sections of my life, because some people might be reading this in college, others might be in high school, others might already be in the industry. Lots of sections may not be important for you, so skip over them. Again, they're all anecdotal so please don't use them as a guide.

Fair warning: there is a lot to cover, I typed this in Google Docs and it ended up being 11 pages or so. I'll be posting it in the comments because it will likely get flagged due to some key words.

Best of luck to everyone who's reading and trying to figure out their career.",1581653586.0,2020-02-13 23:13:06
702,I was fired 2 weeks ago after 11 months as a SW Engineer,568,cwzjob,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cwzjob/i_was_fired_2_weeks_ago_after_11_months_as_a_sw/,176,"This was my first job out of University, I graduated last year and worked as a software engineer for the last 11 months.

The company I worked for never had any sort of graduate program or plan for me. They literally dumped me into the deep end without much guidance and a team that was too big headed to help or always working from home. After 4 months on this team I was relocated to another team.

This new team was basically the bug fixing team, that was managed by one guy on his own and had been doing this for the last 7 years. With me joining his team, he finally got promoted to management to manage me.

On my 11th month I got fired, 1 month before my shares vested. I had always been told my work was going good and I had nothing that needed worked on. My talent review came up and I was told I wasn't getting things done fast enough, etc. One week later I got fired, effective immediately.

The whole time at this company I was in the deep-end, never treated as a graduate. I was jumping between so many different parts of their system, learning new technologies and languages as I went along. I was jumping between so many different things that it became very hard to keep up with, which was attributed to my firing. I wasn't even offered a PIP or any time to improve. They paid me the months notice period and dropped me on the spot so they didn't have to pay my shares out.

So now I'm unemployed and searching for a new role. My confidence has been knocked and I don't really know where to go from here. I wasn't able to actively focus on a sole language and technology, which meant that I have a grasp of a few different languages, but nothing really in-depth.

I was jumping between Java, PHP, Python, Perl, Bash and then a ton of technologies relating to each area of the system. I found it took time to get up to speed on each of these. With each new bug, it would take me to a new part of the system I would have to learn.

I'm really quite lost at this point and struggling to figure out what the fuck I should actually focus on right now. I've spent the last 2 weeks just getting my head straight, but now I need to scramble and get some projects ready, tidy my CV and actually focus on a specific language.

I am afraid of what to say in an interview as to why I left the company and the only reference I can get from them will be to confirm my work dates, they can't speak to why I left this was confirmed in my termination meeting.

Hoping somebody can maybe help me figure out what to do right now.",1567106657.0,2019-08-29 15:24:17
703,Does having a master's degree help career growth? How has it helped you personally in the CS field?,565,jln008,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jln008/does_having_a_masters_degree_help_career_growth/,288,Does having a master's degree help career growth? How has it helped you personally in the CS field?,1604196207.0,2020-10-31 22:03:27
704,When is it time to give up?,561,f43az5,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/f43az5/when_is_it_time_to_give_up/,296,"Been applying for 6 months now worried about graduating without a job. Well that's passed, I graduated and I still don't have a job.

Every rejection throwing you into a spiral, feeling like every hour not grinding leetcode, studying, working on a side project or practicing interviews, applying to jobs, networking and messaging recruiters feels like a waste of time.
 
Forcing yourself to go to a dead-end job everyday to make ends meat just to go home exhausted and feeling trapped to yet another list of rejections. Every company you apply to, every time you rebuild your resume, every challenge you solve, every project you make slight progress on all means nothing.

 Not being able to sleep because you're so stressed out from all the denials, all the interviews you drive 3-4 hours to just to get rejected, knowing you have to go work for scrap the next day and seeing everyone else so accomplished while you're on the verge of homelessness, grinding away to what you already got indebted for and slaved away hoping you would have a promising future only to be hit with the reality that you're not good enough, and never will be.

It's all just so tiresome, stressful, depressing.. I don't know if it's worth it anymore. I should just find a way to be happy making the scraps I make and just accept I'll never be good enough. Try to make something of what I have instead of exposing myself to what I'll never get.",1581763751.0,2020-02-15 05:49:11
705,"Junior devs, what has been the skill gap between your CS degree education and actual software programming in the workplace?",560,e3sgnc,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/e3sgnc/junior_devs_what_has_been_the_skill_gap_between/,198,"As I dive deeper into CS coursework, it all seems very theoretical and I'm dubious that any of this is practical in the real world. 

Junior devs who are now working at companies, what hard technical skills do you recommend obtaining in order to find a job and hit the ground running once starting?",1575127323.0,2019-11-30 10:22:03
706,What are some non-tech companies with strong tech departments?,564,a4mqgs,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/a4mqgs/what_are_some_nontech_companies_with_strong_tech/,309,Something like Capital One.,1544405460.0,2018-12-09 20:31:00
707,"After 3 months of internship hunting, my friend got me one in 5 days.",569,8fc6qq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8fc6qq/after_3_months_of_internship_hunting_my_friend/,94,"I hand my friend my resume on Monday. HR receives it by Tuesday. I get an email on Wednesday from the manager that lets me know I have an interview on Thursday. Friday, I get a call from HR congratulating me for the offer.

I've seen many people posting about references in this subreddit, but I've never really thought it was this powerful. It's a bittersweet feeling, because on one hand you secured an internship, but on the other hand you know that there are people who are much better than you who applied for the same thing, but didn't get because they simply didn't have the connection.

Did you have a similar story?


TL;DR references are much more powerful than I thought they would be. ",1524869167.0,2018-04-27 18:46:07
708,The SF Bay Area is not home,567,d4fh3o,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d4fh3o/the_sf_bay_area_is_not_home/,295,"Does anyone else feel like a stranger in the SF bay area? Like this is not truly home?

I have a perpetual feeling of ""this is temporary"". It feels like everyone here is just trying to hustle for the next startup, the next promotion, the next job. Everybody is a transplant just trying to work through a career, and nobody is establishing roots.

I don't plan to be here more than a few more years, before I go somewhere that feels more like home. Am I alone here?",1568547856.0,2019-09-15 07:44:16
709,Best Leetcode List to go through without Premium,567,c1xgk4,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/c1xgk4/best_leetcode_list_to_go_through_without_premium/,57,"Hello!

&#x200B;

So I am a college student looking to grind through leetcode for the summer to prep for internship applications for next summer. But I have looked at leetcode and there are currently over 1000 questions. I don't think it would be feasible to go through all of them this summer. I know that there is premium which gives you company specific questions but I only plan on buying that if I end up getting an interview with any of those companies. So for now, I have seen lists like ""Top Interview Questions"" and  ""Most Liked"" which seemed interesting. Which one of these would be better? If there are other custom lists that aren't on leetcode itself and are preferable to those, I would love if anyone could tell me about them! 

&#x200B;

Thank you!",1560859037.0,2019-06-18 07:57:17
710,I think my lead developer got me kicked off the engineering team for being too slow,561,jujqus,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jujqus/i_think_my_lead_developer_got_me_kicked_off_the/,133,"I was hired as a graduate .Net developer a while back, and over the last 3/4 months we've been working on a new project involving a website as part of it. Myself and one other developer were working on this and a bit of the backend to go with it. The other developer came from a web dev background whilst my only experience was from basic web dev at university. 

As the whole project was moving into the last few weeks before testing, I was pulled off it completely and moved to the support team. I was told this was temporary to help them with their BAU big fixes as they were swamped. After two weeks I had a meeting with a higher up who was relaying info from my lead developer complaining about being slow, missing deadlines, not communicating etc. This was all completely news to me, as any ticket or feature I had was worked upon without much issue. The project was moving smoothly and demos were all well received. My lead had given 0 indication he had issues with me. 

Now prior to this project he also gives no mentorship and very little help. If I've asked for help in the past I've been told to look at another project we did something similar for or to just google x. Which is sometimes perfectly fine but this is the extent of it. I could very well be slow at implementing things, but we're basically left to figure out codebases on out own and find our own fixes without help. 

Am I completely off base in thinking that there should be more mentorship and support for graduates from our only lead developer? What concerns me also, is that he's not breached any of these issues with me, gone to his boss and effectively had me removed from the team.

Since moving to support I'm no longer even working on bug fixes, it's purely support tickets and that's not what I was hired for. I am not part of that team and I don't want to be, I don't enjoy that side of it 

Is my best bet to just leave and offer feedback once I find something else?",1605463846.0,2020-11-15 13:10:46
711,How did computer science classes work in the 90s?,566,ek0plb,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ek0plb/how_did_computer_science_classes_work_in_the_90s/,217,"How did they work back then, compared to today?",1578193003.0,2020-01-04 21:56:43
712,How is being on-call still a thing?,558,hj4gbm,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hj4gbm/how_is_being_oncall_still_a_thing/,322,"I joined the big river co as a new grad software developer 6 months ago, and I cannot fathom how do we have an on-call culture in the tech industry that verges on borderline abuse. It is such an attack on one’s sanity and overall mental health!

My team has two types of on-call: primary and secondary. We are required to be the secondary on-call in the week that immediately follows us being the primary on-call. And this rotates in a team of 8 developers, which means that every 45 days or so, my life is going to be an absolute wreck for 15 days. Can’t drink, can’t go outdoors, make plans on weekends, take long showers, or sleep peacefully at night.

I have had two such on-calls so far and I feel like I’ve already been burned out by it, I am so anxious of being paged at 04:30am in the morning again. To top it off, no one in the team (rightly so) is available at such ungodly hours which means I’m left to figure out a solution myself for hours at end.

How is this a thing in the tech industry? How do we not talk about this more often? To a new grad like myself, it almost feels like cheating how little this is mentioned while the recruitment happens, or in the company culture, on the internet, etc. It is almost assumed that developers need to suck it up.

My biggest gripe with it is that all this work is without any extra compensation; it’s included in your salary. This feels like straight-up abuse and being disrespectful of personal employee time. I know about the argument that a good developer should also know how to support their product, but why can’t we have a dedicated ops team that does the same in batches of 8 hours? Isn’t that what the SRE and DevOps roles are for? I have interned at a couple of places before this job, and in both the cases, the developers were supported by dedicated operations team that had SREs working in 8 hour shifts. Isn’t that more humane, since the SREs already know what they signed up for? Plus, they have to work no more than 40 hours/week, so they can plan their time instead of the on-call culture where you can’t do anything because you might get paged anytime.

This is so frustrating as a new developer. I wished to develop new and exciting features and learn so much about development, coding, and gain a lot of technical skills. But it seems that on-call and the related ops meetings are the only things my team talks and cares about. I have always been optimistic about the tech industry, and when I first went on-call, I told myself that it’s an opportunity to learn, but increasingly it just feels like something that will constantly give me anxiety and kill any passion that I have.

How is this still a thing? I feel so burnt out already, what can I do?

EDIT:Thanks a lot for all your comments, some of them were really helpful.

I want to address those that say ""quit"", although I knew from the get go that this is an option always, it's not easy to take action on that since I'm here on a visa. Losing my job without a viable option means going back to my country, and thus having any realistic shot at my tech career.",1593611401.0,2020-07-01 09:50:01
713,Job openings and hiring manager contacts during the crisis,562,g1dz7a,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/g1dz7a/job_openings_and_hiring_manager_contacts_during/,30," [https://www.teamblind.com/whoshiring](https://www.teamblind.com/whoshiring)

Here's a list of 350+ job positions available curated by actual employees at each company. The ones with the email address on the note seem to be the contact for the hiring managers. I hope this helps your job search during difficult times. Stay safe everyone!",1586927474.0,2020-04-15 01:11:14
714,From being PIP'd at a startup to leveling up into a FANG in four months.,562,f1ifnt,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/f1ifnt/from_being_pipd_at_a_startup_to_leveling_up_into/,129,"When my manager sat me down in our 1:1 to deliver me the news that I was about to be put on a PIP the next week and to use the weekend to think what my next step should be, my initial reaction was to want to take it and save my job. I knew I've been in a bit of a slump, sleeping very poorly, and not outputting as much as I could have. But to be quite honest, this was a blessing in disguise.

The company I've been working at wasn't doing that well to begin with. We raised a series D in just under two years of existence and my options have quintupled in value since joining, but we've had regulational troubles and the hardware team has been slipping. Our CTO was fired four months after I joined, and our new CTO promised to double our engineering headcount by the end of last year. We've maybe only added 5 people to a team of 30 instead by that point. To that end, I've had multiple manager changes within that time period: a total of five managers and six manager changes all within 12 months. As this was my first job out of college, I thought this was all normal for a startup.

In addition, the pay was very low. For a new grad that didn't know better, like yours truly, that number was a lot for someone who was only ever paid hourly. But after discussing with friends that went onto working at FANGs and other, more established unicorn startups, it was abundantly clear that me and my fellow colleagues were severely underpaid. Like, over 50% lower in base salary alone underpaid for the same line of work and more stress.

The work itself wasn't that great either. It was a system that had to be supported globally with different rules in different countries and with physical hardware that we had little control over. Nobody left the office before dinner was served, and seldom did people start going home after dinner was finished (well, up until recently since people stopped giving fucks). We had almost no senior engineers either, most of the work was done by fresh grads or interns from top CS schools. We maybe had only four veteran IC's, but the rest of the ""senior"" staff were in management. Everyone else was a new grad or junior engineer. You wouldn't find anyone that had more than two years of experience in the rest of the crowd. It's fun to be around people my age, but the work was sloppy and stressful when shit broke because you're trying to build something with little guidance and your code reviewers are other new grads that are equally as experienced as yourself. Nobody (besides maybe three people) has ever coded in the framework we used, and everyone learned the language and framework right on the job. Our only training was a link to an official guide.

I'm not going to get into the company politics, but it's sufficient to say our Blind was so spicy to the point screenshots of several call-out threads were brought up in meetings and mentioned in all-hands. It was pretty bad.

But going back to me getting served a PIP. My manager gave me an ultimatum: either take the PIP, or take severance and interview for another company. Over that weekend, I thought really hard about all the things I've seen and done in the past year, and quite frankly, I found that I haven't been happy at that place for a while now. It doesn't make sense to try to save a job I wasn't going to be happy at, where I get paid peanuts, and where my contributions are invisible to upper management because the longest I've had the same manager for was two and a half months. I decided to take the severance and leave.

This gave me time to relax, exercise, enjoy hobbies I haven't done in months, and most importantly, spend time with family and friends I haven't been around with because of this job. Oh, I forgot to mention that the company moved headquarters halfway through my tenure and bumped my commute from 20 minutes to over an hour.

I haven't touched leetcode or interview prep materials in ages since joining, so I really only hit the books about two weeks after leaving. My daily routine would be to exercise in the day, eat a protein heavy meal, and study up leetcode into the night at a 24/7 cafe. I would usually do this with a buddy or two who are freelance developers. I also kept a spreadsheet of jobs I was interested in and updated their statuses in where I was at in the process, who the point of contact was, when the interview dates are, etc. I wanted to end up at a FANG company since their offices were much closer to where I lived and the culture there would help me grow more as an engineer. My process was that I started off with companies I didn't quite care about to practice interviewing, and then build up to places I did want to end up working at.

I slowly but steadily practiced coding problems, took my time to understand what the solutions were, and apply those skills onto other problems that came up. In reality, most programming problems you encounter are really just other problems in disguise, and you just need to know the fundamentals of CS to get through them. I'm sure everyone wants to know what my stats are, so here they are: 64 easy, 50 medium, 15 hard.

After a few months of practice and interviewing at companies I wasn't particularly interested in, I started applying for places that actually interested me. In the end, I got two offers and was able to negotiate with a FANG company that has an office 10 minutes away from my house. I not only nearly tripled my TC, but I also got leveled up to an L4. After being stuck in L3 for almost two years with shit pay, I am glad my patience and steady progress paid off.

My lessons learned in this whole experience:

- It's nice to have coworkers to hang out with that are your age, but it's not good for your growth if you don't have senior engineers or good managers that you can learn from and ask questions.
- Companies that say they're struggling to hire good engineers usually mean they're underpaying their engineers and end up hiring new grads with little experience who don't know any better.
- You need to have a consistent manager that will actually give a shit about your growth.
- When looking for a new job, don't settle for something just because it pays slightly better than what you previously had. Why knowingly put yourself in a situation you don't want to be a part of?
- Be patient with the job search. New things come all the time, and set up alerts on LinkedIn for jobs in your area. Again, don't settle for something you'll regret taking.
- Commute time matters. Sure, I can listen to podcasts on a train for an hour or sleep on it, but I'd rather use that time to get an extra hour of uninterrupted sleep in my own bed and be more energetic and productive for the whole day. Not to mention gain more time in the afternoon and evening to do activities with friends and family.
- Know your worth. levels.fyi is a great resource to see what you should be aiming for in pay.
- Blind and this subreddit will make you feel inadequate. Don't take it to heart and always focus on your own progress. But at least know what you should be aiming for and what others have experienced in interviews and in their own companies.
- Leetcode's interview experiences forum is a hidden gem (in my opinion) and is a great place to learn what processes are like at various companies and how people react to their own interviews.

As for my tips for the interview prep:

- Start with LC easy problems. I'm talking about two sum and fizzbuzz easy levels. These problems you should know how to solve blindfolded. Do a bunch of them, and do a couple new ones each day to warm up.
- LC medium problems are the most common I've encountered in interviews. Some can be hard, and some are stupidly easy. For the harder ones, don't be discouraged if you can't solve it right off the bat. Spend maybe at most 10 minutes thinking about it, and if you're still completely lost on how to solve it, there's no shame in looking at the ""discuss"" tab and seeing how others have solved it. Read the code line by line, understand what each piece is doing, implement the solution yourself, and move on to similar problems. With practice, you'll learn the patterns and tricks in these problems, and maybe you'll learn a few new syntactical party tricks in your language of choice.
- LC hard problems will come up, but not often. YMMV. You should practice them at least solving one hard problem per week, if not more. I've had N Queens asked on a phone screen, so you never know what will come up in interviews.
- There's a curated list of 75 problems you should solve that's been circling around here and on Blind. It's a good starting point.
- Common topics you'll encounter: linked lists, binary trees, binary search trees, DFS, BFS, heaps, stacks, queues, strings, arrays.
- I was recommended to use Interview Cake. While I didn't use it daily, it is a good resource in my opinion and the step by step solutions do help with guiding your thought process.

Most of my system design solutions came from experiences I've had and a lot were creative, open-ended questions. My advice is to be likeable to the interviewer and not BS your thought process. For some reason, system design is something that comes the most natural to me, so I sadly can't give much tips for studying on it besides seeing for yourself how current systems are built.

And in general, you should be likeable to the interviewer. Smile, ask them what they work on, what cool projects they've done at the company, what their work life balance is like, etc. You're interviewing for the company and you're interviewing the company for yourself. Your interviewer is judging on whether you'd be a good person to be around with for 8 hours and help contribute to solving their problems, and you're judging whether the company you're interviewing for will make you enjoy yourself being there.

Everyone's experience is unique and certainly not as relaxed as mine. I thankfully had enough savings to last me almost a whole year without a job, but I realize others might not be fortunate enough to have that luxury. It'll be hard, but worth it to study up in the evenings and then take days off to go to onsites. In the end, what matters most is your sanity and happiness.

Tl;dr: job sucked, I got PIP'd, quit, took time off, studied, interviewed, and accepted a FANG offer that tripled my pay in four months.",1581325247.0,2020-02-10 04:00:47
715,Triplebyte at it again?,557,hah0fm,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hah0fm/triplebyte_at_it_again/,95,"First was the privacy violations last week, this week Triplebyte started sending emails with everyone's email in the ""to"" field displaying a consistent lack of concern around user privacy.

https://i.imgur.com/RrHZWZ8.png

edit: the best part is they sent multiple of these emails with everyone in the to field",1592384932.0,2020-06-17 05:08:52
716,What has been an essential skill at your (first / second / etc. / current) job that you haven't learned during your degree?,559,fezm7h,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fezm7h/what_has_been_an_essential_skill_at_your_first/,240,"This question has been brought to you by concurrency and multithreading, which I am now realizing how little I understand about it beyond ""Split workload between threads"" and trying to catch up on. What has your degree left out?

I should probably specify that I'm asking about technical skills, not just soft skills.",1583636267.0,2020-03-07 21:57:47
717,"Upcoming AMA Announcement - ""Cracking the Coding Interview"" Author Gayle McDowell on June 1st!",559,6d6pds,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6d6pds/upcoming_ama_announcement_cracking_the_coding/,87,"Hi everyone! We are very excited to welcome **Gayle McDowell** to /r/cscareerquestions next week for an AMA. While you may know her from her fantastic books about tech careers (check them out [here](http://www.gayle.com/books/)), she's also:

- the Founder and CEO of [CareerCup](https://www.careercup.com/)
- a former software engineer at Google, Microsoft, and Apple
- a consultant specializing in tech interviews, acquisitions, and hiring training
- a speaker at [various events](http://www.gayle.com/events) about technical hiring and women in tech
- and much more!


The AMA will take place on June 1, 2017 from 1pm to 3pm EDT. That's 10am to 12pm PDT for folks on the west coast.
=

As you are thinking about questions you may want to ask, make sure you go through the [section on her website dedicated to career advice](http://www.gayle.com/career-advice/) so that the more common questions can limited.

",1495706379.0,2017-05-25 05:59:39
718,The real advice I wish I’d known at the start of my career,563,e2uh93,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/e2uh93/the_real_advice_i_wish_id_known_at_the_start_of/,178,"1) what I want 10-15 years from now isn’t going to be the same thing I want now

2) hell, even 5 years out wont be the same

3) have fun before my back pain sets in

4) get in the sun more to avoid vitamin d deficiency

5) have more fun with friends before they all start disappearing",1574954124.0,2019-11-28 10:15:24
719,Let's normalize failing: what have you failed recently?,560,byue75,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/byue75/lets_normalize_failing_what_have_you_failed/,283,"Note: Not specific to failing interviews, just whatever is related to the computing field.

Let me start.

1. Did a first-round onsite (1:30; yeah it's weird) with a big tech company; got the technical question right (DP + memoization) and had average-good behavioral answers. Felt good leaving. Rejected soon after and don't know why, but my guess is they were looking for a senior person even though they said they were hiring at all levels.
2. Did a tech phone interview with a Big N and got 2 questions, one Leetcode easy-medium (which I was familiar with and solved with the optimal solution) and second is a medium question that I couldn't even start. Half the battle was deciphering my interviewer's strong accent. Said interviewer also spent 10-15 mins on behavioral, leaving me very little time for technical questions. Still felt good afterwards, cause I didn't think there was enough time to finish the 2nd question so that must have been a ""hey you did good, let's keep you busy"". Nope, rejected the next day.

Edit: alright here's a real fail.
3. I didn't finish my refactoring for a bug on a feature that involved a couple of applications before heading out to vacation. I had hoped my team members would finish it as they had wrapped up their work and had nothing else to do and also knew what I was doing. Nope. Came back 2 weeks later to seeing the feature called out all over the channels, so I rushed to finish and release the fix.
Thing is, the feature wasn't breaking any other experience and it's not necessary for anything. It's just a pretty thing to have. But leave it to an engineer to determine a feature's worth, right?

On the brighter side, I have 2 onsites coming up and the interviewers were impressed with me in those rounds. Trying not to beat myself up by understanding how random interviewing can be.",1560176591.0,2019-06-10 10:23:11
720,What to do about a fantastic mentor as an intern?,557,ggu3qq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ggu3qq/what_to_do_about_a_fantastic_mentor_as_an_intern/,51,"So I've been working as an intern for a few months, and my mentor has been absolutely wonderful, and has genuinely made me excited to go to work every day. My internship is ending soon, and I was thinking about emailing his manager to give my thoughts. The guy deserves a bonus and raise in my opinion! Is there a way I can word this to be more likely to get him an actual bonus vs just a pat on the back? :P",1589110504.0,2020-05-10 07:35:04
721,Why do so many web developer employers list every single language or framework their possibly is?,557,ern6mt,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ern6mt/why_do_so_many_web_developer_employers_list_every/,241,"First of all, nobody is a master of everything. Second of all, quite often I will find a ""front-end web developer"" job that has back-end requirements listed in the requirements section even though the title of the job specifically says front-end. Why do these employers fail to title or explain their job listing appropriately? Again, I see this often. Do front-end developers not exist anymore and it is assumed that you should be full-stack? Do they want front-end? Do they want back-end? Or do they want full-stack? It's quite annoying. Should I apply regardless hoping they understand that I am just trying to do  front-end only at the given moment?",1579598352.0,2020-01-21 04:19:12
722,Trolled on day 3 is this the norm?,556,5ml6b9,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/5ml6b9/trolled_on_day_3_is_this_the_norm/,91,"Hey all !

I started my first software engineer job Tuesday. They knew I was a new grad, and frequently hire new grads.

After being shown git and version control, and an hour run down on debugging efficiently, I was given a ticket and told by end of day Friday to complete it.

They also gave me a few tips, and I went on my way. Come end of day Tuesday, I havnt even been through more then a couple files. I was just running through the application, then running through line by line.

End of day weds, I had made no progress, I knew what needed fixed but couldn't find it.

End of day Thursday, I'm frustrated I'm lost in code.

By Friday about an hour before we leave, the entire floor of devs comes to check on me at once, and I'm instructed to fill them in on what I've done. Begin meltdown, ranting on how I couldn't find my way out if they put my hand on a door knob.

And then EVERYONE starts clapping, and my manager comes out with a bad ass little rubber zombie duck. They say welcome to the team, install an add on, and say try again. I tried again, immediately found the problem and fixed it.

They stated it's normal for new grads to go through what I had, and put every new grad through the same growing pains. They stated I'll be spending the majority of my time the first few months asking questions, and to do so. Also was given a rundown about talking to my new duck.

I've seen several people talking to their ducks, but brushed it off as weird. There's a concept of rubber duck debugging they highly encourage.

Does anyone else's employer do anything special for first time devs? I get instantly welcomed and am now super excited to get started Monday.

- By the way, the add on is called web essentials. You basically click on any element on a page, it'll open the right aspx file and then f7 opens the code behind, set breakpoint and go. This thing was amazing, as we were prohibited in school on touching addons. They mentioned there were over 55000 files, and 10 million lines of code, which is why they heavily rely on web essentials.

Also, does anyone else have a duck??",1483834452.0,2017-01-07 19:14:12
723,"Please can everybody stop saying ""big 4""",555,3rh4jl,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/3rh4jl/please_can_everybody_stop_saying_big_4/,332,"* There are many excellent companies to work for.
* Google, Amazon, Facebook and Microsoft are not interchangeable. The work, pay and culture are different between the companies and within the companies.
* Nobody uses this term outside this subreddit and it encourages misleading conversations and lazy thinking.

Please make an effort to stop using this term and encourage others to stop too!",1446659863.0,2015-11-04 12:57:43
724,What to do about non-deodorant wearing teammate,554,d9omu1,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d9omu1/what_to_do_about_nondeodorant_wearing_teammate/,247,"Title. There’s a team member who has seemingly never worn deodorant. I also think she doesn’t shower often. We’re stuck in a small room every morning for about 30 mins for standup and It makes me what to puke. It also effects my everyday abilities. What do I do?


Edit: wow this blew up. Our stand ups vary from 10-30 mins depending on blockage/help needed. Our team is 12 devs. Relax. Also, pretty sure the person doesn’t have a condition as I have smelled the same smell around other places on campus coming from other people.",1569555454.0,2019-09-26 23:37:34
725,UPDATE: Career Suicide,555,6zf0gf,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6zf0gf/update_career_suicide/,167,"Hi again.

First, thank you all for the many answers to my previous post.  I had not expected it to gain traction like that.  I'm sorry I was not able to answer every comment there was.  Truthfully, there often was nothing I felt I could add that was worthwhile, so I merely upvoted the answer.  I felt that it would be the minimum of respect to give an update on my situation, following all those comments.

Well, meanwhile, the hammer dropped.  I've been fired.

In hindsight, the writing had been on the wall for the past few weeks.  My worst fears were confirmed in the span of five minutes.  In my exit interview, my boss made it clear that I was punching well above my weight by working for this company.  I did not have the capacity for analysis, the minutiae, or the interest and passion of my coworkers.

When I asked him what my strong suit was, he visibly struggled to find an answer.  It finally amounted to: ""You're a really nice person.""  Definitely not something I can put on my CV without getting laughed out of the room.

With that, I was handed the HR paperwork, given a bit of shut-up money, and sent on my merry way.

And now I'm on the job market, needing to somehow start over and find a place that'll accept my mediocrity.  It's hard to smile at recruiters when you feel like damaged goods on the inside.

I guess from here on out, it's not Reddit that I need, but a psychologist.",1505161107.0,2017-09-11 16:18:27
726,[Meta] I've been on and off this sub for +6 years and just want to spill something out,554,7snxn9,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/7snxn9/meta_ive_been_on_and_off_this_sub_for_6_years_and/,435,"Disclaimer: I started programming in 2011 and began following various forums and communities around that time. /r/programming was the main subreddit to post cs career questions at the time. So from memory I may be confusing old posts between the two subs. 

I've never seen in my time here more than now so many people struggling to find work. And it baffles me how I'm seeing a motivational post about someone who applied to 1600 places before landing a job. Or how it's ok accepting below market rate offers for your first job. And every day I'm seeing floods of questions of those who struggled to find their first job months in. Which was somewhat normal in the past but is alarming now.

In H.S. I remember internships during the summer making $17/h at a local company doing programming or devops was somewhat common. Boot Camp and self learners flooded this sub with good advise and information. You didn't need a degree or plethora of projects to land a gig. The stakes were lower. At my company right now 3 developers are old Bootcamp grads and 4 have unrelated degrees. Yet we have Masters of CS graduates applying for Junior Frontend Developer positions this year. 

Now I feel CS suddenly became a massive mainstream and popular field. And this sub adamantly denies any speculation of oversaturation. I see a clash between those like me who made it vs a wave of people entering the field thinking its their only salvation to the middle class. And this creates arguments after arguments how ""its easy to find well paying work"" vs ""I was trying for months"" and scrapegoat anecdotes how ""if you are good you would have found work"" or ""you didn't have an internship and that was your mistake"". I find the whole dynamic really funny.. Like this sub is battling on the edge of what is reality and what is not.

I appreciate all the work the Mods put in and the active and passionate community. I will continue to offer and seek advise here. I hope what happened to Law many years ago doesn't happen to CS. Bye! ",1516837496.0,2018-01-24 18:44:56
727,Tips for coding in a noisy office,554,fbce2g,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fbce2g/tips_for_coding_in_a_noisy_office/,205,"I've recently gone from being a student to working as a backend engineer. I studied computer science at uni and was able to study at home, in quiet classrooms or at the library. However at my new office I sit at a desk constantly surrounded by people discussing their work and having impromptu meetings which naturally generates a lot of noise. Everyone else seems to be able to knuckle down with their coding but I'm finding it difficult to really get into deep thoughts about my work. Listening to music doesn't help either but maybe my crappy headphones are partly to blame for that - it ends up just being more  noise on top of everything else!

Edit:

I thought I would put some of the concentration playlists people have mentioned up here for easy access. More is always better so keep them coming.

\- Rainstorm noises: [https://rainymood.com/](https://rainymood.com/)

\- General ambient sound: [https://asoftmurmur.com/](https://asoftmurmur.com/)

\- Lo-Fi: [https://www.youtube.com/watch?v=5qap5aO4i9A](https://www.youtube.com/watch?v=5qap5aO4i9A&app=desktop)

\- Also a personal favourite of mine is [J-Dilla's Life](https://www.youtube.com/watch?v=Agl1TgVfls0). If you right click on the video on youtube you can select ""Loop"". Sometimes I'll listen to this for hours. The only problem is the beat is so good you might start freestyling at your desk.

\- Rain + Cafe = [https://rainycafe.com/](https://rainycafe.com/)

\- Background noise: [https://mynoise.net/](https://mynoise.net/)

&#x200B;

&#x200B;",1583011141.0,2020-02-29 16:19:01
728,Final Update: company didn't want to pay for travel,553,9hj45q,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9hj45q/final_update_company_didnt_want_to_pay_for_travel/,209,"After:

1. Phone screen
2. Project making a website
3. Rejecting onsite because company wants me to pay for airplane travel
4. Interview with Director in place of onsite
5. Rejecting onsite again because they still want me to pay. Why did I even interview with the Director?
6. Talking to CTO

They decided to reject me because they required an onsite in the end, which I didn't want to pay on my own dime.

Oh yeah, the rejection email they sent me was ""we won't be proceeding with an offer.""

&#x200B;",1537507215.0,2018-09-21 01:20:15
729,"Desperately need advice on how to improve verbal communication, especially with senior software engineers.",554,hn36e0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hn36e0/desperately_need_advice_on_how_to_improve_verbal/,153,"I work on a 100% remote team. We're scattered all across the globe.


Communication has always been an issue for me, even when I worked in an office. If you ask me something over email or Skype, I can send you as much or as little info you want. Technical, for business, for users -- just tell me the intended audience and I'll gladly help you. Outside of that, I don't like to write much, unless I've a burning need to say something. (Or need to gush over a cute dog.)


Verbally? Whether it's in-person or over the phone, I have never been a strong verbal communicator. I don't even have a strong verbal vocabulary. Simply put, I just. . . don't talk much. Not with family, friends, coworkers, management, etc. Words that have been used to describe my verbal communication style over the years can be summarized as: blunt, brusque, laconic, halting, taciturn, ""absolutely fucking rude"", etc. 


(I admittedly also struggle to listen -- my brain apparently has a speech-to-dev-null filter. You can tell me something, I won't understand, send an email, and I not only understand what you want, but often understand the broader implications of it. Oh, I also sometimes lose track of the meaning of my own words -- I don't even listen to myself!)


In my view, why should I talk if someone knows more? Or if someone has already made the salient point? Or if I have nothing of value to add to the conversation?


My manager has told me that even repeating what someone else says, but in a different way, is fine. That said, old habits are difficult to break.


Unfortunately, this issue has continuously affected my performance scores at work. This year, my score dropped to ""below expectations"", and my manager has made me a team lead in an effort to ""get me out of my shell"". I can tell he's already a little exasperated and I'm at the end of my rope two weeks in. I'm struggling to run our phone meetings, where seniors dominate the conversation, which they also somewhat do in chat.



Has anyone else faced this problem? What did you do? Any books, Youtube videos, etc? I'm Googling articles now but I'm on the verge of panic. It's one thing to work on a flaw that you've developed over some months, but another thing entirely to fight against a deeply-ingrained personality trait.


I'm desperate. Even if it's a little far-fetched, I'm willing to try just about *anything* that might help at least once.


ETA because I was asked: my manager wants me to speak up because he thinks my input could be valuable, even if my input has already be shared by someone else.


Oh, and thank you for gilding this post!",1594184995.0,2020-07-08 01:09:55
730,"(Soft Skills) Listen to your family and friends, they know you, not the tech market.",550,9ks4ii,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9ks4ii/soft_skills_listen_to_your_family_and_friends/,102,"After reading these comments in this thread
[https://www.reddit.com/r/cscareerquestions/comments/9kmfkl/dont_listen_to_your_family_or_friends_they_mean/](https://www.reddit.com/r/cscareerquestions/comments/9kmfkl/dont_listen_to_your_family_or_friends_they_mean/)


**Edit** This is for people that have families who care and are trying to help, not belittle or discourage from reaching your goals. 

It quickly became flooded with toxic responses and even some racist and culturally insensitive comments

I wanted to post my response because having a good support network outside of the Tech industry can mean everything to your career.  They might not understand but if you have people that are trying to help you succeed, embrace that becuase its really a gift that a lot of people dont have.


>My advice would be to step back and look at your situation. You have a support network that has been there for you during this process that they don't understand.

>It's hard to support someone you love when you don't understand what going on.

>Just because they don't see the frustration of this process from your point of view, does not mean they don't share the same feelings or do not understand what you're going through.

>Let me take some Examples from the comments.

>Uncle Joe telling your just go put in an application at google. That's a pat on the back saying hey dont give up and put in one more application.

>Grandma telling you to wear a full-blown tuxedo to a start-up interview is just her way of saying don't let the stress make you slack off on your appearance.

>Your aunt betty saying that you don't need to study for eight hours and to just go in and be your self is her way of saying dont forget about to have fun, practice good mental health, and don't neglect your obligations.

>Mom being absolutely positive that you got the interview After round, After round, is Her only showing what she knows. She has seen Her son succeeded up until this point and she has no other reason to belive he won't.

>It gets annoying and it is frustrating getting your hopes built up. The key is that regardless of what happens they are still there for the next try.

>It compares nothing to the sting of getting out of an interview no matter how bad or good it and having no one to call. No one to tell you that you can do it and have no doubt that you will get it, or that they have no idea why they didn't pick you.

>What you have is a gift that not everyone has. Step back and be grateful for it, take some time out of your grind sessions and focus on the stuff that really matters.

>What your doing now is actually the start of pushing people out and burning very important bridges in your life. This is a long drawn out subtle process that turns people into jaded assholes.

>Take a couple of nights off, go have some fun with the family friends, make a few phone calls just to say hi and thanks, and sit down and watch the muppets version of a Christmas Carol. Don't forget some popcorn and hot chocolate

>We all have a little Ebeneezer Scrooge in us, some take the ghosts warning to heart, while the others ignore them. Don't ignore them.",1538526470.0,2018-10-02 20:27:50
731,"Programmers of Reddit, do any of you live rurally and own a small holder farm? Can you work remotely from your farm, and still have enough time to dedicate towards looking after the animals, chickens etc?",554,4l3380,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/4l3380/programmers_of_reddit_do_any_of_you_live_rurally/,169,,1464256651.0,2016-05-26 05:57:31
732,Last year I graduated at the top of my class with a B.S. in software engineering at 45 years old. I recently got a job starting at 65k as a java engineer. I plan on working until I retire.,550,2x2w8m,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/2x2w8m/last_year_i_graduated_at_the_top_of_my_class_with/,102,"I know someone who did the same at 55, and now is working at Lockheed martin. Never let age get in the way of your dreams. So, if you think you are too old to pursue CS / software engineering this should inspire you.",1424869232.0,2015-02-25 08:00:32
733,IAMA CS researcher. Let me tell you about undergraduate research.,550,cv8o3t,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cv8o3t/iama_cs_researcher_let_me_tell_you_about/,100,"I occasionally like to read /r/csmajors and /r/cscareerquestions, and I've noticed a fair bit of interest in the more ""academic"" topics in CS; ML/AI most commonly, and also things like security, theory, and more. There's not a lot good advice on how to actually get started in those though. While there are a number of potential ways to gain real experience with those topics, one of the best ways is to start early as a university student and get involved in undergraduate research.

## Who are you and what do you know about research?

Without giving too many details, I'm a researcher in a CS department at a major university. I'm not a professor. Rather, I'm someone who's a [""soft money""](https://academia.stackexchange.com/questions/30621/what-is-a-soft-money-research-position) academic whose responsibilities are mainly to conduct research and keep the money flowing in. This includes occasionally bringing in undergrads to help me with various tasks.

## Why should I care about doing research as an undergrad?

Undergrad research is a great opportunity available to university students, but from my experience, few actually take advantage of it. It's surprising because it has a number of nice benefits:

* You get to apply the skills you learn in the classroom
* You can get paid, get course credit, or both
* You're not bound to a strict schedule, so this job respects the fact that you're a student
* You get experience working on a non-trivial project
* You have the opportunity to finish something you can show off, like a poster, a lightning talk, or a workshop or conference paper
* You learn how to be peers with people much more experienced than you
* You gain lots of ""soft skills"" with all the collaboration and public speaking expected in research
* You start building up a professional network with some really well-connected people (little-known fact: academics tend to know a lot of people in industry, government, and other sectors beyond just the university)
* If produce presentable resarch, you get to travel to conferences and workshops
* If grad school (and especially a PhD program) is an possibility in your future, research experience is what sets competitive applicants above the rest

## What do undergraduate resarchers do?

It depends on the supervisor and the project, as well as individual students' interests and experience levels. 

In my work, I like to ask new undergraduate researchers to write code to pull metrics from the data I've collected, as well as improve and expand my data collection systems. This is valuable to me because it frees me to focus on the analysis I want to publish. And it's valuable for the students because these small well-defined tasks give them a practical introduction to a real research agenda and methods. As students gain confidence, I have them come up with interesting questions of their own and ways to expand the data in order to answer those questions.

My end goal is to put students in a position where they can investigate those questions and compile presentable results. At the very least, that means something they can put on a poster and discuss confidently with other researchers at a poster session at a conference. For the most ambitious students (and especially those with PhD aspirations), I guide them to refine and expand their research questions so we can write up a proper conference paper, with students taking the lead.

## What are the expectations for undergraduate researchers?

Again, it depends on the supervisor and project. For me, because I don't take on many undergraduate researchers (two at any given time, at most), I invest a lot of time and mentorship into the few students I do work with. In return, I expect them to be reliable and commit to working with me for at least two semesters consecutively. New undergraduate researchers require a lot of guidance and orientation when they first start, so it tends to take a while before they can produce presentable work. I also expect students to ask lots of questions, because being honest about what you don't know is a key skill in research.

## How do I get started?

Talk to your professors. Even if they don't have active research agendas (as could be the case with faculty at non-doctoral-granting institutions) or projects directly related to your interests, odds are good that they can refer you to someone else who's looking for part-time help. Some CS departments---like the one where I earned my bachelor's degree---might also announce research opportunities by email, but those generally boil down to ""talk to Prof. So-and-So about this opportunity.""

When you meet with a potential research supervisor, relax. Being on the other side of the table, I'm not out to grill you or make you do pointless whiteboarding exercises. I'm just interested in seeing if my projects sound neat to you and figuring out how much time you can commit working on things.

In my experience, I've had the best outcomes with students who start at the end of their second year. I'm able to get them up to speed more quickly and thoroughly when they work with me full-time during that summer, and they have plenty of time to finish producing presentable work in time to show off for job and grad school applications.

## How do I get the most out of it?

Speak up and tell your supervisor what you want. Don't be passive and just take orders. If you want to be on a paper, say so. If you have a particular angle for a study you want to explore, bring it up for discussion. If you read something cool that you want to incorporate into the work, share it. If you'd prefer to work with a different team or topic, that's fine.

## What are the downsides?

Long story short, your mileage may vary. There are some research groups that churn through undergrads as if they're a disposable resource. There are supervisors who (often understandably) have too much on their hands and can't dedicate to mentoring students as I can as a pure researcher. There are groups that don't have much internal cohesion or ""esprit de corps"" to help one another out. Basically, a research group is a workplace, and workplaces have their own unique cultures.

You probably won't learn the latest frameworks, best practices, and hottest development tools doing research. ""Research code"" is indeed often ugly, hacky, and unmaintainable. I'm a rare bird in my research community in that I have considerable industry experience too, so I'm able to mitigate this to some degree. Even then though, ""maintainable software"" isn't as big of a priority in research as ""present interesting results.""

If you're on a path to writing a conference paper, you'll (ideally) find yourself with a lot of responsibility as the lead author. This means reconciling the often-conflicting opinions of your co-authors, who are almost certainly far more experienced than you. This is a natural part of the internal tension in research, but it can be overwhelming at first for students trying to figure out whether to listen to Prof. A more than Dr. B or vice versa.

## BONUS: How do I get involved in this when I'm no longer a student?

It's not impossible, but it's *much* more difficult. I'll start with the bad news: You have a lot of things going against you when you're no longer a student because (as mentioned earlier) getting started in research requires a lot of guidance and mentorship at the beginning. It's really not something you can learn on your own. I've had the best results with students who work in the same room as me full-time for a summer. If you're out of school, it's likely the best you can do is part-time and mostly remotely, neither of which is ideal. Research is done in a community, and it's hard to be taken seriously in a community if you don't commit to it and if you don't have someone vouching for you.

That said, there some things that can improve your chances and make your experience more productive:

* Work somewhere that employs PhDs as researchers; reach out to them! They might know of opportunities you can get involved in, and you're likelier to receive a response and have a face-to-face chat if you're in the same organization.
* Likewise, if you have friends who are researchers or are in PhD programs, ask them as well.
* Become familiar with the academic literature in the topic you're interested in. The best way to do this is to look at the syllabus for graduate-level courses to see what papers they read and in which venues those papers were published.

## BONUS: What are things I should look for in a research supervisor/group?

My personal preference is that aspiring undergrad researchers most need proper mentorship and guidance. That means either your supervisor or someone in his/her research group will take on the responsibility of helping you get settled into the rhythm of research. That should be someone who's approachable and happy to answer any question you have. Without that initial guidance, it's really easy for students to waste time instead of working towards being productive researchers who know what they're doing. If I were a student, I would ask questions like:

* What are the relevant papers I should read?
* What level of supervision should I expect?
* How often are we going to have face-to-face status meetings?
* How often are we going to have in-person work sessions?
* What deadline are we working toward?
* Where did your other undergraduate research assistants end up?

## What else?

Ask me anything.",1566769522.0,2019-08-25 17:45:22
734,Is it possible to not seem fake when you're trying to network?,552,cywxp7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cywxp7/is_it_possible_to_not_seem_fake_when_youre_trying/,214,"I'm about to be a fresh grad with minimal work experience, and as such most of my networking will be me hoping that people I meet will help me find a job without having any particular reason to. 

It just feels strange talking to people just for the purpose of trying to progress my career. And it seems to me that it's very obvious to the other person what I'm trying to do (especially if we're at a networking event). 

Anyone else feel this way? What do you do about it? If I had some value as an employee then we'd be on equal ground, but at the moment they'll just be one-sidedly helping me out.",1567496269.0,2019-09-03 03:37:49
735,"Recently graduated, my advice to Computer Science majors",546,4smg78,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/4smg78/recently_graduated_my_advice_to_computer_science/,167,"This sub-reddit has helped me tremendously when it came to making the right decisions while in school. I just want to share what worked for me and give back a little.

**Do I have to go to a top tier school?**  
Not necessarily,  but make sure to go to one that is near a tech hub. Universities that are near tech hubs attract employers. I'm talking San Francisco, Seattle, Santa Monica, New York... Employers like to hire locally, and a lot of them want fresh grads so they go to the nearby universities. My education cost me less than 20k and was not the best school, but I was lucky enough to have a lot of tech companies show up at the career fairs. That being said, if you have the funds and the grades, absolutely go to top tier schools - as all the big tech companies will send recruiters there regardless of location. 

**What should I focus my time on?**  
Do not take Data Structures and Algorithms courses for granted. I went through a LOT of interviews, and that was the one topic that employers seem to care about more than anything else. Interviewing is a numbers game, you never know exactly what they will ask, so your best bet is to learn what is most likely to be asked. Could some guy toss an assembly question? Sure, but highly unlikely. Will you be asked to print every permutation of 'abcd' or some sorting problem? Much more likely. Take those courses seriously, and start doing programming questions asap. Consider the programming interviews to be your equivalent of a law school bar exam. Get a book, learn the crap out of every problem. Then do it again. Redo problems so you retain what you learn. Asides from that, work on programming projects, internships. Get work experience.

**Grades vs Projects**  
Maintain a 3.0+ GPA so you do not get weeded out, then focus on projects. I was never asked any questions about my grades or GPA - however I was constantly asked about my experiences with extra curricular programming projects. Every. Single. Interview was about my projects. Not only do projects fill up your resume, but projects give you the programming experience you need to have stories. Stories asked by an interviewer like: ""Tell me about a time you had to do X,Y,Z and how did you do it?"" or ""Tell me about a time when someone did something and there was a conflict how did you handle it blablabla"". No projects means no stories, no stories means you will not appear experienced to the interviewer. I did not have an internship under my bag, but I had tons of projects, an active github account, and people who benefited from my projects and could vouch for it. These stories are extremely difficult to make up on the spot, but easy once you have a few projects under your belt. The difference between my first round of interviews 1.5 years ago and the second round 4 months ago was that I now had stories - like the time I spent 4 hours on some bug, or when I helped solve a problem in some clever way, or what the strengths and weaknesses of a language I used were... I'm rambling. But you get the idea.

**Where can I find those so-called ""projects""?**  
Asides from personal projects, take a look at Electrical, Mechanical, Computer Engineering departments. A lot of them have group projects, sometimes funded by a company, and managed by faculty. At my school there were a handful of them to choose from, ranging from robotics, race-cars, brain-wave scans, to shoe box sized cube satellites. Don't forget to join the computer science clubs. There is a major shortage of programmers willing to work for free... the projects are there you just have to ask around.

**How many interviews did you fail until you got a job.**  
Let me preface this by saying that I was picky. I could have accepted a job early and settled - but I did not. I had a Google interview, and Google motivated me to study my ass off for 3 months. I failed it. I failed Amazon, Epic, M.S., and tons of others. I accidentally said ""shit"" at my M.S. interview. I took things personally. I got mad at the constant coding homework problems. I gave up on great job offers due to location - hoping I did not make a mistake for months. Speaking of mistakes, I basically made every mistake in the book. But in the end I found a company I liked, and by then I had enough experience failing that I did not care. After a while you realize that there is always another company, another interview. At that interview I cracked a few jokes, forgot to do my hair, nailed every programming problem, got the offer 2 days later. Just like soccer, reading, or playing piano, interviewing is a skill. You learn from your mistakes, you learn what to say and what not to say. Eventually you will realize that those guys interviewing you have not been studying interviewing questions for the last 4 months. You will realize you are probably smarter than them in that department and they just happen to know the answer so they sound smart. Practice makes perfect.

Anyways, just my 2 cents. I hope this helps somebody out there.

TL;DR: Projects > Grades. Location matters.


EDIT: I just want to point out that this is what worked for me. I highly recommend work experience as an intern as well. While I did not necessarily go the path of being an intern, I don't want this post to come off as ""Projects > Internships"". IMO they are both extremely important and should be pursued while in school.",1468434094.0,2016-07-13 14:21:34
736,PSA: To anyone who hates coding,549,jjg79k,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jjg79k/psa_to_anyone_who_hates_coding/,176,"I understand your plight. I went through college doing the bare minimum. I would wait till last minute to do a project and spend 7-8 hours a day trying to scrap up something to turn in. I use to collaborate with other students, just so I wouldn't have to do the work. I'd ask a lot of questions, but never really contribute in those sessions. I would always tell myself, ""I don't love this, I'm only doing this to get my parents off my back and for the money."" I didn't find out about possible career options until I was in my last year. I found out that a potential path is Product Management. I was excited because I wouldn't have to code all day, because I hated coding. I ended up graduating from a CSU that isn't that notable with zero experience and very weak projects. My coding knowledge is also pretty limited. 

I'm struggling to find a job (possibly because of covid). I limited myself into having a narrow mindset in college and now I'm paying the price. I watched every video you could imagine on YouTube about polishing my resume or on LeetCode. Ever since graduating in May, I haven't really added anything to make myself stand out. So, thinking that my projects were lacking I would go and copy tutorials line by line to develop my portfolio. Keep in mind, my outlook on coding hasn't changed, I still don't enjoy coding. 

Something clicked last night when I was browsing this sub. /u/Amjeezy1 comment changed my outlook. ""**MAKE shit that you have an actual interest in**. DO NOT make projects that you are not into."" The gears started turning. Every ""project"" I've ever done hasn't really been something of my own or particularly enjoyed. All the tutorials I've watched were a waste since I didn't retain anything. 

I started a project yesterday for a problem I think I can fix. In the beginning, I didn't know what I was doing. So like always, I went to find a YouTube video to help me along the way. Half way through part 1 of 10 videos,  I realized I was just copying the tutorial line for line again. I quit the video and started to work on my own, inspecting websites and using Google for when I got stuck. I'm on day two of this and I've spent probably 6 hours doing my own work for once. To be honest, I'm actually enjoying coding again. I'm creating something without using a walkthrough or guide. I'm excited to finish the frontend, then move on to the backend and finally deploy this. I'm hoping this will help in my job search but that isn't the reason I'm developing this. I'm doing it because it's a project that I'm interested in. So for anyone who hates coding, try developing something you have an interest in without using a tutorial on it. Hopefully you'll have the same outcome. : )

tl;dr - Make something you have an interest in without using a tutorial and the enjoyment will follow",1603883404.0,2020-10-28 07:10:04
737,"Dear Recruiters, may I know what is it that you expect in a new grad software engineer?",554,eok96b,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/eok96b/dear_recruiters_may_i_know_what_is_it_that_you/,292,"So I've applied to around 300 positions and I haven't been able to find a job. I wouldn't be ranting if I got interviews but failed to convert them. The problem is that I've got only 1 interview for 300 applications. And most of the positions are new grad. It's the same story with a few of my new grad friends. So dear recruiters, what is it that you look for?

Edit: So the popular opinion is that I probably screwed up my resume. So here it is.",1579031403.0,2020-01-14 14:50:03
738,Being a good swe is making my boss give me unwanted manager responsibilities.,553,gxpzko,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gxpzko/being_a_good_swe_is_making_my_boss_give_me/,93,"Hi, long story short i'm currently in UK big4 (accounting) as a c# swe and erp consultant for 2 years.

Unintentionally, i seem to somehow have a lot of presence in the office and be the ""go-to"" guy for questions or advice. 

The upside is that the big boss is recognizing this and tries to help in many ways and wants to give me a raise. The downside is that they want to shape me into a manager/sales/something that i want to avoid like the plague.

It began with assisting in training new hires, then be part of interviews, then actually interview and evaluate tech skills of candidates, then asking for advice on how to promote our services. I have had to have meetings and convince people of our great services, i have had to speak with clients and have 4 hour calls as a ""leader"" to understand their business needs which was hell on earth.

Sounds good in theory but i have been programming less and less, and now my responsibilities look more like a manager and/or salesman with tech knowledge..

I tried saying its not a good fit for me but the response was something like ""we value your skills and thing you would be valuable to us in X and Y activities, and we are sure you will like it. It is necessary for you to move forward blah blah"" to sum it up 

No idea what to do, coders im calling for your help",1591474831.0,2020-06-06 16:20:31
739,I've been fired 3 times in the last 14 months.,543,c3ttdi,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/c3ttdi/ive_been_fired_3_times_in_the_last_14_months/,159,"I'm a web developer. Yesterday I got let go from my job and I feel at my lowest low.

Here's the gist:

- [established startup]1st job (10 month tenure): I was let go due to not communicating enough, I believe. My skills were not the problem as my CTO said. I was put on a PIP 3 months before my departure, so I joined a local ToastMasters club. Still got let go.

- [very new startup] 2nd job (10 month tenure again): Startup. Funding was not acquired. Not so bad. Still stung. Still let go without warning.

- [big company] 3rd job (4 month tenure): I signed. contract-to-hire, to an Angular 6 position and after I signed on the dotted lines, I was told I'd be helping an Ext.js 6 project, too. It was mostly 50/50 workload. Then it started to do more Ext.js. About 2 months in, we get a new mandate, we're switching completely to the company's main Ext.js 4 app. It's very big. Been in development since '08? 3 months in, I get pulled in and being told I'm struggling with the Ext 4 project (I am, It's tough.) The only other UI dev there has been there years and knows it in and out. I'm also told that I'm not writing enough lines of code and that I am not contributing enough.

Not even too 2 weeks later, yesterday, I get the knife. During this time, I was working between node.js and Ext 4 due to the workload. Also, don't believe anyone who says they are transparent.

So....... either I'm very bad or I'm not finding the right job.

But I'm unemployed.... again.",1561260958.0,2019-06-22 23:35:58
740,"6 months into a big pressure CS job. I love the job, but can't sleep",548,btf95o,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/btf95o/6_months_into_a_big_pressure_cs_job_i_love_the/,111,"Find this job after moving away from a miserable big company job I had for a year.

Loved the new job from day one. It's beyond stimulating.

My fellow engineers are a few steps above me both in business knowledge (expected) and in CS knowledge (I was expecting to be comparatively better, but it's not critical TBH).

The environment is pretty stressful as there is plenty to do and no matter how fast we go the competition seems to bite our heels every time we trip. That is quite stressful, and while I don't mind the stress (single dude who moved abroad for the job), when I get to bed I cannot slow down my head. I keep thinking ""I need to check this"", ""I should really unit test that"", ""we should try such and such"", it never ends.

So it's 2am again and I cannot sleep. I go to bed religiously at 10h30 and don't touch my phone (today I made an exception to write this post).

Weirdly enough, I can sleep like a baby on weekends. But tomorrow is a working day, and I'm back to being unable fall asleep.

I eat healthy and work out 2-3 times a week. 

I honestly don't know how I can ease myself into sleep, but I'm guessing some of you had this problem so if you can help me, I'm all ears.

Thanks in advance",1558944888.0,2019-05-27 04:14:48
741,Spoke with a company and they told me I'm not allowed to ask questions,542,jkw6aa,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jkw6aa/spoke_with_a_company_and_they_told_me_im_not/,161,"So I had an initial in*terview* with a company last week. The hiring manager was great and gave off a really good impression of the company. I asked her about the role and she could only give me surface level information since she wasn't technical, which is totally understandable. She liked me enough to schedule an in*terview* with the team where they could answer my questions.

So I had the int*erview* and it was with devs from Ukraine. I was immediately bombarded with questions as it seemed like they were really rushed. I tried to ask questions about the role but they just kept on throwing out questions. At one point I even said, ""hey I have a question...."" and they just kept on throwing out more questions to me. Finally after the meeting's time was up I said, ""I have a lot of questions about this role"".

The lead guy said, ""We do not answer questions. That is for the next round if you make it there"". Uh, what? At this point I barely know about the job, team, expectations, structure, or culture (well maybe I know a little bit about that now).

So my question is, is this a red flag? Is this just a cultural thing or something? I thought it was bizarre and I was left hanging without knowing anything about the job but I wondered if I'm over thinking it.",1604091166.0,2020-10-30 16:52:46
742,38 and changing career,548,huj6m9,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/huj6m9/38_and_changing_career/,131,"I’m a 38 year old mum of two who’s been at home for the last 10 years. I’ve always had an interest in tech but never thought I could make a career out of it until this year. I made myself an intensive boot camp schedule and been studying a lot, although all of it has been self taught, it’s going great and I have learnt a ton. I have a couple of questions and I hope this is the right place to ask. Firstly I’m applying for a government funded 8 week course with an interview with employer at the end of it (no where near ready for employment at the minute but it will be good experience) They have asked to see my CV as part of my application, I haven’t looked at my CV for quite a long time and I don’t know where to start trying to update it. Second question is about LinkedIn and what should I write as a headline, I’ve just added my online certifications I’ve achieved this year.  Lastly how I prove what I know as I don’t have a degree and self taught? I have a GitHub with my projects and I’m in the middle of doing a portfolio website but is that enough for a potential employer? Any help would be greatly appreciated 😁",1595270910.0,2020-07-20 14:48:30
743,Junior engineer facing burnout and layoff and in need for advice,542,hb83b0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hb83b0/junior_engineer_facing_burnout_and_layoff_and_in/,116,"Hello, fellow engineers and all the wonderful people on this sub.

I was recently laid off from a well-known tech company in the greater SF Bay Area. The layoff happened after two years of grind, learning, and hard work post-graduation. I graduated from a top CS school, and it was a difficult journey to graduate and maintain a good GPA while also looking for a job. Now I am finding myself chewed up and thrown out and it seems like all the hard work had gotten to waste. I am currently back into practicing Leetcode and looking for a new job but I am feeling the depression/burnout slowly creeping in and I am starting to doubt everything that I have worked hard on over the years.

The fact that I was ""let go"" despite the hard work that I had put in makes me unmotivated to move forward and hustle like I once did. Also, I once was immune to rejections and would go above and beyond to get a job/internship but now it seems that rejections are getting the best of me and I keep facing self-doubt and low self-esteem that I rarely had in the past. Any advice is highly appreciated.",1592485476.0,2020-06-18 09:04:36
744,$115k TC in Chicago with one year of full-time experience,545,fbvafn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fbvafn/115k_tc_in_chicago_with_one_year_of_fulltime/,238,"There seems to be a lack of Chicago info on this sub, so hopefully this post is useful to some.

Academic/internship background:
-Big 10 engineering degree with CS minor, 3.1 GPA
-Software QA engineering internship at a large software company
-Software engineering internship at a startup

Current position:
-First job out of college
-Midsize consulting firm 
-Starting TC $86k, promoted at annual review to $92k TC

New offer:
-Software engineer 
-Finance industry (private equity)
-$100k base, 10% annual bonus, 5% 401k match

What I learned during my brief job hunt:
-The highest paying employers in Chicago are either FAANG (obviously), finance (private equity and prop shops), or the big Chicago software companies (Braintree, ActiveCampaign, etc.) 
-Getting a phone interview is way easier once you’ve spent a year in the workforce
-$100k+ jobs with one year of experience are not at all unheard of (in Chicago)
-Unless you’re applying to FAANG or to a particularly intense technical role, interviews really aren’t that bad (spent weeks memorizing algos to only be asked basic easy and medium LCs and one design problem)
-NETWORKING IS ONE OF THE BEST THINGS YOU CAN DO FOR YOURSELF (I landed this interview because an old work buddy is currently employed at the company)

Feel free to ask any more questions in the comments.",1583104249.0,2020-03-01 18:10:49
745,College has not at all prepared me for the workforce.,547,e6uocy,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/e6uocy/college_has_not_at_all_prepared_me_for_the/,252,"I graduate in May. Recently, I have taken 4 onsite interviews at larger companies (Not close to FAANG) and they have all been miserable failures. I have interned with companies for about 2 concurrent years as I fortunately attend a city school and can work concurrently to my education. I have gained experience but perhaps not enough. In every onsite interview I have been grilled with technical questions. Questions regarding how I would implement resource and process distribution without kubernetes, explaining exactly what goes on with garbage collection in Python, how I would go about building my own C++ web server for a proprietary operating system, optimizing access to petabytes of SQL DB data,  so many hard core questions that I panic and blank on things I have done for work in the past but can't get out in the moment. I have other interviews scheduled and I want to cancel them. I am embarrassed every time I sit in front of them and seemingly waste their time. This goes so far beyond my college classes. I have never been asked anything that I could explain using any of my collegiate eduction. It is all work experience. Perhaps maybe my education was subpar but I am not even in the realm of answering some of the questions I have been asked for entry level jobs. On several occasions I want to just apologize and walk out of the room. If the bar is set this high for entry level knowledge, I don't know where I am supposed to find it or with what time.",1575641169.0,2019-12-06 09:06:09
746,[PSA] Cost of Living & You :: A Defense of Big Cities,543,6o0ypv,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6o0ypv/psa_cost_of_living_you_a_defense_of_big_cities/,292,"*^By ^popular ^demand*

Every once in a while here, someone helpfully points out that earning minimum wage in Smallsville is the same thing as earning ***one million dollars*** in San Francisco, and then I have to explain that handy dandy cost of living (CoL) data sites like [Numbeo](https://www.numbeo.com/cost-of-living/) or [Best Places](http://www.bestplaces.net/), while useful, don't tell the whole story. Nowhere close to it, in fact.

Now I'm not here to argue that places like SF and NYC aren't very expensive (they are), but these websites often exaggerate the difference even so. Here's why you can't just take a salary from one area and naively multiply it by the difference in cost of living that a website tells you about.

(For the sake of simplicity, I'm conflating big city with expensive city here, since those two attributes are usually correlated. I know that expensive small cities (Boulder) and cheap big cities (Detroit) also exist.)

###Some things cost the same no matter where you are.

Anything digital, like your Netflix sub, or all those cheap Steam games you buy on sale, same price no matter where you are. Almost any durable good that comes out of a factory, like your laptop or a car, same price across the country. For many nerds this constitutes a sizable amount of spending.

### Some things are actually effectively cheaper in bigger cities, in both obvious and subtle ways.

One of the more obvious ones is air travel, especially internationally. It's going to be significantly cheaper (and less time/headache) to travel overseas if you live in a metro with multiple major airports, like SF or NYC, than if you live in Des Moines. A more subtle one may be, say, 'shows', like comedy tours or concerts or plays. Living in a small city, you'll probably have to travel a fair distance, maybe even stay at a hotel in order to participate, whereas the person who lives in a big city can just wait for the tour to come to them.

And here's an even trickier example: let's say you're comparing transportation in NYC vs Tulsa. BestPlaces, a cost of living comparison site, says that that category is more expensive in NYC. Makes sense, it's definitely more expensive to have a car in NYC, and the transit pass probably costs more there too. Except...transit is nearly always much cheaper than owning and operating a car, and relying on transit is much more realistic in NYC (transit mode share: ~57%) than in Tulsa (transit mode share: 1.4%). Essentially, what these sites can fail to account for is how *viable* different strategies or lifestyles can be, and the financial impact therein.

### Most things that are good about cheaper areas can be had for more money in expensive areas

...but the reverse is frequently not true: things that people move to big cities for cannot be had in cheaper areas at all. The most salient point here is, well, usually the biggest thing people cite in favor of smaller cities is the cost of housing, that they can get a big house for cheap. That's something you *can* get in bigger cities, it just costs much more, so that goes into the formulas. Conversely, many of the reasons that people cite for living in a big city, like walkability or cultural diversity or a feeling of ""happeningness"", simply don't exist in smaller cities, and can't be bought at any price.

Ok, so what? Consider: if you *could* get walkability in a smaller city by paying a 'neighborhood service fee' of $200/month, that might get taken into account in a cost of living calculator, and it'd make the bigger city look better. But since it's not available at $200, or $500, or $10,000, or infinity dollars, it just gets ignored instead. You can't do a price comparison for something that doesn't exist, so they never make it into any formula, which again slants things against bigger cities.

### Cost of living calculators use generic calculations that don't take into account *your* particular needs and wants.

This is sort of a meta-point. Even if a CoL website accounted for all the problems above, ultimately it would still be a ballpark figure based on a hypothetical, average basket of goods. Fine for you if you're average in your spending in every way, but otherwise you need to think about your particular spending habits, and your particular values and priorities. Someone for whom the number one priority is owning a big house will probably be well-served by CoL sites and should target a smaller city. Conversely, someone who places a high priority on traveling the world would probably be better served living in a major city with a major airport or two.

### Savings is CoL-orthogonal *if* the savings will be used after you move to a different city.

This is most relevant for retirement savings: if you're not going to retire where you currently live, then it's the absolute dollar amount that you are able to save right now that matters, **not** the amount you're saving relative to your current cost of living. This means that living early in your career in SF tends to give you a life flexibility advantage, since moving will effectively increase the purchasing power of your savings, whereas the opposite is true if you saved money living in a cheap rural area. It doesn't matter if saving $5,000/year is a big deal and could sustain you for years in Middle-of-nowhere Arkansas, it's not going to be terribly useful if someday you do decide that you want to try out living in Boston instead.

### Cool cool cool, but what should I *do* with this newfound insight?

Using CoL sites is still okay for evaluating ballpark expensiveness as long as you're aware of their biases and shortcomings. If you want to, say, look at *specifics* comparing two different areas, create a rough budget based on how you would live (for more on that, perhaps check out [/r/personalfinance's budgeting tag](https://www.reddit.com/r/personalfinance/search?restrict_sr=on&q=flair:Budgeting&feature=legacy_search#res-hide-options) or their [budgeting FAQ](https://www.reddit.com/r/personalfinance/wiki/budgeting)) in those two areas. Numbeo's per-item breakdowns are good for this, as are the usual online tools and websites that let you estimate major costs: padmapper, craigslist, zillow, etc. With a budget in place, you can think both about your potential lifestyle in an area and its attendant costs, and also how much saving in that area would affect your financial future.",1500415588.0,2017-07-18 18:06:28
747,Received a job offer using a boring and outdated stack (Magento/PHP)... But it would be a MASSIVE pay raise. Should I leave my reputable company for it?,540,ha5947,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ha5947/received_a_job_offer_using_a_boring_and_outdated/,201,"Hey all, I am 2 years into my career and like the title said, I have received an offer that is a 40% pay increase from my current job. 

The problem is, I would be leaving my current company that is a very reputable company in Canada and is going through quite the digital transformation that involves moving our current architecture to micro services... Which I find pretty cool.

I know 40% sounds like a lot, but I am worried getting into Magento would be career suicide. Does anybody have any advice for this situation?

Both jobs are in the e-commerce space, neither of them are tech companies.",1592347182.0,2020-06-16 18:39:42
748,"[UNOFFICIAL] Salary Sharing thread for NEW GRADS :: December, 2019",544,e6k4lm,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/e6k4lm/unofficial_salary_sharing_thread_for_new_grads/,897,"Note: The automatic thread seems not to have been posted yet. If it posts, then I will be happy to delete this thread at the mod's request! Below is the template from June 2019.

\----------------------------------------------------------------------------------------------

**MODNOTE:** Some people like these threads, some people hate them. If you hate them, that's fine, but please don't get in the way of the people who find them useful. Thanks!

This thread is for sharing recent new grad offers you've gotten or current salaries for new grads (< 2 years' experience). Friday will be the thread for people with more experience.

Please only post an offer if you're including hard numbers, but feel free to use a throwaway account if you're concerned about anonymity. You can also genericize some of your answers (e.g. ""Adtech company"" or ""Finance startup""), or add fields if you feel something is particularly relevant.

* Education:
* Prior Experience:  

   * $Internship
   * $Coop
* Company/Industry:
* Title:
* Tenure length:
* Location:
* Salary:
* Relocation/Signing Bonus:
* Stock and/or recurring bonuses:
* Total comp:

Note that while the primary purpose of these threads is obviously to share compensation info, discussion is also encouraged.

The format here is slightly unusual, so **please make sure to post under the appropriate top-level thread**, which are: US \[High/Medium/Low\] CoL, Western Europe, Eastern Europe, Latin America, ANZC, Asia, or Other.

**If you don't work in the US, you can ignore the rest of this post.** To determine cost of living buckets, I used this site: [http://www.bestplaces.net/](http://www.bestplaces.net/)

If the principal city of your metro is not in the reference list below, go to bestplaces, type in the name of the principal city (or city where you work in if there's no such thing), and then click ""Cost of Living"" in the left sidebar. The buckets are based on the Overall number: \[Low: < 100\], \[Medium: >= 100, < 150\], \[High: >= 150\].

High CoL: NYC, LA, DC, SF Bay Area, Seattle, Boston, San Diego

Medium CoL: Chicago, Houston, Miami, Atlanta, Riverside, Minneapolis, Denver, Portland, Sacramento, Las Vegas, Austin, Raleigh

Low CoL: Dallas, Phoenix, Philadelphia, Detroit, Tampa, St. Louis, Baltimore, Charlotte, Orlando, San Antonio, Pittsburgh, Cincinnati, Kansas City",1575594480.0,2019-12-05 20:08:00
749,What's up with the tech sector in the USA?,539,9hpoj7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9hpoj7/whats_up_with_the_tech_sector_in_the_usa/,440,"I've been lurking this sub for quite some time now. And I still get shocked when I'm reading about your experiences with companies. Asking stuff about binary trees, quite complex mathematical problems, the extreme competition at the entry-level et cetera.

In Europe it's quite different. You get a bachelors degree and you simply choose which company you want to work for. There is a massive shortage of programmers, so the companies practically beg for you to sign for them, even at entry-level. I have to note that a lot of tech companies in Europe work as a consultancy boîte. Meaning they'll hire you to another company and after x amount of time you get another project.

Interview questions are generally about your thought process and understanding. They won't ask ""create the shortest path between this uberfluxgazillion tree in a quantum accelerator"", no they'll ask ""we're creating this system, draw a crude architecture on the board"".

Is it really that bad in the USA? Or are you guys just over exaggerating? If not, you guys should go on a strike because damn...

&#x200B;

EDIT: And don't get me started on the amount of hours you guys work... I work 40hrs/week and I'm off to enjoy my weekend. Also, if you have a bit of experience (let's say 5yrs+) you can easily start as a freelancer. As a freelancer it's quite easy to bring home 120k+ euros a year, divide that by half to account for taxes and you got 60K+ a year. Which doesn't sound like a lot, but 60K+ is a looot here compared to the US.

&#x200B;

EDIT 2: I shouldn't have generalized the whole of Europe. I'm specifically talking about the Netherlands, Luxembourg, Belgium and Germany. I have no experience with the UK.",1537564138.0,2018-09-21 17:08:58
750,"Ageism in tech? I didn't believe it at first, but now am wondering. What do you think?",546,9wg3xu,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9wg3xu/ageism_in_tech_i_didnt_believe_it_at_first_but/,265,"I have 25 years experience programming, mostly web development, but other types as well, such as desktop and mobile.

I've been looking for a job since earlier this year, for months, and have barely gotten a response.  I landed one job, but they rescinded when I asked a question about the contract (a question about IP but they didn't even want to hear it, they rescinded before having a discussion with me, saying the contract is not negotiable).  Other than that, callbacks after submitting my resume have been rare, and one offer in 7 months is not a good ratio, considering the hundreds or more resumes I've put out there.

I tweaked my resume, changing its format, shortening it, lengthening it, placing elements in different places, etc.  I included things I've added to my skillset recently, such as React and Python.  More things in my portfolio, more projects in Github, blasting the resume to anyone and everyone, and also being more selective when that didn't work.

The past week, I've gotten more responses.  I have an interview Tuesday, and have two more that could be set up soon.  So what changed?

I removed 10 years experience from my resume, which was a full time job where I started as a developer and became CTO.  And I previously tested that position with different titles, downplaying it or emphasizing it.  That was hard to remove, but I wanted to test whether it made a difference.  I also removed anything else that would reveal my age, such as education dates.  This is all I changed, outside of some minor formatting.

And I've already seemingly gotten more response.  I will admit this is not scientific, but anecdotal.  I didn't apply to the same places who rejected my previous resume.  I'd also have to do a more detailed analysis of how many responses I got and how quickly after I removed my age from consideration.

But I do feel like there's more interest.  I was getting up and checking my email and getting almost nothing.  This morning I got up to a response for something I'm pretty sure I can get, although not ideal, but it's something.  This also happened last week.

I'm becoming convinced the removal of my previous work actually helped.  If I continue to get more of a response, great, I can possibly get a job.  But will this get easier or harder as I age from 50 years old to 60 years old?

My feeling is, it's time to get out.  I've been in management, and I've been a coder, and I want to code.  But what worked in my 20s, 30s, and 40s to get a job has changed, and I've changed with it the best I could, and it's gotten progressively harder.

This industry has an ageism problem, and not enough people are talking about it.

EDIT:  I forgot to mention I have lowered my rate by a great deal as a test as well.  Under 75k.  It did not help.",1542073216.0,2018-11-12 20:40:16
751,How to be successful at Amazon (or any other large company for that matter),540,4x0ugj,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/4x0ugj/how_to_be_successful_at_amazon_or_any_other_large/,208,"# EDIT: Thanks for the gold stranger!

**Alternative title: Things I wish someone told me.**

# Preface
Please take all of this with a grain of salt. Your individual results may vary. Some results not typical.
Feel free to comment with your own contributions and/or corrections. Please do not base your career decisions solely on this post.

**You have been warned.**

Now, back to the point.

# What to do


1. Get an mentor outside of your immediate team. Someone that works on roughly the same thing you do but is at least a few degrees of management away from you. You need someone to serve as your godfather/godmother who can answer politically sensitive questions. Try to find someone who is at least one level above you and has a few years under their belt. Ask around for people who are considered good mentors. The best engineers are not necessarily the best mentors and vice versa.

   Sensitive questions are things that, if you asked your manager, they would talk around it or take offense. In general, questions that you would never ask face-to-face if you wanted to have any shred of leverage. One example, is my project enough to get me to the next level? Any manager will respond saying “Yes, of course” because they want to keep you focused.
   

2. Get an on-boarding mentor on your team. Typically, your manager will ask someone who has been on the team for longer than you to do this. This mentor will answer your day-to-day question like “How do I set-up my environment”.

3. Start small and work up from there. It’s very tempting to choose to work on big (relative to SDE I) things right out the gate. Start small and work from there. Management cares about two things.
	1. Predictability. You don’t have to be  the best engineer. You need to make sure stuff gets done well enough but on time. Someone who produces OK but not great code continuously and is on-time and makes good estimates is better than the person who writes great code and solves the most complex problems in the eyes of management. Managers have schedules and need to adhere to them. Likewise, either be at the top of your game or get out. Managers have zero tolerance toward flakiness.
	2. Find out what your managers “fitness function” is. Also known as KPI (Key Performance Indicators) or OKR (Objectives and Key Results; the name is used by Intel and Google but all managers have these). Every manager has quanitative metrics around how well a team is doing. Common metrics at Amazon include trouble ticket count, high-severity trouble-ticket count, OPS (basically total amount of cash earned), latency (how fast things work), etc. Find out what the team-wide and organization-wide goals are. Work to achieve them. Use these as guides for your personal goals.
	3. Write good code. A good litmus test is how many comments do your code reviews have relative to the size. When I started, my code reviews consisted of mostly comments around how to better structure my code. Now they are mostly small things (find a better name for that method, add a comment here, etc.)***

          *** Good code is subjective. I once rewrote a major piece of JavaScript because it had a bunch of leaky abstractions without telling anyone. The WDE (Front-end engineer) who originally wrote it flipped out and wrote some less than positive things on my review saying I was over-complicating things. Keep in mind who your audience is.


4. Document everything! If it’s not on paper, it didn’t happen. Some ideas include...
	1. Having a personal “resume” wiki page with a running list of accomplishments with hard numbers and links to more details. Be specific with regard to what you personally did and what metrics you achieved. For example, “Implemented a distributed cache that reduced page loading time by 90% from 100ms to 10ms”. Have a link to the project wiki.
	2. For each task you work on, write a paragraph that encompasses the following. It sounds stupid, but having a paper trail is half the battle. Do this even if it is a small task. Your career lives and dies by how well your successes are documented. Drop your failures on the floor and hope people forget. NEVER EVER bring up a failure more than once.
		1. What you will do
		2. Key decisions
		3. Test plan
		4. Operational considerations
		5. Results

5. Ask for frequent anytime feedback. I like to do so after the end of a major project, so roughly every 3 months.

6. Avoid projects where you are the only person working on it. Not having other people review your work frequently will mean you are forgotten come review time. You want to be at the top of your manager’s minds.

7. Avoid being loaned out to other teams UNLESS it is for a serious project. A serious project is something that has multiple senior engineers on it. Being loaned out is a kiss-of-death for you. You are doing work for another team but your current team is evaluating you. Notice the problem?

8. Avoid projects where there are no senior (at least one level above you) people in the same job on it. If you are a SDE I, avoid projects that consist only of other SDE Is. You need visibility from SDE II+ to advance.

9. Avoid projects (and teams for that matter) that need SDEs for simple front-end and configuration changes. You need some meaty work. I was stuck with a shitty carousel that was sent for UX redesign N+1(!!!!)  times before management was happy (talk about too many cooks in the kitchen). Each iteration took about a week from getting a new design to management reviewing what was going to be deployed. By the time everyone arrived to something everyone liked, the feature became a static image. I had another colleague (SDE) who became a de-facto HTML helper for various business people. Most of these people could not bother to RTFM, so he was roped in to do it for them. 

10. Avoid ops-heavy teams. On these teams, SDE I’s get to do the majority of the ops work while the senior people get to work on important stuff. Once in a while, you will get a morsel to work on if your manager is decent. If not, I would find another team before doing more bitch work.

11. If you think you are going to work with Golang, React , Node or some other new technology, Amazon is not the place for you. Most of the stuff Amazon does is enterprise flavored Java/Spring with pockets of other things. Every now and then,, you find a team who is using Scala. I feel that there is a direction correlation between the number of senior engineers and the amount of new stuff a team uses.

12. Remember that this is just a job. At the end of the day, it’s like any other business transaction. Treat it as such. Don’t get emotionally involved.

13. Push back on unreasonable deadlines. Recruit others if you have to.

14. In meetings, don’t be caught without hard numbers. If nothing else, have back of the napkin estimates ready. Also, don’t be caught without an answer in a meeting. If you don’t have an answer, take a note of what the question was and who asked it. Follow-up with them ASAP! Do not bullshit an answer either. People can smell it.

15. On that note, be THE EXPERT on whatever components you own. When someone asks a question, answer it and add it to a wiki. Don’t be caught without an answer.

16. Most low-level SDE managers are only loosely technical, if at all. By loosely technical, e.g. they made an Android app or used AWS to build something. I would put it at the level of an undergraduate project, maybe a notch higher. That said, you become an SDM at Amazon by managing SDEs at Amazon (as a L6 Senior SDE that is serving as a team lead) or as an SDM /TPM at another company. In my time at Amazon, there were two SDMs that truly grokked the tech. One was an SDE on the same team for about 5 years and became the team’s SDM, the other was a PhD who had also served at Amazon for many years and built the system in question. Notice the pattern. Managers are on a need-to-know basis with the actual technology. If anything is going to kill Amazon, it would be this. Many managers are neither technical enough to directly contribute but are also not good enough people managers to manage independent-minded Amazonians.

17. Your career lives and dies by what happens in the OLR meetings (Organizational Leadership Review). It's the semi-annual meeting that managers stack-rank their subordinates. They typically happen in February and early September/late August. You get bucketed into one of 5 categories for technical skills (Outstanding/Exceeds/Achieves/Improvement Needed/Unsatisfactory) and 3 categories for leadership (Role Model/Solid Strength/Improvement needed). Getting any combination that includes Unsatisfactory or Improvement needed means you are on your way out. Likewise, not getting Exceeds or above means you are still on your way out, just not this cycle. Think of it as an A/B/C/D/F grading system. The company wants to keep people who are at least a B. The difference between Exceeds and Achieves is usually pretty small. Likewise, the difference between Achieves and Improvement needed is only slightly larger. It's very important to get Exceeds or better. Otherwise, you will get the shitty projects and your management will not listen to you. Remember when I said, the difference between Achieves and Improvement Needed is one cycle. In general, you want to avoid getting the same rating twice in a row (Read *Topgrading* by Bradford Smart if you are interested in the why). Low/mediocre performers are expected to self-select out after a few years.

As much as I hate to admit it, you are destined for an organization where consistently get the mediocre rating. Maybe it won't be in the same company, but it will be somewhere. It's like dating where people date up and down until they eventually settle for something in the middle.

# Don'ts

1. Do not ruin your reputation. It takes 20 years to build a reputation and about 5 minutes to ruin it. Do not let anyone think you are anything but the best. One mistake can be written of as an accident, twice is a problem. If you find yourself in this situation, leave. You need to reset your trust by going elsewhere. You will be amazed how many people make decisions on reputation alone.

2. Sit back and take it. If you do don't like something, make it known. After all, only the squeaky wheel gets the grease.

3. Never ever be negative. Like I said earlier, drop your failures to the floor and sweep them away. There is a reason people call them ""learning experiences"" and not ""failures"", the connotation is totally different. I didn't fail to deliver a feature on time, I learned that additional complexity is to be expected.

4. Do not make the same mistake twice. Once is okay, twice is a problem.

5. Do not ask the same question twice, it makes you look stupid.

6. Do not ask for help until you have throughly explored the problem. I like to keep a counter for the number of times I ask for someone else's opinion and set a daily quota for myself.

7. Do not assume that management is on your side. You should operate with a mercenary mindset. There are no loyalties. It's more like ""the enemy of my enemy is my friend"". Hold management accountable for what they say and what they do. Be ready to present hard evidence for or against your position. In most places, there is a two-class system. Management and everyone else. Act accordingly.



# References
* [What is an OKR?](https://en.wikipedia.org/wiki/OKR)
* [What is an OLR?](http://insights.dice.com/2013/10/28/why-its-so-hard-to-get-promoted-at-amazon-181/)",1470839862.0,2016-08-10 10:37:42
752,Hit a dead-end. Software engineering just isn't fun anymore.,546,e991g0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/e991g0/hit_a_deadend_software_engineering_just_isnt_fun/,368,"About 5 years ago I became burned out. I thought it was my employer who was the problem, but I tried different companies and slightly different roles to see what it was exactly. I ended up taking 1 year off of work completely, and decided that I didn't want to do this anymore. But, since this is all I've done all my life, it was impossible to find another job that paid half as well, so I got back into it, and currently hating every minute of it. I've tried nearly everything to try and just sit down and do work, but I can't for the life of me get anything done. I'm just not interested in it anymore.

&#x200B;

What do? Anyone got any tips for this?",1576109462.0,2019-12-11 19:11:02
753,What are some characteristics of a dysfunctional software team,534,g6magf,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/g6magf/what_are_some_characteristics_of_a_dysfunctional/,256,"  I just wanted to get some people's opinion on what they consider a bad software team.  While it's often very very easy to point fingers are individual software engineers as to why projects go south, it's more important to look at the dysfunction that surrounds said software team.   I'll hold off by giving my idea of bad software teams (but I've worked on numerous).",1587675967.0,2020-04-23 17:06:07
754,Getting fat while coding,542,cre28p,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cre28p/getting_fat_while_coding/,289,"I've been consistently gaining weight after I've started my programming jobs. I do 30 minutes workout and eat normal diets, but programming always leaves me extremely hungry after 2-3 hours, especially during crunch. I usually ended up grabbing a quick tuna sandwich from the company's cafeteria just to keep going. However, this extra 500-1000 kcal per day is starting to affect my health and my belly. The worst part is that during crunch my company is always bringing Dominos pizza, steak dinner, tacos, diet sodas, you name it. 

Is this normal? Does anyone have this problem and any tips to overcome this hunger?",1566025795.0,2019-08-17 03:09:55
755,My success story as a grad with low grade and no internships.,536,9rxic8,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9rxic8/my_success_story_as_a_grad_with_low_grade_and_no/,64,"I wanted to share my success story because I found them very helpful when I was really struggling. 

I attended a top 10 university in UK, I struggled a lot. In first year, I failed all of my exams but luckily passed the resits later on in the summer. Second and third year went a bit better but I still graduated with a third. For those that don’t know, that’s the lowest possible grade, below that is an outright fail. I didn’t do an internship, I didn’t even want a career in CS up until about a month before end of uni. I had a serious think about what I am going to do and decided to stick to it because I didn’t know anything else. 

I decided to brush up on my programming knowledge and I spent the next couple of months online courses and youtube tutorials, learning as much as I could. I had some interviews that didn’t go to well and I was invited to another that went really really well, I thought I had it. I loved the place and they seemed really happy with me but I didn’t… I was devastated, I honestly didn’t know what else I could have done, I thought that was my one and only chance gone. I was depressed afterwards, I gave it my all and fell short. The manager gave me excellent feedback and told me to not get discouraged and go out there and do exactly what I did here and that he’d love to work with me at some point in the future. I got back to learning and searching for more jobs. In the next 4 months, I learned a lot and had about 40 interviews for all sorts of companies. I kept getting declined and feedback I got over and over again was my lack of enthusiasm. I agreed but it was extremely difficult for me to come across enthusiastic for a job I didn’t really want. I honestly run out of jobs in my area. 

Out of nowhere, I received a call from the manager that had previously turned me down, asked if I was still looking for a job, I was. We had a chat about what I was up to in the last couple months, then was asked if I could come in for an interview the next day. I had less time than I would have liked to but I said yes, of course, that was my one and only chance returning to me. I went in the next morning. This time I was interviewed by the man up top this time, the CEO, as if the situation wasn’t stressful enough. Again, I did really well in the interview and received my offer withing couple days. I couldn’t believe it 6 months ago I was on the verge of failing my degree and now landed my dream job. I get to relocate to a place I absolutely love and work in a fantastic environment. I love it, couldn’t be happier. 

I cried when I got my offer through, there was a point where I thought I wouldn’t ever find a job. I’ve been continuously told by friends and family that I fucked it, I wouldn’t get anywhere with a 3rd, employers are looking for 2:1 or 1st. That I wasted 3 years of my life and £40000 on a worthless degree. I’ve been really discouraged by some people close to me, some saying that I should just try for a career in retail or fast food. I know it would have been much easier if I got a better grade or if I done an internship. What I want to say, I guess, is that it’s not too late, even if you fucked up massively, you can still recover! Better late than ever, if you are in a similar situation, start working on it now!

**TL:DR Almost failed my degree and had no experience, my one and only chance came back round to me and I landed my dream job within couple months of graduating.** ",1540701323.0,2018-10-28 00:35:23
756,How do I become a Full Stack Web Developer? -> Here's my Github Repo with 100+ Free resources to learn Full Stack Web Development.,540,5zsydr,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/5zsydr/how_do_i_become_a_full_stack_web_developer_heres/,82,"TLDR: [Github Repo with 100+ Free resources to learn Full Stack Web Development](https://github.com/bmorelli25/Become-A-Full-Stack-Web-Developer/)

18 months ago I dove head first into Full Stack Web Development. I wouldn't have been able to get off the ground without the awesome help I've received from reddit. So, I wanted to give back a little. I'm a chronic note-taker, and anything that I have found useful, I've saved along the way. Yesterday, I started cleaning them up, and added them all to a [github repo](https://github.com/bmorelli25/Become-A-Full-Stack-Web-Developer/). I still have a ton of links to go through, but wanted to release this in case others wanted to add links as well. 

My links focus on Javascript, React, and Node.js. It's a mix of reddit posts, articles, tutorials, classes, and courses. **Everything is Free.** There is also a wealth of information on interview prep and applying to jobs. This is all stuff you could find on the internet on your own, but hopefully this format will make it a little easier. 

Whether you're just starting to learn, or you've been learning for a while, hopefully this is helpful! Thanks again for helping me out along the way as well!

Here are all of the topics that I have:

* Start Here
* How to learn
* What is the Most Useful CS Bookmark You have
* Free Full-Stack Programs & Classes
* Learn HTML
 * Empty because I already knew HTML. Feel free to add links!
* Learn CSS
 * Pretty empty, for the same reason as above. 
* Learn Javascript
* Learn React.js
* Learn Node.js
* Learn APIs
* Learn Git
* Games & Challenge Websites
* Free Programming Books
* Open Source Contribution Opportunities
* Am I Ready to be a Developer?
* Software Developer Success Stories
* Resume's, Portfolio's, LinkedIn, Interview Prep, & Salary Information",1489723663.0,2017-03-17 00:07:43
757,Anybody feel like your company doesn't have the engineering know-how to do what it's trying to?,537,cxz54z,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cxz54z/anybody_feel_like_your_company_doesnt_have_the/,62,"We're going through a big transition at my ""growth stage startup"" company. The higher-ups recently fired the VP of engineering (or, rather, he ""voluntarily stepped down due to a disagreement about the direction the engineering department should take."") They also pushed out our lead FE engineer, on grounds that make it sound like they read one of those ""Firing my rockstar engineer and it's the best decision our company ever made"" articles.

The upshot of all this is that we have no engineers at the manager level or above, and no experienced engineers with authority over the department. They're reorganizing us into 3-5 person teams and ""empowering"" us to self-organize, self-manage, and handle an enormous refactor ""as a team"". But the team is mostly decent engineers with a few years' experience and a lot of different preferences/personalities - we're already seeing the fallout of everyone just doing what they want and no management with the authority/knowledge to make informed decisions and enforce standards, even to the point of ""how are we going to handle and process AJAX calls on the frontend?"".

I'm not in any immediate danger of losing my job, but am definitely expecting this whole situation to explode within 6 months. I don't think there's any point to talking to management about it - I don't have the political capital - so I guess I'm just blowing off steam and asking if anybody else has been through a situation like this?",1567306171.0,2019-08-31 22:49:31
758,"People who have worked as Software Engineers for a long time (10+ years), what does your career look like?",539,auolr0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/auolr0/people_who_have_worked_as_software_engineers_for/,255,"Where did you start, how did you get better at your job, how did you deal with the rapidly changing industry, what was your progression like, and where do you see yourself going now?

Edit: Would also be cool if we could see some salary progression :)",1551148780.0,2019-02-25 21:39:40
759,Being shown favoritism by boss,533,hrjbgr,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hrjbgr/being_shown_favoritism_by_boss/,164,"So long story short. I've been a full stack developer for 3 years and I consider myself 'good' at my job in the sense that I try to always deliver a good product and continuously grow through the years, skill wise and personality wise.

&#x200B;

What's been bothering me since I started at this company, my CEO seems to really like me. I mean really like me, like; asking how my hobbies are going, asking me to have dinner with his family, inviting me to his sons birthday (i am good with kids and get along with his children well). I always get the aggressive raise's i want and can ask him for direct input on career progression.

&#x200B;

What's been bothering me since the beginning is that I HATE the idea that I am treated better based on how much my boss likes me versus my performance, other employees (who have been there much longer) have started to question why they arent invited to dinners etc like me - who has been here for a 'short time' (and 1 or 2 others).

The other people my CEO 'prefers' all put him on a pedestal and kinda just take his word as gospel - i on the other hand really never do this with anyone. I prefer talking to people on an equal level but this makes it extremely difficult to be my opinionated self when there is an obvious power imbalance between us.

&#x200B;

So i'm seeking some advice, what do I do when my boss obviously wants to have a 'relationship' outside of work (like jogging together, dinners etc), but theres an obvious power dynamic and I want to just be myself and not put him on a pedestal like the others I mentioned. (Maybe that's why he's into me, because I keep running away haha.)",1594827485.0,2020-07-15 11:38:05
760,Lying to clients,542,fo1899,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fo1899/lying_to_clients/,81,"I am constantly required to lie to our clients to cover up for the frankly piece-of-shit product we're selling. This includes making up fake answers to technical support questions, lying about what features are in certain versions of the product because of poor project management on our part, making on-the-spot hot fixes without disclosing it to them, etc--all in an effort to minimize the amount of work we have to do.

I am so stressed by the constant juggling of facts I have to do to protect the company's ""reputation"" because in truth, the product is pretty terrible and they allocate almost no resources to it. Project management is practically nonexistent. It's not like we're endangering lives, but these tiny lies and mismanagement add up. The pandemic is only exacerbating my stress overall.

Is lying on this level normal in the industry? I feel like there's no effort at all on my company's part to deliver a good product or service.",1585065220.0,2020-03-24 11:53:40
761,"""Entry positions requiring n years of experience"" is a salary negotiation tactic",541,8op0m5,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8op0m5/entry_positions_requiring_n_years_of_experience/,128,"So I've noticed an uptake in posts asking for help on how to deal with job postings for entry positions asking for 3/4/5+ years of experience and a large laundry list of ""required"" skills. 

Let me tell you that this is a negotiation tactic. If you apply to the position and pass the interviews, they have a good starting ground to say ""well we'd like to make you an offer but since you lack the experience we can only give you X instead of Y. With time you'll be eligible for raises blablabla""

There are a number of ways you can answer that. My personal favourite was ""There's a saying in German. 'Buy cheap, buy twice.' With that offer you're buying cheap and I guarantee you're going to buy twice. This is my asking and it's in line with my skills, education, experience in this region."" (Obviously helps if you're negotiating front a position of strength or aren't under pressure to accept a job.)

If you do accept their low offer and leave at the first chance for a better salery, it gives you the added bonus of going to HR and telling them ""See? I told you. You're going to buy twice."" (If you're feeling extra cheeky ^^)

Bottom line, don't feel discouraged by those requirements and do your best! After all, that's all anyone can ask of you.

Best of luck!",1528214054.0,2018-06-05 11:54:14
762,Tips for staying focused for a full 9-5 day of work?,542,at4np8,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/at4np8/tips_for_staying_focused_for_a_full_95_day_of_work/,198,"I find i work better in a very free form schedule, but my work requires me to be there 9-5 every day. As a result I have a few short productive spurts each day of 1-2 hours each, but that still leaves me with 2-3 hours a day of staring at my computer screen, humdrumming about what I can work on that won’t take as much mental effort. Any tips on this?

Also, is it normal to look at the clock around 1pm each day and get all depressed thinking, “dang, another 4 hours of this”?

Edit: Thanks so much for the suggestions! This is super helpful.",1550793128.0,2019-02-21 18:52:08
763,I Went From Making $35k to $120k in 3 Years - AMA,536,7y0oef,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/7y0oef/i_went_from_making_35k_to_120k_in_3_years_ama/,300,"## **Introduction / TL;DR**
This will be a (likely long) post discussing how I went from living paycheck to paycheck and going through a divorce to entering the IT field as a developer, and more than tripling my income in three years. AMA, if you want to read the story/journey, see below.

## **Where I Started**
### February 2015 - $35k:
 * I was a month from my 24th birthday.
 * I worked at a cell phone company doing sales part time, making about $35k a year (including commission) in a High CoL area.
 * I was living paycheck to paycheck, some payment arrangements here/there to make ends meet, and borrowed some from family to keep food in the house.
 * I was married, but going through a divorce after my ex had an affair and decided to stay with the guy. I found out about the affair the day before Thanksgiving in 2014 (about 2 months prior to this).
 * I decided to start life fresh and moved out of state, transferring with the company I was with and working at one of their call centers for again, about $35k a year (depending on bonuses), though this was full time at $35k a year instead of part time. This move was to a Low-Med CoL area.

### August 2015 - $40k:
 * I enrolled in school at /r/WGU and started my Bachelors in Software Development. WGU, if you don't know, is an online school with accreditation that has a better rep than say, University of Phoenix or ITT Tech, but it's definitely not a top school by any means (sorry fellow alumni, but it's the truth). The classes were decent, but it's not the same as a traditional school IMO. However, it's what helped me get into the career field.
 * Around the same time I enrolled in school, my roommate in Idaho was able to help me get a position as a contractor for an international technology company, doing manual software testing of a web app. This was for $40k a year roughly. This was still in the same Low-Med CoL area.

### August 2016 - $50k:
 * By August 2016, I was around half way through with my degree at /r/WGU. I started with 3 credits, needing around 123 total, but WGU let's you ""accelerate"" learning by testing out of classes as soon as you enroll in them. I was doing upwards of 30+ units a term at times.
 * I had helped found a slack group for WGU IT students to connect, since the school had little in offerings for students to collaborate together. The group was founded in April 2016 I believe, and we had over 1000 members within a year.
 * Through networking with students in the slack group and with some developers at my current position, I was able to get an interview and earn a position as a junior software engineer at the same international software company, but not as a contractor, as a full time employee.
 * This new role was a sweet $50k a year, first salary role, and it felt amazing. This was in the same Low-Med CoL area.

### April 2017 - $70k:
 * By March of 2017, I graduated from /r/WGU with my Bachelors in Software Development, and had began looking for new-hire jobs.
 * I was able to find a local job, and moved into a SDET role at $70k a year, in the same Low-Med CoL area.
 * This role was great, and I really shined here. I was ecstatic to have double my income in two years, and the benefits with this company were fantastic.
 * I applied to and was accepted to the /r/OMSCS program from Georgia Tech, a school ranked top 10 in the nation, and the world, for computer science grad programs.
 * Though /r/WGU wasn't a great school, I was able to get in to OMSCS, and I planned to start Spring of 2018, taking Fall 2017 off.
 * Unfortunately, life calls sometimes, but I continued my journey onward...

### November 2017 - $95k:
 * Around the end of 2017, I decided to make the move out of state again to be closer to family. The state I was living in was great, but I had a few friends, no family, and really felt like I needed to move on to somewhere new.
 * I worked with a staffing agency and was able to apply for a position close to family in a Medium CoL area.
 * After a few rounds of interviews, a flight out to the company, and some negotiation, I accepted an offer of $95k a year. To give an idea, the CoL difference was about $10k a year more here than my previous area, so this was still a significant raise.
 * Once I started in this new company, however, I found  the culture to be *VERY* opposite of what I had expected and been used to.
 * The company was basically the movie *Office Space* on steroids, and I realized I needed to find something else.
 * I got a bit depressed, upset, and hard on myself thinking this move was a complete mistake.

### January/February 2018 - $120k:
 * In January 2018, I started at Georgia Tech in the /r/OMSCS program. So far, about 7 weeks in, it's going fantastic and I love the class I'm in, currently holding a 100% perfect grade.
 * At the end of 2017, I began interviewing with what I considered to be one of my unicorn companies.
 * After an intense, multi-round, few month process, I was given an offer for around $120k a year, with options, and amazing benefits.
 * The job is 100% remote, and for now I plan to stay in the same Medium-CoL area that I'm in now.

## **Summary**
In February 2015, I considered my life to be at (or near) an all time low. I was depressed, barely able to make ends meet, and making about $35k a year working my ass off to make sales for commission. 3 years to the month later, I'm starting a position making over 3x's that amount, have been able to pay off a LOT of debt (still some to go), start and finish my bachelors degree, start my masters program, and live a MUCH happier life.    


All of this to say, follow your dreams, push on, when life throws you a curve, lean into it. Feel free to **AMA**, PM or comment below.",1518833658.0,2018-02-16 21:14:18
764,How long does it take to learn “getting a job” level of leetcode?,534,i20ffi,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i20ffi/how_long_does_it_take_to_learn_getting_a_job/,248,"I’m applying for new grad roles across US and I’ve noticed that literally every other company has a leetcode style coding assessment followed by a technical interview. I can’t even pass the online coding stage.

I had two software engineering internships during my undergrad, but they didn’t even ask any coding questions. I guess they didn’t ask leetcode questions because they are giant non tech corporations, but I had a really good time there, and I was also given impactful tasks under major projects.

I’m very confident in my development ability, as in developing and maintaining applications, but I can’t do the puzzle styled leetcode questions. I would really hope that the companies I interned at gave me a return offer but they have hiring freeze so that’s not an option.

I’m also wanting to start my career in a tech hub like the Bay Area, but I really can’t do any leetcode right now. I’m currently going through DS and Algo basics again, but it was really embarrassing for me when I wasn’t able to crack leetcode easy style question.

What is the best way to get through the technical round asking leetcode? I’m thinking about putting an hour or two for two months straight, but I really don’t wanna wait to apply because of the already fucked up situation of this world right now.",1596346948.0,2020-08-02 01:42:28
765,After months of sending my CVs to companies,537,edh6xv,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/edh6xv/after_months_of_sending_my_cvs_to_companies/,118,"I got a response, and the first ever interview I had was a success. Got the job. What were the chances?

How many interviews did you have to go through in order to get a job?

&#x200B;

EDIT:

Wow, thanks for the responses, people. Really interesting to see what others have to go through. Anyways, here's my story short.

I started thinking of IT-related job when I wanted to create my own copy of a web game called Spyfall @ [spyfall.crabhat.com](https://spyfall.crabhat.com) just to practice and see what I can do. In parallel to learn React and all the neccessary things for web development. I created the game, it works fine and is probably better than the originals in terms of ease of use. Then I created my own portfolio website and it looked not as good, so a newer version had to come out some day. After finishing that, I started making small projects to fill my portfolio and increase github activity. In the meantime, I was sending CVs to companies and one company finally replied: ""Please let us know when we can talk on Skype"". I researched and found out they offer \~2500$ a month, require Angular, Docker, etc. We had many conversations, I made them a test project (shortest path finder in maze).

Then a big company reached out and asked for an interview. So I had 2 interviews that day: first the big one, then the 2500$ one. I was aiming for the second and thought I'd just practice being nice with my first interview.

Both interviews went well, and in a week I got a reply from the big company saying I should meet the team. So I did, and they gave me the job. There were 2 more people (maybe even more qualified than me) but they still chose me.

Now when the 2500$ company interviewed me, they looked at my CV and saw that my ""expected salary"" is about 1200$ since I'm a newbie, that's what they were going to offer. I got the big sad and lived with the fact. 

Despite never talking about salary with the big company, they offered 2700$ after the 4 month trial.

First workday in 2 weeks.

Never give up, people.",1576910019.0,2019-12-21 01:33:39
766,Does anyone feel like they lose algorithm skills way too quickly without practice?,535,9n5lvu,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9n5lvu/does_anyone_feel_like_they_lose_algorithm_skills/,156,"I took a 2 month break from Leetcode to work on a personal project. Before the break I could solve most Mediums in 20-40 minutes. Today I went back to Leetcode and failed several Mediums in a row. I feel like the difference between looking like a good interview candidate and a bumbling idiot is 2-3 weeks of dedicated Leetcode practice. This cycle has already happened to me several times. I would have thought at some point these problem solving skills would stay in my long term memory, but I suppose not. I feel like my memory for this is much worse than it is in other subjects, leading to insecurity and impostor syndrome.",1539250595.0,2018-10-11 05:36:35
767,"Long rant about drawn-out, negative interview process at Palantir. Just wanted to share.",532,50csfd,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/50csfd/long_rant_about_drawnout_negative_interview/,183,"I'm posting this on glassdoor but just wanted to share this here as well, for others that may be considering applying to Palantir.

**1 - Online Coding Challenge**

I submitted my resume via employee referral. I was promptly sent an on online coding challenge on HackerRank which I actually thought was a bit weird-- normally I would have thought a referral would have allowed me to skip at least the very first step but it did not appear that was the case. There were two questions. The first was somewhat simple, I don't really remember it anymore. The second can be found on glassdoor, it was about flagging financial transactions as fraud.

**2 - Technical Phone Screen**

A couple days after I submitted the coding challenge I was invited to a technical phone screen with a forward deployed engineer. I could hardly hear the interviewer, who mumbled a lot and was very unclear about answering any questions I had about the problem. The problem was about interpreting a string of stack-based commands. Two phases: the first was simple, just parsing simple math operations (+ ,-, / ,*) with numbers. The second phase was a bit more confusing, with added commands like Goto and Label to essentially create loops. The entire thing was actually pretty confusing--I had to ask the interviewer a lot of questions and I got the sense that it was intentionally set up that way to make sure that you weren't just coding without fully understanding the requirements. Given the difficulty communicating with the interviewer, I wasn't really expecting to pass, but I was invited to on-site interviews a couple days after the phone screen.

**3 - On-Site Interviews Part 1**

Palantir took care of transportation, meals, and the hotel for the on site. The day was as follows:

- Informal 1-on-1 chat with a current engineer, which they called the ""Palantir 1 on 1."" They said the purpose was just to relax and get coffee, etc., so that you can settle in a bit before jumping straight into coding interviews. It served its purpose well.
- 1st coding interview. Standard coding interview with an engineer. Mine happened to be with a team lead. We talked about a backgrounds a bit, he actually asked me to go into a fair amount of detail about my current work and I even ended up drawing a diagram on the whiteboard to explain some system design stuff I ended up talking about. Then he asked me an easy coding question about linked lists.
- 2nd coding interview. Less talking about background, went into the coding problem fairly quickly. The interviewer was only a couple years out of college and seemed a bit inexperienced technically. The question was somewhat tricky to get in linear time but not that bad. When talking about runtimes I actually corrected the interviewer about some python API runtimes, which the interviewer seemed to appreciate and seemed to regard as a positive.
- 3rd coding interview. This was stated to be a ""decomp"" (decomposition) interview, which is basically Palantir's version of the design interview, but was essentially no different from a regular coding interview. The question itself was technically easy and can be found here on glassdoor, but the interviewer was very interested in my thought process throughout the whole thing. Problem solving ability and communication seemed to be very important here.
- Informal lunch chat. My host for this seemed pretty distracted and was on her phone a lot and even interrupted to take a few phone calls in the middle. Definitely did not seem interested in the lunch chat and looked like she would much rather have been doing anything else.
- Product demo. This was 1-on-1 with an engineer rather than being a group presentation. It essentially turned into another informal 1-on-1 chat.

One thing to note is that Palantir seems to have done away with the past on-site process (documented in other glassdoor reviews) of doing 6+ interviews all in one day, then giving the decision immediately after. In the past, getting a product demo after lunch was a sign of rejection, while if you were a good candidate, you would get more interviews. For me, the recruiter told me it would be 3 interviews followed by a demo from the get go. I asked her if there would be any more interviews and she said if the feedback was positive the next step would be to have a final interview with a hiring manager the next week to determine if I'd get an offer or not. So basically they just moved the post-lunch interviews to another day entirely, rather than having them all at once.

**4 - On-Site Interviews Part 2**

I was invited to more on-site interviews, which wasn't a surprise. I was surprised however when the recruiter said that they wanted me to do one more coding interview (in addition to the hiring manager interview) because some of the feedback indicated that my coding was a bit slow. Fine, but I'm not sure how much faster they expect you to code if they also want you to properly explain everything you're doing. This time Palantir did not offer to cover expenses (I was semi-local). The interviews went as follows:

- Another informal warmup chat to start, with a team lead engineer
- The coding interview. Jumped straight into the question this time: balancing opening/closing brackets in a string. I thought it was cute that the interviewer attempted to dress this up as a real-life problem that they had encountered in the wild recently. I kept in mind speed while trying to maintain good communication.
- Hiring manager interview. First half of this was going through my resume and asking about my background. I did not major in CS in college (physics instead), so they really wanted to understand my switch from physics to CS, my previous job in another field (I currently am a software engineer already), etc. They were also very focused on understanding why I wanted to join Palantir. The second half was another decomp question, this time no actual coding, but just talking about the problem on the board with rough diagrams. It was a difficult question and they clearly were not expecting a final complete solution (I looked it up later and it's kind of a famous problem). Problem solving process and communication were again key.

After these interviews the recruiter called me a couple days later to tell me that all the feedback was ""very positive"" and that my coding, culture fit, behavioral questions, motivation for joining Palantir, etc. were all extremely positive. However, this is when stuff started to get weird for me. Instead of proceeding with an offer (which is what I had been led to believe would happen after the 2nd round of on-site interviews), the recruiter asked me if I were interested in a Forward Deployed Software Engineer role instead. This role requires lots of travel directly into client offices, and is essentially just being a consultant. I had been very clear since the very first recruiter call (right after the online coding challenge, but before the tech phone screen) that I was not interested in this position and that travel was a big no for me. At that time, they had clearly understood my desire and said that I would be proceeding with interviews in consideration for the regular Software Engineer role. So I was surprised that they seemed to be trying to do a bait-and-switch for the FDSE role instead at this late stage. I pushed back--I asked if this was a choice or if it was being forced onto me--and the recruiter backed off a bit, although she still said they would have to talk more about it. Another review here on glassdoor has said that Palantir is desperate for people to fill the FDSE role, since it doesn't seem to be very popular. I really felt this when the recruiter tried to gauge my interest for the FDSE role.

A couple of days later the recruiter gets back to me and says that they would like me to do yet another interview, this time with a Team Lead Software Engineer so gauge my fit for the regular Software Engineer role. At this point I am starting to get uncomfortable flags in my head. I had already talked to two Team Lead Software Engineers in my interviews--why weren't they able to get the feedback they wanted from those guys?

You can't really say no though, so I grit my teeth and said sure. The interview process was now going well into the second month. I asked the recruiter what the primary purpose of the interview was going to be and she said that it would essentially be a ""placement"" interview to determine what team would be the best fit for me. I asked her directly if there were any flags that had come up in the feedback up to this point and if there was anything I could demonstrate or highlight better in this upcoming interview. She emphatically said no, that this was ""not an interview to mitigate any flags or anything like that,"" and that everything was extremely positive so far, and that this was again just for placement purposes. She also said that this would NOT be a technical interview, and that it would be similar to my interview with the hiring manager, i.e. understanding my background, etc.

**5 - Final Skype Interview with Team Lead Engineer**

I had to do this via Skype since the interviewer was in Palo Alto. We did indeed talk about my background for the first half of the interview, and then the interviewer proceeded to ask a technical decomp question, which took me by surprise since the recruiter had said the interview would not be technical. Similar to the previous interviews, the interviewer dressed the question up as something they had encountered in their work recently (it wasn't). The question was about syncing relational databases across a faulty network connection. This problem is again, famous, and a final complete solution should not be expected in 30 minutes. I talked through the problem with the interviewer and asked a lot of clarifying questions. The interviewer said my questions were very good and agreed with a lot of things I said. Toward the end the interviewer found an appropriate place to stop and left time for me to ask him questions. I ended this interview feeling good about it.

**6 - Rejection**

A few days later I got a 2-minute rejection call, in which the recruiter said simply that the Skype interviewer did not feel that my technical skills were good enough. I was very taken aback at the rejection, and was left with the following questions:

The Skype interview was all talk and involved no coding whatsoever--how can the interviewer gauge my technical skills with such an interview?
I had 5 other evaluative interviews that were ALL stated to have been ""very positive,"" after multiple rounds. At each step in the process, I had also made it through the rounds of discussion and feedback, it wasn't like they were all in one day. How can one Skype interview derail all the other feedback?
Culture fit seems to be very, very important to Palantir, and this was another aspect of my feedback that was touted as excellent. How could they throw that away?

All told, I classify this as a negative experience because of the prolonged interview process and the bizarre rejection at the end. Even if I had been given an offer I would still have considered it a negative experience because of the blatant attempt at a bait-and-switch to the FDSE role, and the seemingly never-ending rounds of interviews that went well beyond what was communicated to me in the beginning. The other glassdoor reviews aren't very clear about how many total rounds there are, but I do think that I reached the very end of the interview process. I can't imagine there being any possible further interviews beyond what I had.

**7 - Final Thoughts**

Some final thoughts and observations about Palantir that I got from the whole process:

1. As others have stated, their employees seem very young on the whole, which is worrisome because it indicates a lack of senior engineers and leadership. Almost all of my interviewers were recently out of college.
2. Their need for FDSEs was palpable, and from my informal chats I gathered that lots of FDSEs switch to regular software engineers within a couple years. It seems that nobody wants to do the FDSE role willingly--people go on ""rotations"" as FDSEs.
3. The whole culture seems a bit ""off"" -- everything seems just chaotic enough (from workflows, to product management, to work/life balance) to make people a little uncomfortable, but not enough to send people leaving en masse.
4. Their reputation for having tough interview problems is totally overrated at this point. I'm sure it used it be hard, but all the questions I got were almost laughably easy. All of the questions were related to parsing arrays or strings. I did not receive a single problem that had to do with trees/graphs, or recursion, or dynamic programming.
5. Similar to the above, their attempts at dressing up common, easy problems as real-life problems that they had encountered in their work in the wild was cute the first time, but annoying the second and third times.
6. All of the above just reinforced the increasingly common perception of Palantir as just a glorified data-consulting company. Long hours, traveling to client offices, selling software suites, burning out young employees, etc.
7. Oh, and one of my informal chat interviewers straight up told me that vacation is discouraged (they have an unlimited policy).

In the end I am kind of glad I did not get an offer, although a significant portion of that feeling is just a coping mechanism. The bait-and-switch for the FDSE role was when flags started going off in my head, and that allowed me to more critically assess the negatives of working at Palantir that I saw from my other interviews. As someone else has already said, I'm not applying here again.


",1472612357.0,2016-08-30 22:59:17
768,Why are recruiters insistent on having phone calls instead of sharing information immediately?,532,b469n3,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/b469n3/why_are_recruiters_insistent_on_having_phone/,224,"Why are recruiters insistent on having phone calls instead of sharing information immediately?

I have had a few third party recruiters reach out to me on LinkedIn regarding opportunities. They typically start out with ""we have a role that would be a great fit for you."" Then when I ask for a job title and description to see if I am actually interested, they insist on giving me this information over the phone. 

Why is that? Will I be rude if I say that I would prefer him to send me this information via email / text so that we don't spend time discussing opportunities that I have no interest in?

I know they are basically similar to sales people but I can't imagine them wanting to waste their own time either. I would appreciate if someone can shed some light into this process. ",1553296607.0,2019-03-22 19:16:47
769,How to land a top-notch tech internship — and a tech job (A detailed guide for college students),533,5phiyf,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/5phiyf/how_to_land_a_topnotch_tech_internship_and_a_tech/,69,"[https://medium.freecodecamp.com/how-to-land-a-top-notch-tech-job-as-a-student-5c97fec82f3d#.fsea4t1r5](https://medium.freecodecamp.com/how-to-land-a-top-notch-tech-job-as-a-student-5c97fec82f3d#.fsea4t1r5)

Three and a half years ago, I began college with no programming background. Since then, I’ve applied to over 150 tech companies and completed dozens of interviews. I've learned a lot through my successes and failures, and I've distilled all of that into this article. I hope you enjoy reading it!

The article covers the recruiting process from beginning to end. It covers the following topics in detail:

* Building fundamentals
* Projects
* Resume
* Interview prep
* Applying
* Interview best practices
* What to do after the offer

If you learned something from this story, I'd really appreciate it if you recommend it (click the green heart). Also, please let me know if you have any feedback. Happy reading!
",1485128176.0,2017-01-22 18:36:16
770,Assigned to teach coworker basic programming concepts,526,hwekjl,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hwekjl/assigned_to_teach_coworker_basic_programming/,229,"I've been working at my current company for about 6 months. The project I'm on involves maintaining a huge codebase that's been around for over 15 years, for a very large and complicated piece of software. As a result, I'm only familiar with a few parts of the codebase that I've worked on and there's still a lot I need to learn.

In May, I was asked to help mentor a new developer, which I was surprised about because I'm still pretty new myself. It turns out this person is new to programming and needs a lot of help with her daily tasks. She knows the basic syntax of java, but needs a lot of help with everything. It's clear she's never used git and needed me to walk her step-by-step multiple times with creating a new branch and creating a merge request. She also often does things I need to correct, for example pulling changes from master into her current branch when we're working off a feature branch.

She also needs help with her programming tasks a lot of the time, both understanding what the bug is and understanding the codebase (which I can only help a limited amount because I'm still learning the code myself). I spent an hour explaining a pretty simple bug that needed to be fixed. She wrote a one-liner solution on her own, but it nowhere near fixed the bug. It involved something like adding an edge case and a new error message; her solution was changing the message on an existing error message for a different edge case.

On top of this, her English and grammar is pretty poor (her native language isn't English) and I think this contributes to some of the confusion. When we're working side-by-side, sometimes I'll tell her to do something differently and she says ""okay"" but completely ignores what I said and continues to struggle. I explained what git cherry picking is when we needed to do a cherry pick, but she just made the code changes manually right after I told her.

This isn't really what I was expecting when I was asked to mentor someone. Would it be appropriate to go to my manager? I really don't want to walk this person through doing everything all the time and teach basic git/programming concepts. But since I was asked to mentor her, I feel like it reflects poorly on me if I don't help her do better. Our team lead has noticed some of these things and started asking other people to take over some of her tasks when her solution doesn't fix the issue (for bugs she doesn't ask for my help on). So it's possible this problem will take care of itself, but I don't want to be held accountable if not.",1595535185.0,2020-07-23 16:13:05
771,"Is it possible to find a good, fulfilling software engineering job if you have zero desire to be competitive?",526,9x1622,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9x1622/is_it_possible_to_find_a_good_fulfilling_software/,186,"I love programming. I love learning about new algorithms and about how languages work. It's something I do every day because learning new things and increasing my skills gives me a lot of satisfaction. Reading code, really understanding it, and being able to figure out how to make it better is something I absolutely live for.

I'm still in university and haven't started looking for a real job yet, but back when I was a freshman/sophomore and was on that internship grind, the competitiveness was insane. There was palpable tension between everyone I knew who was in CS and was trying to get in at Google, Amazon, etc. I'm not a competitive person and feeling like I had to flex and sell myself to outdo other people made me very uncomfortable and was terrible for my mental health. I made it pretty far into a couple different interview processes, but I never got an internship.

I'm graduating at the end of this school year, and I am genuinely terrified of going through that again. I worry that I will be unable to find success because I just cannot perform at a high level when I am doing it for the purpose of appearing more capable than others.

Recently I've made the decision that, since I'm not competitive, all I will be able to do is present myself for who I am and what I know, and then let the cards fall where they may. Since coming to this conclusion I've been more productive than ever before and have been in a really good place when it comes to mental health. I've progressed more in the past year than in the first 3 years of university combined, but in the back of my mind I'm still worried. I'm worried that my attitude will make me less employable than others because it puts me at a disadvantage when it comes to performing in a corporate environment.

Has anyone with a similar mindset been able to make it? If so, how did you do it? Are you happy?",1542238889.0,2018-11-14 18:41:29
772,100k is enough to live off in the San Francisco Bay Area.,533,6wppqq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6wppqq/100k_is_enough_to_live_off_in_the_san_francisco/,507,"For the last fucking time, 100k is enough to live off in the San Francisco Bay Area. 

I’m not talking about “two people making 100k each splitting a studio”, I mean single breadwinner supporting a partner in San Francisco itself. No bonuses, no windfalls, no inheritance, no tax tricks, no stock options, no 401k match, just 100k a year salary and an adult dependent. Let’s crunch some numbers.

There are places in the city under $2,500, but lets assume you spend $3k a month: $36k a year in housing. $100k – $36k = **$64k remaining**. While this number cries out for roommates or a longer commute, I will assume you shelter 100% of the dreaded SF rent just so I can shut people up who claim it is impossible or think that sharing a kitchen and bathroom is a fate worse than death.

Total income taxes (federal, state, & city) for a single person earning 100k in SF who contributes the maximum $18k a year to their 401k is $28k. (It would be $1.5k cheaper if you were married!) $64k – (18k + 28k) = **$18k remaining**.

My expenses have been particularly high in the last 6 months because I’ve been supporting two of my roommates. Thankfully they’re employed now but lets look mostly at my last 6 months of expenses as a benchmark and extrapolate out to 1 year. I track and tag all of my expenses in [Mint](http://www.mint.com) so this is easy to do quickly and accurately.

Over the last 6 months I’ve been buying groceries for 3 people. I’ve spent $4k between groceries and eating out. I’m not going to lie, an awful lot of that was booze. This house drinks. Shit, this house is drinking right now. **$10k remaining.**

Over the last 6 months I’ve used Lyft almost every day: 123 times, in fact. I’ve spent under $1k. I **always** tip my driver. I also never throw newborn kittens off of bridges. I don't understand how these things are so hard for some people. For simplicity lets assume your spouse spends as much on transport as you do. **$6k remaining.**

$360 / year for my smart phone. $600 / year for internet. Around $2k / year for other utilities. **3k remaining.**

I’ve spent $2k year to date in various other ways: vacation, video games, furniture, a surprisingly & embarrassingly expensive patio-garden, museums, clothes, etc. Healthcare costs anywhere from ~$0 to >$infinity in the US so lets just assume it eats the rest of the budget. **$0 remaining.**

**At the end of 25 years living like this, *assuming no raises*, you can reasonably expect to be a millionaire.** If you dump that 401k entirely into Vanguard’s ultra-low-fee total US stock market index fund VTSAX your expected net worth in 25 years is **$1,274k** (+/- $524k standard deviation). All numbers inflation adjusted, by the way. Oh, and most of that high variance is due to the fact that in some historical scenarios you’re actually worth $3 MM after 25 years of contributing $18k (total contributions: 450k). You can run these numbers yourself at [cfiresim](http://www.cfiresim.com/).

You might think that because it is in a 401k that you can not touch that money and it somehow “doesn’t count”. [This is false.](
http://www.madfientist.com/how-to-access-retirement-funds-early/) There are legal techniques to withdraw money from a 401k as a young person without penalty. 

Even if you have $100k of student loans you can still become a millionaire or multimillionaire well before “retirement age” with this strategy without compromising on housing, even in San Francisco. 

Keep in mind this was done with the assumption that 1) your partner is not employed but still costs as much as you do 2) you do absolutely no tax planning whatsoever 3) you are under employed and never receive a raise 4) live without roommates in one of the most prominent cultural centers our species has ever produced. In other words, you are an utterly unremarkable chump.

What happens if you’re smart about how you do it? Well if you downgrade to a $2k / mo apartment outside of the city itself (there are nice 1 bedrooms for $1.6k to $1.8k near me in Sunnyvale) you suddenly have $12k more a year to play with. If your partner gets a job bringing in $30k a year (not too hard to do when minimum wage is ~$15/hr) that is $23k after taxes. Your partner maxes out their IRA for a free >$1k in tax breaks bringing their net earning to $24k. If you keep finances separate and they just pay half the rent *and nothing else* then you’re up $42k a year and they’re up $12k a year. After 15 years you’re worth $1.2 MM and they’re worth $343k.

Of course, you could always avoid busting your ass and sucking it up by financing a new car, ""forgetting"" to contribute to your 401k, and complaining loudly-and-frequently about how you never seem to get ahead. Me? Excluding taxes I’ll spend under 30k this year in Silicon Valley… even after dropping 25% of the median US individual income on birthday presents for myself. 

Cue entitled yuppies bitching about how they earn well over *200k* and still can’t even afford a three bedroom house in Haight-Ashbury in 3… 2… 1… ",1504021121.0,2017-08-29 11:38:41
773,How would you navigate this situation? 1 single coworker 'secretly' works from home 100% of the time.,533,aj1diz,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/aj1diz/how_would_you_navigate_this_situation_1_single/,220,"Sorry to delete, i just had included too many details and fear someone coming across this that will know who it is. 

I do have an update, though. A new contractor just joined our agile team a week ago and doesn't know about the team dynamics (about how we all try not to talk about this secret WFH slacker developer) and the contractor just straight up asked if the WFH guy was ""full time WFH"" in a meeting. WFH guy's manager was in the meeting and was surprised to hear that, then gave WFH guy a ""talking-to"".  Since the 'talking to' took place, he has showed up to work on average 4/5 days a week. ",1548289421.0,2019-01-23 19:23:41
774,PSA that if you get RSUs (and not stock options) there's no real incentive to keep them as such,533,hgl8uu,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hgl8uu/psa_that_if_you_get_rsus_and_not_stock_options/,318,"RSUs, unlike stock options, which are taxed when you exercise them, are taxed upon vesting.

This also means unlike stock options, there's nothing to time. They won't be long term capital gains no matter what you do.

Furthermore, for **public** companies, there's no difference between getting $50k of Google RSUs, and getting a $50k cash bonus and **buying 50k worth of Google stock**. 

It is a legitimate option to immediately liquidate your stocks and purchase index funds or anything else with your money. Maybe take your 50-70k in Google/FB whatever and instead buy spend 10-15k each on each of FAANG. Maybe spend it, and increase your 401k contribution. Up to you.

Of course, maybe you want to keep them as Google stocks, because you really believe in the company and want an incentive to work harder and have ownership. That's perfectly fine. But ask yourself if you would, given whatever amount of cash, buy just your company's stock.

But I know many people, who invest conservatively, not the wallstreetbets kind, and would never purchase their RSUs worth of stock in any single company because the lack of diversification, just keep their stocks as such because of, well, honestly not super sure.

edit: Just to be clear, you will pay capital gains on stock appreciation when you sell them. The difference is that with stock options, the value to you, and the tax you pay, is the difference between the actual market value and the strike price.

Long term capital gains is significantly lower than whatever tax bracket your ordinary or earned income will be at this point.

Of course, RSUs have their benefits as well.",1593253213.0,2020-06-27 06:20:13
775,Graduating in May to be a fullstack developer in what will likely be a recession. Any advice?,528,flvn8w,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/flvn8w/graduating_in_may_to_be_a_fullstack_developer_in/,182,"Any advice at all is appreciated.

Edit: Wow thank you for all the responses! 

Also: I think some people are taking the ""going to be a fullstack developer"" a little too literally. I don't think I'm going to be fullstack straight out of school as a junoir dev (especially not anytime soon now), it was just a general way to explain to everyone my career goals. My friend who's about to finish her graduate and go to med school says shes ""going to be a doctor"" even though she knows that's not going to happen for several more years. Didn't mean to offend anyone.",1584742257.0,2020-03-20 18:10:57
776,Am I tired of working for others or just working?,531,d51fgh,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d51fgh/am_i_tired_of_working_for_others_or_just_working/,228,"I've been at a new job for one week. Objectively, it's a good place. Meaningful work and everyone is chill. But I feel like I'm dying. I've been working for several years now and am on my fourth company. I was at one place for a couple years, hated another one, and got a laid off from the last one due to the company imploding. I take vacations and have time off, but I always feel burned out. 


I'm struggling to even code simple things as I have no motivation. It's like a mental blockage. I do have a strong urge to work for myself, but financially I can only support myself maybe for 5-6 months.


I would quit, but right now, if I'm just tired of working, that wouldn't solve anything. I'm not confident in working for myself. I have ideas I feel are viable, but what if I end up hating it all the same?


Has anyone ever been in this situation? I feel like I'm having a career crisis where I want to do anything but code. As context, I've never seen myself coding forever, maybe it's just run its time early?",1568672931.0,2019-09-16 18:28:51
777,"[Discussion] I feel like there's multiple ""Can/How do I (insert some situation OP is in here) get a job in CS?"" posts every single day, can we create a sticky or some shit to layout - ""YES YOU CAN, here's some tips""? The answers are always the same..",534,bvarbe,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bvarbe/discussion_i_feel_like_theres_multiple_canhow_do/,130,"This may get downvoted to hell, I just see them all the time and feel they aren't super productive",1559354305.0,2019-05-31 21:58:25
778,PSA to all the new interns freaking out. I feel you.,532,8pr0qx,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8pr0qx/psa_to_all_the_new_interns_freaking_out_i_feel_you/,105,"I used to own a motorcycle and I always used to hear from more experienced riders that, ""It's not a question of IF you will fall, but it's WHEN you'll fall.""

So I'm in the third week of my internship (SWE). Placed in a team that is primarily backend (transitioning monolithic app to a bunch of microservices...Java/SpringBoot/Maven etc..). After week one which was comprised of the mess of getting my environment setup correctly, (it's still only 75&#37; the way there if I'm honest) and having a quick meeting with the principal engineer (my ""mentor"") and the engineering manager for the team to establish what I wanted to learn over the summer, where I could help etc etc, it was time to actually start...ya know....working.

**Week 1/2:**

I was assigned some familiar first\-time intern tasks such as unit testing some of the services/trying to increase code coverage before an upcoming demo to management. Now, I knew a little bit of testing from the good ol Michael Hartl Ruby on Rails tutorial, but I wasn't a pro by any means..especially in a professional setting! I googled and read up on various stackOF questions, read blogposts, watched tutorials on testing..and basically tried to figure out best practices in the industry that would help me get started at the very least.

**Early Week 3:**

I start learning about the APIs (ohhhh so that's what an API is. OHHHHH that's what a RESTful API is) we use and look over the codebase to make sense of the little corner of code I'm responsible for testing (the controllers) and feel like I'm fairly ready to start attacking the task at hand: Increase coverage for MANY microservices before demo day. Aight. I got dis..right.....right?

**Middle of Week 3:**

I'm all in. Me...probably: ""We can't use Mockito/MockMVC because we use webflux and it won't work in our env for some reason..ok I'll try and learn WebClient and test the endpoint functionality that way I guess...JUST GIVE ME GREEN WHEN I RUN COVERAGE DAMNIT.""

**End of Week 3 (Today):**

\*After a few shameful emails to my mentor and a few back helping me understand how to read in a jsonfile and pass it into the body of the test\*

Ok, I got this. My tests are (for the most part) passing, and I'm steadily increasing coverage! YAY!!!!

\*Ping from a Sr Engineer as I'm sipping my coffee from a x1000 times more productive week than the last two where I actually feel like I've made even a small positive impact toward the team's overall efforts\*

Sr. Dev: You got a minute?

Me: (Fuck)... Ya Coming over now.

Sr. Dev standing next to my mentor: So your tests look good..looks like you're reading in the file correctly..(fuck YA!)...formatting is adhering to our standards...(YAAASSSS)......you're getting 2xx as a response from the mocked environment (Ok ya, that was me and I did it I guess, moar points for me?)...**but why is the actual controller code changed?**

Me: ...because the my tests weren't passing unless I made slight adjustments to the controller code..

Mentor interjects: SMH....SO basically..you changed (and checked in) modified code that we previously created...to make **YOUR** coverage increase/make **YOUR** tests pass? When we move this to our dev box, a lot of it..if not all of it will fail..

Me: ....ohhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh......shit. Yes.

Mentor: \*5 minute lecture that sounded like the voices of grownups in Charlie Brown\*

Me: Fair enough. I'm very sorry, Thanks for catching this early.

Me...to myself: Why the hell would I ever do that...what a bonehead mistake!!! \*walks away with the happy friday inside of him all but gone..\*

Mentor: It's not a huge deal, but you have to understand, when you're unit testing, you're not testing to see if your tests pass. You're testing to see if the previously constructed code works. You should never have to modify it. You come to us if you're sure your tests are off for some reason.

Me: (Oh so you mean I should've asked better questions when I was first assigned my initial task and didn't completely understand because I'm a dumb ass?) You're right. I know you're having our sr. dev friend run a test on the services to see if my modifications will still build, but let me know how we can move forward/ and how I may be able to prevent extra work for you from here.

**Lesson unlocked:** I did a really novice thing, that added so many more hours of time to my initial task, because I let my ego take over and didn't ask good questions. It won't happen again, but...it's not the end of the world as it felt like the first hour after receiving the news. **SHIT HAPPENS. We're interns. We're here to learn.** I made a (fairly) big mistake but someone who knows the codebase like the back of their hand (thankfully) can (laugh at) correct my code if absolutely needed.

**I fell off my bike real good today, but I'm better off because of it. And I'm glad I did it now rather than at my first job after graduating.  Keep failing friends. More lessons soon.**",1528555279.0,2018-06-09 10:41:19
779,Why are more programmers not mad about this?,533,8f1xql,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8f1xql/why_are_more_programmers_not_mad_about_this/,250,"I'll keep this brief, but I work at a really big company as a software engineer. I was previously employed as an engineer at a major credit card company, and both have had insanely restrictive rules about innovation and inventions. I've been asking around, and it seems like these are pretty much the status quo at most companies. 

From what I've seen the following is pretty standard:

- *If you make something while you're employed here, the company automatically owns it.* This includes stuff made off the clock, on your own computer, while on vacation, not in the building, whatever. 

- *If you want to contribute to open source projects, you have to come to the company and ask them for permission first.* Also, approving it could take from six to eight months. If the company decides that they don't like the project, they can officially decide you're ""not allowed"" to work on it. 

- *If you're continuing your education while employed, you have to submit IP disclosures for projects you work on at school.* If the company likes the code enough, they can officially ""own"" it. 


In spite of this, I submitted an invention to the company, and it was recently funded. Basically, I did all the ground work for it, and the company decided to ""sit"" on it. That means that they're pretty much waiting for a customer to either ask them for something similar, or someone to come up with something similar so they can sue them. This also means I can't patent it, work on it, discuss details about it, or basically do anything with it. 

**Now I want to be clear that I knew this before I submitted it** so I'm not bellyaching, but I was pretty surprised to find that (from my limited experience) that this is representative of a lot of companies across the board. 

My question is, why aren't people more pissed off about this? Are we really all okay with the idea that a company owns your brain? Or that the company has the power to tell you what you can and cannot work on in your spare time? Or that you have to ask permission to contribute to an open source project? I understand maybe them owning stuff you do on their time or use their resources for, but I think the gross overreach of these rules are kind of ridiculous. I love coding and work on stuff in my free time a lot, but was saddened to find almost all the other engineers don't have pet projects because ""Well, what's the point?"" 


And just to be clear - I get that they're private companies and they can make their own rules. I was fully aware of this stuff when I signed the contract to sign to work there. I just kind of feel like the whole ""if you don't like it, go work somewhere else"" mentality is not really meaningful when most, if not all companies have similar policies.


So am I just a skinny-jean wearing dirtbag millennial, or is this something that upsets other people? ",1524771294.0,2018-04-26 15:34:54
780,What year did CS students stop working normal college kid jobs and start only focusing on tech internships?,527,fbn4vw,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fbn4vw/what_year_did_cs_students_stop_working_normal/,212,"Just realizing the massive shift I somehow missed. When I was supposed to be in college right after high school my peers were all working at restaurants and retail no matter what degree they were pursuing, including CS. A few may have lucked out and landed help desk summer jobs, but no one was doing the kind of interning that y’all post about here. Fast forward 15-20 years and it’s unheard of (or maybe just evidence of the bias in this sub) for CS students to do anything beyond pursuing the highest tech internships; forget bar tending, lawn service, or menial “mail room” type jobs. 

When did this shift happen?

Do you think it’s good or bad for technologists to have employment experiences outside of tech?",1583057012.0,2020-03-01 05:03:32
781,Anyone else feel intimidated around 'fast' coworkers?,529,cise84,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cise84/anyone_else_feel_intimidated_around_fast_coworkers/,144,"We all know there's quite a bit of talent in the field, which causes quite a bit of imposter syndrome. My issue is a slightly different take. Has anyone else ever felt somewhat intimidated by coworkers who just happen to solve problems faster? I'm not concerned about solving the problem, or writing the code, because I know I have that ability at the end of the day. It's speed, and I see some coworkers that just happen to get things done faster, and have much better work life balance as a result. For example, on my team, there's a few of us that work at a normal pace, and then there's a couple that just seem to blaze past. It doesn't matter if it's a known problem or something they're seeing for the first time, they're just able to debug and find the right solutions that much faster.

Anyone have suggestions on improving speed? If you're one of these fast people, what are your techniques, or have you just always been faster your whole life?",1564322641.0,2019-07-28 10:04:01
782,[update] $55k offer in NYC,527,8qn3o8,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8qn3o8/update_55k_offer_in_nyc/,269,"Previous thread: https://www.reddit.com/r/cscareerquestions/comments/8qbue1/55k_offer_in_nyc/

Went in today for a negotiation.
I explained that $55k after taxes breaks down to $17 an hour. I asked for $70k, and I got it!

Don't let anyone tell you what you're worth.

EDIT: 3 year plan:

Year 2: $75k
Year 3: 80k",1528869817.0,2018-06-13 02:03:37
783,JUST GOT MY FIRST OFFER GOD BLESS YOU ALL,527,75jz2o,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/75jz2o/just_got_my_first_offer_god_bless_you_all/,171,Im so excited. Thanks for everyone's help and kindness I wouldn't be here without you :),1507696702.0,2017-10-11 00:38:22
784,Sharing some interview tips,527,5w2oyn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/5w2oyn/sharing_some_interview_tips/,63,"What's up reddit.. I've been working in Silicon Valley for the last 3 years and quit my last job a month ago to start a job search.. I know people advise against quitting your job to study for interviews but I really wanted to put 100% effort into it. I've tried interviewing while I had a job and it was one of the most stressful times in my life. Lying to my coworkers saying that I have to WFH for some made-up reason didn't sit well with me. Also I didn't have enough time to study for interviews because I was working full-time.


So a little bit about my history as an interviewer. I've never passed a technical onsite interview in my life, ever. I got into software pretty late so the first few years in school I failed because I simply didn't know how to code. I somehow landed a PM job at Big 4 company through a 4 hour long Skype interview, and that helped me get interviews in the future (recruiters like the big company names). I managed to land an engineering internship at a unicorn the following year, again through a coding challenge and a non-technical phone interview. I returned to that company as a full-time employee. So somehow I managed to land a job in Silicon Valley without ever passing an onsite technical interview... About a year into my job I started interviewing companies, and I failed all 7 of my onsite interviews. It was devastating. I thought something was wrong with me. Then I ended up getting a job through an ex-coworker and didn't go through a technical interview. Worked there for a little over a year and decided to call it to go all-in on my next job search.


I started off with LeetCode Easy questions. Tried to do about 15~20 per day for a little over a week. Then I did about 3~7 LeetCode Medium questions per day for a week. I peeked at the answers liberally, after about 30~45 minutes of trying to solve it. I got tired of the grind, so I finished CTCI in about 12-ish days. Then I went back to LeetCode and to make it more interesting I used the Mock Interview module. Skipped bash/database/trivial questions and tried to solve it in the given time limit. I did that for a couple days and then started phone screens with the companies I was in the loop with. I never had trouble with the phone screens, maybe because the questions are easier. But whenever I went to an onsite interview, I would completely blank out and think to myself ""oh shit I'm going to fail"", and then proceed to fail lol. Luckily, I passed all 8 of my phone screens with no problems...


I decided to do something differently this time around. I bought a whiteboard and some markers, and I started trying to solve LeetCode questions while talking out loud in my room. The first few times that I did it, I got the same butterflies and clouded thinking that happened to me during onsite interviews. It was the exact same feeling. I knew this was what I had to overcome, so I kept at it. I think this is the best preparation advice that I could give to anyone that gets butterflies and blank out during onsite interviews: create the artificial environment and practice!!


I scheduled my onsites so that my top companies came last. I definitely felt the butterflies for my first onsite interview, but I quickly got over it by telling myself to ""trust the process"", and to focus on the interview. I ended up getting the offer from that company the next day and it boosted my confidence a lot even though it wasn't a company I wanted to go to. So far I've passed 6/7 onsite interviews, including my dream company, and it seems like I've cracked the coding interview. I failed one because I got too cocky and questioned the interviewer's choice of question. Don't question the interviewer!! lol. Anyways, here are some tips that I wanted to share with you guys.


- Set out a process and trust the process. My goal was to do 250 LeetCode questions, finish CTCI cover to cover and practice questions in an artificial environment. Any time I had self-doubt, I just reminded myself to trust the process, because the results, while based on luck, will be a reflection of the work that you put in.

- Buy a whiteboard, practice with a friend or an artificial environment

- Work out LeetCode problems on paper. Don't rely on the Online Judge!! It makes you lazy in coming up with test cases, which is a crucial skill in the interview .

- Some concepts you need to know for sure (and the time/space complexities): generating subsets/combinations, generating permutations, binary search, dfs, bfs, stacks and queues (for this you just need to get a sense of when to use it, never been asked to implement), array manipulation (you pick up some tricks and patterns as you grind LeetCode), bit manipulation (surprisingly got a lot of this, you should know how to get,set,clear bits at a certain position it's useful), hash table (too easy you should be able to do in your sleep), and RECURSION. OMG recursion, it is probably the most important thing ever. Divide and conquer, backtracking, DP, etc, all use recursion. Get comfortable with recursion!!! Always come up with the base case first. Any time I get a DP question I just come up with a recursive solution and use memoization techniques to optimize it. Interviewers don't care about stack overflow most of the time as long as you mention it. Quiz: what's the max memory used up in recursive DFS of a binary tree?

- Don't start coding right away. Explain the algorithm with an example. Come up with a good example that can be used as a test case later! Interviewers will often give you some good examples.

- Work out the algorithm with an example. Did I say that already? You should be so good at coding by this point from grinding on LeetCode that coming up with an algorithm is the main challenge.

- Try to simplify the problem. 2D array? OK let's try to solve an example with a 2x2 array. Text file to large to fit in memory? OK let's assume it can fit in memory first. Some string problem? Feel free to ask an interviewer for a good example string to work out the algorithm. They'll be happy to do so. Also, this kind of intuition comes from grinding out LeetCode. Simplify the problem!! Trust the process!!!!

- Probe the interviewer for tips. Ask them if they're satisfied with the algorithm and ask them if they want code. Sometimes they'll say no, because it was just a warm-up question lol.

- While you write the code, try to focus on implementing the algorithm and use as many helper functions along the way. Like if you're summing the elements of an array, it's so trivial that you can just write int total = sum(arr); and let the interviewer know that you'll implement it later. They will not care.

- FYI, a lot of the top voted LeetCode solutions, while they're very clever and efficient, is not actually very good code in terms of style and legibility. I know this from being in the industry for 3 years and being around good coders. I don't know how someone can get better at coding style without actual work experience though. Just an FYI. Here's a LeetCode question: http://imgur.com/a/rExLL. Here's an example of the LeetCode solution with the most votes that's using the correct algorithm and approach, but not actually very good code: https://discuss.leetcode.com/topic/28308/java-ac-solution-using-bfs. Here is an example of my code that is better for an interview: http://pastebin.com/UPhtbFz8. So you see that my main function is only 25 lines long, and that will make the interview so much more smooth. You give the interviewer the choice of which functions to implement first, and it saves a lot of whiteboard space!!! You should always take this approach when doing interview questions instead of trying to write a monolith function one by one. In an interview, your code should look more like mine than that guy's.

- Expanding on above, having the main function be a representation of the algorithm's logic is good because even if you don't get to implement all the helper methods you can show the interviewer that you understand how to solve the problem. Imagine trying to write everything into one function like that LeetCode guy, and then running out of time halfway into the code. You're gonna have to explain to the interviewer the rest of the code, but your interviewer probably already determined that you're a bad ""coder"" (note that coding skills is different from analytical skills) already because you tried to write everything into one function. Sniffing out a bad coder is much easier than sniffing out a bad engineer. In my experience, I've seen bad coders who are good engineers, but I've never seen a good coder who was a bad engineer.

- Ask the interviewer if they want you to run through a test case once you write down the code.

- Try to secure an offer from any company before you interview the companies you want. This increased my confidence, and I think it might have subconsciously affected subsequent interviewers' perceptions of me, although I can't be too sure. The confidence boost on its own can do wonders. Also, I think the packages were getting a boost as well because they wanted to compete with my other offers.

- Develop a pre-onsite ritual that works. Here's mine: good 8 hour sleep, 1 hour of LeetCode grinding on Easy/Medium questions, full breakfast. I also make some Chinese herbal tea that kind of acts like coffee and take it to the interview to sip throughout the day. I also low-key wear the same clothes to every interview lol. I also make sure to take care of my #1 and #2 in the bathroom prior to leaving.

- While you're waiting for the interview, don't sit there on your phone. Try standing up and flaring your chest out a little (it's called alpha poses I know it sounds stupid but it worked for me LOL). I thought about hitting the gym and doing some bench press/rows to get a pump (both physical and mental pump) going into the interview but I could never wake up on time..

- Come up with a good story that you can repeat about your background and life. I perfected my story to the point that I got every single person to laugh at a particular line in my story lol. I probably told it to over 50 people by now.

- Technical interviews are HARD, so be prepared to put in the work. Don't worry about the result, because the result will be a reflection of the work that you put in. 250 LeetCode questions and CTCI in artificial interview environment should do it for most people. TRUST THE PROCESS!!!

- Also want to mention that there's a lot of ups and downs that you will experience during your job search. You will be grinding LeetCode for a few days straight and wondering to yourself am I doing this right? and lose hope when you can't solve medium/hard problems. Sometimes you'll even get stuck on an Easy question and feel hopeless. You might fail some interviews and feel like shit. But you gotta trust the process and keep at it. The process will not betray you.

- Don't skimp out on CTCI, even the useless-looking chapters. It's part of the process and you can't expect the process to be good to you if you're not good to the process.

OK I'm done.",1488031199.0,2017-02-25 08:59:59
785,Self-taught and getting that first job,531,h8vqdq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/h8vqdq/selftaught_and_getting_that_first_job/,98,"How does one go about getting their first job within the CS industry without a CS degree. 

I have a personal project which shows skills in Ruby/Rails, CSS, and Angular hosted on a linode box. 

I've applied to plenty of jobs, and received notification of my resume being viewed with my side project listed but when checking server logs to see if anyone is actually checking out my personal project, no one is looking at it. 

Anyone have any tips on how to get hiring managers or decision makers to view my project.

Edit: wow, I didn't expect this kind of response. I really appreciate all the comments and I'm going to re-evaluate and apply the suggestions to try and make myself stand out upon others. Again, thank you all for taking the time to post your comments. I appreciate it a ton.",1592176960.0,2020-06-14 19:22:40
786,"As a hiring manager, what are some pitfalls and red flags to look out for during the hiring process?",527,9j2n5l,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9j2n5l/as_a_hiring_manager_what_are_some_pitfalls_and/,444,"So I can better empathize with what's going on behind the scenes. There's no point in applying if I don't know how anything works.



Edit: Lol I thought I was going to only get like two responses. Thanks guys!",1537998407.0,2018-09-26 17:46:47
787,"Why do so many job posting flag themselves as ""Entry level"" and then require 3+ years of experience?",522,8okx0e,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8okx0e/why_do_so_many_job_posting_flag_themselves_as/,229,"I am so demoralized right now I am ready to just lose it and bawl my eyes out.

Entry level = 3 years of experience!?!?!? HOW? And this isn't a few postings, this is a lot of postings. Finding an entry level position that is ACTUALLY entry level (I read the entire posting which I should do, right?) is impossible!

I am intentionally trying to filter out non-entry level positions and then their mandatory list is longer than the list of courses I've taken during a full degree!? Like why is this such a common thing?!

I think I'm about to have a breakdown mentally. I am intentionally trying to filter entry level so I can find shit I can fit into with just barely under 2 years experience and all I get are these intermediate positions. A lot even say 5 years experience, one I just saw today even said EIGHT (8) YEARS!? And was flagged as entry level.

I have crippling amounts of student loan debt, over a year of industry experience through an internship and a degree in compsci and am more than confident if any of these positions would let me work I'd do it.

I just want to scream and cry. 

It feels like the more I try and the more I look and everything else the worse it looks.",1528174978.0,2018-06-05 01:02:58
788,"As far as I can tell, the business need for algorithm design/implementation skills is vastly overstated",531,7lwmb4,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/7lwmb4/as_far_as_i_can_tell_the_business_need_for/,326,"I was talking to my buddy the other day about work. He and I both work at different Big-N companies. We agreed that modern software development is mostly ""just connecting libraries together."" 

Let me say that I do believe my job takes a lot of skilled judgement, knowledge, thinking about efficiency all the way down to the hardware level, using the best OOP design patterns, and other ""real SDE skills,"" becoming more important as my career grows. But, there is rarely any time that I need to write complex/tricky logic like the type I have to harness if I'm doing a difficult problem on HackerRank. Everything is very straightforward.

For example, one of my upcoming tasks is write a parser for an esoteric file type. I thought this might be a good chance to use some CS skills and create a tree by using a stack and yada-yada. But, it turns out that the file type is XML-based, so all I have to do is find the XSD file, run the .NET utility xsd.exe that will generate a C# code model for it, then use XmlSerializer and XmlReader to get an instance of the model with a few simple lines of code. Write some basic integration tests to verify that it works. Boom. Done.

Now, does the HackerRank type of high-IQ, contorted spacial thinking become necessary to be a level-II or Sr.-Level developer? Not as far as I can tell. Getting promoted requires becoming a demonstrably more productive developer and writing a good review of yourself for performance review time, but that doesn't have any relationship with becoming better at solving tricky algorithmic problems (which is kind of a good thing for me because I'm not intelligent). You may even figure out how to make a service 3% more efficient and by doing so save the company $20mil and justify a huge bonus for yourself, but it's unlikely that inefficiency you discovered and fixed has anything to do with writing more clever logic that reduced the number operations by making 1 pass through the array rather than 2 passes, or something like that. 

Yea, *someone* is doing complex work that requires smarts. Like the person who wrote Git in C and needed to design merge algorithms that find the nearest common ancestor commit and apply the file changes in order of timestamp from where the branches diverge. But he's probably some random guy in Lithuania who wasn't doing the project as actual work for a company. Or maybe you do this kind of work for *some* positions at Bell Labs.

But really, I don't understand why the media and tech companies hype up the supposed demand for algorithm development when it seems like 99.9% of software engineering jobs don't use it. You could say that the other 0.01% that uses it is the ""real"" software engineering jobs, but that's a Never-A-True-Texan kind of argument. 

I wonder if CS students realize this?",1514168666.0,2017-12-24 21:24:26
789,So...was it a myth that CS is a growing field?,527,imunkf,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/imunkf/sowas_it_a_myth_that_cs_is_a_growing_field/,683,"All I see everywhere I look are postings that already have hundreds of applications, with entry-level requirements that require you to know almost a dozen languages and/or frameworks.

If you manage to get past that you typically get sent a leetcode-style assessment regardless of the size of the company.

This field comes across as absurdly oversaturated. What happened to the claims that it was a growing field?",1599307496.0,2020-09-05 08:04:56
790,"I made visualizations on almost 2,000 salaries from three years of salary sharing threads",530,cf9ps9,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cf9ps9/i_made_visualizations_on_almost_2000_salaries/,244,"A few months ago, someone posted [this thread](https://www.reddit.com/r/cscareerquestions/comments/ba6j9t/i_scraped_data_from_the_intern_salary_sharing/) with the highest paying internships from one of the intern salary sharing threads. I thought it was pretty interesting and had some free time on my hands in the last few days, so I decided to scrape data from intern, new grad, and experienced hire salary sharing threads in the last three years.

# Data summary

* Only includes U.S. salaries. (U.S. High/Medium/Low CoL) Dealing with other currencies and various formatting for other currencies ended up being a big hassle.
* 1890 total salaries reported - 630 experienced, 582 interns, 678 new grads.
* Data is every three months, beginning on December 2016 and ending on June 2019.
* Data only includes base salary for now. I also scraped additional compensation such as signing bonus, company equity,  and relocation. However, there are way too many non-standard formats to report these types of compensation so it was too difficult to parse accurately/consistently. Maybe this could be done if someone has a good NLP algorithm.
* Compensation reported in a per hour, per week, biweekly, or per month basis were annualized for the sake of consistency.

# Visualizations

* Summary statistics
* Mean salary over time for each experience level
* Salary distribution for each experience level
* Salary distribution by industry and experience level
* Companies with the highest salaries for each experience level

# Analysis/Observations

* Many of the top companies with respect to base salary are in the financial field (e.g. trading, HFT, hedge funds)
* The highest paid intern actually has 6 years of prior experience. [The DoD comment is here](https://www.reddit.com/r/cscareerquestions/comments/82469b/official_salary_sharing_thread_for_interns_march/dv7o1xp?utm_source=share&utm_medium=web2x)
* The highest paid experienced dev made 400K base salary. [The comment is here](https://www.reddit.com/r/cscareerquestions/comments/ayndpv/official_salary_sharing_thread_for_experienced/ei2edm1?utm_source=share&utm_medium=web2x)
* While intern/new grad salaries for government jobs are lower than some other industries, experienced hires can be paid a lot.

Imgur link to the visualizations:

[https://imgur.com/a/0J9ASfp](https://imgur.com/a/0J9ASfp)

iPython notebook with all the visualizations+code (Disclaimer: the code is messy and absolutely not optimized):

[https://github.com/ml3ha/cscareerquestions-salaries/blob/master/Salary%20Data%20Analysis.ipynb](https://github.com/ml3ha/cscareerquestions-salaries/blob/master/Salary%20Data%20Analysis.ipynb)

&#x200B;

EDIT: I edited the last graphic (bar chart with highest paying companies) to average the salary of all companies with the same name. For example, previously I was taking the highest new grad Amazon salary ( which was posted by an SDE II new grad who was earning 160K base). Now, I'm averaging the Amazon entries. This should now be a bit more accurate",1563582666.0,2019-07-19 20:31:06
791,What is the most graceful way to handle a pre-hire drug screening you know for sure you will fail?,525,hqd2mz,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hqd2mz/what_is_the_most_graceful_way_to_handle_a_prehire/,283,"Say nothing and hope they don’t care about the specific subtance(s) you’ll test positive for? Come clean? I imagine coming clean should be done over the phone to avoid admitting to using drugs on the record? That scene from Atlanta where Zazzy Beats is fired because she admits to smoking weed comes to mind.

Edit: side question - medical weed cards - are private companies allowed to not hire you for weed or would that be disability discrimination?",1594665850.0,2020-07-13 14:44:10
792,A list of behavioral questions you should practice (and add to),527,egx2ng,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/egx2ng/a_list_of_behavioral_questions_you_should/,89,"Hey, this is for everyone who is unsatisfied at their current job and want to jump ship, as well as those who are in school and want to join the workforce.

Please add to this list, as well as leave any tips you have.

**Classic/Generic Questions**

* What is a weakness of yours? (Alternatively, strength)
* Tell me about yourself
* Why do you want to for for X company?

**Etc**

* What is a time you had a conflict with a team member, and how did you resolve it?
* What is something your team can improve on?
* ~~Have you ever stepped on a dog in an interview? If so how did you resolve it?~~
* What are you actively trying to improve on?
* What was a big hurdle you had on a project and how did you overcome it?
* Why are you switching jobs?",1577599797.0,2019-12-29 01:09:57
793,Want a job in tech but keep failing the technical stage. Am I completely unemployable?,524,e1etl1,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/e1etl1/want_a_job_in_tech_but_keep_failing_the_technical/,213,"I'm probably an extreme outlier and my situation doesn't relate to most people, but I seem to be persistently failing at the technical stages (online or take home) regardless of industry. (Yes, you've heard this before, but I'll get to the point soon). 

At first I wanted to get into tech (software dev, devops, data science etc), but I could never crack the leetcode type questions employers tend to ask. Frustrated after multiple tries and practice, I decided to give up on IT, and look at other non-IT related roles. However, I still couldn't crack it as I kept failing personality tests and those quantitative/logical IQ tests that non-tech companies do, and increasingly game-based assessments where you have to play memory games and inflating balloons as fast as possible with the spacebar. (I even applied for jobs in retail but got rejected on the personality test stage; thats how bad it is.)

So I tried to apply for jobs in tech again, and its the same story. I just don't seem to be learning from my mistakes and stuck in some sort endless cycle of rejections.

I have even sought the advice of numerous mentors and career coaches and all of them were completely aghast about my situation, but unsure how to help.

The ironic thing is that I actually like coding, and debugging, and have done hundreds of small projects over the years. But its just not translating to a job offer.

So honestly just lost at this point because I seem to be completely unemployable.

If I can't pass technical screens for IT and even non-IT roles, it seems to imply that I have a very low IQ, well below the average, and the thought of it just scares me considering I somehow earned an advanced STEM degree over 10 years of my life.",1574710379.0,2019-11-25 14:32:59
794,I have my first on-site for a Software Engineer position next week,523,ca776n,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ca776n/i_have_my_first_onsite_for_a_software_engineer/,77,That’s all! I’ve been working up to this moment for the last two years of making a career change. Hope it goes well.,1562537325.0,2019-07-07 18:08:45
795,After how many years of experience did you start managing people?,525,igd5f9,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/igd5f9/after_how_many_years_of_experience_did_you_start/,181,"Just to get an idea about after how many years of experience people become managers.

- Did you also code and manage them?

- Big company/ small company?

- Country (if you feel comfortable, of course)",1598394209.0,2020-08-25 18:23:29
796,"I Was Dropped in a Lead Developer Role After College and I Need Advice, Desperately",525,i1uprr,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i1uprr/i_was_dropped_in_a_lead_developer_role_after/,109,"Hi all, I'd like to start by thanking anyone who reads this and has advice. I know this is a long post, but at this point I'm burning the candle in an oven without any hope for a stop. Whatever advise you give would mean a ton to me.

tl;dr; I got dropped in a lead developer job I am unqualified for, there is no money to get another team member that can mentor me, and I have a terrible case of imposter syndrome.

First, I'd like to start off by explaining my current situation. I graduated college three months ago, I started working where I do currently over three years ago as an intern, though. After a year, a combination of my ambition and resource shortage at the company got me stuck as the only developer on a product. The original team all left over a short time period. 

I had not worked with this team, and their code was awful, even as a sophomore I could tell that. One file, a single class, had 13K lines of code in it. They were not respecting any sort of character limit on line length either. The file is half a megabyte in size. True story. Almost every feature they advertised had some sort of bug, and I spent countless hours fixing and rewriting the thing. My grades suffered, I was more stressed than I ever have been and took up drinking enthusiastically to cope. In the end it earned me a reputation that I was some prodigy, and possibly one of the best developers in the company. I might be advanced for my age, I don't know, but I'm definitely nowhere near what is expected of me. That's the problem.

Early on we decided to completely rewrite the application, which is what we are currently occupied with. I have a small team where I act as the lead developer. Code reviews, CI, Cloud, all of it is my responsibility. On top of that, I have an intern. I probably don't need to say at this point in the dialog that this is far beyond my skill set. To try to pad my knowledge, I've been reading blog post after blog post trying to gain insights from people more experienced than me. Weeks typically end up 50-60 hours long, weekend work is guaranteed. I recently told my boss that I can't do this anymore, that someone with more experience needs to occupy my station, but the money isn't there. I'm stuck for a while. In this economy, I'm blessed to have a job, and I am fairly compensated for my work. leaving is out of the question.

I guess it's time I get to my questions now, though.

* What can I do to get rid of the massive case of imposter syndrome sitting on my chest?
* How can I get advice from _real_ lead developers as to how I should conduct myself and if the design decisions I'm making are valid?
* This one is tough. I've only been able to see myself grow as a programmer, and I've forgotten what it was like to be new to it. I don't know how to evaluate the progress of my intern. I've spent a lot of time teaching them how to do things, three hours of pair programming most days. They've learnt a lot, at this point they know enough to poorly build a full-stack application themselves (Has learned C# ASP-Net Core, Typescript, React, all this summer) but they're really lacking in design skills, and I have to assist more than I like. The time is coming for me to decide whether we should offer to extend their internship part time through the next semester, and I'm worrying that my need for help is clouding my judgement. How can I know if I'm fairly evaluating their performance? More importantly, how can I know I'm setting realistic expectations for their performance?

Again, thank you for whatever advice you'd be willing to give. It really means a lot.

Edit: this is insane, far more feedback than I was expecting. Thank you all for spending your time responding to these. I’m taking a breather tonight with some friends, I’ll reply to everyone in the morning. ❤️",1596327133.0,2020-08-01 20:12:13
797,Reading this sub from outside of USA is... depressing,523,9vhnjg,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9vhnjg/reading_this_sub_from_outside_of_usa_is_depressing/,676,"I read a bunch of posts about people getting offers around 70k-100k$ after graduation... meanwhile in most of Europe you would be considered lucky if you made 35k$ before taxes, maybe 45k$ at best after 5 years. Salaried pay for engineers/dev is a bit flat, you have to go to management and have seniority to break the glass ceiling.

And that's Western Europe. And no, life is not that cheap, your car, your phone costs the same no matter the country. I know skilled devs in Eastern Europe who make like 800$ a month. The pay in this industry feels very unbalanced for work that by definition can cross borders easily (remote work, etc).

edit : from the difference of salaries I think it part of the reason why the biggest successful IT companies are concentrated in USA. Most top tier engineers move there if they can, and local companies complain they can't find devs but won't raise salaries",1541768839.0,2018-11-09 08:07:19
798,Wierd role shift when I got promoted to senior software engineer,518,j4ftcn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/j4ftcn/wierd_role_shift_when_i_got_promoted_to_senior/,111,"Has anyone else experienced this weird shift when hitting ""senior"" (or any level for that matter), where instead of being expected to be more proficient at programming, having deeper technical knowledge, and beginning mentoring, you're expected to start vision casting for products and system wide designs from scratch?

I'm certainly not complaining, it's just unexpected roles that I hadnt prepared for.  Were my expectations incorrect or is this specific to my company? (south east american)",1601763658.0,2020-10-03 18:20:58
799,how important is networking (as in -- routing -- not meeting people) knowledge?,523,j31tkj,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/j31tkj/how_important_is_networking_as_in_routing_not/,183,"More interested in math and programming, but am taking some networking to kick the tires, and holy smokes, is this boring. I can't pay attention for more than 30 seconds.

&#x200B;

Can I get input from career folks?",1601555417.0,2020-10-01 08:30:17
800,"What's the best place you've ever interviewed, and what made the experience great?",522,ebgufx,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ebgufx/whats_the_best_place_youve_ever_interviewed_and/,294,"I was reading a Citizen's Bank name & shame, where they dragged a guy through some horrible, shady interview process. One of the comments said we shouldn't judge companies based on interview processes, since they're fucked up almost everywhere. I don't think that's true though, as I've had some really great interviews.

For me, the best was Cerner. After I passed their skills test, they flew me out onsite, put me up in a super nice hotel, gave me a tour of the city, and took me out to an awesome dinner. There was a group of us interviewing, so I got to know some potential coworkers. They really want to convince people it wouldn't be the worst thing in the world to move to Kansas City, so they really go all-out welcoming you.

The actual interview was nice as well. Very relaxed and friendly, and extremely fair whiteboarding questions. I really felt like I was set up for success, and the people interviewing me genuinely wanted me to get the job.

How about you guys? What's your best interviewing story?",1576540345.0,2019-12-16 18:52:25
801,Received an offer without doing any coding,523,cfzso7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cfzso7/received_an_offer_without_doing_any_coding/,232,"Hey guys, i received an offer from a company that really liked me although I only had one video interview. The position is for a full stack developer role, and as part of the interview process, they only talked about my projects in a virtual conference. I didn’t do any coding or leetcode style technical interview. The company is a Fortune 500, and is in the automotive industry. Also, I received an offer fairly quickly, and the start date was set for a week after I received the offer. Should I take this opportunity? How common is it for people to get offers without doing any coding in the interview process?",1563749501.0,2019-07-21 18:51:41
802,"Do you find it disturbing that all that code, all those late nights, all that lost youth is thrown away when a startup fails?",522,80073a,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/80073a/do_you_find_it_disturbing_that_all_that_code_all/,185,"I've met people who ruined their relationships, ruined their health, wrote great code, put in tons of unpaid overtime and missed crucial time with friends and family only to have the startup fail or the big company close down their project or division.  The code is thrown away, gone, forgotten.  All those arguments, all those deadlines, all those features, all those firings/layoffs, all those personal and political battles that were passionately won and lost seem pointless in retrospect.  It's very disturbing to me.",1519541122.0,2018-02-25 01:45:22
803,Lay-offs and Hiring Freeze right now,516,fkoosh,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fkoosh/layoffs_and_hiring_freeze_right_now/,419,"As most of you know the economic meltdown. This has resulted in numerous lay-offs across many organizations.

While the companies irresponsibly fire people, the struggle doesn't end there.

There are numerous companies out there (quite large by headcount and global presence) who have been pulling out of interview process. This is very disheartening for candidates as they have no control over the situation. Additionally there is no way to know when the hiring freeze will be lifted, and if you're candidature would still be valid.

In a time like this - I would like to put together a list of resources for people who are looking for job in software engineering due to being laid off.

# Please comment and share your experiences -

* **If your company is hiring** \- is remote interviews an option? what about on-boarding after the offer is rolled out? is the option open to remote candidates?
* **If you have been laid off/fired**
   * Do you know of firms who have gone on hiring freeze in the middle of process? How was this handled? Did the firm talk about next steps?
   * Do you know of firms who are open to hiring by conducting remote interviews? Have you been on-boarded remotely?

Please share your experiences, every little bit could help.

PS - I plan on putting all this information collectively in a presentable manner later on, so the more information, the better :)

Stay indoor, stay safe.

\---

\*\*EDIT\*\* : I'm so happy to see such an overwhelming response on this post. 

Hugs to those who lost their jobs/offers retracted/dropped midway - you deserve better ! stay strong

Big hooray too all the people who volunteered for referrals, company information and other helpful advice. 

It's late for me, so I""ll come back and upvote all the comments \^\_\^

Thank you Reddit!",1584563096.0,2020-03-18 16:24:56
804,"I created a search engine of Silicon Valley technology companies, which includes their glassdoor rating, and links to their career pages",520,863twa,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/863twa/i_created_a_search_engine_of_silicon_valley/,53,"Hi, when I carried out my plan to move to Silicon Valley, I wanted to find the best companies to work for. I built this website which helped me with multiple goals: 

* I picked up system design skills. Many interviewers wanted to learn more about this project, so for many interviews I whiteboarded out the entire architecture, and talked about how I would optimize and scale it out.
* It gave me a comprehensive list of every technology company in the Bay Area
* Instead of doing the typical online application, I found the emails of recruiters and showed them the site. More than half of the time, I would get a phone screen from this

I've been browsing this sub for years, and a lot of the things I learned here played a crucial role in landing at my dream job. I'd like to share the site and data it with you guys.

The website I built: [http://jobmate.io](http://jobmate.io)

The data to this website: https://drive.google.com/open?id=1wEOBuKXFc8Lbim6uz9FfVFuIqDa38JPgp94fe_gcAyw

I hope that it gives you an idea of how to think outside the box in applying for a job! Would be happy to answer questions here.",1521681138.0,2018-03-21 21:12:18
805,Remember to figure out the hourly rate of an offer before accepting!,518,kibc6v,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/kibc6v/remember_to_figure_out_the_hourly_rate_of_an/,120,"I just did this today and feel like it's important for the new grads who may think total compensation (TC) is everything to see. I received two offers this week after looking for new jobs for a couple of months, one's TC was 140k and the other was 120k. I figured out that my hourly take-home rate was actually higher with the lower offer.

Create a spreadsheet that holds Salary, Bonus, 401k Match, and any other forms of cash payment (stipends/discounts for health insurance, stipends for personal phone usage, retirement bonuses, etc). Ask lots of questions about work life balance (WLB) through the interview process (What are your normal hours? How hard is it to use your paid time off (PTO)?) and ask them from every person at every round. If you're interviewing for an individual contributor (IC) role, but you're talking to a lead/senior, ask them for their WLB, but also their impression of ICs at your level's WLB. If everyone at one company says they work 40 hours a week but everyone at the other says they work 8-6 every day (50 hours a week), use that information. Take the TC you've calculated and divide it by the number of hours they work per week and then 48 (2 weeks PTO and 2 weeks holidays). Chances are a lower offer with a better WLB will beat out a higher offer with higher stress.

Other things I take into account that aren't exactly quantifiable but weigh heavily on my decisions: commute, mental toll, amount of legacy/maintenance code, culture, how the project or company will affect future job prospects",1608691517.0,2020-12-22 21:45:17
806,Double check your attached files,517,asv0li,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/asv0li/double_check_your_attached_files/,75,"I've got a funny story for you guys. I've been applying to a lot of internships recently. So many that when I see a short form (just name, resume, and some links) I tend to fill it out on auto pilot. At least I did until this morning when I got an email from the CTO of a small company that I applied to. 


At first glance I thought it was your average canned rejection email, but then I noticed that he was actually explaining why I was rejected. He told me, ""There are some large gaps in your work experience and none of your experience seem relevant to software engineering."" Which I thought was pretty strange considering I don't have any gaps and I feel like all of my listed work experience is at least sort of relevant to software engineering.


Then it hit me. I had been helping my stepmother with her resume and it was saved as ""resume.pdf"" in my documents folder. I must have attached it to this job application without ever giving it a second thought. 


It must have really confused them when somebody, with a different name on their resume than their application, applied for a software job with nothing but retail experience. She has a pretty big employment gap too from when she decided to dedicate her time to raising my siblings and I. 


It's a pretty funny image when I think about the CTO reviewing this application, and I'm honestly shocked he actually wrote to tell me why I was rejected.",1550731738.0,2019-02-21 01:48:58
807,Quitting my job at a top tech company in the bay area without anything lined up to travel and take a break for a while. Need advice.,524,a5x1xr,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/a5x1xr/quitting_my_job_at_a_top_tech_company_in_the_bay/,163,"Hey all,

Enough is enough. I've been putting up with a toxic environment for years and I've finally decided I've saved enough money and am leaving my ""comfy"" big N job at start of the new year in 2019. I know the advice is always to have something in hand before quitting, but I just need that mental space to decompress and re-think my life. Travel a bit, live without obligations. Just be myself for a few months.

I just turned 30 and I guess this is the final tipping point - a sudden realization that I'm no longer young. Life is seriously too short to be pissed off all the time. To be in a soul-crushing culture, completely mind-numbing, feeling depressed most of the time and feeling like your IQ is actively dropping every day. I feel like I've lost my soul over the last five years.

I know this question gets asked a ton on this sub. Nothing will convince me to consider otherwise - to look for something new before quitting. I'm done. All I need to ask is this:

What are some general logistical tips other than having obviously enough savings in the bank to survive at least a year. I'd like to hear recommendations on networking from here on out (obviously should have done a better job at this earlier), any logistical tips with HR related stuff, health insurance (?), how to to manage my relationship wit my manager and peers after I give the news and out how to transition out gracefully? Interview preparation when I come back from travels? Any other non-standard tips that has worked for someone who has left a job without anything, please let me know. Obviously it's a scary thing to go into the unknown, but I know I need this for growth. There's no way around this anymore.

Thanks for listening and for the advice.",1544760112.0,2018-12-13 23:01:52
808,"Does anyone else go through periods of ""This job is fucking awesome"" and ""I'm literally a waste of resources and I'm going to be fired and never allowed to touch code again""?",515,eczl3q,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/eczl3q/does_anyone_else_go_through_periods_of_this_job/,53,"I get good remarks at work and am well liked on my team, but sometimes I go through these phases of feeling totally useless. 

This is my first developer job and I'm about a year in. I thought it would get better but it's getting worse as I've gotten more responsibilities",1576819081.0,2019-12-20 00:18:01
809,"The Good, Bad, and the Ugly of Web Dev Coding Bootcamps - In Depth Explanation",518,doixms,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/doixms/the_good_bad_and_the_ugly_of_web_dev_coding/,191,"Hi Reddit!

So, I often get a large number of Bootcamp related questions directly to my inbox, and decided to instead of answering every single one of them, to write an article summarizing my experience as a bootcamp mentor across various programs for +3 years, and someone who's been in the industry for +5 years now and interviews candidates on a daily basis. I was recommended by a Redditor to post my article on r/cscareerquestions. I decided to just post the markdown content as my goal isn't to promote my personal blog and it's instead to help people. Hope it helps some of you!

On to the article!

# The Good, Bad, and the Ugly of Web Dev Coding Bootcamps.

Not all bootcamps are created equal.

So…**Coding Bootcamps**. Calling them a controversial way to get into coding as a career path is nothing short of an understatement. Right? Some people love them, some hate them. Some think of them as little more than a quick cash grab to ride the influx of developer roles. Plus, it would explain why the most often received question I get in my inbox is:
> # What do you think about <insert bootcamp name>? Do you think it’s worth it?

Sadly, there is no short answer 🙁 So, in an effort to help all these people on the edge of considering a Coding Bootcamp…I’ve decided to write this article summing up my experiences teaching at bootcamps, seeing students rise and fail, lessons learned, and any tips and advice I’d give to anyone considering a Coding Bootcamp.

## The Good ✅

The thing Coding Bootcamps excel at the most, is at providing **direction**. Learning how to code can be a daunting, overwhelming task at times. There is so much you need to know, and so much important stuff you can’t possibly know that you don’t know. Bootcamps make this easier by providing a curated learning path.

The other fantastic thing about bootcamps, is the **community** that often comes along with it. Learning on your own and getting stuck can often be a deeply demoralizing experience. One that changes drastically once you have a whole community behind your back.

There’s also the **portfolio **of projects aspect. Most bootcamps have a roadmap that lets you end with multiple portfolio projects by the time you graduate. This is the key to landing a full time job with no experience, and probably the hardest part of learning on your own. As you will probably be faced with the common “what do I build?” type of question and end up building nothing.

For the ones that offer it, there’s also the invaluable **career services** option. For those unfamiliar, this is basically a service for course graduates that helps you find a job, polish your curriculum and social media, and basically does its best to set you up for success. Not too bad!

Lastly, there’s the **1:1** **support** which is invaluable as a beginner coder. This is one the biggest things I envy the most as someone who had to learn coding pretty much from scratch (I am not a CS graduate). It’s an incredibly frustrating experience getting stuck for days at a time, only to finally arrive at a random meetup and have a stranger point out a single line of code is to blame. I would not have had to go through so much frustration if I had a 1:1 mentor back in the day.

## The Bad ❌

There are a **LOT **of **bad** coding bootcamps. I cannot understate this enough. At least in my area, I’ve seen an increasingly large amount of *cheap*, online coding bootcamps. These are made by people who are only out there to cash in the public interest to learn coding, but don’t really care about making you employable. And you can quickly figure this out by just looking at their curriculum.

Some bootcamps barely go into JS/CSS/HTML fundamentals, and then rush you into a React/Angular/Vue app and call it a day. This will **NOT **land you a job. The market is **saturated** with people who know how build a hello world React App but lack the pillars that really make up a developer. Training a person properly takes time, and money. This of course means that a good bootcamp will not be cheap. I’m sorry if that’s not something you were hoping to hear 🙁

The second thing you need to know before even considering a job in coding, is that you need to make sure you ❤️ this line of work. Nobody really ever tells you that a life in coding, is basically a career where you can never stop learning. And one where sometimes you’ll have to sacrifice free time to stay up to date to current trends in technology if you wish to either stay relevant, or go up the professional ladder. I’ve met a lot of people who joined bootcamps, but were not prepared for the amount of time they had to sacrifice to complete it.

Lastly, **time**. Due to the challenging nature of a lot of coding bootcamps, it is important you consider the need of having to put in more hours into the course. This is by far the biggest thing I see catching people off guard. What this means, is that if the bootcamp you are considering asks you for 20 hours a week to complete, be prepared to spend up to 40 hours a week when the going gets tough. If this is impossible to you, I would say find another one with a smaller time commitment that fits better in your time schedule.

## The Ugly 💩

First, and possibly the most controversial topic on this article:
> # You** NEED** to know how to code **BEFORE **joining a coding bootcamp.

I know what you are all thinking. Isn’t that *why* you would join a coding bootcamp? Well, not exactly. The thing about learning how to code from scratch, is that quite frankly…it’s **HARD**. Not to mention every person learns differently both in technique, and at a different pace. This in turn, makes it extremely hard to design course material. Specially when you have to **predict **the specific amount of time it takes to complete, how easy/hard it will be to most people.

Which results in bootcamps that are either:

* *Easy and a breeze to complete*, but yielding almost no value to students in terms of employability. Meaning you’ll probably have to pay for another course/bootcamp to even be considered for most programing jobs.

* *Hard and challenging*, but with high student drop out rates due to the challenging nature of the course. Of course, this also means that should you not complete the course, you will not be getting a refund.

These two stereotypes are the reason why even reputable bootcamps always have their fair share of complaints. Such as: the course was too easy, I couldn’t find a job after graduating, or that the course was so hard I always felt like I was drowning and received no help.

Having said that, as you can probably imagine, only the hard/challenging ones will give you your money’s worth when it comes to becoming a job ready software engineer. However, in order to highly increase your chances of graduating, my recommendation is that you** learn how to code *before* joining a coding bootcamp.**

In summary: Does this mean there are no good bootcamps? No! There are fantastic bootcamps out there. However, like buying a house or a car, you should do your own research before settling on which one to pick. And I can definitely vouch to there being fantastic coding bootcamps. You just need to find them.

## That’s all folks!

Do I hate bootcamps? Of course not! I work for one after all 😁 at least at the time of writing this article. Still, I’ve received so many messages lately about bootcamps, I felt writing a piece on this was the right step to help people. Hopefully you can pick up the right bootcamp, or if it proves too expensive, maybe hire a private mentor? 👀

Until next time! 👋 *Adios*!",1572341460.0,2019-10-29 05:31:00
810,"Anyone work for a lazy company, with lazy coworkers, and old tech..... but absolutely LOVE it?",519,ipufvv,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ipufvv/anyone_work_for_a_lazy_company_with_lazy/,191,"So perhaps rightfully so, a lot of these types of companies get a bad rep here. But does anyone else actually LOVE working for these kinds of companies? It can't just be me.

My day to day basically consists of me doing whatever I want since I never really have much work.

Yes, I do use much of that time to keep my skills sharp and work on small personal projects, but I also spend a lot of it on reddit, or even watching netflix (no I am not joking).

The tech stack here is ANCIENT!! So that keeps any new blood from coming in and stirring things up. Everything is nice, stable and slow. 

Does anyone else work at a company like this an enjoy it a ton? Very little stress, very little work. It's basically my dream job and it's in a very stable industry, so much so, that I can basically stay here for the next 40 years guaranteed and retire happy.",1599732856.0,2020-09-10 06:14:16
811,Converted Big O cheat sheets into a quiz for algorithm prep!,519,8v4l93,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8v4l93/converted_big_o_cheat_sheets_into_a_quiz_for/,53,"I'm practicing my big O notations, and wished there was a way to test myself on the big O cheatsheet material without writing everything down. I wrote a small script that converts the site into a quiz. Hope others will find it helpful in preparing for interviews!

[Here's the Quiz](http://stevezease.github.io/bigOPractice.html)

[Here's the link to the script for those who want to see the source code](https://github.com/stevezease/stevezease.github.io/blob/master/bigOCheatsheet.js)
if you copy and paste that into the console in chrome dev tools of big O cheat sheets it converts it into a quiz as well. 

That being said, all credit for the original tables go to [Big O Cheat Sheets!](http://bigocheatsheet.com/)

Please note that that the key to knowing the time/space complexities is by understanding the algorithms behind them, so please use this to double check that you understand the algorithms rather than just memorizing the big O table.

*edit: If you spot any bugs please let me know and I'll do my best to fix them! Thank you in advance.
",1530418329.0,2018-07-01 00:12:09
812,"Software developers with clinical depression, how do manage to keep your employment?",519,ak07wo,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ak07wo/software_developers_with_clinical_depression_how/,140,"For more than two years since graduation from electronics engineering I am having hard time keeping employment. I've been fired at or had quit few jobs so far, that were related to either software or hardware development. The problem is that I can not really pinpoint down why this is happening. From employer point of view, my productivity is very low, I am lazy, I show zero pro-activity, I don't show much interest in what I'm doing, I have to be constantly pushed by others to get anywhere, I don't communicate with other employees. From my point of view, I don't think that I am interested in what I'm doing, although in rare occasions, when my mood seems to be more normal, I am able to dive into work normally. This can happen if I overload myself with red-bull and coffees, which makes me more alive and especially calm, a somewhat similar effect as one would experience when smoking weed. But normally, it feels so hard to start tasks and it feels nearly impossible to finish them. The feeling of repulsion that I get when I think about having to do the work is horrible, including that constant silent moaning that hear in myself. And this disinterest and getting repulsive feeling/moaning persists from high school, trough uni times. Also, I procrastinate virtually everything.

I've already mentioned this to my local psych, and one told me that these are the symptoms of not a mild, not a moderate but a deeper depression, besides the possibility of coexisting anxiety and ADHD.

So from what I understand, depression might be the cause of *illusive perception* of not liking things, which also includes employment and studies. But that still doesn't rule out genuinely disliking things, right? What if I really dislike engineering and I've opted it just to prove myself in society (social status), and had chosen it because of job security and good salary?

&#x200B;

And there is also one major thing - not having mental capacity for this type of work. As we know, engineering, that being hardware engineering, software engineering or whatever, it's all about problem solving that often requires above average IQ, say starting at 110. However, the tests I did as a kid , supervised by school's psychologist, had shown that I'm somewhere in lower range of 80-90 , which is just enough for ditch digging. That being said, if I don't have mental capacity for these engineering tasks, then everything else - including depression - is not a major factor anymore, therefore I have an  a strong enough reason to find easier type of employment.

&#x200B;

In worst case, I might have a major hat-trick in failing at employment:

\- not having mental capacity for these mentally-intensive engineering tasks on first place, e.g. low IQ and its related ""qualities"" (bad logic, bad critical reasoning...)

\- genuinely not liking engineering, but opting for it because of social status, money and job security

\- on top of everything being screwed up with significant depression

&#x200B;

Please elaborate on this.

&#x200B;

&#x200B;",1548531867.0,2019-01-26 14:44:27
813,Why does it feel like this field is full of serious overachievers?,511,8pwjqt,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8pwjqt/why_does_it_feel_like_this_field_is_full_of/,202,"I'm sorry if this comes up often. I try not to frequent this sub too much these days so I don't have a nervous breakdown.

Am I going crazy, or are people in this field way more motivated than people in other fields? It feels like every high school valedictorian from the last 5+ years ended up majoring in CS. Seriously, I'm not trying to be /r/iamverysmart or pity myself, I don't think I'm imagining this.

Look at the average business/humanities/etc. major. Usually they just try to get good grades and maybe do an extracurricular or two. Even the people I know that are trying to get into medical school mostly seem to focus on grades, the MCAT, and maybe are part of a medical fraternity or do some research or volunteer work.

Meanwhile, I look at the average CS major and many times he/she:

* Graduated at/near the top of their high school class.

* May have been doing CS since middle school or early high school.

* Goes to lots of hackathons, has experience with many different technologies, codes for fun instead of gaming/netflix/whatever like most people.

* Probably runs a professional-looking photography page or a blog.

* Usually also dabbles in business/finance, sometimes more than actual business majors.

* Has an active social life and a very large network. All the hackathon regulars seem to know each other and yet there's thousands of them.

* Somehow also finds time to get good grades and grind CTCI/Leetcode.

I don't think anything I've described is at all ""remarkable"" for a CS student, even though the equivalent amount of work would be remarkable for most majors. I mean, look at the amount of neurosis in this sub compared to literally anything else. 

Maybe I *am* just imagining this, and the top students are just the most visible on social media or whatever. Honestly though, I'm feeling more and more like if I were to pick any random CS student out of a hat, they'd likely be like this. Most of the CS students I know that *aren't* like the above end up switching fields or dropping out altogether.

",1528613173.0,2018-06-10 02:46:13
814,Music while coding,516,7s6ral,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/7s6ral/music_while_coding/,499,"Hi guys,

I've been trying to find some new music that doesn't necessarily involve lyrics, so my mind doesn't try to understand everything an artist is saying. 

That said, I was wondering what type of music you guys listen to while you're working. Any playlists or albums that work best for you while developing?",1516666200.0,2018-01-22 19:10:00
815,VP Engineering - AMA!,514,erdwar,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/erdwar/vp_engineering_ama/,209,"Hey everyone.

My name is James and I'm VP Engineering at a SaaS company called Brandwatch. Our Engineering department is about 180 people and the company is around 600 people. The division that I run is about 65 people in 9 teams located around the world.

I started my career as a software developer and with time I became interested in what it would be like to move into management. After some years as the company grew the opportunity came up to lead a small team and I put myself forward and got the job.

The weird thing about career progression in technology is that you often spend years in education and honing your skills to be an engineer, yet when you get a management job, you've pretty much had no training. I think that's why there's a lot of bad managers in technology companies. They simply haven't had anybody helping them learn how to do the job.

Over time, my role has grown with the company and now I run a third (ish) of the Engineering department, and all of my direct reports are managers of teams or sub-divisions. It's a totally different job from being an individual contributor.

One of the things I found challenging when I started my first management/team lead role was that there wasn't a huge amount of good material out there for the first time manager - the sort of material where an engineer with an interest could read it and either be sure that they wanted to do it, or even better, to realize that it wasn't for them and save themselves a lot of stress doing a job they didn't like.

Because of this, a few years ago I started a blog at [http://www.theengineeringmanager.com/](http://www.theengineeringmanager.com/) to write up a bunch of things that I'd learned. I wrote something pretty much every week and people I know found it useful. Recently I got the opportunity to turn it into a book: a field manual for the first time engineer-turned-manager. It's now out in beta with free excerpts available over here: [https://pragprog.com/book/jsengman/become-an-effective-software-engineering-manager](https://pragprog.com/book/jsengman/become-an-effective-software-engineering-manager)

I'm happy to answer any questions at all on what it's like to be a manager/team lead and beyond, debunk any myths about what it is that managers actually do, talk about anything to do with career progression, or whatever comes to your mind. AMA

\*\*\*

Edit: Folks, I gotta go to bed as it's late here (I'm in the UK). I'll pick up again in the morning!",1579559434.0,2020-01-20 17:30:34
816,"In this competitive climate, is there a point in being honest anymore?",516,dg18nd,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dg18nd/in_this_competitive_climate_is_there_a_point_in/,164,"I'm spending a lot of time practicing and prepping LC. So when an interviewer asks me a question verbatim from LC, should I really put myself at a disadvantage, and tell the interviewer that I've seen it before? I seriously see no reason to do this at all, nor do I find it unethical or morally wrong. We should be rewarded for putting in the time and effort. If an interviewer is lazy and is just asking questions verbatim, then I find that he/she hasn't done his/her due diligence.

I concretely remember a real interview I had done in the past with a well known SF bay area company, and I told the interviewer that I've seen the problem before and they quickly whipped out another question from the question bank, for which I didn't do well on at all. Mainly because I hadn't seen it before and I couldn't derive a solution quick enough.

Given the extremely competitive environment of tech interviews these days, I frankly think lying is the best strategy to increase your chances. It's just hard for me to lie haha. Guess I'm too honest.",1570756739.0,2019-10-10 21:18:59
817,I've worked in my first Software Eng. job for 10 months and have written <50 lines of code. Should I resign? Do you have a similar experience?,516,ce9gx9,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ce9gx9/ive_worked_in_my_first_software_eng_job_for_10/,140,"I'll try my best not to be long-winded here: 

I spend around 75% of my time in the office being productive (\~25% lost to unneccessary meetings). Of that time, 80% is spent fixing trivial ""bugs"" (string changes, ordering of icons in a menu etc.) 

The remaining 20% is spent on ""development"". We use a code generation program to generate new classes in our enormous application. Most of the code is written for me, and I just pass parameters to the code generator. My line manager acknowledges the fact that I'm almost definitely not learning as much as I should and has graciously tried to throw me items from the Tech Debt backlog to work on - to break the monotony and to sharpen my skills - but I still think I'm wasting a significant amount of my time. 

&#x200B;

I'm curious to know how other Software Engineers spend their time at work. Are my expectations unrealistic? Am I hurting my development by wallowing about in a menial position?",1563376349.0,2019-07-17 11:12:29
818,Former SF Tech Recruiter - AMA !,512,anvc17,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/anvc17/former_sf_tech_recruiter_ama/,679,"Hey all, I'm a former SF Tech recruiter. I've worked at both FB and Twitter doing everything from Sales to Eng hiring in both experienced and new-grad (and intern) hiring. Now I'm a career adviser for a university.

Happy to answer any questions or curiosities to the best of my ability!

&#x200B;

Edit 2: Thanks for all the great questions everyone. I tried my best to get to every one. I'll keep an eye on this sub for opportunities to chime in. Have a great weekend!

&#x200B;

Edit 1: Up way too late so I'm going to turn in, but keep 'em coming and I'll return to answer tomorrow! Thanks for all your questions so far. I hope this is helpful for folks!",1549514916.0,2019-02-06 23:48:36
819,What is the correct answer to these behavioral questions?,518,dxsfys,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dxsfys/what_is_the_correct_answer_to_these_behavioral/,134,"These are the most common behavioral questions I've been asked:  

>Tell me about yourself  

Not sure if people only want what I'm currently doing or my life story.  I could start at the university I graduated from but that was a while ago and I barely remember anything from that period of time.  

>Why are you looking for a new job  

The reason I'm looking for a job is that my skills are stagnating at my current company and the pay is poor.  I can try rephrasing this as ""I'm looking for a greater challenge"" but then they ask me to go into details and I find it very difficult to do so without badmouthing my current company.  

>What are you currently working on  

I'll probably just answer this in the same way I would answer ""What is your favorite project"".  

>Tell us a time where you had a conflict with someone else  

I don't have conflicts because having conflicts is a good way to get fired.  

>What are you currently making and what compensation are you looking for  

Not sure if I should lie here or not.  I don't know what ""normal"" compensation is or what a ""normal"" raise is since glassdoor is unreliable and no one in America likes to talk about how much they make.  According to Reddit it's normal to double your salary when you move to a new company but recruiters are shocked when I suggest a 15K raise.  Are behavioral questions just completely different in Silicon Valley compared to other parts of the US?

>Do you have any questions  

Not sure if I'm supposed to ask questions about the company, personal questions, or technical questions here.",1574053025.0,2019-11-17 23:57:05
820,I regret accepting the new offer,514,c7q7gw,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/c7q7gw/i_regret_accepting_the_new_offer/,195," 

why on earth would a struggling company decide to hire new staffs, when they're still owing salaries of the previous month.

I left my previous company for a better pay and i ended up in a place where payment isn't even certain. 

i left a 15 min commute for a 2 hours commute. 

my previous company offered me a raise, although it wouldn't have been up to what I was offered here. but at this point i feel i should have taken it. it will have been the better decision. 

now I'm stuck between waiting patiently here hoping things will get better or start looking elsewhere. 
but I'm scared because I don't know what's going on in the other company. don't want to end up in a worse environment.


sometimes taking the pay rise and remaining at the current company is the best decision.

Edit: the salary increase was 100%",1561999976.0,2019-07-01 12:52:56
821,Name and Shame: Tata Consulting Services,514,bkaluq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bkaluq/name_and_shame_tata_consulting_services/,96,"I first applied on March 29th and had a phone screening on April 2nd. After passing the screening, the next step was a virtual interview was scheduled for April 6th.


I joined the call 5 minutes before the start time. Then 10 minutes passed. Then 20. I left the interview after it was 40 minutes past the start time.


I emailed my contact to ask about rescheduling. I got a response saying to stay in the interview for another 30 minutes (it had been 1.5 hours since the interview was supposed to begin at this point) or to expect a call later that day from someone.



Surprise to no one, I never received a call. I sent another email asking about rescheduling. 14 days later I get a call apologizing for the disorganization. At this point, I was told I was being moved directly to the technical interview and would not need to do a virtual interview. At this point I'm whatever about the job, but interview experience is always a good thing so I keep going with it. 


I'm told to expect a call anytime from last Friday to this Tuesday. After never receiving a call, I got an email today stating that the position is no longer hiring.",1556930738.0,2019-05-03 20:45:38
822,Is it normal to work 10~20 hours on weekends for deployments?,513,iry63a,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/iry63a/is_it_normal_to_work_1020_hours_on_weekends_for/,176,"I just started a new job as a tech consultant. The project is poorly architectured and managed. So many parties driving the ship (the client, my firm, and other 2\~3 vendors: business, dev, and QA)

I am pretty shocked by how long the deployment takes this weekend. I have worked in financial companies before. It's normal to deploy on weekends but usually, it takes a few hours, and you are done.

I told the person in charge that I have plans this afternoon yesterday. and she said ""this was in your calendar right? "" She sent a 12-hour calendar deployment invites for yesterday and today.

Is it acceptable? Is it ok to quit after a month?

Update: I gave a two-week notice. There are few reasons but mainly there is nothing for me to learn from the project and I want to work less (a lot of manual work. calls from 10 am to 8 pm is not what I am looking for), so I don't see myself doing this for the next year/not even six months, so I decided to quit now. Thanks, everyone.",1600032092.0,2020-09-13 17:21:32
823,Having an existential crisis and need advice.,515,g38sde,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/g38sde/having_an_existential_crisis_and_need_advice/,275,"I sit here on the verge of tears with a tight chest, wondering if this shit is right for me. I'm in my 30s with a family to care for and am questioning if I even have what it takes to continue in this path. Rant incoming...

It wasn't always this way. I used to enjoy computers  a lot. As I got older, I began caring less about tech and keeping up with current trends. I started teaching myself about 6 years ago with the goal of getting a job in this field, because I enjoy creating and have always been good with computers. I succeeded. 

Been working as a developer for the past 5 years and have always been complemented for my good work and friendly personality. Am I great? Hell no. I imagine average at best. I taught myself what I needed to in order to start creating. I didn't then and still don't give a fuck about LeetCode, big O, ds & algs, and suck horribly at math. Sure, these are important and I'm not downplaying them, but I have to be realistic in knowing that my mind doesn't work that way. I'm a creative individual who happened to be good at computers. I also am not amazed by how the latest version of the language can do the same thing in a different syntax. Nor am I fascinated by writing intricate db queries. I'm so tired of feeling left out wondering why and how all of the people I work with and see in these forums are so interested while I'm there not giving a fuck. I can't force myself to care about these things, though that doesn't say that I'm not caring and proud of the work I do. I actually don't even hate every part of the job.

You know what I've enjoyed? Creating a cool looking frontend for the user or something neat like that. Seeing a project from start to finish and having the person I developed it for be happy was a nice feeling also. But then again, we get into the technical side of front end where ""font this, whitespace that, alignment here, oh wait...make this pop more""...fuck me. Here I am with 5 years of mainly back end Java experience, wishing to get out of coding for 7-8 straight hours a day into something more crud like in a non-tech company, so I can at least keep the nice paychecks and lifestyle. I've seen people saying that they don't code more than 2-4 hours a day and complaining, while that sounds ideal to me. I wanted to work fully remote and even posted that not long ago, but it's obvious I will be bested by so many out there. It won't stop me from trying, but still, I feel so fucked. 

Please don't get me wrong. I'm a very passionate person and take a lot of care and pride in the work that I do. I consider myself to be friendly, introverted yet social, and easy to get along with. I find I'm so different from other devs though. Again, I don't mean to rant, but I hope you can understand that at this moment I feel down and hopeless. Yes, I'm depressed right now, but I know how to deal with that stuff. I'm situationally depressed, because I feel lost and don't know what to do. Not to mention that I suffer with arm problems and struggle getting through each day. 

I'm grinding myself to death in something that is ever increasingly making me miserable, yet is seemingly my only skill.  Well, I play piano, played around with producing music and love food, but making a life out of that is even more impossible. Believe me, I wanted to play music professionally, but I can't be the starving artist while I have a family to take care of. All I really want out of my life is to enjoy traveling with my family and be able to afford a modest lifestyle. Sometimes I feel like quitting it all and going to teach English in SEA. I'm not trying to give up on this, but I don't know what to do. I started teaching myself JavaScript thinking maybe front end will be better, but who knows? 

All I want is the ability to work remotely, be able to travel and enjoy my life outside of work and not hate what I do. I don't hate all of developing, I really enjoy the creative side, but that's it. The nitty gritty details, I want to be as far from that shit as possible. I don't even mind the boring crud shit, if it allows me to live the life I want. I like helping people more than I enjoy being a damn robot. I can't continue to be a fucking robot my whole life.

Some advice and guidance would be much appreciated. Thank you to whomever took the time to read this.",1587180720.0,2020-04-17 23:32:00
824,Self-esteem is incredibly important.,518,8kscuh,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8kscuh/selfesteem_is_incredibly_important/,55,"So this post might come off as a bit unusual, but I think it's really important to bring up for the people here on the job hunt. 

Confidence and self-esteem is king. So much good talent goes wasted because they lack self-esteem. Not just the confidence in their CS skills, but in themselves, too - to jump into new things - apply for jobs, take on projects, etc.

A lot of people here are probably faced with rather daunting looking job ads, and are thinking to themselves ""There's no way in hell I qualify for that job. Better keep on looking"", and then they end up with a smaller and smaller list of options. 

It's a terrible self-fulfilling prophecy, as the less you try, the less you actually want to try. And maybe you'll even make a bad habit of conditioning yourself to always move the goal-post. *""Oh, I can't apply for that job yet. I first have to [take x class / master y skill / work on z projects] first""* 

While you're doing that, other people are just jumping right into it. 
 

As a personal note: I never had any internships or relevant jobs during college. Why? I never thought I was good enough. Somehow, I had conditioned myself to believe that every company on earth only wanted 3.5-4.0 GPA students. One year turned into anther, and before I knew it, I had graduated. Five years had passed. 

And then the anxiety set in. What did I have to show for? Mediocre grades and absolutely no experience. Every time I was about to hit the ""submit"" button on recruitment websites, I went through my grades transcript, my anemic resume, and closed the fan. 

Meanwhile, my friends were all getting job offers. People I had mentored during University.  

Now, I did end up with a job, and my self-esteem went up from there. When I was at the rock bottom, I decided to build a plan, and stick with it. I made it a personal project to ""just do it"", as Shia put it. 

I curated a list of every potential employer in my area, got the contact information, read up on EVERY single company:

- What their products / services were 
- How they were doing, and their market 
- Wrote a short segment on them. 

I then wrote a personal analysis of myself, asked friends and family about myself. What were my strengths, weaknesses. How to improve, and how to present myself in the best possible way. 

My next task was to call and send out applications, every single day. I called companies and asked them if they needed people with my skills, and told them I was genuinely interested in what they were doing. 

You can't have the right answers to everything, but you better prepare. It's a cheesy saying ""If you do not believe in yourself, no one else will either"" - but it has some truth: 

You need to apply for the jobs - they won't come for you. You also need to convince those hiring that you're the right man for the job. The more curious and enthusiastic you are, the more genuine you will seem to them. ",1526848765.0,2018-05-20 16:39:25
825,New grad full-time offer was rescinded and cannot find a new job,515,hrwfv9,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hrwfv9/new_grad_fulltime_offer_was_rescinded_and_cannot/,168,"I had a full-time offer, but the offer was rescinded shortly before I graduated. I've been applying to various entry-level SWE jobs around the U.S., but I have not been able to land any offer. I graduated from an esteemed school, but it's not a target CS school. I have a solid GitHub profile, as well as other projects I've worked on for research. I have made open source contributions to several high-profile repos on GitHub. 

I've applied to ~80 positions, and I've had ~10 interviews or coding challenges sent to me. I got to a final round with a well-known company, but they ultimately rejected me. Unfortunately, the vast majority of the companies that had job postings and also got back to me were quant firms. From my perspective, their questions and coding challenges were much more difficult than what I've encountered before. For example, a coding challenge was a client/server in C++ using sockets that tracks trading data as it comes in -- all of which was supposed to be completed in a few hours. The technical interview questions that required in-depth knowledge of probability definitely sunk me. 

At this point, I'd be grateful to get any job. I've spent a lot of my time on LC since I graduated, but my situation is getting pretty desperate now. I don't have the time to learn these problems well enough to land a job at FAANG or other renowned tech firms. I've solved a bunch of LC problems, but then I get hit with 2 LC hard problems back to back during a final interview that crushed me. I'm tenacious, but I am not able to solve problems I have never seen before in 45 minutes while an interviewer gets audibly impatient. 

If anyone could offer any advice or guidance, I'd be grateful. Lastly, I am not picky about what job I get. I'm willing to move anywhere in the U.S., and work any SWE position I'm qualified for. A company's prestige and brand name recognition does not matter to me. Any advice or guidance would be appreciated. I can PM my resume to anyone willing to take a look and provide feedback.",1594877034.0,2020-07-16 01:23:54
826,"the old question, where are the older workers?",508,du9vo3,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/du9vo3/the_old_question_where_are_the_older_workers/,209,"I'm 53 years old, and have been working quite happily on software development for 30 years. I'm well aware now though, that I'm going to have difficulties finding any other job, due to my age, whether that be deliberate ageism or other.

Also, I've been doing it for a long time, and am quite understandably I think, stale and well overdue a new challenge.

I'm guessing I should have moved on to some sort of management role long ago, but that's never been my interest.

What I'm curious about to start with, is if there are any stories out there of people who have changed direction at my age,  whilst somehow building on their skills and knowledge from software development, so maybe not drastically, such as becoming a yoga instructor, but maybe a related area, technical writing for example?

Also, more generally, as we (UK) now are expected to work until our seventies, what do people say in their 60s do for a living these days? It's fair to sat that I so rarely come into contact with people in this age group in my current line of work, so where are they all ?

One though I have, is that the focus of devs always seems to be new tools, new libraries, new paradigms, is there a space for us oldies to pick up the legacy there?",1573410610.0,2019-11-10 13:30:10
827,I’m an entry software engineer who just left one toxic work environment for another. What do I do?,506,hf5hqk,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hf5hqk/im_an_entry_software_engineer_who_just_left_one/,123,"I’m an entry software engineer who graduated May 2019 and landed my first software engineer position in August. Without getting into detail, After experiencing high turnover rates amongst team members, I began looking for new positions immediately and landed a new position in The end of March. Overall I’ve learned a great deal from this position, however Given that I’m 
The only entry engineer surrounded by a team of senior engineers, it’s been difficult to adjust and feel comfortable with my own skills when everyone else is doing comparably better work. To make manners worse my team members experience their own set of toxic behaviors such as putting each other down during meetings and talking behind each other’s backs due to lower performance. Arguments occur between team members and team members with management, as a result of a lack of information and direction that our project is provided with. Any attempt to reach out to my team as a junior engineer, with questions, are constantly shut down and at one point my team member questioned my own qualifications in a 1-1 meeting. 

Are these experiences commonplace in this field, or is my situation unique? Is there anything that I could do to improve my position in this situation? Should I begin looking for another place and be labeled as a job hopper, or should I try to stay for an acceptable period of time, before moving forward to a new opportunity?",1593049233.0,2020-06-24 21:40:33
828,Is anyone else here content with not working for an elite tech company?,512,dr6qrq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dr6qrq/is_anyone_else_here_content_with_not_working_for/,270,"I've been in this industry for four years now in a low cost of living area. I absolutely love my job. I work about 35 hours a week, make in the low- 100s, and own a home that is a 15 minute commute from my office. I am recognized for my contributions at work, like my coworkers (for the most part) and I spend about 10-20 hours a week outside of my job working on side projects or open source software. I feel like in a lot of ways I have ""made it"" in life.

However, I started browsing this sub and the site called ""blind"" and I see a lot of straight up hate for my place of employment. A former employee hated my company so much that he/she created a meme site hating on my employer. Don't get me wrong, I don't care too much what people think of my lifestyle choices. But, it seems like there is this culture of either you're an ""elite"" by grinding out leetcode to work for a ""big N"" / FAANG / whatever it's called now or you're just a waste of space coder who can't even create a linked list. I am absolutely passionate about coding and willingly spend my free time working on all sorts of side projects. That said, I have no desire to work at a place that attracts these ""bro, do you even leetcode"" type programmers. I'm curious if there is anyone else here who is the same as me?",1572844009.0,2019-11-04 00:06:49
829,What the fuck is wrong with companies?,510,73gj6r,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/73gj6r/what_the_fuck_is_wrong_with_companies/,225,"Edit: naming and shaming them. The first two were Gate1Travel and WorkWave. The last one I won't name.

Edit2: WorkWave's values are ""The company looks for employees who have empathy."" My ass.

1) Phone screen, on-site. At the on-site, I was shown how I'd be doing my job by the CEO. Months later, no reply, no rejection.

2) Phone interview with engineering director. He said I should be expecting an invite to the on-site. Months later, no reply, no rejection.

3) Most recently, two phone tech interviews. CTO emailed me to schedule a phone call. I emailed back with the times. Two weeks later, no reply confirming a phone call.

I can't stand this shit any longer. I don't get how people get jobs so easily. Someone said they just showed up for all of the interviews and instantly got a job every time. Meanwhile, I'm dealing with thousands of applications to companies, followed by all this ghosting crap. There's no logic behind anything.",1506824469.0,2017-09-30 22:21:09
830,On giving up,511,aiebsv,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/aiebsv/on_giving_up/,37,"In case this is helpful to somebody:

Today I had a look at my Reddit history and noticed this thread:
https://www.reddit.com/r/cscareerquestions/comments/82rsof/exiting_programmingpivoting_to_something_else_in/

10 months ago I was thinking about quitting programming. I had no confidence in my skills and I was very unhappy.

But it looks like I didn't need to quit programming. I just needed to switch to a new job. My confidence is coming back and I enjoy going to work again. I've got the spark back.

So, if you think you're crap and should just give up, perhaps give it one more go at another company? ",1548130977.0,2019-01-21 23:22:57
831,Was this recruiter rude?,510,9mgygm,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9mgygm/was_this_recruiter_rude/,164,"I was talking to a defense contractor recruiter. She started asking me, ""how many years of experience do you have."" I started thinking and wanted to ask whether that included freelance. Literally one second passed before she exclaimed, 

""hello?!? what is your answer?"" 

I said ""I did work for <client> <x> years and it should be indicated on my resume. Do you want me to continue explain the entire situation....."" (I got cut off here)

""I'm not looking at your resume. You should be able to explain in detail. I'm testing your communication skills.""

I'm now sitting with my mouth wide-open going wat. How am I supposed to communicate when you keep cutting me off? Anyway, she didn't even let me explain after she asked. These recruiters are dumb, especially when they're going down a checklist for buzzword bingo.",1539048546.0,2018-10-08 21:29:06
832,2021 Internship/New Grad Process Tracking Spreadsheet,508,iif227,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/iif227/2021_internshipnew_grad_process_tracking/,58,"To the college folks that are looking for a job/internship, I created a spreadsheet to help us keep track of which companies are actually hiring during this weird time. Also useful to see what steps other people are with other companies to get a better idea of if you've been ghosted or not :)

Any questions feel free to ask!

[https://cscareers.dev/process-tracking](https://cscareers.dev/process-tracking)",1598675997.0,2020-08-29 00:39:57
833,I guess I completely lost interest in coding.,505,ffe114,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ffe114/i_guess_i_completely_lost_interest_in_coding/,141,"For last 3 -4 months I was continuously studying data structures and algorithms cause I need a better job. Currently a support guy which is so dehumanizing that I can't express in words. And all of a sudden I no more feel like studying or coding. I kinda give up looking for job. This sucks. I can't work here and I don't have more energy to fight for a new one.


Sorry if this isn't a place for this kinda post. Just wanted to spew my feeling out. Sorry if this post sucks too.
 
 
 
 




Edit: I am very thankful to you all guys. Thanks for cheering me up. I wish I could reply each one of you but am overwhelmed with amount of response I got. Yesterday I had a breakdown after silently struggling for so many days. But now am good. I've read each one of your response and am Definitely not giving up on myself untill I find a better job. And for those who are stuck in the same kinda situation as mine don't give up. I know it doesn't feel easy, I understand, but please don't give up. I won't. Thanks again everyone. This community is a blessing.",1583710107.0,2020-03-08 19:28:27
834,"[OFFICIAL] Salary Sharing thread for NEW GRADS :: March, 2020",504,fd9bt2,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fd9bt2/official_salary_sharing_thread_for_new_grads/,546,"**MODNOTE:** Some people like these threads, some people hate them. If you hate them, that's fine, but please don't get in the way of the people who find them useful. Thanks!

This thread is for sharing recent new grad offers you've gotten or current salaries for new grads (< 2 years' experience). Friday will be the thread for people with more experience.

Please only post an offer if you're including hard numbers, but feel free to use a throwaway account if you're concerned about anonymity. You can also genericize some of your answers (e.g. ""Adtech company"" or ""Finance startup""), or add fields if you feel something is particularly relevant.

* Education:
* Prior Experience:
    * $Internship
    * $Coop
* Company/Industry:
* Title:
* Tenure length:
* Location: 
* Salary: 
* Relocation/Signing Bonus:
* Stock and/or recurring bonuses:
* Total comp:

Note that while the primary purpose of these threads is obviously to share compensation info, discussion is also encouraged.

The format here is slightly unusual, so **please make sure to post under the appropriate top-level thread**, which are: US [High/Medium/Low] CoL, Western Europe, Eastern Europe, Latin America, ANZC, Asia, or Other.

**If you don't work in the US, you can ignore the rest of this post.** To determine cost of living buckets, I used this site: http://www.bestplaces.net/

If the principal city of your metro is not in the reference list below, go to bestplaces, type in the name of the principal city (or city where you work in if there's no such thing), and then click ""Cost of Living"" in the left sidebar. The buckets are based on the Overall number: [Low: < 100], [Medium: >= 100, < 150], [High: >= 150].

High CoL: NYC, LA, DC, SF Bay Area, Seattle, Boston, San Diego

Medium CoL: Chicago, Houston, Miami, Atlanta, Riverside, Minneapolis, Denver, Portland, Sacramento, Las Vegas, Austin, Raleigh

Low CoL: Dallas, Phoenix, Philadelphia, Detroit, Tampa, St. Louis, Baltimore, Charlotte, Orlando, San Antonio, Pittsburgh, Cincinnati, Kansas City",1583334388.0,2020-03-04 10:06:28
835,Learn to write maintainable code instead of getting shit done,503,8xoxc5,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8xoxc5/learn_to_write_maintainable_code_instead_of/,130,"I had written [Managers/CTOs: Writing high quality maintainable code v/s getting shit done?](https://www.reddit.com/r/cscareerquestions/comments/8vvf98/managersctos_writing_high_quality_maintainable/) a week ago. It got a lot of attention.

Initially I was agreeing with [pydry's answer](https://www.reddit.com/r/cscareerquestions/comments/8vvf98/managersctos_writing_high_quality_maintainable/e1qpqss) (The most upvoted answer):

> I have a ""tech debt dial"" which goes from 0% to 100%.

But then I came across

> There's a false dichotomy between ""beautiful code"" and code that is ""fast to write"".
>
> Writing beautiful code does not take longer than writing messy code. What takes long time is to learn how to write maintainable code.

I did not agree initially, but then thanks to [this expanded version](https://www.reddit.com/r/cscareerquestions/comments/8vvf98/managersctos_writing_high_quality_maintainable/e23fgum) I understood that it is true.

A personal incident at work: I wrote a 1 line fix for a regression. I was about to test it manually but then I realized I should have a unit test for this. I `git stash`ed my changes. I took 15 minutes to understand to the test case and a couple of minutes to write the new test. It failed. Then the applied the `stash` and the test passed. Another thing needed to work so that the code works in production. Instead of seeing the code, I saw we have a test for that and I had the confidence now my fix will work. It did. I knew the next time I wrote another test, I wont spend time to figure out how to write the test.

> Code quality = faster development, end of story.

Hence proved.

It's much **easier** on the personal morale to believe that things like TDD, code review, CI/CD, integration tests are overkill and *""My company doesn't do it, and they don't even need it. It is for the larger companies""*. But this is just not true. **This is the difference between a junior engineer (or a bad senior engineer) and a good senior engineer,**

I think everyone should aspire to be the best software engineer they can be. This means learning the tricks of the trade. Once you learn them you'll see its actually faster to write maintainable code, even in the short term. And much much faster in the long term.",1531256876.0,2018-07-10 17:07:56
836,Time complexity questions during phone and face to face screenings. Please give me advice...,510,eaml5x,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/eaml5x/time_complexity_questions_during_phone_and_face/,145,"I just graduated as a computer engineer and have been having phone and face to face screenings at quite a few places. One phone screening I did sort of well in,  but one question was like this:

""Give me a time where you optimized code""

Here is what I said:

""Well I realized when I was searching for an index in an array, I did it linearly at first, but then I realized it would be more optimized if I used a binary search instead""

Interviewer: ""Great, can you tell me the time complexity of a binary search""

Me: ""......O(n) ?""

After that I could tell the person giving the screening was disappointed. I looked it up afterwards and it was O(logn). Time complexity is the one thing I have trouble with. I can't look at code and tell the time complexity. I really can't.

So do I just memorize the time complexity of common algorithms ? I feel like a lot of it is memorization. How can I answer these time complexity questions correctly. Please give me advice ! This is like the one thing I suck at.

Thanks for the help !



Edit: it was a wake up call , but everything clicked now . Thanks for the comments. Software engineering jobs require so much knowledge for you to spit out hence why I’m so frustrated. I’ve been doing Leetcode problems for like a year as well. Now I got to know every nook and crevice of computer science to land my first entry level job I guess....sigh. Anyway, these comments were very helpful, thanks a lot guys !",1576373700.0,2019-12-14 20:35:00
837,My Summer Internship Results,510,dp61t2,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dp61t2/my_summer_internship_results/,230,"Hey all, I recently received an offer for a summer internship position and wanted to share some interesting stats I kept during the hunt. The whole search took around 2 months starting at the start of September. I made a Sankey diagram with my results below:

https://imgur.com/a/kWYOkK9

Background: I go to a well known Canadian university and only applied to companies in California, NYC, Seattle, and the occasional trading firm in Chicago. I had three internships already (2 full stack, one IT); even so, it wasn't easy to get a response as I needed visa sponsorship and had a 2022 graduation date which got me auto-rejected from a few places.

I did around 300 leetcode (but only 150 unique questions) and practised behavioural questions for a few hours. 

I personally used this list: https://www.teamblind.com/article/New-Year-Gift---Curated-List-of-Top-100-LeetCode-Questions-to-Save-Your-Time-OaM1orEU and added more questions to target my weak points (2D DP, Top sort, Patience sort, Graph theory, Tries, 2D Matrices). I also bought leetcode premium to practise company-specific questions. I usually tried to get an hour of leetcode after work during the week and around 3-4 hours a day during the weekends.

Most companies I interviewed with lead with a leetcode easy then transition into 2-3 leetcode mediums - I only encountered one leetcode hard. In the end I received an offer for a relatively well known company in California!

Good luck to everyone out there! It's not easy finding an internship but at the end of the day it's a big numbers game.",1572467351.0,2019-10-30 16:29:11
838,Griefing Experience at Etsy,507,9xkg1r,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9xkg1r/griefing_experience_at_etsy/,242,"It's been around two months since I got fired at Etsy. I just want to share this story and is much needed to get off my chest.

The day I got fired, I was pulled into a meeting with a director and two HR people. The director read off a script and couldn't even look me in the eyes and told me I was fired for ""performance reasons"" and quickly left the room. I was told to get my stuff and specifically ""not to tell anyone about this"". The hr people escorted me out the backdoor. I was blindsided. I didn't even get a chance to talk to my manager or say good bye to my teammates. I was given two weeks severance. 

Two months before I got fired, my manager stopped making it to our one-on-ones. A week before I got fired, I was getting kicked out of my VM for days at a time, and I would be unable to even work on my story.

I didn't think my performance was bad (my opinion so it doesn't matter) 

I am not trying to blame anyway. BUT I felt like this whole experience could have been less griefing for me. What do yall think? Thanks for listening to my rant.

&#x200B;

&#x200B;

&#x200B;

&#x200B;",1542386570.0,2018-11-16 11:42:50
839,How to make a work day productive?,506,d0f5it,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d0f5it/how_to_make_a_work_day_productive/,138,"So I find that after 3-4 hours of coding, my brain turns to mush and I just can't produce anymore.  
Yet I see my coworkers pump out code and work 10 hour days.

How do you guys do it?  I have tried:  
\- taking breaks after every hour  
\- going on walks  
\- eating less during lunch",1567796688.0,2019-09-06 15:04:48
840,I see a lot of new grads struggling to find jobs right now. I was just curious where the people struggling are currently looking?,500,iozttv,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/iozttv/i_see_a_lot_of_new_grads_struggling_to_find_jobs/,304,I live in the DFW area and the job market has been pretty good here for recently graduated CS students. Just curious if the job shortage for new grads  is more focused in a specific area.,1599620658.0,2020-09-08 23:04:18
841,is it normal for an intern to be completely spaced out by afternoon?,506,c5a6cj,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/c5a6cj/is_it_normal_for_an_intern_to_be_completely/,215,"I started my internship in the beginning of the month. The workload started off pretty rough but I was getting things done at a decent pace. Fast forward some time and the work and the scope just gets harder and harder and I'm in completely over my head.

For the past week and a half I have a few tasks and I've been making slow progress, but I find that after I eat lunch I got an hour left before I shut down and do nothing for the rest of the day.

By do nothing I mean I just completely shut down and become complete dead weight. Maybe I write like one or two messages to my manager giving him an update but besides that I stare at my screen or start going on my phone blanking out and doing nothing.

It's getting really bad, I'm wasting almost 30% of my time in the office but by 2 PM I just can't continue working.",1561505140.0,2019-06-25 19:25:40
842,How to deal with superstars?,505,ewf6cy,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ewf6cy/how_to_deal_with_superstars/,193,"I have this ""superstar"" coworker that delivers a lot features on a short span of time, which leads to super shitty code, that I have to constantly try to understand, the worst part It's that he is the lead developer and believes that's the best approach, so every opinion I make it's like ""That's good, but we don't do that here"" followed by some laughs, or some comment to make me look like a stupid, so I have 0 opinion on the project. Last week I send a commit, with one mistakes, he lost his mind and throw a lot of shit at me, like you shouldn't have done that, even when it was easy to fix, and saying that I was making him lose his time.

I'm happy with the company, and 90% of the time it's fine, but I can't deal with this anymore, It's worth looking somewhere else?",1580457982.0,2020-01-31 03:06:22
843,I got a job!!,502,8f75ei,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8f75ei/i_got_a_job/,48,"So, this isn't technically a question, but I have spent a decent amount of time here over the past four months, so I thought I would say it... I got a job!

This isn't my first job in dev but it feels like the first role where I could see myself staying at the company for 2+ years. It just feels so nice to have gotten there :)",1524813948.0,2018-04-27 03:25:48
844,Ridiculous...,506,5mag52,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/5mag52/ridiculous/,128,"http://i.imgur.com/Pmf4hlm.png

Can somebody tell me the type of drug that would make someone want to volunteer to spend 4 months of their time on developing an iOS app for $250? 

Has anybody seen other postings like this? I get that CS related jobs are hard to get, but that doesn't mean that they aren't impossible to get. 

I also love how the HR person used the word ""entitled"". Yes, because $250 is really something I expect for 4 months of work on an app. 

Please, nobody ever undervalue yourself like this.

250$ doesn't even cover a quarter of my rent. What a joke. ",1483693236.0,2017-01-06 04:00:36
845,Am I not cut out for this field?,501,gue9yb,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gue9yb/am_i_not_cut_out_for_this_field/,318,"I feel so lost and stressed because I recently changed my major to CS engineering with stats minor. I’m thinking either SWE or data science type role in the future. I like coding, math, stats, physics and the idea of working with tech in the future (also pretty good at it imo). But what’s really getting to me is reading all these reddit threads about the 1.367 billion things to have to do to remain competitive. For example, always be coding like 24/7, leetcode problems, personal projects, hackathons, kaggle competitions, undergrad research, constantly be learning new database systems, algorithms, new softwares here and there and it’s driving me crazy. I don’t know if I can keep up with all of this and the people in this industry seem to be WAY more into it than I am. 

I like my major and I like coding. I occasionally work on some side projects, but I’m not OBSESSED like it seems like you have to be. I want to enjoy my life and workout, see my friends and family, go outside and be normal. So my question is, does this seem like I’m just not cut out for this? I’m a really hard worker and understand the importance of achieving your goals but I want a normal life.

Sorry if this sounds dumb and I understand if I get roasted for being childish. I just needed to get this out, thanks.

Edit: I really appreciate everyone who has taken the time to respond, there has been some awesome advice given here. General consensus seems to be that I was being dramatic and it's not necessary to eat, sleep, and breathe CS to be okay out there. Thanks again, this has renewed my love for Reddit.",1591016316.0,2020-06-01 08:58:36
846,I think I might be done with programming,502,9f70h0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9f70h0/i_think_i_might_be_done_with_programming/,230,"Roughly 4 and a half years ago I stepped into the world of programming. What initially lured me in was a desire to solve complex abstract problems, work with the latest technology, work/life balance, pay, ability to remote work etc. It started out at an apprenticeship doing PHP for a 18 months, moving onto a brief stint as a frontend dev in digital marketing, taught myself C# for a big government project at a different local company, finally moving up to my current position at an ""exciting healthcare startup"" in London - and I can't say I've enjoyed any of the jobs. 

I've persevered with each job thinking that as I get more responsibilities, work on larger projects, move between industries etc. it will improve, but in the end I just feel like I'm chained to a desk, stuck in doors, staring at a screen all day 5 days a week. Each day I dread going into work, while I'm there I don't feel like I fit in with fellow programmers, at the end of the day I feel like a slob. Honestly, the idea of doing this for another 45 years terrifies me. 

It feels like the only thing keeping me here is the pay, various work benefits, fear of the alternative and hope that it might get better as I progress - but even this I fear is going to stop to a growing lack of interest.

Is it time to move on or does everyone reach this point?

Edit
Wasn’t expecting so many responses and advice! Don’t have enough time to respond to them all but ive read and taken all of them into account, some great advice here. Really appreciate it guys",1536781668.0,2018-09-12 15:47:48
847,Does anyone find that they feel exhausted if they don't take regular breaks during the day? How often do you take a break?,499,jmiun4,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jmiun4/does_anyone_find_that_they_feel_exhausted_if_they/,131,"I've been a software developer for years and I'm often tired after work, but I also often get in the zone and focus for 2-3 hours straight.

I feel like focusing for this amount of time is good for productivity because when I take a break it takes a while getting back in the flow. (However, that 2-3 hours is probably less and less productive as time goes on)

How often do you take breaks from work and has more regular breaks helped with tiredness?

I'm thinking maybe every 30-60 mins is probably best?",1604328833.0,2020-11-02 09:53:53
848,How do recruiters filter through thousands of applications?,496,j9ml2c,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/j9ml2c/how_do_recruiters_filter_through_thousands_of/,306,"For example I was looking at this position [Applications Engineering Internship at Tesla](https://www.linkedin.com/jobs/search/?geoId=92000000&keywords=Software%20-%20Applications%20Engineering%20Internship%20(Spring%202021)%20tesla&location=Worldwide) and it has **1153** applications on linkedin right now. I'd imagine if you include other job boards & company site the number is in the high thousands. 

How can recruiters realistically go through that many resumes and find the best candidate to interview? Or do they have automated scripts to look for keywords like ""Berkeley"" and ""Google"" and every resume that fails the automation process goes to trash?",1602517339.0,2020-10-12 11:42:19
849,How dev environments work at Slack (by someone who was baffled by dev environments as an intern),499,g9sc9i,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/g9sc9i/how_dev_environments_work_at_slack_by_someone_who/,101,"Link: [https://slack.engineering/development-environments-at-slack-f3c1339c2445](https://slack.engineering/development-environments-at-slack-f3c1339c2445)

About a month ago, I shared with y'all [a post](https://www.reddit.com/r/cscareerquestions/comments/frvo2p/how_deploys_work_at_slack_written_by_someone_who/) on how deploys work at Slack. People here seemed to like it, so I want to share something closely related and hopefully just as interesting.

That would be dev environments, the sandboxes where you test your code before it's deployed. Like deploys, dev environments are easy to use (or they should be), but behind the scenes are tons of technical complexity + historical context that's super hard to grasp in a short amount of time.

It took me about half a year to write this post, and I think I did a pretty good job of capturing how our dev environments evolved over the last few years. Hope you enjoy, and again, happy to answer any questions about this topic or Slack.",1588126402.0,2020-04-28 22:13:22
850,A Comprehensive Guide To Getting An Internship,499,5rc9z8,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/5rc9z8/a_comprehensive_guide_to_getting_an_internship/,76,"**EDIT:** I want to note that this guide is mainly for those people that are shooting for larger to big 4 type companies. There were a lot of people saying they've never had to take a coding assessment etc. etc. That's neat and fine, but there are some companies that you absolutely have to do that. I've interviewed with DropBox, Microsoft, Trip Advisor, Airbnb, Uber, etc. and they all kinda test you on the same things. At the same time I've interviewed with companies where the whole process was ranking my skills from 1-10 and answering behaviorial questions. This guide is not necessarily directed at the smaller or non CS centric job opportunities.

**EDIT 2:** I also want to stress by no means should finding an internship be the majority of your college life. Enjoy yourself, have fun, stay relaxed. Just get to planning ahead before the Fall comes. All of these tips aren't by the book, it's just what has worked for myself and my friends as we've gone through this process.

________________

Hey guys, I’ve been on this subreddit for awhile now and I really wanted to write a comprehensive guide on getting past some of the hurdles in the internship process that it seems like a lot of you all are stuck on. I’ve been where a lot of you are now. I switched to CS the end of my 2nd semester with no experience and no knowledge of any language besides html and matlab, but after summer of hard work and talking to some advisers on how to make the most of my work, I secured an internship the following semester. Now I’m here a year later and I recently landed an internship offer from Amazon (2nd internship ever) after receiving 25+ rejections since August. Getting that offer was something I would've never really expected to happen to me this year, and I want to pass the little knowledge I have to some of you that may be struggling or losing hope right now in the job search process. **I want to warn you**, my advice cannot be applied overnight, and it will take a lot of self drive, but I do believe that if these steps are followed you will be making great strides towards your dream internship. The steps are as follows:

**1. Learn Data Structures & Algorithms Enough to Explain to a non CS major**

**2. Apply What You've Learned in the Form of Projects**

**3. Use Those Projects to Build Your Resume**

**4. Perfect Your Resume**

**5. Practice Coding Challenges and Whiteboarding**

**6. Learn About Yourself**

**7. Apply Everywhere**

**8. Interview**

**9. Receive Offer**

I'm going to do my best to break down what each step means without writing a novel per topic. That being said,   some sections are pretty lengthy so bear with me, pardon the inevitable typos, and hopefully you learn something.

**Note: Everyone won't start at step 1, some will be at 1, some will be at 5, and some may have just skipped 4 and will need to go back to be completely prepared. Use this guide in the way that it applies to you**

_____________________


*  ***Learn Data Structures & Algorithms Enough to Explain to a non CS major***

You won't land any respectable CS internship without knowledge of data structures and algorithms. This is where you start your journey. It's not enough to know what a HashMap is, you need to be able to illustrate what it does, when to use it, and what the costs/benefits of using it are. Learn the basic sorting algorithms and how to code them. Finally, study BigO in terms of both time complexity and space complexity. I was fortunate enough to have the opportunity take a course on these things, and I was even luckier to love the course so I was motivated to learn. Depending on your knowledge, this may take 3 months in itself, but do not move on until you’re completely comfortable with all of the basic data structures and algorithms. Every step after builds on this.


* ***Apply What You've Learned in the Form of Projects***

So now that you know the basics, use what you've learned to do some cool projects. Independent projects/Hackathons will be what separates your application from everyone else. I've heard recruiters from Amazon, Google, Statefarm, MailChimp, you name it, say this when asking them what they look for. It shows you have initiative. The summer after I switched to CS (from Computer Engineering) I spent the entire summer at home working on projects Mon-Fri (as if I already had an internship or was taking classes). I used online resources to walk me through projects, and then took the concepts from the tutorial projects and altered them to make them my own. By the end of the summer I had about 4 or 5 android projects that I could put on my resume. If you're a college student see if you're have sites like Lynda.com available for free use. If not, there are a plethora of free online resources at your disposal. The only cost is time. I sacrificed a lot of hangouts and video games for work. I made it a rule to be working at least from 11AM- 5PM during weekdays as if I was on the clock. Often it was much more than that because I was so engrossed in my projects. These projects also helped me get familiar with project developments cycle and my language of choice (Java/Html/CSS). Make sure to upload all of these projects to GitHub (commits or it didn't happen).



* ***Use Those Projects to Build Your Resume***

You now have a portfolio of projects. So (for the most part) having previous internship experience, being ""only a 2nd year"", etc, doesn't matter. Do you best to make these projects the meat of your resume (along with any relevant work experience). Extracurricular clubs are fun and show you have a life outside of coding so leave room for that, but at the end of the day you need to highlight your technical triumphs.


* ***Perfect Your Resume***

So in terms of getting your foot in the door this is a big one. I hear a lot of people saying it’s impossible to get an internship without internship experience. That’s not true it’s a paradox. Your personal projects are enough, you just have to sell them. Your resume is often times your only opportunity to sell yourself to a recruiter. I’ve seen a lot of talented people with straight up terrible resumes. **DO NOT OVERLOOK THIS STEP.** Go online and find a template for your resume. Unless you're looking for a design position don’t overdo it (no graphics), just use a template. The goal of a resume is to highlight all of your experience and skills in a concise manner so a recruiter can scan it in 30 seconds. They don’t have time to read paragraphs about each project (or even one paragraph). Keep everything to bullet points. Highlight the technical and or team specific aspects of each project, job, or extracurriculars. Your awards are sometimes cool to add but it tells recruiters nothing about your team experience or technical knowledge. Do what you can to keep everything strictly related to CS. Also, 
**KEEP IT TO ONE PAGE**. I could make an entire post on resumes. Just make sure you stick to a template (Google CS resume template) and don’t get long winded. 

* ***Practice Coding Challenges and Whiteboarding***

I’d argue that this step is by far the hardest to get through, partly because this step never really ends. Once you start interviewing you’ll soon realize that knowing your concepts isn’t enough. The technical interviewing process is a completely different game where you have to master tricks and critical thinking. The good news is to become good all it takes is practice. Get a copy of CTCI (Cracking The Coding Interview), make a Hackerrank and Leetcode account, buy a whiteboard off of Amazon, and just practice questions. You’ll never know what questions you’ll get in a technical interview, but once you’ve practice enough of each type (String manipulation, Linked Lists, Arrays) you’ll start to recognize what each question wants and how you need to begin working on this. **PRACTICE. PRACTICE. PRACTICE.** If you’re doing a “difficulty:easy” problem and can’t solve it within 30-40 mins, look up the solution, understand it (not memorize), move on to a different question, and come back to it in a few days and try it again. The HackerRank CTCI playlist on Youtube does an amazing job at teaching you how to approach these problems. Wait but there’s more, knowing the answer isn’t always enough. I know, it’s insane. You have to be able to accurately explain WHY and HOW you found the solution that you did. A lot of times you will  have interviewers who just want to see if you can communicate well enough to jump into a team. Talk out loud when solving problems. Be comfortable with solving on a whiteboard and in an online IDE (or google doc, disgusting). The main takeaway from this should be to never stop practicing. 

* ***Learn About Yourself***

So now that you’ve mastered the technical side, don’t forget about the behavioral side of interviews because a lot of people do. Act like a human. Know your projects. Know your strengths. Know your weakness (Genuine weaknesses not those BS twisted “My biggest weakness is I have no weakness” garbage). Get a list of experiences in your head where you needed to work with a group, ran into a problem, had to take a leadership role, etc. People want to work with cool people and driven, not arrogant, odd, and annoying people. Keep that in mind when going into a face to face interview. 

* ***Apply Everywhere***


Somewhat self explanatory. I just want to remind you to not act like you’re better than any company that’s not a big 4 company. There’s so many opportunities out there. My internship was working with an IT focused company. I had no knowledge about or interest in IT pros, but after that internship I can say I learned a lot and had a great time. I also got a chance to gain some experience in front-end and fullstack development, which is what I really wanted all along. Apply everywhere. Make a list of everyone you’ve applied for. I’m talking at least 30+ (preferably 50+) applications need to submitted. If you’re really serious about gaining experience you need to broaden your scope of places to work. It won’t all be glorious or interesting but you can great some great experience from unexpected places.


* ***Interview***

Here it is. The day you’ve been waiting for. You’ll be feeling a lot of things. My advice is to calm down, lock in, and do your best. Sometimes when I’m taking coding challenges or solving an interview question on a whiteboard I get so nervous I freeze up and forget everything. It may happen, it’s okay. Just do your best to collect yourself and calm down. I’ve done a handful of interviews and I still get nervous to some extent every time. Sometimes you may feel you royally blew it. Sometimes you may feel you did flawless. The more you interview the more you get comfortable with the process. Just take every interview seriously and give it your all. 

* ***Receive Offer***

Phew, after hours of thinking how to compose this we’ve reached the final step. Now let me preface this. You will receive rejections, and some will sting more than others. Don’t let that discourage you! Just learn from your mistakes and figure out what you can do better next time. When you finally receive that offer it will be awesome and you can go crazy and tell us about it. 

________

Hopefully all of this advices helps. I’m far from an expert on this. I’m not a recruiter or anything. I’ve just been working through this process and felt like I could help. If you guys have anything to add to this guide don’t don’t hesitate to comment!
",1485938533.0,2017-02-01 03:42:13
851,"""Once you get experience and your foot in the door, finding a job gets much easier""",497,ihvqww,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ihvqww/once_you_get_experience_and_your_foot_in_the_door/,304,"For me, this has been very false.

&#x200B;

Yes I know there is a pandemic going on and hiring freezes, but I can't understand why after 4 years of experience, with plenty more to show on my resume, including personal projects, that I have a much harder time landing an interview than I did when I was a newly grad with a couple internship and me uploading a bubble sort algorithm to my github. Everyone I talked too has just told me ""oh its a pandemic, nobody is hiring, you'll be fine in a few months"", but I find that hard to believe when today marks the 200th application I sent since the past year and nothing. No interview, seldom a follow up (which is a rejection), even FAANGs stopped qualifying me for pre-assessments.

&#x200B;

Background: I have 4 years of experience as a CRM consultant. Meaning I did most of my work solving business problems using C# and Javascript. I owned and managed myself for several projects and have many happy clients. My github now contains actual projects, one of which contains a build for a game you can download and play. I want to leave my job and find work that can challenge me again and pay me more than what new grads are almost doubling nowadays (I tried a salary negotiation before covid and my boss shot it down and since then he's been kind of negative towards me).

At this stage I feel defeated in life, I don't understand why I feel like I'm doing everything right, but failing at every turn. I have my resume looked every almost on a bi-weekly basis by professionals (maybe ""professionals"" at this point), I take time to personalize every cover letter for the role, I do lots of research on the companies I apply too, and I'm flabbergasted that in the past year I haven't even been in an interview (so I know I'm destined to fail the first interview I get in 4 years). I want to ask if anyone is feeling a similar situation where despite work experience you don't feel wanted? I'm making this post because I hit the realization that I've applied to every company ad that's popped up today at least once in the past year or so and I'm not sure if I should even try applying again.

&#x200B;

Edit: Thanks everyone for your feedback, to be frank I'm a little embarrassed on HOW bad it was and how I didn't even realize it. I'm going to rewrite it from scratch, and get feedback for it on the weekly thread has some have suggested.

Edit2: Most of you have read it but https://imgur.com/u6lK5ka. Also to clarify while it is CRM, my goal is to move away from it, and I'm working on tailoring my resume for jobs that don't include CRM.

Edit3: I reviewed it and posted it in the resume feedback thread, thank you everyone from the criticism and the actions I should take to fix it up. https://imgur.com/a/sDFG8yU <- the newer version",1598598526.0,2020-08-28 03:08:46
852,"Update - Coworker rewrote service i was told to own, and basically made everything i have done in the last 3 weeks pointless. I don't really know how to proceed with this.",497,chjtvu,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/chjtvu/update_coworker_rewrote_service_i_was_told_to_own/,249,"My original post: [here](https://www.reddit.com/r/cscareerquestions/comments/cf22ku/coworker_rewrote_service_i_was_told_to_own_and/)

Anyways basically Foo is as some people pointed out more or less a rockstar developer they have been here a long time and have had their hands in a lot of things. They have a reptuation for just doing things at the drop of a pin, which is a big deal. Also to point out one other thing my manager confirmed he had no idea of Foo actually doing a re-write. Foo's entire argument for the re-write was ""Elixir is much better than Javascript"". This is an internal tool used by maybe \~30 people from our support team, the API is snappy, and scaling isn't a deal right now in anyway. 

On Friday Foo pushed me really hard to just merge their PR and accept their rewrite, i gave them a list of issues discovered by QA, and i got a blunt ""I don't have bandwidth to resolve these issues, i need you to step up to resolve these issues"".

Monday taking the advice a lot of the advice people gave me, together with QA i basically formulated an itemized list of issues both QA/me discovered, missing features, etc, and gave rough time estimates for many things. The time estimate was well over 3+ months at minimum gauging some of the complexity.

Foo on the other hand took the stance that ""i doubt anyone uses those advanced features, and they are extremely time consuming to re-implement. So we should just strip them."" At this point i just more or less told my manager he should make the decision. He made the decision to put the re-write on hold until the next release cycle. This didn't seem to make Foo happy as they then started to complain about how they don't have time to redo their work, i offered to port their changes into the current version. But they more or less ignored me.

Anyways when i got in this morning i was pulled aside by our CTO who basically told me he doesn't think it is going to work and was let go. He basically told me that he hasn't seen me accomplish anything since i started, and my unwillingness to accept other developers advice/work.

I explained my perspective and i got a lot of: ""I understand, however Foo says this can be made production ready in a week"". Frankly i have realized i don't want to work in that sort of environment.",1564063632.0,2019-07-25 10:07:12
853,Is anyone else finding it very hard to stay productive at work these days?,499,h055n5,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/h055n5/is_anyone_else_finding_it_very_hard_to_stay/,130,"With all the crazy events that have been happening, along with being quarantined at home 24/7, I've been feeling so increasingly demotivated that it's starting to affect my work performance. Before the quarantine, I was always on top of things and completing my tickets on time. However, as time went on, I've been feeling increasingly burnt out. I don't do anything except stay home all day and night, week after week, and my life is completely monotonous. I basically live on my own and I'm single, so every day is the same boring solitary unfulfilling day after the next. I also don't have many friends in the area (I moved back home since quarantine) so there's no one to hang out with. Before the quarantine I'd find time to hang with friends multiple times per week, but ever since the lockdown I'm pretty sure I haven't hung out with a single friend. I'm barely even finding motivation to do the basic things I used to do to take care of myself, like working out every day, shaving, or simply maintaining a constant sleep schedule. I just feel like in general I've lost a lot of motivation to do ANYTHING because life has been so monotonous and there's nothing for me to look forward to anymore. I don't even wanna go on social media anymore cause everyone is constantly yelling about politics and its just so negative all the time. This, combined with all the crazy news going on, I find I can hardly stay focused on work tasks. These past few weeks it's been super hard for me to focus and some days I hardly get any work done at all. My work efficiency has definitely taken a nose dive, but I haven't been called out on my performance yet. Is this normal during times like this? Any tips on how I can recharge?",1591798806.0,2020-06-10 10:20:06
854,"My contract says I have unlimited PTO, my boss wants me to lose pay for a long vacation I'm taking.",495,befyur,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/befyur/my_contract_says_i_have_unlimited_pto_my_boss/,268,"I have a vacation planned for about 3 weeks. 

My boss says she thinks it's too long and that I should do the 3rd week without pay. 

I offered to work extra weekends/during the holiday after it, but I want to get peoples' opinions and see if anyone else has had a similar type of situation. 

I feel like if the policy is unlimited, I shouldn't be docked pay. That's a little more like saying you just don't get *any* guaranteed PTO.",1555580982.0,2019-04-18 05:49:42
855,What books should every software engineer read to better themselves (technical and non-technical)?,496,6w4dej,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6w4dej/what_books_should_every_software_engineer_read_to/,111,"I'm graduating in December and start working as a Software Engineer in January. I'd like to start focusing on my career and learn what it takes to become a great software engineer and team member. What are some of your favorite books that software engineers should read, whether they be technical or non-technical?  ",1503762226.0,2017-08-26 11:43:46
856,"Folks who have 15+ years of experience in the industry, what was the absolute hot tech you needed to know at the start of your career?",495,i4z4uj,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i4z4uj/folks_who_have_15_years_of_experience_in_the/,284,"Curious about what the tech trends were in the early aughts or prior -- what did you have to know to be considered up to date technically speaking? What were the exciting, perhaps slightly faddish technologies?",1596773237.0,2020-08-07 00:07:17
857,What are some good questions to ask a potential employer to find out whether or not the company has bad management practices?,499,ajq2xn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ajq2xn/what_are_some_good_questions_to_ask_a_potential/,123,"I’ve been a software engineer for about 2 years now, and I’m starting to look for a new job. My current company suffers from what I assume is somewhat common: management doesn’t understand tech, over promises to clients/customers, doesn’t care about code quality as long as it gets done, and ultimately the engineers get backed into a corner where everyone is writing shitty code to meet unrealistic deadlines. It’s partly a culture thing that starts at upper management and flows down to lower level managers who don’t want to say no to their boss because they’ll look bad.

I don’t want to just jump into another situation like this one - what questions can I ask that will give me some insight on their practices and attitude towards tech?",1548458776.0,2019-01-25 18:26:16
858,AMA - I just got an offer from my dream company after switching careers from the restaurant industry,494,8ecicz,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8ecicz/ama_i_just_got_an_offer_from_my_dream_company/,183,"TLDR:

I'm 29 and dropped out of college after failing out of a large state school. I went into the restaurant industry with massive student debt and decided to go back to school for CS. I just received an offer from a Big 4 in a great location, and I'm graduating in May.

Background:

I went into the service industry with 50k in student loans when I was 21-22. Reality hit me pretty hard that I couldn't afford to live on my 9/hr cooking job. I worked 2 jobs for a year and a half to pay off my old school to get my transcripts and transferred to a community college.

I spent 2 years at a CC and another 2 at a pretty mediocre state school. I managed to land an internship at a big company with an office in my area last summer, and basically begged my manager to let me stay on this year as an unofficial co-op while I finish my degree.

I applied to a bunch of unicorns and large software companies this spring, and I actually heard back from a Big 4. I did an online coding assessment and 5 interviews. The process took about 3 months. I had no idea how well I was doing, but I just received my offer last week!

It was a long process from deciding to go back to school, and actually finishing and getting a great offer (6 years from when I first decided I wanted to go for CS). I'm in a great spot now, and I want to say thanks to this sub for helping me get ready for my interviews.

AMA!

Edit: thanks for all the support - hope my story inspired someone feeling discouraged.  I lurked this subreddit for years, and I'm going to keep coming back because this shit is really helpful.",1524527679.0,2018-04-23 19:54:39
859,Horrible Interview,497,6j9ri8,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6j9ri8/horrible_interview/,136,"On Friday, I had an interview with a Lead Technical Consultant from a large company in the financial industry. He started out with ""tell me what you've been doing since graduation. Why don't you have a job yet?"" After I did my best to list some things, he proceeded toward the technical portion. Glassdoor indicated there would be questions like why I'm interested in their company, or why I chose Computer Science, but he never asked any of those. 

In the technical portion, he began with ""tell me about any sorting function that you know."" 

Then he went to ""since you have C# on your resume, tell me all the C# and Visual Studio commands that you know."" I asked him to clarify, but he said in a snarky voice ""it's pretty obvious what I'm asking. Do you even know what a command is? Actually, it sounds like you don't know, so let's move on."" ""We use PVCS. Can you tell me how you handle merge conflicts?"" I've never used PVCS, but I tried to explain the process with Git. He didn't accept and couldn't believe how I've never used ""the most popular VCS."" He didn't even know what Git was.

His next question, which was also his final, was ""tell me anything about yourself that I should know that you haven't told me yet."" I didn't know what to tell him, and couldn't come up with an answer since the question was so bland and he sounded very irritated. The interview ended. He didn't even tell me anything about the company, nor allow me to ask any questions.

I'm really getting sick of interviewing. I have no idea how to prepare for these kinds of companies that have such random processes.",1498358543.0,2017-06-24 22:42:23
860,What I'm grateful for in CS,494,d4a7zq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d4a7zq/what_im_grateful_for_in_cs/,76,"When I started work this year, I was pretty down when visiting this place - high TC, free lunches and dinners, massive stipends... Felt like no matter what I was selling myself out (although this was the only offer out of 200+ apps). But recently I read some comments on different posts that made me have a different outlook on it all. So just wanted to message what I'm grateful for, that wasn't originally obvious to myself.

\- Clean bathrooms. This is surprisingly bigger than I thought, but like so many jobs don't have this that it's easy to take for granted. Like always clean when you need to take a dump on company time, and doesn't smell like it was raided a cow herd.

\- Flexible hours. Technically 9-5 but if I feel like crap or have stuff to do can always make those hours up later (unless there are meetings), or even work from home if it is really required.

\- Still above average pay. Like I may not get those crazy 130k salaries you see here (closer to 90k in NYC), but never really had to worry about living paycheck to paycheck. Still in the realm of if I want to eat out I can. This is generally something I see with new grads that crave huge paychecks and feel hard done by with less but realistically its really not a massive hindrance all in all, still can live fine.

\- opportunity for growth. Not everywhere is there such potential for exponential growth as cs does and a lower barrier to entry than places like law or finance.

\- stemming from above, better job security. Granted there are many new people going into the field but still a huge need for experienced individuals. So more stable as the years go on. But also just the fact that mistakes can be somewhat less costly - a PM group has a bad quarter, they get fired, A surgeon messes up surgery, malpractice, a developer causing a prod issue, fixing it and writing a postmortem (although yeah depends heavily on how bad the issue was).

\- Again another one of those ""depends on where you work"" things but the work is mentally stimulating for the most part. I don't come in day in day out to do some assembly line task that's mind numbing but get to work on interesting problems that keeps work somewhat interesting.

\- Being allowed on YouTube, Twitch and Reddit. They aren't blocked and no one criticizes me for going on them during work hours.

All in all, I'm not sure if this is me trying to justify my decisions but does feel nice acknowledging some things I took for granted from not working in other areas and not having experienced them.",1568520154.0,2019-09-15 00:02:34
861,Finally found an internship. Thank you to all the helpful people on here.,491,bp3opd,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bp3opd/finally_found_an_internship_thank_you_to_all_the/,62,"Like the title says, I just got an internship as a freshman and I think much of it attributes to the advice I've been seeing on this sub. Although I've only posted a few times I read many others posts and comments. 

The biggest thing that I found useful from this sub is dont stop applying until you sign an offer. I think the amount of places I applied is the largest factor to my success.

Something I've only seen a few posts about on this sub is following up your application with an email or something. I think doing this lead to about double the amount of interviews than I would have got otherwise.

Thank you to all the more experienced people commenting on this sub.",1557983715.0,2019-05-16 01:15:15
862,Udacity now has a course (FREE) to prepare you for a technical interview,498,4jjbx2,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/4jjbx2/udacity_now_has_a_course_free_to_prepare_you_for/,60,"Hi everyone,
I am a huge Udacity fan (mainly because all their courses are free and made by leaders in the industry), and I just discovered that they released a course on technical interviews. It is 1 month old so it is fairly new. According to the syllabus, the course covers:

Introduction and Efficiency
List-Based Collections
Searching and Sorting
Maps and Hashing
Trees
Graphs
Case Studies in Algorithms
Technical Interviewing Techniques
And a Practice Interview

Here is the link to the course: https://www.udacity.com/course/technical-interview--ud513

Just want to share this with you guys, especially for those who are looking for a resource for their interview! Again, it is FREE too!",1463396456.0,2016-05-16 07:00:56
863,That job in tech isn’t as far away as you think,493,f1ps1y,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/f1ps1y/that_job_in_tech_isnt_as_far_away_as_you_think/,45,"'*Leaving inexperience and doubt at the door to grab my role in tech*'

Going for a job is a big step in itself, like most people you’ll have a tonne of things going through your mind. You’ll read blog after blog on how to nail that interview or land your dream job with three sure-fire ways to stand out from the rest. Sure, these blogs may help you, but in my case it was my lack of experience in a tech role that was my main concern:

* How would I compensate for my lack of tech background?
* Why would they choose me over someone else?
* Am I going to look like an idiot?

These were all questions I worried about — I’d written myself off before I’d even started. Worrying about potential weaknesses was no help at all — I decided I would focus on the traits that would show why they had to choose me over the rest. But the turning point for me was when I asked myself a different question:

**What is it I am great at and how could I portray this to them?**

Before the interview I listed out three things I consider myself to be good at which I could use at any point during the process. This helped me focus and gave me a lot of confidence during my interview. Asking yourself what you’re good at can be applied to a lot of different scenarios — what will you apply yours to?

**Being honest —** a tough question can sometimes lead to answering in a way that’s generic or calculated and that isn’t going to impress in an interview situation. “What are your greatest strengths and weaknesses?” is basically saying what can you bring to the table that our company needs, while also highlighting areas that you’ve identified as developmental going forwards. In my eyes a company wasn’t going to hire me if a) I couldn’t tell them what I would offer to the role and maybe more importantly b) if I couldn’t acknowledge any weaknesses to work on and portrayed myself as perfect.

Listing genuine strengths shouldn’t be too hard with a little preparation. Backing them up with examples from previous jobs or scenarios will really help cement your positive trait behind them. In my case I gave an example of being calm under pressure and delivering a custom report with a dramatically reduced timeframe. Then tied that back to why having this trait would stand me in good stead for this role since they work in two-week cycles and can often have moving deadlines.

Try and use a weakness that highlights an area you’ve identified and worked on but also doesn’t tarnish your ability to perform in the role. A weakness I used, I admitted I’d find myself wrestling with something on my own for too long. Simply put, I wouldn’t ask for help early enough. I further explained that I was noticing this in my previous role as I was fuelled by wanting to finish tasks or learn things myself.

Here’s where I showed maturity, to show how this isn’t something that would be detrimental to the company hiring me, I told them what I did to change this weakness into a personal objective. Rather than learning without help, I started to surround myself with people that would have the answers and found that in most cases, I’d learn what I needed ten times quicker than going it alone. To finish, I ended by saying it’s a great learning curve and something that I look at as a positive area to continue working on.

**Thinking on my feet** — I was asked to name some websites that I didn’t like using as part of the interview. Should be easy right? There must be loads of websites I can nitpick at! But no, my mind went blank and I couldn’t think of anything and plucking one out of thin air wouldn’t have seemed genuine.

What I did here was swing the question around; I reeled off what I liked about a certain site rather than disliked and how that benefited the user keeping them engaged while they used it.

Using this technique allowed me to keep the interview flowing and meant that I could give some sort of answer rather than squirming under pressure.

**Holding conversation** — as a child my parents would often comment that I held a conversation well with adults and showed maturity in doing so. This is something I utilise in most situations like this, it may sound simple or obvious but for me, it’s a must-do especially in interviews. There are countless things like nerves, fear and anticipation during an interview that may affect how you’d usually come across in conversation. This is completely normal and expected given the environment you’re in.

Holding a normal conversation in an interview means I think about what I’d say, do and most importantly how I’d feel during general chats around the office or with friends. That may sound counterintuitive to most and it would be if you completely disregarded the fact you’re in an interview. I’m talking about the parts of those conversations that you can apply to an interview.

For me, if I can make the conversation flow like a normal conversation would, I instantly feel a lot more relaxed during an interview. It can be a subtle difference but very effective, rather than answering questions and leaving silences I’ll try finish with an open-ended question back. In my mind, back and forth in an interview after each question as opposed to feeling like I’m put on the spot constantly, takes the pressure off me once I’ve finished answering each time. Doing this also gives you a chance to get some insight with examples they might respond with, while also giving yourself time to prepare for the next question put to you.

From my experience applying any of the three points where possible transformed my interview and I have taken that approach into a lot of scenarios completely unrelated to job interviews. Your three points should be changeable depending on the situation, ideally complimenting the task or action at hand.

This is just an example of what I try to apply and there are many other factors that will determine if you’re successful in getting any role. We all have skills to bring to the table, but I think the tendency is to focus on the barriers of why we might not get the role and in a lot of cases that leads to fear and doubt.

The point I’m making here is that this post was about getting a role in tech with lack of experience. What I hope you noticed is that none of this actually focused on tech at all.

While it’s important to point out there are definitely roles in tech that require qualifications and some experience, there are still plenty of opportunities to land a role within the industry regardless of background just by showing your qualities and ability.",1581367415.0,2020-02-10 15:43:35
864,How can a programmer like myself use my skills to help combat global challenges like climate change or poverty?,492,87013t,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/87013t/how_can_a_programmer_like_myself_use_my_skills_to/,209,I've been doing a lot of thinking lately. I'm currently a programmer working a very cruisey/stable corporate job and have realized I don't want to remain in corporate for the rest of my life. I'd like to move into more 'meaningful' work and so would like to know how I could use my skills as a coder to help combat global challenges like climate change or poverty.,1522004273.0,2018-03-25 14:57:53
865,What is the best CS career advice that you've been given?,493,7glzx1,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/7glzx1/what_is_the_best_cs_career_advice_that_youve_been/,303,,1512073730.0,2017-11-30 15:28:50
866,Seasoned programmer needs to make ~20k/yr with minimal hours. What work should I look for?,484,k22gvm,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k22gvm/seasoned_programmer_needs_to_make_20kyr_with/,219,"\*Originally posted to r/learnprogramming but requested to be moved here

Hi,  
I have been programming in industry for the last 6 years, but recently I have decided to make a life style change that will require me to have ample amounts of free time during day light hours. I've been primarily a back end Go / Scala developer with decent experience in web dev during my college days (I worked short term web dev jobs for my campus). I have a decent amount of money saved up from working for large companies doing the 40 hr 9-5 thing, but I now need to make just enough to support myself working as few hours a week as possible, around 20-30k a year (Also not during day time as stated above)

What kind of jobs should I look into? Im having a difficult time finding things that match this fairly strict criteria. My first idea is create courses to share what I have learned in industry, as I find college did not correctly prepare me for the work force and theres a ton of stuff I wish I knew going into day one of my jobs.

Sorry for such a crazy question but thank you for taking the time to read this! :)",1606517489.0,2020-11-27 17:51:29
867,Feeling burnt out and confused about tech industry and my future.,490,akwb1s,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/akwb1s/feeling_burnt_out_and_confused_about_tech/,122,"I'm in my mid 20s and have been working for a big N for almost half a decade. 

&#x200B;

**What I have been going through:**

I've been grinding nonstop since college. My passion for tech/CS has dwindled because of the high stress and soul-lessness of my job and this field. I don't understand why some people in this industry are such workaholics, especially when it's unnecessary. It almost feels like some form of pride. It drags you down with them, because if you decide to go home early -- you appear lazy.

&#x200B;

The bullshit ""on-call"" culture and companies insisting that their devs should be responsible for their service 24/7 when they can just hire people to do the job, it's an entire job role itself... Also it feels like guilt-tripping the developers, especially the younger ones...

&#x200B;

There have been tiny sweet moments in my work life, but the majority of it has been a shit storm.

&#x200B;

I've been a ""strong performer"" in my company for years, and now I don't care anymore... I want my life and freedom back. **Both my mental health and physical health was destroyed these years**, luckily I had the finances for cover them. However in the back of my mind, I know I wouldn't have had know issues if it wasn't for working such a stressful job. The bullshit office politics, the backstabbing, and the masks people wear, it's disappointing...

&#x200B;

Don't even talk about golden handcuffs... It just makes us feel like a goddamned puppet for the CEO.

&#x200B;

**What I would like, but not sure how to attain:**

A relaxing sabbatical would be amazing. My financial health is in top shape, I can do fine if I decided not to work for several years, but long term, I'd like to financially independent and in order to do that, more savings is required. It worries me that I'd have trouble finding a job if I was unemployed for an extended amount of time. ***Is this a myth or fact?***

&#x200B;

My desire would be a full remote job with good work life balance, the freedom to be anywhere and work, to be close to loved ones-- to make up for all the years I left them. To be able to maintain bonds with people. To travel freely. However, I don't know what's the steps towards getting a full remote job, or if I'm qualified. ***Can*** ***anyone that has experience with full remote jobs/digital nomad, share your take?***

&#x200B;

To rekindle my passion for CS. Looking back in the past, I don't understand how there was the willpower and passion to study so hard and get A/A-'s in my CS classes. Staying for hours and hammering at a homework assignment. Or studying really hard for a final. Not out of necessity, but out of pure curiosity. I miss that firey passion with tech that was present during college. ***How have/can you achieved this?*** 

&#x200B;

**And finally:**

Not a second passes where I don't forget to be grateful for having a high-paying job and be in financially healthy state and such, but life is too short to be stuck in a bad cycle and choose to accept it because you *should*.

I would love to hear if others who have felt quite similar and what they have done (or planning to). If you can give me some guiding advice or share your experiences, thank you so much! **<3**",1548764382.0,2019-01-29 07:19:42
868,I have a LinkedIn premium account. So I can check out what other people I'm competing against. Here's what I've learned.,487,8bjtgb,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8bjtgb/i_have_a_linkedin_premium_account_so_i_can_check/,369,"Most jobs I've seen have over +200 plus applicants within a couple of days. It's usually broken down into 20-30% bachelors degrees, and 70-80% with a masters degrees.     These are entry-level jobs and yet I can see that some applicants are mid-level to senior level (not that many usually 4-5). Just wanted to give you guys a look at what type of competition there is on LinkedIn.

EDIT: If anyone wants a screenshot of a certain region or job just let me know and I'll post.

EDIT: I'm going to post a screenshot of my resume which includes my GitHub here so people can compare themselves to mine. My work experience has gaps when I moved to Austin I took a job outside of software because I didn't want to go unemployed for a long time, and this is probably what has been hurting my chances the most.  [Resume] (https://imgur.com/L62eVmx)

Edit: Someone asked for an example of what I'm seeing so here it is [link] (https://imgur.com/a/gjgOK). I appreciate that no one has accused OP of lying or only being selective in what I'm showing, but if anyone has doubt LinkedIn offers a month free of their premium service (which is how I got this) this way you guys can see for yourselves... I got yall this is just a LinkedIn ad for premium /s.",1523503436.0,2018-04-11 23:23:56
869,11 Reasons Working For Amazon Is the Worst Ever (From an Insider),486,4fg44p,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/4fg44p/11_reasons_working_for_amazon_is_the_worst_ever/,363,"Attention anyone thinking about working for Amazon! Please do not do it. It’s a horrible place that will ruin your health, your self esteem, your drive, and your relationships. After working there for a period of years I am free, and want to prevent others from falling into this hell hole. Here is a top 11 list of what sucks the most about working at Amazon:

1.	Micromanagement. From Bezos (notorious micromanager) on down, managers are incented to micromanage. Look at the principles. Micromanaging is what “Dive Deep” is really about. If your manager doesn’t do it, he’s in trouble. And I am talking about intense hardcore tell me everything you are doing, and 5 reasons why, while I yell at you micromanagement. Amazon is the big league of micromanagement. If you don’t like being micromanaged, Amazon is not the right place for you. 

2.	Principles used as a weapon. Look at Amazon’s leadership principles. They look okay, right? Wrong. Most people use them to badmouth others and even better, and they use them incorrectly and qualitatively (which is totally hilarious at such a data driven company). If Amazon’s hiring practices were so good, why would they need to control people with nutty cult like principles? Answer: Amazon believes its own press, and they are too hypercritical and xenophobic to see when something isn’t working.

3.	Anytime feedback. Want an app to anonymously tattle on your coworkers? Amazon’s got it! Just remember, they will be tattling on any misstep you make too; and right to your micromanaging boss! And, you will make those mistakes because you will be working hard and fast, while being tired, and getting constantly graded against the idiotic principles that don’t make sense for mature adults. 

4.	Bell curving. There is a strong bell curve in place for how you will be reviewed. Yes, there is backstabbing, and if you are in the bottom 10% you will be termed “LE” and given a PIP which you aren’t meant to succeed at. Then you will be out. No matter that you just moved from Pakistan or whatever.. Tough crap. And yes, each team needs to hit the bell curve. Because even though you might all be awesome, some of you are less awesome (not usually technically by the way, you just didn’t kiss the right butt).

5.	Ops. Ops. More Ops. Everything is breaking in new and terrible ways all the time. Amazon has grown way too fast, and everything is brittle and messed up. Thousands of high sev tickets in many teams. Senior engineers working tickets all day. Getting paged all night. 15 minutes response time. Have a life? Not anymore.

6.	You thought they were on cutting edge stuff? Hah! Amazon doesn’t care about what is going on outside of Amazon, and they are so inwardly focused, they don’t even know that they are getting passed by open source technologies. Sure, at first a lot of what they did was innovative, but not anymore. And, let’s say you get on a team that is doing something cool. Your chances of being “the man” on that project are small. You will likely be spending your days keeping the lights on. Refer to point 5.  

7.	No respect for experience: At Amazon, it’s about Amazon. They don’t care that you know how to do something better or faster for the customer. You need to do it the Amazon way. Or the way your inexperienced manager says is the Amazon way, anyway. That’s what matters. Refer to point 2 (misuse of the principles).

8.	No respect for planning. Amazon is a dev ops culture from top to bottom. Everyone does ops. But everyone does planning. And project management. And deployment. And on and on. There is no time for architecture, planning, or proper testing. They are constantly behind the curve on scaling, their projects are always late, there is nothing documented, there is no architecture (or even respect for having an architecture or design). Technical debt is huge, and the environment is too big to ever clean it up. This is what leads to ops and not being able to work on anything cool (refer to points 5 and 6)

9.	Long hours and intense days. You thought this would be number 1? Nah. Everyone knows you work long hours in most groups at Amazon. Don’t say you didn’t. You aren’t that dumb. But it’s the intensity most people don’t know about. You are moving and multitasking all day. You are tired when you leave. Okay; so you are fine working hard and fast? Are you fine working hard and fast while being constantly berated and backstabbed in a horrible condescending culture? You like pain, I guess…. 

10.	Health problems galore. Many people at Amazon have health issues, are taking meds, get divorced, or have other family issues. People drink a lot, and generally everyone is miserable. But, most of them moved for Amazon, and now they are stuck. Or they think they will make it. Until they get LE’d. 

11.	Great pay is a mirage. Amazon pays a lot. Why? Because they have HUGE hiring and retention problems and people know it. Why do you think they had a hiring event in your hometown in the Ukraine? Because they like the cold or whatever?? No! They need to search far and wide for people who don’t know or don’t care about what I am telling you. Still not convinced? Seriously? Even with all the other companies you could go to that care about you, even a little? Fine. Negotiate a great comp deal. Be aggressive and ask for what you want. Then double it. 
They are desperate and will likely give you what you want. However, keep in mind that with about 1 year average tenure, you are not likely to get that money for long. And you will owe part of that money back. You just sold your soul to the devil. 
",1461071739.0,2016-04-19 09:15:39
870,Losing interest in CS,486,ddp01y,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ddp01y/losing_interest_in_cs/,233,"After 250+ leetcode questions, I managed to mess up interviews at companies I really wanted to get into. I haven't received a response yet, but I'm pretty sure of the outcome.

More than depressed or disappointed, I'm just exhausted. There's nothing I could've done, short of mock interviews, to aid my prep. I have no regrets....just a sinking feeling that I'm not cut out for a job.

I really like CS. I've written my own programming language from scratch, worked on an open-source experimental BitTorrent client, and I enjoy reading about database design. Even though I didn't fully understand the implementations, I enjoy browsing through some of the rust RFC's. I liked that stuff.

With the likely incoming slew of rejections, I've just lost all that interest. I'm tired, exhausted, disappointed, and don't want anything to do with CS. If I can't meet what's considered the baseline level of competence, it only seems logical to switch into a different field...

Anyone else in the same boat?

&#x200B;

&#x200B;

EDIT: Thanks for all support, folks <3. Bookmarked this post to remind me not to make rash, irrational decisions in the face of disappointment.  Although I haven't received the responses yet, whatever the final outcome is, I'll be sure to plough on and work harder.",1570319688.0,2019-10-05 19:54:48
871,Front-end focused projects are easy to showcase. What practices do you recommend to adopt for making and showing off back-end focused projects?,484,crnf3y,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/crnf3y/frontend_focused_projects_are_easy_to_showcase/,70,"The title pretty much says it all, if you were hiring a backend dev, what would you be looking for in the projects he mentiones as proof of his skills? Code style consistency? Test coverage? How expanded it is beyond the usual CRUD capabilities?

The question is doubly relevant for people working in industries where you can't even really talk about the work you've done, except in the broad scope, because you might be releasing a trade secret.",1566083861.0,2019-08-17 19:17:41
872,How many actual productive hours do you have in your 9 hour work day?,488,bz3ait,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bz3ait/how_many_actual_productive_hours_do_you_have_in/,320,"By productive hours, I mean the hours that are not spent at lunch, talking to your coworkers about random stuff, time spent on social media, etc.,",1560229436.0,2019-06-11 01:03:56
873,"Data Scientists, since the term has been so blurried and tries to encompass so many things - what exactly do you do? What skills do you use? What tasks do you do daily? How does your daily life look like?",486,au7qkq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/au7qkq/data_scientists_since_the_term_has_been_so/,56,Everything is pretty much in the title so this body is just a placeholder to not get automoderatorwhacked.,1551042035.0,2019-02-24 16:00:35
874,Company sends test that takes 8 hours,480,aqkbei,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/aqkbei/company_sends_test_that_takes_8_hours/,205,"I don't get when a a company sends a test and then says that it should take you 8 hours to complete. They want me to spend an entire day of work for them and not paying me any thing for it. 

This is what I received from them 

""We have shortlisted you for the next round of the interview. In this stage, we would like to send you a technical test which shouldn't take more than 4-8 hours to complete but we will be allocating 24 hours for it. We won't penalize or reward if you finish the test sooner. All the test received within 24 hours window will be reviewed and only selected candidates will proceed to the next interview round ie. in-person"" 

Should I spend time doing the test or just move forward? ",1550183429.0,2019-02-14 17:30:29
875,The most important progress bar you’ve never seen,488,en76fw,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/en76fw/the_most_important_progress_bar_youve_never_seen/,120,"I've had several friends feel really beat down after spending months on the CS job hunt. I hate these setbacks making them so discouraged when I know they are talented and will get jobs eventually, so I wanted to unpack and share what these setbacks really mean.

Making a mistake in an interview does not make you a failure.

Struggling to get the job you want does not make you a failure.

Trying your hardest but falling short over and over again does not make you a failure.

What you are trying to do is not easy, and all of these speedbumps are necessary to get where you want to go. Let that sink in. These are not catastrophes, they are steps along the path to where you want to go.

Think about a hard class you passed or some other accomplishment you had. Was every assignment and quiz and test a complete effortless success? Or was it a mix of good tests, bad quizzes, and hard projects?

The path to any hard goal will have ups and downs. That’s a guarantee. What I need you to understand is that both the ups and downs in that class were a part of the passing grade you eventually got. Read that again. The setbacks along the way did not predestine failure, they were just a part of the journey.

&#x200B;

>There's an invisible progress bar over your head which represents how close you are to your goal, be it a new job or promotion or an internship. And every time one of these setbacks or successes happens it moves from 60% to 63% or from 91% to 95% or maybe even 98% to 99%.  
>  
>We don't know where the progress bar is right now\*, but it only moves forward.\*

&#x200B;

I do know that you will accomplish your goal, but we have to remember that these speed bumps on the way to our goal are necessary and ***they don't mean you're not going to get where you want to go***\*.\* With each phone interview and algorithm exercise and coding challenge that bar is moving forward.

It never stops unless you give up. And sometimes we feel a lot of darkness or uncertainty. When was your last dark moment? When something went south and you were devastated and wanted to quit? It didn't beat you, you didn't give up. Guess what? That progress bar moved forward when you got back up off your feet and dusted yourself off.

We can't see the progress bar right now, but all the ups and the downs on this journey make it fill up a tiny bit more. I believe in you and I know you're not going to quit and I'm so proud of you for all your hard work.  I think that progress bar is more full than you realize, and I'm so proud of you for keeping the fight on after every setback and challenge and difficulty.

When you practice coding challenges? **The bar fills up a little.**

When you get a rejection email and decide to try somewhere else? **bar.fill\_up\_a\_little()**

When you click submit on a new job application? **throw new BarLevelAlmostOverflowingException()**

Those were just steps along the path and we didn't see the bar fill up a little bit more after each one, but I guarantee you it did. Imagine it filling up above your head next time something like that happens, it’ll help you realize you’re still moving forward and that one setback does not define you as a failure. Your persistence and drive to keep trying defines you as a success.

You know all the success stories who landed crazy great jobs? They had many of the same setbacks and the same progress bar filled up halfway you have now. They got rejections too. But they just kept chugging until it was filled up to 100%. Don’t feel like they are different or better than you.

Getting a certain job or working at a certain company does not define you as a success. Right now, at this second, you are an incredibly powerful machine that just hasn’t been plugged into the right system yet.  You’re already worthy, you already have value and you were never a failure. Someday you're going to look back at this time and be so proud of how hard you fought and how you never gave up.

This isn't easy, but by simply sticking with it you're doing so much right. You can't see it right now, but that progress bar is steadily marching forward, and it'll be at 100% before you know it.

&#x200B;

Further reading: The Obstacle is the Way by Ryan Holiday is a fantastic book that really helped me to reframe setbacks and help me learn from them in all areas of life. Highly recommend it if this post resonated with you. It takes a little effort to learn but once I saw that I could learn from *everything* that happened to me, it was way easier to stay positive because even when life gave me a curveball I could get something out of it.",1578776699.0,2020-01-11 16:04:59
876,"How I got rejected by 35+ startups before landing a ""dream"" job",482,bczsz2,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bczsz2/how_i_got_rejected_by_35_startups_before_landing/,97,"Hello fellows. I recently went through a job change and would like to post my experience. Would love to compare my experiences with yours.

**TL;DR:** Lot of companies do not focus on good engineering. The algorithm rounds were a hit-and-miss. Negotiate.

Some facts:
 * I resigned and decided to take a 2 month break to completely focus on the job-hunting
 * Interviewed (i.e. at least 1 online round) with 35+ companies. Mostly startups (seed to series A).
 * Mostly in India. ~10 in EU, Japan, and other overseas through stack overflow careers. I don't think my then [8k SO reputation](https://stackoverflow.com/users/1396264/vedant) helped out.
 * I linked to my medium profile in my CV and in 3 or 4 interviews (after initial screening rounds), we talked about my (somewhat controversial) blog [Can’t hack your way to the top](https://hackernoon.com/cant-hack-your-way-to-the-top-da16fb630e6f)

Now for the experiences:

In the initial calls, some of the startups insisted on not following best engineering practices *""We are a 10 developer team, we don't need tests or CI""*. I declined to interview further with those companies. A surprising thing happened; since I emphasised the importance of good engineering, companies with similar beliefs were *""so glad I said that""*. This shortlisting led me to the 35+ number mentioned above.

A word of advice I followed **Interview with easier companies (and companies you aren't particularly interested) first.** It was very important for me to get into groove for interviewing and shake the irrational fear. After a month or so of interviews I was in the zen of confidence and temperament. I gave the interviews to my favourite companies without any fear. 

Initial rounds were almost always algorithm questions. I had practiced a fair amount (including strings, DP, trees). But still, sometimes the answer didn't strike me at that time. Not sure why. Would love to know your thoughts on this one. Also, the questions were quite similar across companies and geographies. Some were even exactly the same. Next rounds were high level system design, and sometimes low-level (object oriented) design. I liked these rounds, and most interesting discussions happened here. The managerial/project round were fine as well. I spoke confidently about my past projects, went deep into explanations about not only ""how"" but also of ""why"". I felt a gave a convincing reason to leave my current company and join this one. By this round I had done enough homework on the company. I asked a lot of questions; specifically on the tech team structure and engineering practices.

It became quite a stressful and overloaded 1.5 months. I had a lot of interviews lined up. I had to manage my time on google calendar. Somehow, I liked this level of stress. At one time, I was scheduling interviews up to 7 days later. HRs were quite surprised. My sleep cycle got messed up. I gave a 3-4 rounds just after waking-up with lesser sleep. Bad idea. I didn't clear any of them. Then, I started keeping couple of red bulls. I took 1 before any such interview (online or in-person). Surprisingly, it actually helped.

A lot of companies (especially the foreign ones with only online rounds) just ghosted me after an initial round and/or small project. Sad, but it happens. Even I led a few companies on while I was awaiting other interviews/offers. No point in taking the moral high ground here.

After 1.5 months of full time interviewing, most companies rejected me, and I rejected a few. A lot of rejections were because of a huge gap in salary expectations. I learnt this well in advance to **talk about expected salary in the initial calls**. No point in going through 1-2 weeks of interview only to reject the company since they are offering less than half your expected (I learnt that the hard way). Negotiation is important for job satisfaction. I got multiple good offers to have the leverage to negotiate.

I entered the negotiation phase with like 4 companies. It was a tough choice and even tougher to hold out and give other interviews while you have offers in hand. The companies differed across geographies, size (of team and company), industries, engineering practices, etc. I spoke to a lot of friends, trying to get hold of people working in the companies I was seriously considering.

In conclusion, I moved to Singapore to join Grab.

**Update:**

I got interviews through:

 1. 1st and 2nd degree referrals: I personally told (call/WhatsApp) everyone I knew that I'm looking. Some referred to their companies, some connected their friends. I tweeted to people I knew but whose number I didn't have. Everyone was more than happy to help; though only a few were actually helpful. I have a few HRs of companies in my LinkedIn. Even though I hadn't known them before they were helpful in getting me an interview.
 1. Job recruiters: Recruiters were easy to find for me on LinkedIn. They sent a lot of interviews my way. A downside: they would be annoying by calling often trying to get me to accept an offer made by their client, and by trying to middleman negotiations.
 1. Tech conferences, local meetups: Attending such events introduced me to a lot of companies with whom I wouldn't have otherwise gotten in touch with. All sponsors have one goal: hiring. I paid for travel/tickets from my own pocket (I had already quit, remember) and was more than worth it.
 1. Networking in co-working places: this was a little unorthodox, but I went to WeWork (and their like) to network. I knew a few people there and they connected me to more of them.

I practiced mostly using geeks4geeks. Saw the questions and tried to code it up myself. Always do 3.0+ (sometimes even 4) rated questions.

[An incomplete list of the questions I attempted](https://docs.google.com/document/d/11Bu_ZN9GwsEyhtZ1ID9wRJ2RZ4jbn7zJg9JCAAOCKnY/edit?usp=sharing)

[GitHub repo with the solved questions](https://github.com/vedant1811/geek-passtime) (Its not organised well)",1555249970.0,2019-04-14 09:52:50
877,Look what you guys did,491,79qzra,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/79qzra/look_what_you_guys_did/,124,"Bee Technologies is now famous and will surely secure it's seed round of funding.

https://techcrunch.com/2017/10/30/small-startup-shows-us-the-wrong-way-to-incentivize-programmers/",1509428728.0,2017-10-31 01:45:28
878,"Noticing that I hate coding, I’m a CS student.",487,cako6i,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cako6i/noticing_that_i_hate_coding_im_a_cs_student/,240,"Okay well I don’t HATE coding, but I can’t see myself designing, debugging, and writing code 40 hours a week. That’ll just get too much for me.

What to do now? I have a passion in technology, I’m thinking of taking the IT route. What does the IT route look like and how much do they make?",1562619294.0,2019-07-08 16:54:54
879,I compiled notes with most important things from Former SF Tech Recruiter AMA and I want to share it with you!,484,aorngn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/aorngn/i_compiled_notes_with_most_important_things_from/,56,"Hi, thanks for reading my post. After very popular AMA with SF Recruiter showed up I was really interested and wanted to take some notes for myself. Then, few hours and 600+ comments later here we are. **No point in keeping knowledge only for myself so here are the notes with the most important things from it.** Download them below.

I hope they will help people that are just getting in the industry like myself.

Also, thank you so much [**u/jboo87**](https://www.reddit.com/user/jboo87). You did all hard work man.

Links to download:

[**Drive**](https://drive.google.com/open?id=1VRR2ouCZUqwt9B3MpvDH2Sv3oVOnYi_I)

[**Dropbox**](https://www.dropbox.com/s/4xonf59geuuri4w/SF%20Recruiter%20AMA%202019.pdf?dl=0)

Sorry for bad handwriting (I am just a sloppy high school student who hates writing on laptop keyboard) and possible grammar problems (English isn't my first language).",1549741435.0,2019-02-09 14:43:55
880,"My company is discussing return to the workplace for July, I have been tasked to represent my team in meetings that will decide new policies and procedures and potentially open remote work as a standard practice. Any ideas on how I should approach this?",480,gumi5h,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gumi5h/my_company_is_discussing_return_to_the_workplace/,183,"Prior to COVID-19 my work was WFH friendly provided you had some excuse for why. Kids, plumber, feeling under the weather. But its always an awkward dance you have to do with your manager. And some managers were very against it.

Now that we have all been full-remote for months, we have a pile of evidence that it works for us. And now, with return to the workplace looming they want to review all policies and come up with some new ones. My manager tasked me to represent my team of 17 engineers. So I want to try and come up with some good ideas and talking points to help everyone out. My boss mainly asked me to do this because I have always been very based and vocal about remote work.

My main push will be optional dedicated WFH days. I think if we stagger days and have a schedule where managers know that their employees will be WFH, it will be easier to communicate. Compared to before where someone would be out the day of, and its hard to track where anyone is at any given time. Also, dedicated WFH days keep everyone ready to pivot to full WFH in a crisis like were in now.

I am thinking of sending a google survey to my team to find out what everyone wants to get out of this. Any good questions I should put on the survey? The only one I have no is to have people select 2 days they would like to WFH.

So questions for all you guys:

* Was your work WFH friendly before? How about now?
* Any policies at your work related to WFH that you liked a lot?
* Anything you didn't/don't like that you wish you could change?",1591053693.0,2020-06-01 19:21:33
881,If you could turn back time and tell your freshly-graduated self 1 thing - What would it be?,486,gq9zd2,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gq9zd2/if_you_could_turn_back_time_and_tell_your/,336,"Junior BSCS student here on track to graduate next summer.

&#x200B;

&#x200B;

\- Posting this to potentially help students and fresh grads alike who may be a bit uncertain as to what their future in CS holds due to imposter syndrome, economic uncertainty, or perhaps just from being a greenie in the tech world...",1590437803.0,2020-05-25 16:16:43
882,"In your experience, what's the costliest developer hire you or your company has made?",483,ckqsn6,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ckqsn6/in_your_experience_whats_the_costliest_developer/,343,"I read a few times how hiring the right person can be important because a bad hire could be potentially disastrous. For software developers or related tech roles, what examples of this have you encountered?",1564706366.0,2019-08-01 20:39:26
883,Anybody here love programming but dislike the tech worker stereotype?,482,8ifdun,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8ifdun/anybody_here_love_programming_but_dislike_the/,263,"I love coding and being a software engineer. I take pride in my work and love reading about design patterns, API architecture, etc but honestly most of my friends are not tech workers. 

The few that I am friends with all seem to want to talk about blockchain, this internal tool they’re building at work, etc while I just wanna talk about the NBA Playoffs...",1525992062.0,2018-05-10 18:41:02
884,I fucked up at work today. Feel awful. Tell me about the times you completely screwed up so that I'll feel better.,479,9d86cr,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9d86cr/i_fucked_up_at_work_today_feel_awful_tell_me/,412,"So, I was supposed to introduce a blocking page on a web app... Messed up with the routing, some asynchronous issues here and there. Even the Product team got involved... So basically it was a huge mess.",1536193525.0,2018-09-05 20:25:25
885,People are asking me for referrals but I don't want to refer people i know nothing about. How do i get to know them better?,482,d3q5fa,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d3q5fa/people_are_asking_me_for_referrals_but_i_dont/,80,"I've been getting a lot of LinkedIn requests from people from my school, asking me to refer them for a position at a company.

As someone who has recently been on the other side of this process, i have a lot of sympathy for these people and i want to help them as much as i can. However, my company strongly discourages referring people who i dont know. For this reason, I'm considering getting to know these people by scheduling a phone call with them and asking them some questions about what they're looking for, and what they're ambitions are. 

What are some good questions to ask these people to get to know them?",1568414143.0,2019-09-13 18:35:43
886,"Boss told me ""We don't pay you to learn on the job"". Wondering what you guys think about this?",477,8uth5o,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8uth5o/boss_told_me_we_dont_pay_you_to_learn_on_the_job/,234,I'm not sure how to feel. Wondering what you guys opinions on this are.,1530310680.0,2018-06-29 18:18:00
887,Why some companies insist on hiring candidates who understand algorithmic complexity,481,6oemwp,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6oemwp/why_some_companies_insist_on_hiring_candidates/,247,"Because otherwise, they risk getting something like [this](https://github.com/tangxunye/android_vendor_qcom_proprietary/blob/e0666c398903d38e72aeda7042ec2836cd3dba68/mm-camera/mm-camera2/media-controller/modules/isp/hw/modules/rolloff/mlro_to_plro/mlro_utils.c) in their codebase.

Nothing like requiring quadratic runtime and linear space to find... the maximum element in an array. This from a multibillion dollar company. And probably running on millions of phones around the world right now. :-/

Edit 10 days later: The entire repo has been DMCA'd (thanks /u/changingminds for the headsup). In summary, this code was 100+ lines of C (where 5 were needed) written to find the max abs value in an array, which included a call to a custom built bubble sort routine (which is unnecessary obviously, and was very poorly implemented).",1500563136.0,2017-07-20 11:05:36
888,"Barely do any work, but get paid.",482,8k58o1,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8k58o1/barely_do_any_work_but_get_paid/,268,"Every day I do only about 2 hours of work, other 6 hours I spend wasting time on reddit and hackernews. My manager is aware that I don't have enough work to do, but doesn't give me more tasks. Every quarter I get ""exceed expectations"" on reviews from my manager. That may seem like a dream job, but I feel really bad \- my personality and brain are degrading every hour I waste time at work. I tried to find another job, but the best offer I could find was 25&#37; below my current pay.",1526600690.0,2018-05-17 19:44:50
889,The myth of the genius programmer,482,68giqj,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/68giqj/the_myth_of_the_genius_programmer/,114,"In response to a lot of questions I have seen here from people still in college or looking for a first job, I think [this talk from Google I/O](https://www.youtube.com/watch?v=0SARbwvhupQ) is very relevant.

The take away is that a software job isn't all about what you can do individually but rather how you contribute to a team and a project. It's easy to get stuck up on your ego when you are prepping for interviews and you're nervous, but it's also important to remember that the job itself requires a lot of people skills and collaboration. 

Anyway, this is something I don't see here enough, so I thought I would put it out as general advice.",1493600722.0,2017-04-30 21:05:22
890,In which I attempt to answer like 90% of a normal day's questions,483,4qurgo,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/4qurgo/in_which_i_attempt_to_answer_like_90_of_a_normal/,85,"
Question | Answer
---|---
I haven't heard back from my recruiter/POC/interviewer in over (time length) | Things happen, people get busy. You may/may not be their number one priority. Wait a week or so and send an email . Do not spam them. You should send a 'thank you' email to your interviewer a day after interviewing anyways.
Should I go to college? | Yes. Very few people can make it without it. Odds are you're not one of those people. It's not so much a learning thing but a check mark for resumes, a way to get internships, etc.
Should I go massively in debt to go to college| No. 
I'm burnt out/depressed/feel worthless/etc | Shitty, but it happens. Google 'impostor syndrome'. Pick up a hobby, socialize, make friends, get away from your computer every once in a while. It's okay feel frustrated at what you do every so often, if it's a regular thing, go get help. There is nothing wrong with this.
How come I don't make as much as X | Why do you care how much X makes anyways? You don't need to keep up with the Joneses. Are you making enough to pay your bills? To live comfortably in a life style that you enjoy? Are you happy? Then who cares. 
How badly will taking an internship at (non-Google like company) hurt me? | It won't. Any experience is good experience. Thinking you can pigeon hole your entire career based on a semester long internship doesn't make sense.
Will there be any jobs left when I graduate??| Yes. This is why you go to college, you have more than just a 6 week understanding of the current hot framework. There will always be a need for competent software engineers.
I didn't get a job at XYZ right out of college| Sorry. But hey, guess what? YOU CAN REAPPLY. Who knows, you might find that you really love the job you took instead.
I've tried applying for 100+ jobs, what's wrong with me?| Probably many things, but hey, post your resume in the weekly resume advice thread and lets see what we can do?
How do I get better at interviewing | Read CTCI, practice with friends, explain some code you've written to a rubber duck, read the FAQ of this sub, try to organize some practice sessions at school?
What can I read to make myself less anxious talking | Fucking nothing. The only way to get past social anxiety is to face it. Go to meetup.com and find a group of strangers to talk to, join toastmasters, join a club, etc. 
Why is everyone on this sub a 4.0 student with 100+ internship offers and already have jobs that pay in blow jobs? | Because people lie. You do you and lets not worry about them. 
Does the name of the school matter? | As long as it's not University of Phoenix, you'll be fine. Yes people from top 10 schools may have more opportunities initially open to them, but there are plenty for non-top 10 schools. People who went to state schools work at every company. Just apply, get internships,  work on projects, etc. 
I'm seriously out of my depth at my internship/job  | Did you lie on your resume? No? Great, the company knew what they were getting into. Ask for help when needed, but all jobs have an initial learning curve. 
But no seriously, will there be jobs in the future? | You're right, I'm lying, go learn 19th Century French poetry instead.
My recruiter told me 'We'll be in touch in a week', what does that mean | Look, we're adults here. Most people have zero patience of trying to send out coy hints. If someone tells you something, there is no secondary message, they say what they mean. 
",1467445849.0,2016-07-02 03:50:49
891,Don't give up!,477,fync8g,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fync8g/dont_give_up/,108,"As a senior graduating in May, I'll admit I was somewhat pessimistic about receiving a job offer these last few weeks. In early March I was in the final round of interviews at three different companies (one of which even told me to expect an offer within days).

The market crashed and all three companies had to freeze hiring until further notice. Not the best feeling, but I didn't stop applying and neither should you. Two weeks ago, I started interviewing at another company that I really didn't think I had a shot with (not FAANG). Today I accepted a full time offer. I might have just been lucky, but this means it is definitely possible.

**Keep positive, stay persistent, and do not be discouraged!**",1586577208.0,2020-04-10 23:53:28
892,"The 3 most common salary negotiation questions, answered",483,cpfoef,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cpfoef/the_3_most_common_salary_negotiation_questions/,115,"Thank you all for your fantastic questions in the [salary negotiation AMA](https://www.reddit.com/r/cscareerquestions/comments/cdym2g/were_candor_levelsfyi_here_to_answer_your_burning/)! Wanted to follow back with some of the most common questions with definitive answers to help you get the most out of your next negotiation.

*— Levels.fyi + Candor*

## I’m underpaid - how do I get a raise?

* **Look for new roles**: By far the easiest way to get a salary increase is to switch into another job adjacently at a slightly higher level
* **Get leverage**: If you’d rather stay where you are, you should still interview to get offers and gain leverage in negotiations. Negotiating empty handed is much more difficult.
* **Relocate**: If possible, moving to higher paying locations like the Bay Area, Seattle, or New York — even despite the high COL, these places will definitely improve your take-home pay (especially if you correctly [account for COL differences](https://www.reddit.com/r/cscareerquestions/comments/6o0ypv/psa_cost_of_living_you_a_defense_of_big_cities/))

## What should I say to recruiters?

* **Never reveal your salary:** Giving up information at this stage has basically no advantage for you.
* **If asked, be polite, but firm**: Tell the recruiter it's too early to know and you'd love to discuss once you're excited and confident there's a fit. The Candor guide has example [scripts](https://candor.co/salary/guide/#ask) you can use.
* **Remember your rights**: In some states (like CA), the recruiter has to tell you the base salary band for the position and you are not required to answer questions about your past pay.
   * Even if you don’t live in a state like that - you always have the right to not answer questions that put you at a negotiating disadvantage

## What are the biggest mistakes while negotiating?

* **Not getting leverage**: to get a big bump in comp from FAANG, you’ll need a counter-offers. If you don’t have any counter-offers, look to your existing employer. Even just saying “I mentioned this offer to my manager in our 1:1 and the team is scrambling to put together a counter-offer in the $XXX range ” can help you get leverage.
* **Being non-committal and not specific.** Recruiters spend all day negotiating with people who aren’t serious — if you want them to go the extra mile, you need to be firm and committed. Only start the negotiation process if you mean it. Once you’ve made your mind, set a specific number as a TC goal that you’ll 100% commit to signing if the recruiter can hit it. Make it clear you're a team working together to overcome a common hurdle and work with them on designing a comp mix that hits the TC goal.
* **Not being informed**: Know your market rate and what people are paying. Check out [Levels.fyi](https://www.levels.fyi/) for up to date tech salaries. Once you finalize your offer, please [submit your salary info](https://www.levels.fyi/addcomp.html) anonymously to help everyone else in the community.
* **Not considering all locations**: Consider all locations and cost-of-living. The compensation hierarchy is roughly: SF > NY >= Seattle > Everywhere else.
* **Not considering all benefits**: Make sure to know [benefits](https://candor.co/salary/benefits/) your employer provides. Non-monetary compensation such as free food, good healthcare, etc can add up to thousands of dollars in value.
* **Not being realistic**: Particularly for new grads, offers are often set and not negotiable — you may still have a bit of wiggle room (e.g. getting an extra 10k signing bonus) but you should know you have less leverage.

*A note on new grads/students*: If you’re a new grad, just remember experience trumps what you learn in the classroom. Go out and do internships and work on side projects!",1565660159.0,2019-08-12 21:35:59
893,Accepted an offer from a company that rejected me after a phone screen four months before,478,amrqnm,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/amrqnm/accepted_an_offer_from_a_company_that_rejected_me/,54,"Maybe this will be helpful for those still struggling forward: Even if you're rejected, it is no judgment on you. It is sometimes just someone's bad day.

Four months ago, I had a phone screen with the hiring manager of a team at a large public tech company. He was curt and almost immediately seemed adversarial. I had never seen the problem before and while I was still writing my code, he told me it had a bug. I said, ""I'm not done writing this and I'm sure it has a bug, let's see if I find it."" I found and corrected it almost right away. It was basically just a typo. Rejected with the feedback that I ""missed a huge corner case."" Wha..??

So I kept interviewing and eventually I applied again to another team when a role came up that fit my qualifications. Great phone screen feedback, came onsite, and had great feedback after the interview. I had another offer and negotiated with them, and they aggressively outbid the other company. I signed the offer last week, and it nearly doubles my total compensation.

Just goes to show, that if you persist you can find the right match, and that one person's opinion of you isn't necessarily valid.",1549244026.0,2019-02-03 20:33:46
894,Progress your career at your own pace.,477,8j04my,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8j04my/progress_your_career_at_your_own_pace/,97,"I feel this sub has so much tension over big N, a certain achievement by a certain age, and the general feel like this is a race between you and your peers. It’s not a straight path race, but rather a long marathon where unpredictable things happen... so just go at your own pace.

Sometimes seeing people stressed out about things that’s akin to worrying about whether or not you will graduate high school after failing a 2nd grade spelling test. 

Just do your best each day and it’ll be fine. Learn something each day and you will get there. ",1526199372.0,2018-05-13 04:16:12
895,"Told I am too valuable in my current position during my interview for software developer position, what should I do?",480,esfmn2,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/esfmn2/told_i_am_too_valuable_in_my_current_position/,157,"I took this job as it was close to home and I wanted to save up before I looked further afield. They didn't have any software positions going at the time but did tell me that there would be positions coming up.  
 

 I have recently had an interview for a software developer position within my company where I was told I am too valuable in my current position and that they'd have to find someone to backfill my position.  
 

My current position is QA Engineer where the majority of my work has been programming in Python for UI automation. My degree was in computer science. This is my first job out of college.  
 

For the most part the QA division is mostly made up of manual testers with a few who can record automation tests in testcomplete. I was hired on as they were looking for a more development focused background in the position. I have redone a lot of the recorded automation tests to use the page object model pattern as they were beginning to become unmaintainable. I also set up git repos for any code projects within the division as they were not using source control. I am the goto for any scripts, or issues regarding automation.   
 

I took this job as it was close to home and I wanted to save up before I looked further afield. They didnt have any software positions going at the time but did tell me that there would be positions coming up.  
 

I do enjoy working on automating tests, but because of the QA Engineer title I can be pulled into manual testing if the company requires it. This has happened for few things over the past few months and I absolutely loathe it.  
 

They did say they would get back to me on the job in the next 2 weeks. I have the feeling I won't get it. If so is it time to jump ship? See if I can get a software developer job elsewhere? I'm not keen on being in QA for much longer.",1579744818.0,2020-01-22 21:00:18
896,"Well, Lads, We Did It, I Got and Accepted My First Job!",482,bdcmk1,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bdcmk1/well_lads_we_did_it_i_got_and_accepted_my_first/,133,"Well, after a long run of applications and a quick resume rewrite I had an interview with what Id consider to be the job of my choice out of the ones I applied for. 2 weeks later I got an offer! I graduate Spring of 2020 and can't be more excited to start! 

&#x200B;

Long story short, just gotta keep applying and trying your best. I go to a no-name school with a 2.X GPA.

&#x200B;

For those curious about the offer I was given:

Salary: 70k + moving expenses in a medium CoL

It's not an amazing offer/salary but I knew that coming into it due to the nature of the job and employer, but its the field I want to be in, so it's okay! 

&#x200B;

Keep grinding and you'll reach your goals!",1555336735.0,2019-04-15 09:58:55
897,"Employers, why send a rejection email 6+ months after the application was sent to you?",479,8d03lg,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8d03lg/employers_why_send_a_rejection_email_6_months/,117,"Hi all,  
  
I've had this happen a few times and, while I'm sure it's likely automated, it makes no sense. Dropbox just now sent me a rejection email. I applied in August last year. 
 
I'm not salty about it, but it does seem pretty rude. I've accepted another offer, had another entire semester go by, and haven't expected to hear from them in, well, half a year. Why do employers do this? 
 
People are well aware they weren't selected after *much* less time goes by. ",1524028284.0,2018-04-18 01:11:24
898,After all the struggle and months of effort...finally got a job!!,482,6had2b,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6had2b/after_all_the_struggle_and_months_of/,90,"I had posted this thread about a month ago - https://www.reddit.com/r/cscareerquestions/comments/6a9e3u/on_the_brink_of_depression_with_job_search_as_a/. I've finally landed a job with a Bay Area company.

It took a total of about 6.5 months, 150+ applications, 15 companies beyond the resume screening stage, 12 onsites and an unquantifiable amount of determination and persistence to get to this stage. I'm a rather pessimistic person by nature, but for whatever reason, I was able to maintain an unusual amount of positivity and optimism throughout this process. It's hard to put into words how happy and relieved I am now! 

A big thanks to everyone who responded to my linked thread and to everyone else on this sub for the invaluable questions and replies! If any other job seekers want additional tips, I'd be happy to provide some :)
",1497502298.0,2017-06-15 00:51:38
899,Working remotely and living in a rural area?,474,gax59h,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gax59h/working_remotely_and_living_in_a_rural_area/,214,"Has anyone here taken a fully remote job and moved to a rural area? My ideal situation is to be 100% remote and move out the sticks. I grew up in a rural area, then the burbs, now I live in a huge city. It’s just not for me. What is your experience like? Were you able to find decent internet? I have a million questions but I guess I’d really just like to hear your experiences.",1588287296.0,2020-04-30 18:54:56
900,My Success Story,475,f9i2q7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/f9i2q7/my_success_story/,86,"Hi Reddit! I’ve seen this style of post lately and when I was neck deep in job applications it was super helpful to read everyone’s success stories. It gets so awfully bleak sending out app after app but it does pan out in the end. So I hope this will inspire some of you guys! I also just really felt like sharing since I’m so happy to be done with this shit job hunt. Also, I apologize for it being so long. 

I \[22F\] graduated in August 2019 with my BS in Computer Science and minors in both linguistics and German. I took summer courses every year so I didn’t really have the opportunity to intern at any point while I was in school. I honestly had no idea that this was somewhat of a necessity until I started the job application process.   
 

Well started applying for jobs soon after graduation. I actually got my very first phone interview from my 27th application sent out. I passed it. I was thinking at the time that I was getting quite lucky and thought my job hunt was going to be a lot easier than everyone else’s. I moved on to the technical interview… this was my first taste of actually realizing I needed to continuously improve on what I had learned during school. I completely bombed it. I started studying every aspect of my degree I could possibly think up in order to prepare for these technical interviews. Finally got through to an on-site at a company located about 2 hours from me at my 49th application. Long story short: I got the job offer for about $65K. However, at the exact same time, I was also offered a 3-month unpaid and fulltime internship position as a graphic designer and web developer. Probably the vast majority of you would think I’m crazy, but I took the internship instead. There was something super depressing about the other job offer that made me feel soulless when I walked away, and I just couldn’t imagine enjoying life working there.  
 

So I get this internship. I learn a lot. I learned I don’t really like web development. However, during this time I was also working hard on learning React and Angular in my spare time, which sparked my passion for frontend development and motivated me to pursue this specific job role. I continuously applied for jobs during my internship and even got a handful of phone screens and a couple of Skype interviews. Internship ends. Still no job offer in sight. Internship company promises to put in a good word for a couple big-names like Google and Facebook. Never hear back from them again…

2 months afterwards I finally start getting a rapid influx of response to my job applications. I had been preparing a little bit differently up to this point, working on Codility and learning React and a bit of Angular. I was doing coding challenges to keep abreast of my logic and problem solving skills. Finally, my 180th application I get a response from a company in Hamburg, Germany.   
 

Now, just as a quick background and a bit of a tangent, I’ve been speaking and learning German since I was in early elementary school and always kinda dreamed of moving to Germany when I was older. I didn’t really consider it as a possibility as a recent graduate until I realized that life was a little too short to not pursue goals early-on. So I started applying for jobs in both the USA and in Germany, hoping that it would widen my net.   
 

I actually remember talking to my parents and telling them that there was something about this job that felt right. Well my gut-feeling was spot on. I passed the remote coding challenge with 100%, passed the Skype pair-programming live technical coding interview, and passed 2 more interviews with HR and the founders of the company. Again, long story short, I got the job. So after a total of 193 applications sent out over the course of 6 months, I have finally landed my first full-time job and will be moving abroad in June 2020 to Germany.",1582696762.0,2020-02-26 00:59:22
901,What non-programming thing do you hate most about your job?,473,ag8quk,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ag8quk/what_nonprogramming_thing_do_you_hate_most_about/,427,"In my case, it’s not being able to get a bathroom stall. There’s so many men on the floor (it’s the IT department) and so few women, that the men’s room is overcommitted.
",1547589494.0,2019-01-15 16:58:14
902,Do you feel unqualified for your job when starting off?,475,hknzew,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hknzew/do_you_feel_unqualified_for_your_job_when/,67,"So I just I just got my first gig with a start up. I'm going to be making like 6 sprints for them in the coming months.
After I got the job, a sudden anxiety came to me that I might not be able to do the job. I've been programming for 4 years and I just finished  my DSA course, I'm a 2nd year computer engineering student.

I've been in a bit of  Unity Development and Web development in the past two years, but these were my own projects. But I somehow feel like I'm not qualified, or I'm gonna screw things up, or not meet deadlines. I'm just having this anxiety of how much I relied on YouTube videos and other tutorials. This job requires me to learn flutter and firebase, and more organised coding patterns.  They know I'm not experienced in those technologies but they still want me...

Have you ever been in a position like mine, what do I do?

EDIT: Thank you all for your encouraging words. I'm gonna go at it!",1593828757.0,2020-07-03 22:12:37
903,What are some CS jobs that use a lot of math?,480,dkl7go,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dkl7go/what_are_some_cs_jobs_that_use_a_lot_of_math/,132,"Another post about math in CS got me curious about this question. I’m in web dev right now, and there is no math in my day to day whatsoever. Even my side dabbling in machine learning doesn’t really require much since all the algorithms are already written if you’re using a lib like Tensorflow, although I’m sure ML gets more mathy when you get more advanced with it. What jobs in CS get into heavy calculus/linear algebra/etc on the reg?",1571614653.0,2019-10-20 19:37:33
904,My Google Tech Interviewing Decoded Experience,476,4evk44,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/4evk44/my_google_tech_interviewing_decoded_experience/,104,"## Introduction

Last Friday (2016-04-07), I was invited to Google's new Sunnyvale campus for a new Google campus outreach program currently titled Tech Interviewing Decoded. Over the course of approximately five hours, Google hosted a number of talks, panels, and demos to ""demystify the [Google] interview process and give you the opportunity to have your questions answered about launching your career in tech"". Approximately 100-150 computer science/engineering students from four invited Bay Area universities attended the program. I suspect that many readers here would have liked the opportunity to attend such an event so I've written up a quick summary of the day. I suspect that nothing here will be new to some readers on this sub but hopefully it helps some people!

## Mock Interview 'Demo' with Googlers

In my favorite segment, two Google interviewers demonstrated what the technical portion of a Google interview looks like along with tips on what interviewers are looking for. Both the interviewer and interviewee were named Jonathan so I'll refer to them as the interviewer and interviewee. I think it will be more useful if I describe some notable points rather than regurgitating the interviewer's code so the code/solution is left as an exercise to the reader (hah). 

Problem: Write a program that returns the length of the longest chain of consecutive numbers in a grid of natural numbers.

The interviewee began by asking clarifying questions about the problem. An interviewer may give you an intentionally ambiguous or vague problem to assess your attention to detail. Some questions asked in this demo included:

* Q: Can we assume that the grid is square (NxN rather than NxM)? A: Yes, let's say it's square for now.
* Q: Do we have to worry about the grid being so large that it can't fit in memory or anything like that? A: No, let's assume the grid is reasonably sized and will be given as a 2-D array (e.g. int Grid[n][n])
* Q: Do we have to consider diagonal elements? A: Nope. An element is adjacent to another element if it is positioned immediately to its left/right xor top/bottom.

The interviewee then solved an example by hand on the whiteboard to ensure that he was on the same page as the interviewer. Working out a problem by hand is also a good way to gain some intuition on how to design an algorithm for the given problem.

    [0, 1, 4]
    [2, 3, 5]
    [8, 7, 6]
    Longest chain is [4, 5, 6, 7, 8] with length 5.
    
    [0, 2]
    [3, 1]
    Longest chain is [1, 2] with length 2.


It was only after asking questions and solving an example by hand that the interviewee began to actually write code. He began by writing a suboptimal but straightforward brute force solution: iterate through every element in the matrix and see what the longest chain of increasing, consecutive neighbors you can form from each starting point. Keep track of the maximum length encountered and return it after checking all starting points. While writing his solution, the interviewer called a function for finding the longest chain given a starting cell rather than writing the entire solution in one block. Writing modular code in an interview is not only neater but also opens the door to the possibility that the interviewer lets you skip fully implementing some functions. In this case, the interviewer only asked the interviewee to describe how he would implement his getLongestPath function. 

The interviewee then noted that this solution is inefficient and repeats work. Iterating through the grid takes O(n^2) time and finding the longest path takes O(n) so his solution is O(n^3). If I'm not wrong, there seemed to be some inconsistency on whether n referred to the dimension of the matrix (e.g. n = 3 for a 3x3 matrix) or the total number of elements in the matrix (e.g. n = 9 for a 3x3 matrix). He then came up with an O(n) by creating a custom data structure that maps the value of a cell to its index in the matrix.


    [0, 1, 4]
    [2, 3, 5]
    [8, 7, 6]
    -> {0: (0, 0), 1: (0, 1), 2: (1, 0), 3: (1, 1), 4: (0, 2), 5: (1, 2), 6: (2, 2), 7: (2, 1), 8: (2, 0)
    
    [0, 2]
    [3, 1]
    -> {0: (0, 0), 1: (1, 1), 2: (0, 1), 3: (1, 0)}

Then he ran through his new data structure sequentially and checked if the current index is adjacent (e.g. x1 == x2 and y1 == y2+-1 and vice versa) to the next index. Since you only need to iterate through the grid once to fill in your data structure and iterate through the data structure once to find the longest chain, the new solution ran in O(n) time (where n is the total number of elements in the matrix). 

I don't have the interviewees exact Java solution but I whipped up a quick Python implementation of his algorithm (removed so I don't dox myself) as I understood it.

Tip: if you see the opportunity to write a class or use some design pattern, you might as well take it to demonstrate your knowledge of the OOP paradigm. 

It's important to note that throughout the entire interview, the interviewee and interviewee were talking to each other almost continuously. Instead of standing silently while thinking to himself, the interviewee thought out loud so the interviewer could follow his thought process. The interviewee also described what he was attempting to do while writing each line of code. Communicating your thoughts in an interview has the added benefit of allowing your interviewer to give you feedback and hints if you're going in the wrong direction. Multiple Googlers emphasized that your interviewer will want to see you ace your interview and solve the problem so if they give you a hint, take it. They aren't trying to trick or mislead you. Remember that interviewers are also assessing if they would like to work with you and ignoring their hints could make you seem like a stubborn developer who has to do things his or her way.

Tip: identify possible errors or bugs as you work. For example, while writing code to get a cell's neighbors, the interviewee noted that there may be an off by one error when the cell is on the edge of the matrix and said he'd go back to fix it after getting the general algorithm down. This prevents the interviewer from asking you 'gotcha' type questions when you finish. It can also be useful for the interviewer to know that you recognize a problem area so he or she doesn't focus on an error he or she thinks you missed.

## Follow up Demo Q&A with Googlers

Following the interview, the two demonstrators answered questions and gave more tips on how to have a successful interview.

* Q: Will your interviewer run your code? A: Maybe. Some people take notes and run your code later while some don't. If you see your interviewer typing during your interview, it is highly unlikely that he or she is transcribing your code into an IDE however. They're most likely just taking notes.
* Q: How important is syntax? A: You want to show that you know the programming language you're using but it's not like missing a semi-colon is going to ruin your chances.
* Q: What language do you have to code in? A: Your recruiter should talk to you about what language you would like to code in beforehand and you'll be matched with an interviewer who is familiar with that language. We don't recommend trying to do an interview in some obscure language. You're definitely safe if you code in C++, Java, or Python.
* Q: Is it always a good idea to work on the obvious brute-force approach before giving a better or optimal solution? A: Not really. It's impressive if you can briefly describe the obvious solution and its time complexity before going right into a better solution. In this context, the interview from the demo wasn't actually the strongest interview a candidate could have given.
* Q: What if you get a problem that you have no idea how to approach? A: Try to stay calm. Panicking is going to hurt you even more. It's especially important to ask questions, do an example or two, and communicate your thought process to your interviewer.
* Q: I failed an interview in the past. Why didn't I get any feedback on what I did wrong? A: Legal reasons. If you're interviewing again, try to show noticeable improvement. It looks really bad if you fail to solve a problem that you failed to solve in a previous attempt.

## Googler Panel

Following the mock interview, four Googlers took the stage and opened the floor to questions.

* Q: What are some tips that you have for current students? A: Show your passion for CS by participating in organizations and events outside of classes. Work on your own projects or contribute to open source. Study hard and practice for interviews. Try to get as many internships and experience under your belt as possible.
* Q: What are some tips for people trying to get a job at Google? A: Persevere - I waited 5 years before I first applied to Google and when they finally hired me. Make your life easier by letting your know interviewer know if you're having any problems that they could accommodate. Practice interviewing on a whiteboard and do as many interviews as you can; the general tech interview form is pretty similar across companies so there's a lot of skill transfer.
* Q: How is the work-life balance at Google? Do you ever feel burned out? A: Google is so large that the atmosphere/pressure varies from team to team. All the panelists agreed that they had good work-life balance and a lot of stress they feel is self-induced.
* Q: I'm interested in CS education. Are there opportunities for this at Google? A: Again, Google is large. A better question would be what field isn't Google interested in? To your specific example, I know that Google often sends people to teach at historically black colleges and universities. 

## Spotlight Talks

Two Googlers gave slightly longer talks specifically about what they do at Google. The first speech was by someone who entered Google through the Engineering Residency program. The Engineering Residency program is a yearlong training where residents are attached to 2 different teams for training and hands on experience. Apparently it has a ~90% conversion rate and many residents like their first team enough that they choose to stick with it and convert to a full time role. This was the case for our first speaker and she ended up on the Chrome for Android UI team where she worked on implementing features such as the close all tabs button for Android on tablets. She is currently working on features such as split screen support on the upcoming Google N. 

The second speech was largely about the importance of data health, the process of building systems to monitor Google's data systems, and how Google deals with system failures. Rather than naively recording all system logs and informing everybody about the failure, Google has systems in place to identify the root cause of problems and only notifies teams that will be negatively impacted. He also talked about some of the techniques (e.g. power capping) that Google uses to reduce costs in their data centers. 

## Ask a Recruiter! Q&A

The final panel consisted of four recruiters who took questions about the whole recruitment process.

* Q: How long do you spend on each resume? A: Resumes are actually sent to a dedicated resume screening team in Houston who take 10-15 minutes per resume. If your resume makes it past that stage, it gets into our (a recruiter) hands. Since there is such a high volume of applicants, it isn't feasible for recruiters to spend too much time on every resume.
* Q: If I'm rejected, how long should I wait before reapplying? A: Officially it's a year but it doesn't have to be exactly one year to the date.
* Q: How important is it to include links to your portfolio/GitHub on your resume? A: It's definitely helpful. Many interviewers will take the time to look at a candidate's GitHub before interviews.
* Q: What are some resumes do's and don'ts? A: Definitely include your GPA. Unless you have industry experience, keep it to a single page. Be truthful about your knowledge or experience.
* Q: What is the minimum GPA needed to be competitive at Google? A: Google takes a holistic look at each candidate.
* Q: When is the best time to apply for an internship? A: As early as possible after the application opens. It's tempting to wait to give yourself more time to improve your resume but recruiters will have more time to spend on each applicant early in the application period and there are finite number of spots that get filled up over time.
* Q: I dropped out of a PhD program. Does this reflect badly on me or hurt my chances? A: Google is filled with people from non-traditional paths. I wouldn't worry about that at all.

## Closing

In addition to the scheduled talks, a few lucky people were selected for their own practice interviews. Sadly, I wasn't one of those ~20 people. Of course, no Silicon Valley event would be complete some company swag. All attendees received a bag full of Google swag that included a subtly branded Google notebook, plastic sunglasses, socks, and a 2200mAh external battery pack. Some lucky winners also won a free copy of Cracking the Coding Interview.

I thought the event was very well run. All the speakers and panels were good about keeping to the schedule and there was no dead or wasted time. One issue was that other Googlers kept accidentally connecting to the projector in our room. I suspect they have some sort of campus wide conference call/meeting network setup but it was pretty funny to see the projector switch from the presentation slides to some random person every now and then though. Thanks again for hosting this event, Google!

Let me know if you have any questions!

This should be obvious but I'm not associated with Google in any way. The opinions and views expressed are solely my own and do not reflect the view of Google. 

Edit: Clarified some details in mock interview section",1460732220.0,2016-04-15 10:57:00
905,What's up with the infantilization of developers?,471,6u2abl,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6u2abl/whats_up_with_the_infantilization_of_developers/,218,"Currently a cs student but worked briefly at a tech company before starting uni. While most departments of the company were pretty much like I imagined office life was like, the developers were distinctly different. Bean bags, toys, legos, playing foosball. This coincides with the nerf gun wars and other tropes I hear about online.


This really bothers me. In a way it felt like the developers were segregated (I was in marketing myself). It also feels like giving adults toys and calling them ninjas is just something to distract them from the fact that they're underpaid. How widespread is this infantilization? Will I have to deal with interviewers using bean bags to leverage lower pay? Or is it just an impression that I have that's not necessarily true?

",1502921531.0,2017-08-16 18:12:11
906,"""How I Got Started With Programming Side Projects"" - my experience and some advice to new/current CS students",475,4zooyv,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/4zooyv/how_i_got_started_with_programming_side_projects/,54,"# **[Article](http://antrikshy.com/blog/how-i-got-started-with-programming-side-projects)**

I just published this blog post, written partially in response to many discussions I have seen on this sub about how ""CS courses are not teaching me anything"" and ""should I focus on GPA or work on side projects"".

I have outlined some of my personal experience, and added in some advice to newcomers based on my observations of my peers and their personal projects.",1472248254.0,2016-08-26 17:50:54
907,"Getting on-boarded from home isn't fun, stuck down a rabbit hole trying to get up to speed",468,gk5f3z,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gk5f3z/getting_onboarded_from_home_isnt_fun_stuck_down_a/,90,"So I started my new job this Monday (very grateful and lucky to land a new gig in the middle of a pandemic when everyone is losing their jobs). Ironically, between me signing the offer and my start date, the manager who hired me left the company for a ""undeniable opportunity"". Hence our team does not have a manager atm. New manager starts this coming Monday.

My on-boarding buddy (my point of contact for anything I need) is an iOS dev. So many things I ask him he says he has no idea. I'm an Android Engineer on their Android app, and this is probably the most complex app I've worked on. They use almost every new framework and things I was planning on learning in 2020 are now a requirement all of a sudden. I’ve been trying to learn as much as I can everyday with all resources that are available to me. 

Its hard to get on-boarded from home. I've been reading their documentation and that's not too clear to me. I want to be a positively contributing team player and want to get up to speed as fast as possible but without ever having met my coworkers in person, I am finding it very hard to ask for help - especially when I think it should be straightforward. On top of this the terminology they use to describe parts of the app does not help as it is confusing and counter intuitive to me since I'm looking at the app with fresh eyes.

I'm going down a rabbit hole trying to understand how everything works, been putting in way more hours than needed so I can be up to speed before the new manager thinks I should be sharing just as much responsibility as the other team members. Any advice on how to approach this situation? How should I try to minimize the amount of pressure atm and escalate the pace of my learning? Thanks so much!

Edit: THANK YOU so much everyone for your advice! I definitely see this as a great learning opportunity and am being proactive in all ways I can while being productive with the tasks I take on, I figure I’ll learn things along the way that’ll help me put together everything over time!",1589560877.0,2020-05-15 12:41:17
908,How long did it take for you to get good at doing Leetcode medium?,470,d4wuft,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d4wuft/how_long_did_it_take_for_you_to_get_good_at_doing/,127,"Been on  the leetcode grind for two months now I and have been consistently doing problems. I have gotten to the point where I can typically solve leetcode easy with the optimal solution, but I still struggle coming up with solutions for medium problems the majority of the time.  Just wanted to know long or how many problems it took for you guys to  be able to consistently solve leetcode mediums.",1568644284.0,2019-09-16 10:31:24
909,Why do companies reach out asking for students/job seekers to attend a virtual session of some kind? Are they establishing a connection to try to recruit you or are they just trying to pump up the number of people attending the virtual sessions?,468,iutdhs,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/iutdhs/why_do_companies_reach_out_asking_for_studentsjob/,59,"I've always been confused by this and wanted others perspectives. I've seen this happen a lot for me and people going for computer science roles.

For example, say a notable company reached out to you inviting you to a virtual session to watch their C-suite members talk about leadership and how the company is making changes to positively make an impact in their environment. 

That's fine and very amazing that the organization is making changes like that. But how does attending that session benefit me? Nowhere in the message did it say anything about recruiting for a position or anything that would interest me as a job seeker. 

Plus, what are the chances that after you attend the virtual event, they just drop you like a bad habit? They really weren't interested or impressed with your background and experience, they just needed virtual bodies to boost attendance numbers. So why did I waste my obliging them?

Maybe you guys will have a more in depth understanding of why companies do this and how it's beneficial for job seekers to attend.",1600408657.0,2020-09-18 01:57:37
910,Just got fired due to covid 19. Why do I find list of tech companies that are still hiring?,468,gnbasa,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gnbasa/just_got_fired_due_to_covid_19_why_do_i_find_list/,146,"I live in India. I have 10 month experience as SDE-1 and I received letter of termination recently. I am going to start preparing for interviews (beginning with leetcode). Where do I start looking for new opportunities? Where do I find list of companies that are still hiring? How optimistic I should be about getting new opportunity in recent time? How long do I expect to sit unemployed? 
Thanks in advance!!",1590009977.0,2020-05-20 17:26:17
911,"Countless sources say CS jobs available outweigh CS grads in numbers, yet many people struggle to find jobs",468,9ee3uo,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9ee3uo/countless_sources_say_cs_jobs_available_outweigh/,551,"Now, and even when I was considering computer science as my university major, the common knowledge was ""if you have a CS degree, a job is handed to you on a silver platter.""

I am a recent graduate and I can tell you this is not the case. There are many CS grads applying to the same entry level positions and there are a large amount who struggle for months/years to find a CS relevant job.

What is the disconnect here? What can explain this?

There seems to be a lot more applicants than there is jobs in the entry level market. Naturally, there will be a select number of 2018 grads who do not have computer science related jobs by June 2019 when the next wave of new grads come along. I don't know if these people will ever make it. Scary stuff.",1536538110.0,2018-09-09 20:08:30
912,What proactive steps do you take to manage the unrealistic expectations of non-technical managers?,469,jfy10m,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jfy10m/what_proactive_steps_do_you_take_to_manage_the/,73,"Working as a techie under a non-technical management hierarchy has been somewhat straining of late. I work in the data science field, and there is unfortunately a lot of hype out there, which, in my experience, has fueled unrealistic management expectations.

In my experience, these unrealistic expectations come in two forms. First, is an overestimation of what is achievable with the current methods available, the in-house skill sets available, and resources provided. Second, is an underestimation of the resources and time required to derive new methods that deliver satisfactory results.

I should add that based upon my observations; it is the managers with a little bit of technical knowledge that are the most dangerous. I’ve witnessed these managers preside over the toxic union of ego and Dunning–Kruger bias, which has doomed multiple projects from the start.

I came across this wonderful comic, [https://xkcd.com/1425/](https://xkcd.com/1425/), by way of anther post on Reddit, (which I cannot now unfortunately find and appropriately credit), some time ago that perfectly captures my frustration. Given that xkcd took the time to make the comic, I can only assume that this frustration is somewhat common and relatable to others here.

I have studied various upmanaging techniques in an attempt to rectify these situations. But one criticism I have for the general and cliché advice relating to upmanaging is that all too often this advice assumes that such managers are i) rational actors and ii) acting in the companies best interest. Though this has, in my experience, not always been the case. I've witnessed colleagues fiercely rise to engage with death march projects, only to be thrown under the bus because their project was doomed from the start. How therefore does one protect themselves, their career and reputation from such events?

So my questions are:

1. What techniques, or methodology, do you employ, as a someone in the CS profession, to set realistic expectations with management?
2. How therefore does one protect themselves, their career and reputation?
3. This effect is likely everywhere to more or less a degree, but I think it can safely be assumed that some places are better than others, so what criteria have you employed to decide when its time to call it quits and move on?

&#x200B;",1603395797.0,2020-10-22 15:43:17
913,How to deal with incompetent coworker?,467,hdmmma,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hdmmma/how_to_deal_with_incompetent_coworker/,145,"I'm having 2 years experience. I've taken the ownership of a project. A senior person (5 years experience) is assigned to work with me. 

But he is unable to work on the project. He stated me that I'll have to help him to do his part, he is completely newbie at writing code, I've already told him various logics to apply but he couldn't. 

When I'll help him, I think it will be better if I complete it on my own.

While in group chats, he pretends as if he is helping me and working with me. On the contrary, he's been working on a feature for the last week and couldn't lead to any output. Today he called me and said if I completed my part then I do his part also, that I only asked him to do.

My manager (his also) thinks that he is helping me in this work and I'm completing many of the features working even during non-working hours and I think the work credit will be equally being divided between us while he is doing nothing.

How to handle this situation? I'm completely new to this. Please help.

Thanks.

Edit 1: This is tough time for all of us. So, I don't want to do anything which could insecure anyone's job in any manner at the same time ensure dealing this situation with grace.

Edit 2: Dear all, I hearty thank you all for all of your suggestions, views in this matter. There are so many helpful suggestions. I'm reading and trying to digest your perspective of the solution of this problem. Will put further points in your reply, if needed. Will try to thank all of you in the comments itself. Thanks again for your time and sharing your thoughts in this matter. It's really helpful to me.",1592834971.0,2020-06-22 10:09:31
914,"From your first dev job till now, how has your salary progressed?",463,gnmga6,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gnmga6/from_your_first_dev_job_till_now_how_has_your/,935,"
I would like you lot to share your salary progression from your first ever dev job till now and also your City + Country, indicate where you switched jobs or asked for a raise. Cheers.",1590049196.0,2020-05-21 04:19:56
915,Colorado CS companies (aggregate list w/ links),469,cmg6hu,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cmg6hu/colorado_cs_companies_aggregate_list_w_links/,152,"I've been browsing this sub for a little bit now and while its got a lot of valuable information, when it comes to job/internship repos and all that there is very little Colorado love.  I wanted to give a little resource for people who may be looking in Colorado. This is a list of companies which I've collected and quickly attached the links.

Update: I've tried organizing them into categories but a lot of companies don't have a straightforward category but the company category has been loosely organized to have larger employers at the top. Hope this continues to help and comment any suggestions! thanks

&#x200B;

**Resource pages:**

[https://denverdevs.org/](https://denverdevs.org/)

[https://www.builtincolorado.com/jobs](https://www.builtincolorado.com/jobs)

&#x200B;

&#x200B;

**FANG-ish:**

Google

[https://careers.google.com/jobs/results/?company=Google&company=YouTube&hl=en&jlo=en-US&location=Boulder,%20CO,%20USA&location=Thornton,%20CO,%20USA](https://careers.google.com/jobs/results/?company=Google&company=YouTube&hl=en&jlo=en-US&location=Boulder,%20CO,%20USA&location=Thornton,%20CO,%20USA)

Facebook

[https://www.facebook.com/careers/jobs?locations\[0\]=Denver%2C%20CO](https://www.facebook.com/careers/jobs?locations[0]=Denver%2C%20CO)

Amazon

[https://www.amazon.jobs/en/search?offset=0&result\_limit=10&sort=relevant&category=software-development&distanceType=Mi&radius=24km&latitude=&longitude=&loc\_group\_id=&loc\_query=Colorado%2C%20United%20States&base\_query=&city=&country=USA&region=Colorado&county=&query\_options=&](https://www.amazon.jobs/en/search?offset=0&result_limit=10&sort=relevant&category=software-development&distanceType=Mi&radius=24km&latitude=&longitude=&loc_group_id=&loc_query=Colorado%2C%20United%20States&base_query=&city=&country=USA&region=Colorado&county=&query_options=&)

Twitter

[https://careers.twitter.com/content/careers-twitter/en/jobs-search.html?q=&team=&location=careers-twitter%3Alocation%2Fboulder-co](https://careers.twitter.com/content/careers-twitter/en/jobs-search.html?q=&team=&location=careers-twitter%3Alocation%2Fboulder-co)

Uber

[https://www.uber.com/us/en/careers/](https://www.uber.com/us/en/careers/)

&#x200B;

&#x200B;

**Defense/Aero:**

Raytheon

[https://jobs.raytheon.com](https://jobs.raytheon.com)

Boeing

[https://jobs.boeing.com](https://jobs.boeing.com)

Lockheed Martin

[https://www.lockheedmartinjobs.com](https://www.lockheedmartinjobs.com)

United Launch Alliance

[https://www.ulalaunch.com/careers](https://www.ulalaunch.com/careers)

Northrop Grumman

[https://www.northropgrumman.com/Careers/Job-Search/Pages/USA.aspx](https://www.northropgrumman.com/Careers/Job-Search/Pages/USA.aspx)

Ball Aerospace

[https://www.ball.com/aerospace/about-ball-aerospace/careers](https://www.ball.com/aerospace/about-ball-aerospace/careers)

Boom

[https://jobs.lever.co/boom](https://jobs.lever.co/boom)

CACI

[https://careers.caci.com/ListJobs?FullStateName=Colorado](https://careers.caci.com/ListJobs?FullStateName=Colorado)

&#x200B;

&#x200B;

**Hardware/robotics companies:**

Western Digital

[https://jobs.westerndigital.com](https://jobs.westerndigital.com)

Qualcomm

[https://www.qualcomm.com/company/careers](https://www.qualcomm.com/company/careers)

HP

[https://www8.hp.com/us/en/jobs/index.html](https://www8.hp.com/us/en/jobs/index.html)

Intel

[https://jobs.intel.com](https://jobs.intel.com)

Seagate

[https://www.seagate.com/jobs/](https://www.seagate.com/jobs/)

System76

[https://system76.com/careers](https://system76.com/careers)

Arrow Electronics

[https://arrow.wd1.myworkdayjobs.com/AC/0/refreshFacet/318c8bb6f553100021d223d9780d30be](https://arrow.wd1.myworkdayjobs.com/AC/0/refreshFacet/318c8bb6f553100021d223d9780d30be)

Canvas Technology

[https://www.amazon.jobs/en/search?base\_query=canvastechnology](https://www.amazon.jobs/en/search?base_query=canvastechnology)

&#x200B;

&#x200B;

**Cybersecurity:**

Optiv

[https://careers.smartrecruiters.com/Optiv](https://careers.smartrecruiters.com/Optiv)

Carbon Black

[https://carbonblack.wd1.myworkdayjobs.com/Life\_at\_Cb/2/refreshFacet/318c8bb6f553100021d223d9780d30be](https://carbonblack.wd1.myworkdayjobs.com/Life_at_Cb/2/refreshFacet/318c8bb6f553100021d223d9780d30be)

DarkOwl

[https://www.darkowl.com/careers](https://www.darkowl.com/careers)

&#x200B;

&#x200B;

**Network/Communications/Cloud**

Zayo

[https://www.zayo.com/careers/job-opportunities/](https://www.zayo.com/careers/job-opportunities/)

Comcast

[https://jobs.comcast.com](https://jobs.comcast.com)

Spectrum

[https://jobs.spectrum.com](https://jobs.spectrum.com)

CenturyLink / Level 3

[https://careeropportunities.centurylink.com/jobs/?location=Colorado#4](https://careeropportunities.centurylink.com/jobs/?location=Colorado#4)

Verizon

[https://www.verizon.com/about/careers/technology](https://www.verizon.com/about/careers/technology)

Twilio / SendGrid

[https://sendgrid.com/careers/](https://sendgrid.com/careers/)

Oracle

[https://www.oracle.com/corporate/careers/](https://www.oracle.com/corporate/careers/)

Viasat

[https://careers.viasat.com/careers/LocationDenver](https://careers.viasat.com/careers/LocationDenver)

NetApp

[https://www.netapp.com/us/careers/index.aspx](https://www.netapp.com/us/careers/index.aspx)

JumpCloud

[https://jumpcloud.com/careers/](https://jumpcloud.com/careers/)

VMWare

[https://careers.vmware.com](https://careers.vmware.com)

Slack

[https://slack.com/careers](https://slack.com/careers)

&#x200B;

&#x200B;

**Saas / Other Companies:**

Workday

[https://www.workday.com/en-us/company/careers.html](https://www.workday.com/en-us/company/careers.html)

Ibotta

[https://home.ibotta.com/careers/](https://home.ibotta.com/careers/)

DigitalGlobe

[https://www.digitalglobe.com/company/careers](https://www.digitalglobe.com/company/careers)

HomeAdvisor / Angie’s List

[https://www.abouthomeadvisor.com/careers/](https://www.abouthomeadvisor.com/careers/)

Returnpath

[https://www.validity.com/careers/](https://www.validity.com/careers/)

Strava

[https://www.strava.com/careers](https://www.strava.com/careers)

Bitly

[https://bitly.com/pages/careers](https://bitly.com/pages/careers)

Checkr

[https://checkr.com/careers/](https://checkr.com/careers/)

AirDNA

[https://www.airdna.co/careers](https://www.airdna.co/careers)

MLB

[http://www.mlb.com/careers/mlbam/](http://www.mlb.com/careers/mlbam/)

Gusto

[https://gusto.com/about/careers](https://gusto.com/about/careers)

IBM

[https://www.ibm.com/employment/](https://www.ibm.com/employment/)

Occipital

[https://occipital.com/jobs](https://occipital.com/jobs)

SpotX

[https://www.spotx.tv/careers/](https://www.spotx.tv/careers/)

AppNexus

[https://www.appnexus.com/careers](https://www.appnexus.com/careers)

IHS MarkIt

[https://careers.ihsmarkit.com/careers.php](https://careers.ihsmarkit.com/careers.php)

Broadcom / CA Technologies

[https://broadcom.wd1.myworkdayjobs.com/External\_Career/4/refreshFacet/318c8bb6f553100021d223d9780d30be](https://broadcom.wd1.myworkdayjobs.com/External_Career/4/refreshFacet/318c8bb6f553100021d223d9780d30be)

Xcalar

[https://jobs.lever.co/xcalar.com](https://jobs.lever.co/xcalar.com)

Evolve Vacation Rental

[https://careers.evolvevacationrental.com](https://careers.evolvevacationrental.com)

SoundHound

[https://www.soundhound.com/careers](https://www.soundhound.com/careers)

Fanatics

[https://jobs.lever.co/fanatics?](https://jobs.lever.co/fanatics?)

Worldpay

[https://recruiting.adp.com/srccar/public/RTI.home?d=ExternalSSCS&c=1040145](https://recruiting.adp.com/srccar/public/RTI.home?d=ExternalSSCS&c=1040145)

Progressive

[https://progressive.taleo.net/careersection/2/jobsearch.ftl?lang=en#](https://progressive.taleo.net/careersection/2/jobsearch.ftl?lang=en#)

talentReef

[https://apply.jobappnetwork.com/talentreef](https://apply.jobappnetwork.com/talentreef)

Vrbo

[https://www.homeaway.com/careers](https://www.homeaway.com/careers)

Tendril

[http://jobs.jobvite.com/careers/tendril/jobs?\_\_jvst=Tendril+Website](http://jobs.jobvite.com/careers/tendril/jobs?__jvst=Tendril+Website)

Alteryx

[https://www.alteryx.com/careers](https://www.alteryx.com/careers)

Quizlet

[https://jobs.lever.co/quizlet-2?lever-via=e-O\_re9Kiq&location=Denver%2C%20CO](https://jobs.lever.co/quizlet-2?lever-via=e-O_re9Kiq&location=Denver%2C%20CO)

Pivotal

[https://pivotal.io/careers](https://pivotal.io/careers)

Trimble

[https://careers.trimble.com/jobs/category/engineering#/](https://careers.trimble.com/jobs/category/engineering#/)

PaySimple

[https://paysimple.com/career-opportunities/openings](https://paysimple.com/career-opportunities/openings)

EverCommerce

[https://evercommerce.bamboohr.com/jobs/](https://evercommerce.bamboohr.com/jobs/)",1565064389.0,2019-08-06 00:06:29
916,Dad recently died. Lost all motivation. Performing poorly at work. What do?,474,99dkdy,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/99dkdy/dad_recently_died_lost_all_motivation_performing/,119,"This post will probably serve as nothing more than validation for myself. Sorry.

I'm 25 years old. I graduated a year and a half ago with a degree in CS from a good school. I've been working at a big company for nearly a year. Despite never really caring about my team's product, I was enthusiastic and eager to learn. I get paid really well and my team members are awesome people, so I was grateful to be in such a comfortable position. I did decent work for a while.

My dad was diagnosed with terminal brain cancer last October. He passed away a few weeks ago. When shit started to get real and it was evident that he was going to die, it became harder and harder to concentrate and care about work. I think this is pretty reasonable. My team members and my manager have been great throughout the entire journey. I have taken a bunch of time off here and there to help my mom with the ordeal. I have no regrets whatsoever.

However, I am now struggling to recover from the loss at work. For the past three weeks, I have been coming into the office at 8 and staring at my screen for a few hours until standup. After that, I stare at my screen for a few more hours and then I go home. Every once in a while, a nugget of productivity shines through and I manage to get a little bit done. I usually get sick of browsing shit documentation after about an hour, and then I start thinking about how I couldn't possibly care any less about the work I'm supposed to be doing.

Once again, my team and my manager are angels. No one has called me out on this. To be honest, I kind of wish they would. Watching someone die made me realize that I would not be happy with yesterday if I died tomorrow.​

I don't know if this is because the work I'm doing is bullshit, or if it's because I'm not very good at doing the work itself. I have always felt like I am not as in-tune with the programmer lifestyle and outlook as my peers, but I worked really hard in university to be knowledgable. I know I shouldn't quit my job, but I can't see myself being productive for a while.

I have no idea why I'm writing this. I don't know what the goal is. I guess I just want to hear from people who have been in the same situation.",1534975137.0,2018-08-22 17:58:57
917,Stop playing with us Twitter,470,7l54er,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/7l54er/stop_playing_with_us_twitter/,173,"Twitter said 55,000 people applied to their internship position. They literally gave a hackerrank challenge to almost every other person I know who applied. And I haven't heard even a single person hearing back after taking the test (I know some really smart friends who are either ICPC gold medalists or ex-Big4 who had taken the tests too and still haven't heard back or got an auto rejection email, this is just for letting you all know that the challenge literally isn't even evaluated). I know 2 other friends in my network who got interviews straight up without even applying or doing the hackerrank challenge. This is really crazy and ducked up! Unethical and unfair. If they don't even want to evaluate the challenge, why send it en-masse? It wastes all our precious time and creates anticipation of a hope of hearing back. This has been happening every year after year and this has to stop! What do you guys think about that? How many applicants do you think are qualified enough to get an interview and on what basis are they even considered for next steps? Has anybody had a similar experience or got an opportunity to interview? Quite honestly, at this point, if I had a rifle with 2 bullets and there was a blue bird, hitler and trump in the same room; I'd shoot the blue bird twice and whack it with the empty rifle. 

EDIT: Looks like many here, including me have gotten twitter'd! RIP y'all! ",1513839057.0,2017-12-21 01:50:57
918,Thoughts during my journey from average state school → top unicorn,468,7cjeda,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/7cjeda/thoughts_during_my_journey_from_average_state/,139,"I’ve spent a lot of time in this subreddit, for better or worse, and I wanted to address a few common topics that I have seen over my time here. I started reading this subreddit at the beginning of freshman year, and have continued to read it since then. As I look back, I realize I have been guilty of obsessing over these topics, and I wanted to communicate the things that I have learned and the ways that I would have changed my approach and mindset. I don’t really have a way to prove that I am credible in any way, but I will say that I will be interning at a top unicorn coming from an average state school, and these are the things I learned during my journey.

*****

**School tier** – Your school matters and will affect, but not determine, your future. Yes, the kids from Stanford have their pick of interviews, and the kids from your local state university will not. But no, going to Stanford does not guarantee that you pass your interviews, and going to a state university will not automatically fail you. Without attempting to oversimplify a complex socioeconomic topic – the students at better schools tend to be, on average, smarter and more successful for various reasons, and for this reason, companies will recruit at these places at a much higher rate. Although the average student at these schools is almost definitely stronger than the average student elsewhere, strong students exist at every institution, and it is solely on you to build up your skills and knowledge inside or outside of the classroom.

**Side projects** – Side projects will (probably) not significantly affect your internship/job search. Most recruiters are non-technical and will have no idea what your projects do, how difficult they were to create, or why you made them. The only exception is for standout projects with a good number of actual users, or a highly-starred/-forked project on GitHub, which convey, in a non-technical manner, the usefulness and impact of your project. Usually, side projects come up during or after technical interviews, at which point the company is likely to have already made up its mind on you. Now, this is not to say that you should not do side projects – many recruiters are probably told to look for this section on your resume, and you definitely gain useful skills in doing so. My point here is that, with few exceptions, the exact content or focus of your project is irrelevant to recruiters, so do not worry about the “top side projects for getting interviews,” just worry about doing interesting work that you can learn from.

**Personal websites** – After going through sophomore and junior year interviews, I can safely say that almost no one will ever visit your website. I got at most ~10 views a month during peak recruiting season – most of which were probably just students snooping on me from LinkedIn. Again, this is not to say that they are useless, but they are definitely not something worth spending a lot of time on. There is however, a sort of quaint pleasantness to owning and tidying up your tiny portion of the internet, even if no one sees it. The exception to this is for designers and front-end people, who probably do need to maintain a nice online portfolio. 

**Getting interviews** – For a reasonably intelligent person who is willing to put in the time for interview prep, the hardest part of the recruiting process may very well be *getting* (not *passing*) interviews. So please, ignore the people here who claim that the Big 4 “interview anything with a pulse”—they probably come from target schools. Sadly, the best way to get interviews is to either come from a top school, get referred, or have experience at a similar top company. Given that the second is largely a consequence of the first, the easiest route is to just gain experience. Start interning early, and work your way to better and better companies. Sure, you probably won’t get Google your freshman Summer, but after one or two internships at easier companies, you will probably have a good-enough resume to get interviews there. Starting to intern early on, even at no-name places, is a huge advantage, especially for those not in target schools.

**Leetcode and interview prep** – If you want to work a top tech company, you will need to do interview prep. This should be a mix of CTCI, EPI, and Leetcode. If you do not want to work at a top tech company, then you probably do not need to prep for data structures/algorithms questions. Do not complain about the interview prep for top companies. You signed up for this, and this is the work you need to put in to reap the benefits. Conversely, do not brag about getting a job without technical interviews. Again, you chose this. In general, the type of companies one chooses to interview with and the subsequently necessary interview prep are entirely up to the individual, and you have neither a person to blame nor inherent superiority for picking one over the other.

**Interview results and waiting** – I personally struggle a lot with the wait *after* the interview, and I tend to become an anxious mess while I wait. I won’t give the generic feel-good advice here because I know it does not help. I will however say that, in my experience, some positive signs include: interviewers mentioning next steps, interviewers asking about team preference, interviewers asking follow-up questions, and recruiters *scheduling* a call with a vague message about “chatting”.

**Prestige tiers and humblebragging** – I will preface this point saying I am measuring prestige as it relates to pay. With this definition, there are certainly company tiers, as pay varies throughout the industry. The top includes top finance companies (QHFs, HFTs, Prop trading), top unicorns/startups (e.g. Uber, Airbnb, Lyft), and our lovely Big 4. The middle includes generic F500 companies and BB banks, and some middling tech companies. The bottom includes everything else. As a general rule – given an offer from companies in different tiers, if one wishes to maximize earnings, pick the one in the higher tier. For decisions between companies in the same tier, where the pay is negligibly different, pick based on other factors such as location, culture, and product focus. My point here is that the “Airbnb vs. Lyft vs. Pinterest” posts are quite useless and serve as humblebrag posts; between such similar companies in compensation, the difference between them lies entirely in your *personal preferences*.

**Jealousy** – Unless you happen to be the most successful person in your area (perhaps it’s time to move, if this is the case), you will likely know (or know of) people who are more successful than you are. I used to struggle a lot with this, and found that I felt hopeless after watching the success of others. However, this is the wrong mindset to have, and once I changed my perspective on this, I found I was much more successful and confident. Take a close look at your successful peers, and focus not on their accomplishments, but the choices they made and the work they did to achieve these feats. If their accomplishments are things you truly desire, then their success has given you a path that you can follow to replicate their success. So instead of feeling sad that your friend got into {generic Big-N}, be happy, because you now know of one potential path into {generic Big-N} (and a potential referral). This may seem a bit handwavy (like telling an anxious person to stop being anxious), but I personally found a lot of success and inner peace by converting my jealousy into ambition. 

*****

So, those were my thoughts over the years. I expect some people to disagree, and I would love to have a discussion about these points. At the end of the day, just remember that we are lucky to be such a meritocratic field, where pedigree and connections do not completely determine one’s fate. To anyone feeling down, be happy we aren’t in [investment banking]( https://www.wallstreetoasis.com/tracker) making PowerPoints.
",1510561754.0,2017-11-13 03:29:14
919,How is being a Jack of all trades looked upon in this field?,468,grk3tf,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/grk3tf/how_is_being_a_jack_of_all_trades_looked_upon_in/,181,"I'll be graduating shortly and just realized my resume is a huge mixed bag of skills.   
I have one project which is embedded systems and Android combo, I've another project which is AR and built on Unity. I contributed to the entirety of front-end for an event website(fairly complex). I have also worked on data science and ML based projects.  Along with this, I also have some smaller projects (done for academic purposes over a weekend) on Python Flask and React. My language to go to is python, but I can also code equally well on Java and a bit on C++.    
The problem is that I'm not particularly confident with most of the things I've worked on. I just get them to work somehow. I have no idea how something works on Android, nor do I know in-depth about Angular or React. But I've done a considerable amount of work in them by just looking up for what I need. I don't learn them, I just go through a course introduction, and look up to resources wherever needed.   
This sounds really bad, but at the same time, if you want me to do something in a tech stack or language that I've zero experience in, then I can probably learn it and get it done fairly quickly.  
I don't know if this is good or bad from a resume point of view. Please provide your insights on that. Should I include all of them in the resume (or at least the big ones) or restrain to only the ones I can answer theoretical questions on if I were to be asked in an interview?    
PS: I already have a job and the resume I'm preparing is mainly for FAANG companies which I'll be applying to after a few months.",1590616301.0,2020-05-27 17:51:41
920,Terrified of making (non-code) changes as a first-time intern,467,gmu68w,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gmu68w/terrified_of_making_noncode_changes_as_a/,102,"I started my internship this week and it’s totally remote, and I’m absolutely terrified of making changes to things. The internship is at a small startup so the tasks I’ve been given are things that seem like they’d be very simple if I knew what I was doing, but have required me to learn a lot really fast. I’m super glad to be learning, and they’re giving me tasks that are in-line with what I want to learn, but I’m really scared of breaking something. 

That said, I’m not really scared of writing code or anything. It’s easy to make a new git branch, mess around, fuck something up, and start over, and that won’t break anything. What I’m scared of changing is other things like AWS configuration stuff. For example one of my tasks is connecting one AWS feature to another using CloudFormation. I’ve never done anything with AWS before, and they’re very understanding of that and willing to help. But I’m really scared that I’m requiring too much handholding (I’m the only intern asking a lot of questions, although I try to spend at least 45 minutes research before asking a question, and they’re usually pretty specific), but I’m just not sure how to be confident I won’t accidentally break something in the AWS setup, cost the company a lot of money by setting up some new thing that ends up costing a lot for some reason (?), etc. 

I guess what I’m asking is, does anyone have advice for dealing with these concerns? Besides just being more experienced, how can I quell these fears?

E: just to clarify, I’m in a dev environment so I don’t think I’m going to break anything mission critical. My fear is really more “I’m afraid because I don’t know what I could break” than “I’m afraid because I know I can break master and I don’t know if I’m going to”",1589941521.0,2020-05-19 22:25:21
921,Overachievers & Under Performers ( I need to vent),464,9k99ar,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9k99ar/overachievers_under_performers_i_need_to_vent/,169,"**Backstory**: I taught myself how to program with no programming background, studying over 12 hours a day at home and was lucky enough to land a job at a small **x company.** I was one of the first developers to start working there, and through enough time I was able to do the jobs of everyone at my work. This did not come without a cost though, I would program after work as well on my own time because to be frank I felt inadequate due to not having a degree. And when I say I would program after work I mean it, I mean I started building apps on my own with Haskell just to expand my thinking horizon and to be honest it carried over to work (Haskell is totally not related to my job but I think it can echo some of my determination to programming). Programming for a long time is a hobby and a job. With all of this being said, I don't want you to think I'm writing **unreadable super intelligent code,** I very much make sure it is readable and I am a very helpful person when asked for help, I think people can attest to that. I have become the workaholic due to the fact of feeling inadequate in this industry, when very well I know I am fully capable. It's a hard mental hurdle to get over.

**Fast forward:** It's been over a year, and I am actually quite confident in my work, my learning has plateau'd at this company, and I can do much more than others in the 8 hours I work. Because of that I have become bitter because I grow suspicious that my co-workers are slacking off and they have similar pay(I've asked). I should mention we all **work from home,** recently a co-worker who I deem to be under performing fell ""ill"" for over a month and his story hasn't been completed. My supervisor then assigned me my under performing co-workers story. Little to my surprise, there has been no progress and I was able to finish his work in a matter of an afternoon. People at work also started picking up **easier stories,** while i'm stuck working on large ones. Once they are done their easy story, their day is essentially over. They also do 1 large commit at the end of week so there's no real way of tracking progress. My supervisor is a super nice guy and also works hard, he knows something is up with my co-workers but doesn't punish them.

One day I absolutely snapped, at a guy who took an entire week to change the ""font' of a page, and had the nerve to demo that font change at the weekly meeting. And more recently I snapped at that co-worker who's story I had to do because he took over a month and I completed it in a day (it was a simple CRUD controller), one that has been made dozens of times at work. I have seen things like this happen dozens and dozens of time again before I said anything, and no I am not exaggerating, this stuff goes unchecked.

Needless to say this industry has taken a toll on me, and its my own fault, I overworked myself in a company culture where nobody works hard. Part of why I feel this way is because I worked so hard to get my first job in the industry (over 3 months of interviewing and constant programming and reading). I see people coming in and just squandering their opportunity to learn the skills. To be honest, it hurts me to see that.

**How I feel now**: I took a long thinking of my value as a person and in the industry and it made me quite depressed, I have truly become an asshole to work with, and to be honest I wouldn't want to work with myself. Also after some research it turns out I'm also grossly underpaid for the amount of work I supply, a 50% will bring me up to market. I spoke to my father about this issue.   What he told me really changed my view:

1. I'm an idiot for working so hard and your **lazy** co-workers are not stupid, they are just doing what they should be doing. 
2. I'm not a manger and I tried to manage people and I'm wrong for that.
3. Whether your co-workers are doing anything at all, is not your business. If they are slacking and you have to pick up their work. Don't try to do it quickly, it'll make them look bad and make you look like a smart ass.
4. When you leave, doesn't matter how hard you worked. The company will still only see you as an employee. Your boss doesn't care how hard you work, they just expect it from you now.
5. Sounds like your team doesn't respect talent and doesn't have what it takes to keep it
6. take care of yourself first, and don't die for your company. If they don't punish laziness and don't reward hard work, why work so hard?
7. they will take advantage of you if they can, no matter how nice they are on the surface.

another solid read: [http://startingdotneprogramming.blogspot.com/2013/04/i-knew-programmer-that-went-completely.html](http://startingdotneprogramming.blogspot.com/2013/04/i-knew-programmer-that-went-completely.html)

thank you for reading, I just wanted to get this out and I am constantly working on personal life. I'm sure others have stories of feeling like this or having to deal with a co-worker like this. If you do please share.

&#x200B;

&#x200B;

*TL;DR: Take care of yourself, it's just a job at the end of the day.*",1538364980.0,2018-09-30 23:36:20
922,"Previous Job apparently is giving me extremely negative reviews, what do i do?",466,eafzhd,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/eafzhd/previous_job_apparently_is_giving_me_extremely/,192,"I joined a fairly large company in January, as a new grad. After 5 months or so i felt i wasn't getting paid what i was worth, so i decided to start looking for a new job.

I found a new job in September, which gave me a 30% salary increase. Unfortunately the company underwent layoffs in October and i was cut loose after 3 weeks. I reached out to a few friends i knew in the valley, and managed to get a bunch of interviews over late October/Early November. Unfortunately every single one of them i would make it to the last round of interviews and not receive an offer. I thought it was due to my skill and interview ability.

Today i went a did a final onsite that i had left, which was more or less arranged by a close friend. Well my friend gave me some less than favorable feedback, apparently my first job left me a less than stellar review. According to them i did not accomplish anything (not true), and they would not recommend me under any circumstances.

Of course i didn't get the job, and unfortunately now i have exhausted most of my network. I don't really know what i am supposed to do now. Listing myself as a recent grad seem wrong as there is a giant gap now in my resume.

Any suggestions?",1576331309.0,2019-12-14 08:48:29
923,Summer 2021 Internships Posting,470,gpiht8,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gpiht8/summer_2021_internships_posting/,60,"I wish the title was joking, but a couple postings are up for next summer. 

[I compiled a list here.](https://github.com/Pitt-CSC/Summer2021-Internships) Feel free to add whatever postings you find. Good luck!",1590319325.0,2020-05-24 07:22:05
924,Going to Hong Kong for a graduate role,462,dy2qtw,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dy2qtw/going_to_hong_kong_for_a_graduate_role/,231,"I accepted a grad role in HK before the protests began and with the recent deteriorating situation re protests, I'm unsure whether or not its still a smart idea to continue. Other than asking the company what their stance is, I was wondering what opinions you guys had?",1574110046.0,2019-11-18 15:47:26
925,"I quit my job without another one lined up, here is my experience.",462,b32e8e,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/b32e8e/i_quit_my_job_without_another_one_lined_up_here/,207,"First, let me give you a little bit of background.



 


I have been in the industry for ~7 years, graduated from decent school in 2011.  I had one internship in college that lead to a full time position in my hometown at a large company.  Low pay but low responsibility, I worked at that position for about 3 years where I started doing front end development work.  





After that, I got a DevOps job in a different city, a big move for me.  It was contract and lasted for 10 months until I jumped ship.  It was taxing with long hours and a long commute.  I went immediately to a new position as a front end developer for a smaller company.  Worked with React building a SaaS web application for 2.5 years.  





My significant other got a dream position back in my home city which has an okay tech scene.  At this point I am nearing 30 years old, and am looking to be closer to my family and slow the pace of my life down a bit.   Problem is, I don't have a job lined up.  






Financially at this point, we are fine.  My significant other makes enough money for the both of us to live very comfortably, and I have enough money put away to where I could live for a few years without any trouble. This is a very important thing to note, as I didn't feel pressure to find another job quickly to pay bills.  I could get also health benefits through her job.






What ended up happening is I quit my job around November without anything lined up, enjoyed the holidays, went on a couple of long trips/vacations to other countries, then started to apply to positions near the beginning of February.  I was pretty casual about the process.  I did no leetcode grind, but I wasn't applying to FANG companies or anything like that.  Since then I have received 4 job offers, and as of last week, I landed a dream position doing web development, 100% remote.  I am stoked.







I guess I wanted to write this to give a different perspective.  The common consensus is you should not quit your job unless you have another one lined up.  For me it was the exact opposite.  The break I took really allowed me to do a complete mental refresh.  I was getting burned out, and desperately needed the break.  I actually found myself doing side coding projects for fun, something I had not done... ever?  






Thanks for reading!




EDIT:  Thank you for the responses, if anyone has any questions feel free to ask/DM me and I will be happy to offer what help I can.






EDIT2: I understand that this can come across as a bit of a humblebrag, and a bit disconected from those who are in troubling financial situations.  That is totally fair.  




Another reason I made this post was because of the how nervous and anxious I felt before quitting and jumping into the unknown realm of unemployment.  The anxiety was pervasive to all parts of my life.  I wanted to help those who are in a similar situation with similar feelings as I had a few months ago with a real life example that ended well, that's all.  I wish you all the best!",1553055921.0,2019-03-20 00:25:21
926,"If You Could Travel Back In Time, What Would You Do Differently With Your Career?",464,k7lhfk,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k7lhfk/if_you_could_travel_back_in_time_what_would_you/,601,"I'm currently working to change fields into CS from something not related. And sometimes it seems like things can get a little pessimistic about careers in CS on this subreddit. So, I'm curious;

1. How do you feel about this field, as a whole? Do you love/hate it?
2. What would you do differently if you could travel in a time machine? (in terms of your career in CS)",1607251978.0,2020-12-06 05:52:58
927,Finally got a job!,460,am3ghf,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/am3ghf/finally_got_a_job/,161,"Hoping this serves as a confidence booster to those out there looking for jobs! I'm a soon to be new grad and after literal months of looking, I finally landed a job I'm excited for. I'll give some rough estimates on what my job search looked like.

&#x200B;

**Application Numbers (Roughly)**

* **Applications**: 600 ish
* **Actually Ghosted**: 300-330
* **Straight up denied**: 120-130
* **Got initial contact with**: 100-120 ish
   * **Made it through multiple steps:** 40-50
   * **Denied after first round or decided not to move forward**: 30-40
   * **Applied too early**: 30-40
* **On Site interviews offered:** 14
   * **On sites that I actually pursued:** 10
   * **On sites that I denied**: 4
* **Offers**: 5

&#x200B;

**Random Stats About Me**:

* **Internships:** 3 (Two Summer ones, did one abroad)
* **Leetcode per week:** None. Jobs exist out there where they won't just give you algorithm questions for interviews. They are definitely the majority, but jobs out there don't always do this! (I was mainly tested on OOP Design, Web Architecture stuff, in depth questions about my senior project, etc). I definitely got white boarding algo questions, but I'm super happy I didn't waste my free time grinding leetcode, though for certain companies it is necessary.
* **Personal Projects:** None, although I did my senior project using Angular & Spring Boot so a lot of companies liked that (was definitely asked about this project a lot during all my interviews).

&#x200B;

I've gotten offers early on last semester and none of them were jobs I was crazy about. I took the risk and ended up denying them and kept on looking. I would have accepted/reneged on them but they were either government (didn't want to go through the clearance process just to renege) or startups that wanted me to start working part time asap. I've gotten denied from a lot of jobs that I wanted, and I've been through all the ups and downs, but I kept on going. I hope people don't take this post as a brag, but use it as motivation. Would be happy to answer any questions if anyone had any.

&#x200B;

P.S: Sorry about the format of this, didn't put too much work into it

&#x200B;

Edit: Also worth noting that grinding leetcode probably would have helped a lot, but it was like studying for the SAT for me so I just didn't have the discipline to do it. If you're willing to do a ton of leetcode, then it is still probably worth it. I just didn't take that route and I had to do a lot more applications than usual

&#x200B;

Edit 2: Updated some stuff",1549065578.0,2019-02-01 18:59:38
928,"Got my first job! This sub was at times helpful, at times stressful. Thank you, anyways! Here's my 'post mortem':",459,c3352h,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/c3352h/got_my_first_job_this_sub_was_at_times_helpful_at/,30,"First let me preface this by saying that I don't think my whole experience should be taken into account by most people of this sub because I'm not from  NA/EU, and the cs career here is different.

Even so, maybe there's some value in what I've been through, and it may be helpful for some people.

* **Background**

BSc in Computer Science  from an average university in my country, good GPA equivalent.

1 year long internship at the same university, where I worked in a report system used by the professors (kinda of a fucked up role, because I was basically solo developer/support/admin \~ I did mostly for the money)

1 6 month internship in a software house  (good experience because I worked with senior developers, but it wasn't what I choose to do. I was hired as a data analyst, but the project was dropped and they threw me into some java development tasks).

Interns here, unless you're in a big company, are hired as sub-employees/slave labor.  There isn't a culture of summer/winter intern jobs and we're expected to work while we study (most of the internships are part-time)

Incomplete MSc in a top2 university.

I'm not really into academia, but this opportunity was the best for me to get out of my state and live in tech hub in my country, so even if it wasn't my first option, it was the best.

* **About** /r/cscareerquestions

I started lurking this sub around 2016 (in my third year of cs undergrad) and I learned a lot. Leetcode/HackerRank questions, what to expect and how to behave in an interview, how to write a resume, salary negotiation, the importance of soft skills.

There's good content here, but even in my short stay I can already see some changes. There are a lot of comments from people that are in no place to give career advice. Lack of politeness and humble brags increased a lot, also.

In fact, by the end of my undergrad I stopped visiting this sub completely, because it got to the point of being unhelpful, and some threads were giving me anxiety (The dudes doing thousands of hard leetcode questions, 150k salary of gtfo, phds having trouble to find jobs, etc).

I think one of the biggest mistakes in my ""career"" is how many fucks I was giving to this sub. Actually, not only this sub but the NA/EU scene in general, which are in now way representative of my own region. I.E:

The emphasis on postgraduate degrees. Even for theory heavy jobs like Data Science (which of my main focus) there's a huge disparity in resume requirements. In my country, they usually put MSc/PhD as ""desired""  and not ""required"". We have a lot to catch up, and the lack of qualified professionals with postgrad degrees makes most of the companies to lower their expectations.

* **Job Hunt**

I'm not gonna lie... it was easier than expected. The greatest obstacle I faced was overcoming some mental health issues I developed in the past year (anxiety, impostor syndrome, 'mild' depression...).

One day I realized that I had real problems and that I couldn't face (and shouldn't be facing) this by myself, I took some time off of my course, and got professional help.

After I felt I was in a better place, I started putting some effort into:

1. Side projects (couple of data analysis projects using data from reddit)
2. Easy leetcode/hackerRank questions (with a few medium ones)

When I was looking for jobs openings, I was very picky. One good thing that I learned here it that I shouldn't undervalue myself. I need the job as much as the company needs to fill that position (ok, not really but the company ins't offering the job out of good will. They need someone.)

I guess I applied to around 50 jobs and had around 30% response rate, usually within a week after applying. I used linkedin/indeed but I always tried to find the company's careers page. I don't know if there's any difference or I got lucky, but most of the recruiters that contacted me were from companies I applied directly.

I rejected three after a screening interview, because the description/salary didn't appeal me.

Some codility questions. Didn't like this platform. Got a few right, a few wrong... still waiting for them to get back to me, but now that I've got a job, I'll probably email them asking to be removed.

I was given 2 take home tests (DS related). These two were actually nice to do. I was rejected by both of them, but I must confess that I didn't put a lot of effort. That's because around this time I got in contact with my dream company, and although I recognize that nobody should do this, I got a good feeling about my prospects.

&#x200B;

The company that hired me is an interesting case, because it was very different from the others. It's a huge company in my country and probably one the best startups for tech jobs right now. It seemed so out of my league that I didn't even bother looking at their career's page. I saw the offer in a data related group I'm part of on telegram. It had a  brief description of the job, and the email of a guy who worked there. I didn't fill all the requirements, but I  I thought to myself that it seemed like the kind of job that I would really like and think I'd be good at.

1 hour after sending the email with my resume, the guy called me and we scheduled a skype interview. He was a manager and not a recruiter like I thought, and was looking for someone for his team. When we talked, he described the job more thoroughly and I said:

""Hey, I would absolutely love to work at X, but it looks like you're trying to fill a senior position, so I don't think I'm the guy you're looking for"". He paused for a moment, and answered: ""Well... I liked your resume and you know python, sql... Why don't we schedule a few more interviews to see if you fit?"". After this there were 3 more interviews:

1. 1 HR interview, mostly background/expectations questions and she talked about the company.
2. 1 Technical interview with a data engineer where we discussed programming and he asked a few questions about how I would approach data related problems
3. 1 Interview with the department chief. This one was kind of like the HR interview.

5 days later I got the offer.

&#x200B;

* **What I think really helped me**

1. Know your market, and tailor yourself/your resume to it.
2. /r/cscareerquestions can be helpful, but it can also be pretty toxic place for unemployed people. Take some time off of here, if you fee like it
3. Don't lose your mind to Leetcode (maybe this doesn't apply to NA/EU) but knowing your fundamentals and clearly explaining your thought process were far more important IN MY CASE.
4. Soft Skills matter. A lot. I think they were the most important part in my interviews.

&#x200B;

I think that's all. Sorry if I wasn't clear enough at some points, but english is not my first language.",1561103428.0,2019-06-21 03:50:28
929,"Self-Taught Dev here, just got offered my first position as a Junior Software Engineer!",468,75rit6,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/75rit6/selftaught_dev_here_just_got_offered_my_first/,113,"Just wanted to add some good news to this sub. I won't go on to write a huge essay about what I did. Just wanted to say thanks for the great advice here and for those who gave me some feedback on my resume. 

I graduated with a degree in Political Science in December of 2016 and have been studying full time building projects. I built two MEAN stack applications and one Android application to put on my resume. I'm happy to answer any questions if anyone has any :)",1507779355.0,2017-10-11 23:35:55
930,"Minimum qualifications for internship include at least two previous internships, high hiring bar or red flag?",457,jy0j2e,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jy0j2e/minimum_qualifications_for_internship_include_at/,118,"I just found a SWE internship posting for a sizeable and known data analytics company on LinkedIn that listed in its requirements: ""Minimum 2 previous internships with relevant experience"". What is this subreddit's view on this kind of candidate filtering?",1605945520.0,2020-11-21 02:58:40
931,Do I have a job? What the heck is going on here,463,882jyq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/882jyq/do_i_have_a_job_what_the_heck_is_going_on_here/,117,"I accepted a written job offer 2 weeks ago for a large, fortune 100 company. The offer was dependent on me passing a background check, which I have passed, and received some on-boarding documents, a welcome to the company email, etc. My start date was today.

Since passing the background check I have e-mailed/called my HR contact at the company only to receive no response. Same thing with my hiring manager. 

I am currently in the building where I am meant to be employed, but I do not have any employee identification so I am unable to access the area of the building where I am meant to be working. I have spoken with the receptionist but she has been unable to get a hold of my hiring manager. I have been here for several hours now, basically playing with my phone.

I have completed all the generic pre-employment forms (i-9, background check stuff, etc.) and have backed out of other offers/interviews in lieu of this one.

./cscareerquestions, what should I do? Do I even have a job?


**update1** 
My direct manager is still unavailable according to HR, they are going to go through his manager and try to get an update for me.


**update2**
Was told to go home and they will get in contact with me. There has been very little transparency with what is going on, guess I will try again tomorrow.


**update3**
My potential manager has left the company, and my position is no longer needed on the team. They (manager's boss) are looking at other teams that I can interview with and continue with a new offer. While unhappy with the situation, I will interview with any other teams presented and go from there.

**update3edit**
I will be speaking with a lawyer tomorrow (I am in NY) to see what options I have moving forward. I also have sent e-mails to previous employers where I rejected final interviews (only 2, but better than none) to see if they are willing to give me an opportunity. 

Depending on what the lawyer says and how the company moves forward, I may end up removing this post, and that is also the reason I am not doing ""name n' shame"" just yet.

**finalupdate**
Original company set up some interviews for other teams with me this coming week. I have reached out to a previous company whose offer I rejected and they are willing to re-extend their previous offer which I have accepted now, and will be starting at that company hopefully within a week or two. Guess it all will work out in the end, sort of.",1522368879.0,2018-03-29 20:14:39
932,I've applied to over 500 jobs and not a single response.,466,73nyjr,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/73nyjr/ive_applied_to_over_500_jobs_and_not_a_single/,261,"I am exhausted trying to get any sort of response from any job application, but I don't get anything. Not a followup call or email, not even a rejection.

I am homeless living out of my car, i am applying for food stamps and section 8 housing. I have to shower, shave, and shit at a gym! I sleep every night in a Walmart parkinglot. I tried renegotiation my $700 a month student loan payments down and they told me ""At this moment in time you unfortunately do not qualify for income based repayment."" The only upside is I get $300 more a month since I don't have to pay rent.

I rework my resume every week, I write cover letters for ever job. Yet nothing.

What am I suppose to do?",1506917331.0,2017-10-02 00:08:51
933,How many of you started out at smaller companies because you had this impression that big companies are too tough for beginners?,463,fiosvr,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fiosvr/how_many_of_you_started_out_at_smaller_companies/,75," I had developed a mental model that although probably inaccurate most of the time, it made more sense to me when I was inexperienced. I had no peers working in tech so it was developed purely based on my own intuition (albeit flawed).

That model was that every small business, everything about the job, from security to workplace challenges, is more beginner-friendly. I had a foreboding feeling about big companies at the time. Because in my mind, megacorp job = more complex everything, higher stakes, more challenging. And therefore as a beginner I pictured it like bringing a knife to a gun fight. They'll chew me up and spit me out quickly, I thought... no way mega companies are beginner friendly, I felt safer betting on smaller companies.

 Eventually I learned that my intuition about small companies wasn't correct a lot of the time, because smaller companies tend to be more volatile, have more unpredictable jobs, especially early startups. But it took me a few years to realize that.",1584245980.0,2020-03-15 00:19:40
934,I wrote a tool that saves the company 1 million dollars this year,459,ets612,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ets612/i_wrote_a_tool_that_saves_the_company_1_million/,185,"I work at a mid-sized bank. I wrote a tool that saves the company 1 million dollars this year (no exaggeration). I demoed it for my boss, my bosses boss and the department head and they were all enamored with it and other senior devs/project leads came over to see and said it was ""next level work"". They spun up a team in another department and budgeted them 1 million dollars and a year to complete this project. I wrote a tool that automated the process in just under a week and a half (it takes a week and a half to do the process that they said would take a year, I wrote it in about two weeks. Sorry if that was unclear). 

No one else on my team or department has done any project with more impact in the time I have been there. Also a lot of my colleagues are dinosaurs in terms of tech (don't get me wrong, they're really good people) and it's very bureaucratic (in terms of speed of things getting done; i.e. - very slow) so this looks really good for me in corporate politics.  

I am a recent grad and started at the company under six months ago. 

**My questions are these:**

* Can I  ask for a raise/promotion?
* This sounds ridiculous but 2 seniors devs said I can ask for some of the money they budgeted as a bonus. Is this a thing?

**Edit:** the reason I tie raise and promotion together is because at the bank you don't get one without the other. They're very bureaucratic and concerned about ""levels""",1579995361.0,2020-01-25 18:36:01
935,I have $500 to spend by the end of the year in furthering my career. What should I buy?,460,e92ynd,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/e92ynd/i_have_500_to_spend_by_the_end_of_the_year_in/,270,"$500 stipend that expires in 20 days. I'm a mid level dev doing full stack development. I can spend it on books, courses, conferences...etc

Please suggest!

&#x200B;

edit: can't be peripherals, monitors etc. It has to be directly related to education. Perhaps courses that are must learn or books that are must read.",1576071716.0,2019-12-11 08:41:56
936,When did computer science as a field get so popular?,460,bvyudr,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bvyudr/when_did_computer_science_as_a_field_get_so/,235,"I was in college from 2008-2013, not in CS.  I remember CS being the smallest STEM department at my large university and being discouraged from studying the field from people who got laid off in 2008.  I knew less than a handful of CS students at my school then, and all of them got jobs that pay 50-60k in high COL areas.



Now that I work full time as a data engineer (after changing fields) and go to school part time, it is the largest department on campus.  Also, starting salaries and opportunities for CS students seem to be much better now than before, at least from my perspective.",1559519974.0,2019-06-02 19:59:34
937,"Was just told my company ""doesn't give individual raises""",459,cr8cj1,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cr8cj1/was_just_told_my_company_doesnt_give_individual/,164,"So I have been at my job for over a year now doing C# and WPF. Since starting I have received a 2% raise along with the rest of the company a few months ago. I recently asked to have a performance review, I was told they don't do those here. So then I told him I wanted to speak with someone about my pay to which he told me that the ""company doesn't do raises like that"". I gave him my reasons why I think I deserve it and he said hed speak with his boss, but it seemed so strange to me, my boss pretty much told me he didnt think it would happen because ""they were originally going to offer me less, but he fought with them to get me a few grand more"".

&#x200B;

Is this a normal thing companies do? This isnt a tech company btw, I am part of a 3 person IT team where I am a solo developer. Not really sure what to do, I love my job but I wasn't expecting them to not ever want to give me a raise",1565999890.0,2019-08-16 19:58:10
938,How do I learn to speak like a programmer?,455,f6besn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/f6besn/how_do_i_learn_to_speak_like_a_programmer/,218,"I always struggle in conversations with coworkers after asking a question in a ""normal"" way most of them start throwing around buzzwords I've never heard which confuse me more than it helps me. How do I learn to do that? Or are most of the people faking it?",1582151448.0,2020-02-19 17:30:48
939,Do you stay at a job you like or chase the bag?,457,diolt9,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/diolt9/do_you_stay_at_a_job_you_like_or_chase_the_bag/,148,"I currently work at a fairly large company in the midwest making a bit over 100k. Which is great considering the cost of living is so cheap. Most of the company IT workings & culture is outdated, but I work on a small team that is actually able to work using a more modern approach & toolchain (agile/cloud/CI-CD/etc). I enjoy my coworkers. 

The other day an old coworker just dropped a huge offer on my plate. Almost double my current salary, working remote for a large medical supply company. They are also on old tech looking to modernize, but it doesn't seem like there is _any_ momentum yet to do so. There also isn't really a team or role designed yet to tackle this. It seems they are just trying to suck up folks from my previous job to build something similar to what we were working on there.

Has anyone been in a similar situation before, what did you do or what did you consider? What kind of questions helped you make your decision?",1571257683.0,2019-10-16 16:28:03
940,"Be wary of working somewhere with a ""always pair programming"" policy",455,5svqck,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/5svqck/be_wary_of_working_somewhere_with_a_always_pair/,104,"The subject of pair programming came up [in this thread](https://www.reddit.com/r/cscareerquestions/comments/5ss9b9/thoughts_on_pivotal_labscloud_foundry_how_are/). I thought I would post some of my experiences with a company that ""paired all the time"". This seems to be becoming more and more common these days. My anecdotal experience was largely negative.

Everything here applies to my experience working for one of these places for ~2 years. Since this is anecdotal YMMV of course, so take this as one person's experience (although I've heard very similar things from a lot of other engineers). If it works for you, great! Some people do love constant pairing! I'd love to hear what you like about it that I didn't outline in the benefits below. But if you're considering taking a job at a place that does this you should think carefully about the drawbacks and ask your prospective employer how they are mitigating any of the problems you're concerned about.

**How it works**

Typically there are a bunch of ""pairing stations"" setup in an open office. Each pairing station will have two monitors, two keyboards, two mice hooked up to the same computer. You can share control at any time, but there's supposed to be a ""driver"" who's actively writing the code and the ""navigator"" who's observing/commenting/catching errors/etc. These two roles should switch throughout the day. (There are various strategies as to when and how often to switch.)

**Benefits**

- Knowledge sharing. Every piece of code is ideally touched by at least 2 programmers. This reduces the number of ""single point of failure"" type situations where only one engineer knows anything about some complex part of the codebase. 
- Training / mentorship. New engineers get a chance to work directly with experienced engineers. You also get exposed to all sorts of different approaches to problem solving and experiences. This can be really cool!
- The ability to bounce ideas off of each other can be great. You can often come up with a better solution together than you would have alone (when the pair is functioning well). ""Two minds are better than one"" is sometimes true.
- Dumb bugs and syntax errors are less likely to occur, if your pair is catching those. Major architectural mistakes should ideally get caught early on as well, as a side effect of multiple people looking at the problem.
- Diffusion of responsibility (also has mentions in drawbacks). Since every bit of code has had at least 2 people responsible there are fewer issues with a member of the team taking time off. If you're going on vacation for a week you shouldn't need to spend a bunch of time bringing a replacement up to speed. Unexpected things like sicknesses impact the team a lot less. Somebody up and quitting won't suddenly put a halt on a project. That's really nice!
- The theory is that all of the above help contribute to higher quality code, which is why companies are willing to trade potential drops in productivity for more pairing. (Whether or not that is true is up to debate. I haven't seen any conclusive studies either way.)

**Drawbacks**

I always feel like it should be pretty clear why someone wouldn't want to be forced to work with another person in a pair programming chain gang. But usually when I see concerns brought up (both at my previous place of work and whenever pairing is brought up online) the response is ""well, you're just doing it wrong"". I would argue that for the most part I *was* doing it right (I followed ""best practices"", communicated effectively, asked questions, shared control, was friendly, made compromises, switched pairs regularly, etc). I was still miserable doing it, and I decided any benefits were not worth the damage to my sanity.

- Being forced to work and communicate with someone else 8 hours a day is EXHAUSTING. Even extroverts can find that mentally and emotionally tiring, let alone introverts like me.
- Pairing dynamics can vary wildly. You've got the control freaks who never want to compromise or give up control of the keyboard, the uber quiet/shy folks who never talk, the arguers who have to debate every point, the senior engineers who never explain what they're doing, etc. (Many of these people were friends that I got along great with outside of pairing but were horrible to work with.) Some of the best and smartest engineers are horrible pairs.
- Diffusion of responsibility - I mentioned some of the good things about this above, but there are some major drawbacks too. One is that you *rarely* get the satisfaction of completing a job all the way through. Chances are you've been bounced around different parts of the codebase of a project so often adding minuscule contributions here and there that you rarely get the chance to look back on a project and point at some significant thing that you built.
- IT'S FUCKING LOUD. Most of us hate open offices, right? A pair programming open office is an order of magnitude worse. Say you've got a room with 10 engineers pairing - that's 5 separate conversations going on ALL DAY LONG. Try writing a complex SQL aggregation or solving a baffling concurrency bug in that kind of environment. And you can't even retreat to headphones like a lot of open office programmers are forced to because you're pairing.
- The tools you use have to work for the lowest common denominator in the pair. Do you prefer vim? zsh? tmux? Have a bunch of your own custom keybindings that you've gotten super efficient with over the past 5 years? If your pair isn't also familiar with those you don't get to use them. 
- Since you're sharing keyboards diseases spread even faster than a typical office environment.
- Lack of schedule flexibility. You have to be there when your pair is.
- A claim is that it helps with onboarding and knowledge sharing for new or junior employees. However, the junior engineer pretty much never gets a chance to just mess around with the code and make mistakes without somebody watching them at all times. The senior engineer is also always a crutch -- they don't get a chance to struggle to solve a problem (which is the best learning experience IMO), because the senior engineer is always there to swoop in and save the day. (And I don't think the senior engineer should be forced to sit there biting their tongues for hours either watching the junior flail around.)
- This isn't Pacific Rim with some magic mind melding between pairs. Trying to follow someone else's train of thought through something as difficult as coding is *hard* and *exhausting*.
- Finding time for non coding tasks is hard. Code reviews, answering emails, reading documentation, researching technologies, etc. These are not tasks that are suited to synchronous work with another person, and you have to struggle to find time to cram them in somewhere in your day.
- It's extremely hard to get into ""flow"". Getting into flow where you're incredibly productive, focused wholly on the problem at hand, with the hours flying by is one of the main reasons I got into programming in the first place.

**Proposals**

If you're in management considering implementing pair programming please think carefully about the issues I've outlined if you want a happy team. I strongly suggest that if you want to implement pair programming into your workflow that you *do not make it compulsory* and you *do not do it every day*. If you give your programmers the option and tools to pair they will do it naturally when it makes sense. Maybe have a few pairing stations that they can use when needed (preferably in a separate room from the main team). If you really want to mandate something try to make it one day a week or something. Ideally you should just be confident that you're hiring smart adults who know when it makes sense to pair and when it doesn't.",1486618890.0,2017-02-09 00:41:30
941,How to improve underdeveloped Software Engineering skills due to too much focus on algorithmic coding/leetcode,453,9ni46v,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9ni46v/how_to_improve_underdeveloped_software/,207," I recently got a new job at a startup where I'll probably need to hit the ground running. I had about 1.5 years of experience before quitting my job and taking time off to study A&DS, practice leetcode problems, and interview. As a result, I'm now good at reasoning about 5-40 line solutions to contrived brainteaser problems, but my actual software engineering skills has deteriorated. I realize how ridiculous this is, but now I need a way to sharpen up before I begin my new job. Does anyone have any suggestions on how I can go about this. I was thinking I could check out some open source projects, but I'm not familiar with the scene (any suggestions would be highly welcome). I'm going from heavy enterprise software using enterprise-y tech to microservices with Python and more trendy stuff. I could build something myself, but I feel I might not have the best practices at the moment and I don't have any particularly inspiring ideas. I am open to suggestions (pls no todo apps). I apologize if my predicament offends anyones' sensibilities. ",1539357021.0,2018-10-12 11:10:21
942,I'm always so tired at my internship,458,c46do0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/c46do0/im_always_so_tired_at_my_internship/,215,"I sleep enough, but the being in constant learning mode with no real breaks all day makes me exhausted. The half an hour commute there and back along with talking to the other interns in our little downtime. If I'm ever even a bit quiet or tired from it all, I get a ""hey are you okay?"" Or ""what's wrong?"" Like I'm doing something wrong. The other interns and full time staff drink so much coffee. I can get through the day with more energy when I drink coffee, but it makes me break out. Additionally I'm scared of having to need it. It's a small office and I know of 4 full time workers who drink 3+ cups a day and I don't want that. 


Is this just how it is though? Or is this just my company? 


I do sleep enough, I could sleep *more* if I came home and slept after work but there's so much I like doing that I don't want to give up. I'm about two weeks in, will adjusting be easier with time? Or do I need to change something? 


Any suggestions on how I can do what I need to do, do what I want to do, and not develop a caffiene addiction?",1561332606.0,2019-06-23 19:30:06
943,"My company is converting to ""Flexible Work Schedule"" eliminating our accrued PTO",454,khks97,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/khks97/my_company_is_converting_to_flexible_work/,213,"My company  just announced that they  are eliminating any **future** accrued and contractually entitled PTO in favor of ""Flexible Work Schedule"".  I am very upset about this, but am I overreacting? I'm sure this has happened to many of you as well.

In our rules, anyone carrying any PTO over into the new year has to use up that PTO before using the ""flexible"" time.

And of course **in the future** we are no longer compensated for accrued PTO if we leave the company for any reason, because there is no longer accrued time.

Am I wrong to be very angry about this and regard it as a significant cut in compensation? The reason I and many others are carrying time over into the new year is because we could not take PTO during the year due to the aggressive release schedules and constant manufactured crises. So now, those of us who did our work (and made this a record-breaking year for the company) are being punished for it, while those who took their vacation will be able to start using the ""flexible"" time immediately.

In addition the fact that we were limited in the amount of time we could accrue was one of the only things we could use to make the company allow us to take vacation time. Otherwise our schedules are kept fully packed. Now we we won't have that leverage. Whether or not we are allowed to take ""flexible"" time off will be decided by management, which based on past history will not happen.

Finally of course there is the big scam that ""unlimited"" time off means no time off if you leave the company for any reason, because they no longer have to pay you for it, even if they lay you off.

I'd appreciate anyone else's thoughts on whether this is as bad as it seems to be.

(edited to clarify that they are eliminating PTO accrual starting in 2021. Anything we have accrued is still there but has to be used up before we get to start using ""flexible"" time.)",1608597259.0,2020-12-21 19:34:19
944,Tell me how your job hunt for software development is going as a college new graduate or since COVID.,448,jnmmvs,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jnmmvs/tell_me_how_your_job_hunt_for_software/,295,"Has been hard to land your first job? 

What should we expect to happen to software jobs over the next year?",1604478909.0,2020-11-04 03:35:09
945,"Graduated with <3 GPA, no projects, no internships, no work experience. How can I get my s*** together and make myself employable?",456,6uzs8f,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6uzs8f/graduated_with_3_gpa_no_projects_no_internships/,125,"I'll preface this by admitting that this entire mess could have been avoided if I realized earlier that life would not railroad me to success. I know that I could have done something about it years ago, but I didn't - and since I can only fix myself in the present and not the past, I have to know how to take action *in the here and now*. 

I understand that most people will pass over this post, and even fewer will read the whole thing and be kind enough to leave a helpful reply. However, I'm willing to take the chances; even if only one person replies, maybe the advice could steer my life towards something hopeful. 

**What went wrong?**

I half-assed my coursework and have a sub-3 GPA. 

I applied to zero internships over my past four years even when plenty of career fairs and recruiters showed up at my university. 

I haven't worked for a minute in my entire life. I don't even have a resume. 

**Did you network at all?**

I don't know anyone at my university. I'm fairly sure that if you went through the entire student and staff roster, you would not find a single person who knows my face. 

**How did it get to this point?** 

I became addicted to online gaming and wasted away four years of my college life doing the minimum amount of work to not fail. I used video games as a form of escapism to avoid confronting my responsibilities in real life. 

I graduated this fall and wasted my summer away gaming as usual, then realized that I didn't do any of the foundational work needed to enter the workforce. Reality hit me like a truck. I have **zero** idea where to start and am fairly sure blindly applying to job openings with no shred of preparation is not the wisest idea. 

**What are you actually capable of?**

I have rudimentary knowledge of C/C++, Java, Python, and LaTeX if that counts for anything. 

I can use the Unix shell, but I have to look up most commands. 

I am familiar with the Eclipse and IntelliJ IDEs. I can use Maven to build a Java project, but am unfamiliar with its advanced functions like unit testing. 

I used TortoiseSVN before, but am mostly familiar with Git. I can work with one other programmer on a project using Git to check out/merge code. 

**What do you have to show for it?**

I have a B.S. in computer science from my state university. 

I only have two personal programming projects, a video game mod written in Java, and a webchat bot written in Perl from years ago. Both were created for personal use and have a userbase in the 2-digit range, without a public Git repository to show my work. 

I have fast (<5s) Python solutions to about 80 problems on Project Euler, but have no other recorded programming in the language. 

For C/C++, I only coded in the language for schoolwork, and did not save my work. 

**What's your current situation?**

My parents will still support me for the foreseeable future, but I cannot stay like this. I have to become an independently functioning person who is gainfully employed. 

**What are you hoping to gain from posting this thread?**

Any third-party input that extends beyond telling me how screwed I am would probably help me out one way or another. 

I am under no illusions that Redditors can provide a magic answer that solves my problems for me, but anything helps; even nudging me towards the right direction would be immensely appreciated. I am incredibly overwhelmed and have no idea where to start on recovering from this slow-moving disaster I brought upon myself. 

* What should I be doing now? 
* Who can I talk to?
* What appropriate self-help resources are available? 
* How should I plan my daily routine from this point onward? 
* What sort of job/internship should I be looking into? Are my odds non-zero?
* How long will this take if I follow through working as hard as I can?

If anyone out there has anything helpful they would not mind sharing with me, I would very, very much appreciate a reply.  ",1503308219.0,2017-08-21 05:36:59
946,Developers with 5+ years experience - what do you see on this subreddit that is far from the truth?,451,6n9lyf,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6n9lyf/developers_with_5_years_experience_what_do_you/,557,Just want to hear from people with a good amount of experience[.](http://i.imgur.com/NnoGhN1.gif),1500073689.0,2017-07-14 19:08:09
947,How long do you keep answering questions from your former employer?,448,8ubl79,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8ubl79/how_long_do_you_keep_answering_questions_from/,124,"So I started a new job about 6 weeks ago. I gave my 2 weeks notice with my old job and had meetings with my coworkers to pass my in-progress projects along. However, I'm still getting questions about my projects. A couple weeks ago, I was asked to call and help troubleshoot an app I'd done some some work on. Yesterday, In was informed that my former coworkers can't find my code (that I know I had in source control) and they are setting up a Skype meeting with me today to help find it. I don't want to be a jerk, but, to be honest, I left that job because they were starting to expect me to always be available (sometimes cancelling long-standing vacation plans to get something finished) and I need time away from work to stay sane. Honestly, I'm stressed the fuck out by the meeting today and if they still don't see the source code, I have no idea what I'll be expected to do about it. I really like my new job and I just want to leave my old job behind me. 


Anyway, at what point can I stop answering these questions? I don't want this to reflect badly on my as an employee

*UPDATE: I told my previous employer that I would not be able to attend the meeting since I am at work. I texted them where I branched my projects to (should have been obvious, but oh well) and the branch naming convention I use. I also informed them that I am willing to jump on meetings and assist, but would be billing $200/hr with a one hour minimum (to account for task switching). After all that, they were magically able to find all the source code.

Thanks everyone for your advice! This is my first time in this situation and wasn't sure if this was expected behavior or how to handle it 🙃",1530149568.0,2018-06-27 21:32:48
948,I'm a Police Officer interested in Cyber Security. Do I need to go to University?,456,j3ddc1,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/j3ddc1/im_a_police_officer_interested_in_cyber_security/,106,"As the title says, I'm a 25 y/o male and have been a police officer for a few years. I have become gradually disillusioned with the profession, however I have always been very interested in the concept of cyber security. I know a bit of Python and have some (very basic) experience of programming.

I have a Bachelor's degree, however it's in a humanities subject. I'm aware there are some who teach themselves programming, work hard and end up getting hired in developer roles without a relevant degree. How far is this true for cyber security roles? Will a boot camp do it, or is there a relevant equivalent? I'd rather not have to go to University again, as I would effectively double my student debt, but can understand this might limit me. 

Thanks in advance for any help.",1601602920.0,2020-10-01 21:42:00
949,How do I learn to stand behind the code I've written?,457,es7g2w,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/es7g2w/how_do_i_learn_to_stand_behind_the_code_ive/,182,"I'm currently working as a Software Engineer in a midsized company and I kind of get ripped apart everytime when I open a Pull Request. Right after opening it two or three coworkers storm to my desk and tell me that they would have done it in a different way. I'm still in training and got help from a Senior(working as a SE for over 20 years) but other people who are still in training disagree with the decisions I've made and they say things like ""This is bullshit, change this or I can't sleep tonight!"" This is not very helpful even if my code is doing what it's supposed to do and the Senior looked over my code. How can I tell them that I want the code the way it is? This is a huge problem to me and I'm getting more and more afraid to open Pull Requests.",1579699579.0,2020-01-22 08:26:19
950,Just wanted to write something out here,450,cprhvd,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cprhvd/just_wanted_to_write_something_out_here/,78,"I posted my Big N internship experience on this sub about a month ago. I guess I just wanted to make myself feel a little better and deleted it afterwards. This sub gave me a little confidence in myself when I was probably at an all time low and I promised to post here again when things seemed a little better. Here is a quick recap of what was said to me during my 8 weeks.

'You have failed.'

'You have zero programming knowledge.'

'Anybody can copy code. I can get a vendor to do that.'

'Their is a difference between an employee and a vendor.'

'You won't be successful in {company\_name}'. (paraphrased)

So yeah that was my 8 weeks where everything was opposite of what I had been expecting for a year. Needless to say my manager opted not to give me a return offer. Damn when there is a nearly 90% offer rate overall it sucks to be in that 10%. The only positive I could take away was that I completed my project and enjoyed it. I even check the repository sometimes to see what changes will be made before it goes into production (Although it was always maintained how I was disinterested and not passionate and how I tried to avoid challenges in my vendor like work).

Immediately after it ended I was supposed to gear up for upcoming tests and interviews (Not in the US. Things work a little differently here). I studied for 6-7 days straight before my first interview so that my mind did not go back to what happened during it, especially the last 3-4 weeks. But I later realized it wasn't going to be enough as others had months for preparation. I was unprepared, demoralized and bordering on impostor syndrome.

I cleared online tests and some of them were for Big N and unicorn. But in the interviews I blanked a couple of times and was unaware of the expected approach for the question asked a couple of times. And all 4 times those words would come floating back into my head. Maybe my selection really was a fluke I thought (Yep it was implied how it wasn't 'just a 1 hour interview' and rather a '8 week judgement').

Probably the hardest part was when I was asked questions related to it. Once I was asked why I thought I did not get the return offer I covered almost all the main parts. Thankfully whatever was inquired in later interviews was related to the project. I would have hated to lie about it like a loser and make myself seem like a perfect candidate.

Finally I got a decent offer. Nothing too special or too bad.

I won't lie I wasn't happy to get 1 under the belt. Things are better but still there is someone living rent free in my head. Maybe this a way I use to motivate myself to do better. All I know is that I can't stop here. I won't stop. I can't let it be proven right. Maybe I just need some time to reset myself. I will continue my job hunt to get better opportunities and keep on improving whether it is my resume or interview practice to new skills and technologies or Leetcode type questions.

Again I would like to thank this sub for being an outlet to express not only for me but other unfortunate ones as well.",1565722600.0,2019-08-13 14:56:40
951,"Coworker never ever stops working, and it is starting to make me look really incompetent. What can i do?",455,7ewy6g,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/7ewy6g/coworker_never_ever_stops_working_and_it_is/,155,"We hired Steve (not real name) for a software developer position about 6 months ago. Steve seemed like a great fit, and he ended up ramping up to speed quickly and honestly was a huge boon for us when he started.

Unfortunately lately he is starting to make me and other team members look/seem incompetent, and it is really starting to stress me out. During our sprint planning with our director, he constantly complains in sprint reviews about how he feels the rest of the team is too slow and unfocused. 

Fun facts:

* He has dozens of open pull requests on various projects/services (i have roughly half of them). He spits out 5-6+ PR's a day with most of them not just being simple changes ether. 
* 2+ hours of my day is typically eaten up by just reviewing his changes. 
* If someone waits for more then 1-2 days at most he starts asking almost every 1-2 hours, or loudly complain in slack about how we are slow etc, or in stand up. 
* When he tends to run out of work or assigned work to do, he just starts doing other peoples stories regardless if it is already in progress or not. Or worst case he starts to redesign/rewrite code that has never had a problem, he just doesn't like it.. 
* He has an incredibly annoying tendency to fire off emails late at night, boasting about how he managed to rush and finish feature A,B,C. Often times ignoring the fact that someone else has already done a bunch of the work for A,B,C. (Which our manager knows, but not everyone else in the company). 

I have talked to my manager about this, who understood and tried to talk to him about this, but was refused. I don't really know how to do this anymore, and lately my own work is suffering because i am constantly stuck reviewing his work. Which creates a viscous cycle of him taking things that i was supposed to do and doing them. 
",1511439063.0,2017-11-23 07:11:03
952,[Re-upload] I've compiled a list of free online Data Structure and Algorithm courses.,454,6gbu7e,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6gbu7e/reupload_ive_compiled_a_list_of_free_online_data/,43,"Earlier today I posted a similar thread that was removed, ""It [was] inappropriate for [this] subreddit""

I've have received several messages in my inbox today from people asking what happened to the post and requesting specific links. Due to the amount of requests I have decided to re-upload the list. If this thread gets removed I will not be re-uploading this list. Therefore, I suggest saving or bookmarking the course websites below.

* Berkley: [CS 61B: Data Structures](https://people.eecs.berkeley.edu/~jrs/61b/) [YouTube Lectures](https://www.youtube.com/playlist?list=PL4BBB74C7D2A1049C)
* MIT: [Introduction to Algorithms](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/index.htm)
* Princeton: [Algorithms, Part 1](https://www.coursera.org/learn/algorithms-part1)
* Princeton: [Algorithms, Part 2](https://www.coursera.org/learn/algorithms-part2)
* Princeton: [COS 226](http://www.cs.princeton.edu/courses/archive/spring17/cos226/syllabus.html)
* Stanford: [Algorithms: Design and Analysis, Part 1](http://online.stanford.edu/course/algorithms-design-and-analysis-part-1)
* edX: [Introduction to Programming with Java -Part 3: Fundamental Data Structures and Algorithms](https://courses.edx.org/courses/course-v1:UC3Mx+IT.1.3x+1T2017/info)


Additional thanks to u/slayersource for the following link:

* UPenn edX: [4 Course Series](https://www.edx.org/professional-certificate/computer-science-essentials-software#courses) covers basics, data structures, algorithms, and JavaScript

Apparently there is also a compiled list on github of all the available courses online on Data Structures & Algorithms, thanks to u/baltimore for finding this:

* https://github.com/Developer-Y/cs-video-courses#data-structures-and-algorithms
",1497077103.0,2017-06-10 02:45:03
953,US Visa Ban on Summer Internships 2021,451,hgx42t,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/hgx42t/us_visa_ban_on_summer_internships_2021/,376,"Since the J1 and other summer visas are cancelled for this year, how will it affect overseas 2021 summer internship hiring? 
Does it make sense to apply to US companies as an overseas student? What’s the best way to go about applying to Summer 2021 internships?

Edit1: Current Indian Citizen studying at India, applying for summer internships 2021

Edit 2: As many of the people here were petrified by Indians stealing their “US internships”, I do not want to do this. 
My main concern was with a couple of friends willing to refer me, it was upto me to apply to the right locations at the right time so I get an interview at the least (yes, it depends on my profile as well. I know that).",1593306037.0,2020-06-27 21:00:37
954,What skills do employers expect from an entry-level software engineer?,450,f3u42v,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/f3u42v/what_skills_do_employers_expect_from_an/,157,"Do employers expect entry-level SWE’s to be great at DS and A, design patterns, OOP, etc? I’d love some advice. Graduating with a CS degree in May

Also, when do graduates usually start looking for post-grad entry-level jobs?? Is now too soon?",1581724552.0,2020-02-14 18:55:52
955,New manager took over trashed me/sabotaged my work and ruined my reputation at my company after 1.5 years.,451,9f0cdy,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9f0cdy/new_manager_took_over_trashed_mesabotaged_my_work/,163,"I worked at a startup company for a year and a half and worked 60+ hours a week for them. It was just myself and my original manager who I got along with great.  But this manager that hired me quit and went to another company and a new manger was hired.  I stayed with the new manager and he seemed very nice to my face at first.  However, he hired his best friend, not long after he became manger, then started to give me the less glamorous work and he and his friend would work together and I would be excluded.  I noticed all of the business people who used to be my friends and who I used to help started to become distant. There was no team chat/bonding at all in any chat channels...that I was in at least.  I started noticing that my work would break alot more due to the infrastructure..that he managed.   And he and his buddy would always be the hero and pop in to fix it.  I recently quit because I realized how toxic it was even though I never had 100% proof how bad it was.  Just woke up this morning  and saw them trash talking me in a skype group they forgot to remove me from.  Just so upset right now. Lol.  A similar thing happened at my last job which was a startup as well. Is it me? Is the industry toxic? It's so frustrating.  I literally just want to do a good job and work hard, but tech is hard and deadlines are tight so my work not always 100% perfect and I feel like people jump on any bug to demonize the other developer and the politics are out of control.",1536721291.0,2018-09-11 23:01:31
956,Comp-Sci students/graduates who are not natural prodigies: How does your experience differ?,452,eyo4kp,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/eyo4kp/compsci_studentsgraduates_who_are_not_natural/,176,"Hey /r/cscareerquestions ,

I'm currently finishing my first semester of CS and wondering whether or not I've made a reasonable/feasible choice.

I find CS very engaging and interesting, but I struggle with a lot of the material. As in, I just don't feel like stuff such as maths and the basics of computer engineering comes natural to me. I barely manage to get passing grades in algebra for example, whereas others seem to just breeze through it and even get As. 

I'm doing reasonably well in programming and other subjects, but anything heavy on maths will have me struggle at least twice as hard as some of my friends (granted, I somehow ended up being friends with head-of-the-class sort of kids). 

I'm an older student and already have a degree in a foreign language which I excelled in. I guess you could call me a natural in the humanities,...


... but will this be worth anything when pursuing a cs-career? 

As in, will the payoff from hustling at least twice as hard as the maths-naturals be worth the struggle? Or will a cs-career always favour those who seem to be naturals at solving equations ? 

I hope some of you are in the same boat or know someone who is and can share some insights :)

**Mind, I am absolutely willing to put in the work; I just want to know whether or not I am wasting my time.**",1580840911.0,2020-02-04 13:28:31
957,I recorded myself doing a interview coding question fresh and explaining my thought process.,449,6ozkfm,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/6ozkfm/i_recorded_myself_doing_a_interview_coding/,58,"https://www.youtube.com/watch?v=cX0gFudEfz8

I don't see many examples online of people doing this in real-time. Most of what I see is the end state, but there isn't a lot of ""how did you get there"" explanations. Hopefully this shows some of the in-between steps and sets expectations for people practicing for interview coding questions.

Let me know if this is useful and I'll do more.

(FWIW, I conducted a few hundred interviews while at Facebook and now conduct it semiprofessionally.)",1500813762.0,2017-07-23 08:42:42
958,"Fort Benning was ok, calculus 2 was medium, LSAT was Hard but finding an entry-level React job is impossible.",453,em53r0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/em53r0/fort_benning_was_ok_calculus_2_was_medium_lsat/,192,"I have done about 80 phone interviews and for about 3 different companies I have moved all the way to like their 5th interview. Only to find out that I am a perfect fit for a ""Junior"" position and their feedback is all positive but they are looking for a more senior developer. Even after posting a 0-3year experience and interviewing me for a ""Junior developer position"", what I have seen so far in this industry is that knowledge does not matter nor desire to learn. It's all about the magical number before the word ""Experience"", maybe I am just ignorant when it comes to IT and every coder was born with experience from the 9months in the Womb.

Feels amazing to pass every code test and technical interview and get a rejected cause I am missing experience for an entry-level position.

so anyone can tell me what am I doing wrong?

also since I need to pay rent and nobody wants less than 23450 years of experience. What do you guys think of Revature?

it looks like they understand that entry-level means entry-level..",1578575759.0,2020-01-09 08:15:59
959,Biased ex-colleague torpedoes my candidacy at a big corporation which currently employs him. Anything I can do?,444,cveeqf,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cveeqf/biased_excolleague_torpedoes_my_candidacy_at_a/,188,"**The full story:**

Several years ago I worked at a medium-sized tech company. At a workplace get-together I met another engineer, we'll call him Benedict, who worked at a different organizational unit. We started chatting about our experience in the company and he seemed instantly impressed by the fact I was promoted twice within two years. Later he confessed that he didn't always have the necessary knowledge and skills to handle his current task queue, and we talked about how the company lacked a proper mentorship program.

I started asking him about the exact nature of his duties, and it turned out to be very similar to the work I've done prior to my promotions. So, I offered to mentor him informally: I gave him my email so he could contact me whenever he had questions or wanted my input on any sort of problem or challenge at work.

Benedict acted extremely grateful. He made use of my invitation several times over the next couple of years, and always wrote back appreciative comments about how much my informal mentorship was helping him.

After these two years I started interviewing with other companies. With so much explicit trust and gratitude from Benedict, I felt comfortable asking him to serve as one of my references. When Google asked me for references, I provided his name as one of 3 current co-workers who would recommend me.

Then something weird happened. My Google recruiter, who had previously told me I've done very well on their onsite, suddenly called to inform me they are terminating my process. 

In retrospect, I should have been extremely suspicious, but I shrugged it off as just a random misfortune. By that time I had offers from a few other companies, not quite as great as Google but still pretty good. I formally resigned my current role to attend all the remaining onsite invitations quickly.

Two weeks later I get a call from a former co-worker who moved on to a senior engineering role at one of those other companies where I've been interviewing. He wondered why I provided a reference that had nothing but extremely negative things to say about me. I was shocked. Turned out Benedict was describing me as a very poor performer who gets ahead by playing politics and manipulating better engineers. When I explained that Benedict doesn't even work in the same organizational unit and wouldn't know  anything about my daily work performance, my contact said that's not what his feedback reflected; on the contrary, he pretended to be intimately familiar with my ongoing work.

Confused more than anything, I called Benedict immediately, and asked him point blank if he was saying these things. The same guy who was ever so appreciative and grateful before, now took a few moments of silence, then hung up the call without saying a word. Probably the closest thing to an admission I will ever get from him, as I never heard from him again.

Fast forward to the present. I just finished another onsite with Google recently. My recruiter said feedback was ""terrific"" and all my interviewers strongly recommended a ""hire"" decision. Both her and another recruiter handling my candidacy rated my chances of an offer as very high. Then I got to the Hiring Committee and was rejected. I asked my recruiter how that was possible given my highly positive onsite feedback, and she only said that during the committee's discussion there appeared ""another source of feedback"" that caused this rejection. My spidey sense started tingling and I looked up Benedict online, only to discover he has been working at Google, at the same office where I applied...

Thus I strongly suspect it is Benedict who provided his usual negative and false review of ""my performance"" and killed my candidacy a second time.

Is there anything I can do about this?  Or should I just accept that as long as Benedict works at Google, I will be barred from one of the largest and best tech companies in the market?

**TL;DR**

A former co-worker I informally mentored and trusted has been providing extremely negative false reviews of my past performance. He currently works at Google and seems to be torpedoing my candidacy there. Anything I can do?",1566796771.0,2019-08-26 01:19:31
960,My thoughts on Revature after working for them,449,96yvtz,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/96yvtz/my_thoughts_on_revature_after_working_for_them/,158,"For those who don't know, Revature as a company trains you and then contracts you out to another company after training.

With that said, these comments are solely about Revature, not the company one might get contracted out to. It is difficult to comment on the contracted companies, because there are many of them, and you will only ever really see one. Additionally, when reading other reviews, you should know that Revature employees are required to sign a non-disparagement contract, i.e, an employee cannot write a bad review, and I believe they work with other companies to delete bad reviews of them on Indeed or Glassdoor. This is also why I'm posting here, because I believe my review is getting blocked from those sites.

Expect training to be rough. You're always at threat of being fired. Do you do your hair badly? Fired from training. Do you not speak super well? Fired from training. Do you maybe not get a job offering right away from a contracted company? Fired.

You better have savings in case you get fired. One batch saw their numbers go from approximately 25 to 18. Some people fired after the first week, some fired later on.

Speaking of money, their compensation is almost always $45000 per year after training, unless you go to Infosys. They only pay you $250 to move to the training location, and they only pay $500 for you to move to the client location after training. During training, you get 8/hr. After training, you may move often, including every 3-6 months. Can't say that it's the most common, but I've seen it happen. Revature will tell you this is super rare though.

So, unless you have savings, you’ll struggle to move your things. Hopefully you either own nothing or don’t care if you can’t afford to move your things.

**Now for the most scathing of comments**:

Their sales and accounts teams are absolutely terrible. They constantly lie. Telling misinformation is their bread and butter. ""You’ll get that information tomorrow"". Tomorrow comes, and nothing. Be prepared to get that spiel for a week or two. Be prepared to not know what’s going on when you’re speaking with these teams. It'll be wonderfully surprising how many times they'll be completely wrong, clueless, or downright mendacious.

**Finally, the best of Revature**:

The HR team. [names redacted]. Revature should look to HR to learn about how their employees should treat others.

**How to improve**:

Now, what should Revature do to fix these issues? I think Revature's goal is a good one, so my point isn't to simply shit on them without constructive feedback. I sure hope Revature learns from the following, because their business model is good. I enjoyed learning new material and being able to grow in my career, so here are areas to improve.

Moving: Revature, it’s no secret you’re hiring mainly fresh graduates. These are often people with little in savings and a lot in student loans. Surely you can’t expect someone to be able to move across the country on $500. One person I know spent $600 just on their flight to their client location, and that didn’t even cover hotel, more expensive food due to eating out, Ubers to their job due to being new to the area, etc. Overhaul this part of your organization. Find a way to help your employees move to these locations, and give them the appropriate amount of time to find an apartment. This may even be 1-2 full weeks. Treat your employees with respect, and they will be happy. Honor your contract that states you are to give 5 full business days for an employee to move. So many people complain about that. It's in the contract you're giving out. Stick to it.

Furthermore, be specific about where an employee is moving and how long they'll be there. Employees should not be lied to about this, as they'll just end up getting into leases that they'll have to break.

Training: People with little in savings shouldn’t have to worry every day if they’ll make it through training or become homeless or have to ask their family for help. Be more open about how someone is doing in training. Your private color coded grading system doesn’t help someone improve. QC (Weekly ~~interrogation~~ review by managers) doesn’t help someone improve, because you don’t give employees feedback. Feedback is key. Let an employee know what’s going on so that they can plan their future properly if they’re not doing as well as you’d like. They may be able to improve, or at the least, plan a way home without major financial ruin.

Compensation: per diem bonuses should be more nuanced. NYC, Boston, and SF are not the only high cost of living areas in the US. Consider a tapered system where cost of living is considered county by county or city by city so that people in cities like Seattle still get assistance, as Seattle is considered high COL nowadays too.",1534200324.0,2018-08-13 18:45:24
961,"I have basically pushed all my siblings towards CS, should I be worried?",441,kgsu3u,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/kgsu3u/i_have_basically_pushed_all_my_siblings_towards/,361,"Big family, there's 5 of us siblings in total. I'm a fullstack developer who is self taught. On one's self taught journey, you learn to be pretty good at tailoring resumes and projects to things that can get you interviews. I also interview pretty darn well. On to my siblings, one is unhappy with his career (depression level) and CS is one way out of it. He is now learning backend and DevOps on the side. Expecting to get him a job in around 8-12 months if he can put the same effort I did. One was an unmotivated HS student, convinced him to go to a ""trade school"" in the area that teaches CS. Very difficult program and workload but highly regarded in the industry here. Will be tough to get FAANG job but normal CS jobs should be pretty easy. He'll only need to study 2 years and the difficulty and workload should build his work ethic and character. I have two younger sisters, both don't really know what to do with their lives so I am suggesting CS in University. One loves arts but knows it really isn't realistic to provide for herself with. She's going CS if she can't decide anything better. The other is jealous of my lifestyle and is very eager to take CS. Both sisters are honestly way more studious and serious with studies so I feel they'll do well or atleast okay in Uni. I am mostly confident I can use my industry knowledge and own experience to guide them all, prepare them and get them jobs but this all eggs in one basket is starting to scare me.

I'm somewhat worried though for if the CS imploads like Lawyers and Business majors did. Our whole family will be in tech now... particularly worried about my career-shifting brother since I don't really know if he can get a job in backend as a self-taught initially like I did (I went Fullstack with focus on React but that was 3 years ago) or if the time for that has passed. The bright side is he'll have GitHub projects that would be very close to real industry standards compared to most other newbies though maybe I should just have him learn React and focus on it like I did too...

Anyhow, I'd honestly love some feedback, suggestions, reassurance or even concerns and alternatives. Thank you.

Edit: Wow, this blew up! Some clarifications, all my sibs are pretty smart and my sisters I honestly feel will be way more successful than me. My unmotivated brother should have initially gotten a retail job to show him how life sucks and give him some experience to mature but Covid threw that out the window. He has taken a semester at the trade school and is growing well. He did better than I expected given the difficult and heavy workload but also made some major mistakes with regards to time management, studying/paying attention in class and just general bad habits that a smart person could get away with in highschool. He'd have gotten A as his average if he did but B isn't so bad. I was expecting C lmao. My artsy sister... Yeah I was thinking (and told her) she can transition to UI/UX or even graphic design but she wants HAND PAINTINGS (Bob Ross) as her thing/hobby and doesn't seem to be too interested but maybe that will change. Her current gameplan is to work a standard CS career with her hobby on the side. Other sister I am not too worried about at all. My depression bro I am quite worried about since he is gonna follow my path of self learning and all those self learners out there know it's a difficult path.

Edit 2: My artsy sister is an amazing painter, I emphasize the hand painting part because she doesn't seem interested in digital art, atleast so far. Her current plan is to get a main job so she can fund her expensive art supplies for her hobbies, maybe transition it to a side gig and if opportunities arise, a FT job.",1608494059.0,2020-12-20 14:54:19
962,The job hunt is over!!!,445,ci4mzm,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ci4mzm/the_job_hunt_is_over/,84,"Well. I graduated in May from a small-time university in Indiana. Got accepted into 5 great graduate programs for CS, but felt like I was skilled enough to go straight into the industry and work, and also wanted to find a company that offered tuition reimbursement. Since May, I've:

\- Applied to **40-45 companies**

\- Had initial contact with **17 companies**

\- Had on sites with **8 of those companies**

\- Received offers from **4 of those companies**

**-** Was going to be happiest at **1 company**, which is the one that gave me the offer I accepted about 5 days ago :)

I had a 4 round interview process for an entry level position back in May (phone screen, call with team lead, portfolio review via Skype, 4 hour on site, phone call with team lead), all for them to tell me no. And when I got rejected it made me doubt myself and every decision I had made. Looking back, I wish I could tell myself it's all happening for a reason, and this is going to make you appreciate when you DO get an offer. Because you will, and so will everybody wondering if they will too.

The company I really wanted reached out to me 2 weeks ago when I was in light talks with 2-3 other companies I wasn't too excited for, but was willing to try it just to have SOMETHING. I went through their process, and put my other offers on hold because of how badly I wanted to work there. They scrambled within 24 hours to get me an answer due to the deadlines of the other offers, and I've never been so excited to move and work.

For everyone doubting themselves, don't. It's all happening for a reason, and there's a plan in place. Give yourself options, give yourself time to breathe, and don't compromise your health, because I did during this job hunt. All it takes is someone to take a chance on you. The salary offer is incredible, better than any other company could have offered along with benefits and a great work culture. It's been 2 months of lack of going out, bad eating habits, not going to the gym as much, and strained relationships with my friends and family, but now I can relaaaaax.

It'll happen for you, all of you who, who are doubting it. Let it happen, go through the struggle, and let your mindset mature. Woosah.",1564185339.0,2019-07-26 19:55:39
963,"How do you ""practice"" focusing on improving as a programmer?",444,fc67ei,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/fc67ei/how_do_you_practice_focusing_on_improving_as_a/,70,"Hello, everyone.

We all know how elite MMA fighters, swimmers, drummers, (you name it), practice. I'm talking about the _crème de la crème_ here. They all seem to have a clear path on how to achieve what they want: most of them say that improving your technique by repetition, doing rudiments, doing the same old boring gym session again and again until those things become your second nature is part (or the entirety) of this path.

What is the equivalent of this principle applied to programming? If there's even one... I feel so lost because I feel that I don't have this kind of clear, well-defined path as a programmer. The path where I know that if I do ""X"", ""Y"" and ""Z"" things, I'll be successful. Sure, hard work and a vision is important but my main problem here is what to do to get there. I don't have a roadmap and I don't know how to build one.

I have nine years of experience as a programmer and I'm far from where I want to be. I want to be great but, even after all this time working in this area, I didn't find the most effective way to ""practice"" or improve in the long term.

How do you even know that you're progressing? How to effectively measure the efficiency of your progress? And more important: how do you know that you're progressing to be one of the best?",1583150045.0,2020-03-02 06:54:05
964,"Struggling immensely at new job, feel as if I misrepresented myself",448,88isyl,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/88isyl/struggling_immensely_at_new_job_feel_as_if_i/,191,"Two months ago I accepted a new job at a company doing very similar work to what I was doing at my previous job (Java/Spring/Microservices/etc.). The problem is that while I was doing that at my previous job where I had 3 years experience it was more like having 1 month of experience 36 times.

My previous job (and first job post graduation) was at a large company with very low oversight, I would abuse their WFH policy (come in maybe 2x per week), and generally do absolutely nothing while I was there. Any tasks I completed were extremely menial in nature, and after 3 years I still didn't have a solid grasp on how the application was designed, or how everything works, etc. I legitimately spent <10 hours/week on work.

**I am a mid level engineer experience wise, but I am extremely junior level knowledge wise.**

Several months ago I decided to look for a change, and I studied up all the technologies at my job and made a bunch of tutorial/toy projects to get just familiar enough with the technologies to be able to speak about them in an interview (Sure, I can make these microservices and these rest endpoints for you, but I have no clue how to structure them in a larger project, no clue about security, or good design, etc.) With this, on top of grinding leetcode, I was able to land a new position with a nice pay bump where I have been for just over two months now.

**I have effectively bullshitted/conned my way into a mid level engineer position while having the skills of a fresh grad**

Since my tenure date here, I have these sorts of regular interactions fairly regularly:

- Coworker describes something in detail, I am completely lost. I end up googling/researching while I can feel the pressure from my boss/coworkers to get something done.

- Coworker comes by my desk to assist with an issue, I have extremely poor keyboard control (I know none of the shortcuts etc.) and they watch as I awkwardly manually fumble through the classes/etc in the project. 

- I am asked for my input in a meeting, and I am usually decent at deflecting direct questions but I can sense my coworkers/bosses patience with me is waning.

- In two months I have closed exactly 0 issues on my own. 

- In two months I still have a fairly poor idea of not only how the codebase works, but of how new features should be implemented. (Which package? Should {classname}Manager manage instances of this class? Is there any configuration changes required along with this? Does this class need a separate DAO linked to it? etc.)

- I spend hours of my free time outside work researching the technologies we use as well as implementing small tutorial projects, but it seems I cannot keep up.

- I have regular 1-on-1s with my manager where it is clear he is displeased with my performance and lack of output.

I made my own bed, and now I must sleep in it. I do not see my tenure at this company lasting much longer, I would be surprised to last another 30 days.

I guess I'm just venting. thank you for reading.",1522533726.0,2018-03-31 18:02:06
965,"Is Silicon Valley losing its reign? New data report shows Austin, Seattle and LA are more appealing for tech workers",443,7wvnfz,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/7wvnfz/is_silicon_valley_losing_its_reign_new_data/,275,"https://www.linkedin.com/pulse/announcing-our-third-annual-state-salaries-report-mehul-patel/  
  
With so many people circle jerking the bay area for bay vs COL or asking where to move to for a job I figured this data could be of some use.",1518412621.0,2018-02-12 00:17:01
966,What do you guys do during your notice period?,445,k9ujw7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/k9ujw7/what_do_you_guys_do_during_your_notice_period/,181,"Resigned from my first job. Currently serving notice period.

What do you guys do during your notice period?

&#x200B;

Meet with coworkers for the last time.

Use up any coupons type of things left.

Document the work so you can refer back to it.

Forward any chats so you have proof in case of a problem.

&#x200B;

These are few of the things that came to my mind. Interested to hear about other opinions. Looking for anything and everything, so weird suggestions are welcome.",1607558775.0,2020-12-09 19:06:15
967,"I find this work so interesting, I'm just not interested in it and I hate that",438,i9pkho,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/i9pkho/i_find_this_work_so_interesting_im_just_not/,145,"It's such a weird situation to be in. I work as a DevOps engineer at a startup and on any given day I learn a new tool/technology that I want to learn more about (like distroless containers, what spurred this post). But the second I start actually doing any meaningful research, my interest just wanes.

I can't even count the amount of projects that I've started, only to stop a week or two later.

A lot of this is due to the fact that I realize I'm just never going to be smart enough to even utilize al this tech in a meaningful way. Like I'll be looking through the kubernetes source code on GitHub and I see these crazy abstractions that people write and I just feel so out of my element. Like I wish I could be like a Linux kernel developer because the Linux kernel is so elegant, but I'm already 26 and a lot of the people in this field who have done great things have kind of already started doing it.

I feel like I'm just resigned to mediocrity forever. Is this a common thing or am I just in the wrong career?

Edit: Without going through and blowing up the comments, I just want to say every comment has been insightful and inspiring. I was nervous to post this but I'm glad that I did. Thank you all 🙏🏼",1597452688.0,2020-08-14 20:51:28
968,Rant about people's work ethics,435,7t72hl,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/7t72hl/rant_about_peoples_work_ethics/,129,"I got invited to a speaker series at a rather large software company, and I feel like some red flags came up about this industry, particularly the work ethic of software developers.

When the CEO was done talking, he opened the floor for questions. Among many questions, people had concerns like ""How do I deal with coworkers working less than 50 hours"", ""Can we get more projects pulled into our workweek"" and some other questions I can't remember, but made me lift an eyebrow.

Somebody asked ""how can I advance my career into leadership positions?"" and the CEO said to work long hours, be the first in the office and last to leave, and to continually improve on your skills in your free time...

WTF? I get working 50+ hours if you love your job, need the money etc. But why slam people who value life outside of work?
Why is the focus in this industry seemingly to climb the ladder at the cost of your personal life?

I had an internship this past summer too where my fellow interns chastised me for showing up early, putting in my 8 hours, and leaving at 4 each day. None of our work really relied on the other's work, and our manager even encouraged us to go have a life and leave by 4.

I'm really losing hope in a career in this field, just cause I wanna put in 40 and go enjoy life, but seems that's not accepted here.",1517024578.0,2018-01-26 22:42:58
969,How many of you have stayed at a company after telling them you got a better offer?,441,etejqo,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/etejqo/how_many_of_you_have_stayed_at_a_company_after/,148,"I'm currently in a situation where I'm working at a company I don't like, my skills are underutilized and do not get to work on what was promised. I recently got a offer from another company and put in my 2 weeks with my employer. My boss came back to me with a counter offer of an additional $10K on my salary, plus more opportunity to do the kind of work I want to be doing.

I'm curious, how many of you have been in a similar situation and actually decided to stay with your current company, and renege the new job offer? What was that like? 

I can't image actually doing it, to me it feels like when you breakup with your partner, then they desperately try to get to stay with them. I don't think I could do it because I've told my boss and co workers that I don't enjoy working here, and I feel like it would be very strange to stay at this point.",1579919970.0,2020-01-24 21:39:30
970,Lyft Offer and then Rejection,438,dma6iv,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dma6iv/lyft_offer_and_then_rejection/,288,"I got an internship offer from Lyft less than 2 weeks ago, with a 2 week deadline to accept. I was fully planning on accepting tomorrow, to maximize the chances that I heard back from other companies. I got an email from them today where they rescinding their offer, as they ran out of slots. What should I do in this situation? This was by far the best offer I had, and I feel cheated in that my deadline to accept didn't even run out.",1571913824.0,2019-10-24 06:43:44
971,"My employer trying to get me to work unreasonable hours and said some alarming things to me, I need help",441,cus4vb,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/cus4vb/my_employer_trying_to_get_me_to_work_unreasonable/,113,"Hi, this is my first post on reddit ever, so apologies for any mistakes you may find.

&#x200B;

I live in a North African country, so third world rules, laws and salaries apply here. Almost two months ago, I was hired as a Webmaster/Social media manager for a small company. On the interview, I agreed with the company owner on a 8 hours 5 days a week schedule, and a bit bellow average salary. I only had a few months of experience in a previous webmaster position, and 6 years of freelancing as a web developer during university and after my graduation.

&#x200B;

The company has no online presence except an ""Under construction"" website, even though they've been around for 10 years, and they started as a digital agency before changing industry to Engineering few years after. So, I had a huge responsibility thrown on me as a junior Webmaster. The owner has no vision or idea as to how he wants his websites (they need 3 different websites), we had a couple of meetings regarding them, and all he said to me was I want a website that makes people say ""wow"". The owner is hardly available and his second in command is honestly useless, as he hardly gives me any directions and seems like he couldn't care less.

&#x200B;

I took initiative and started making designs for a typical Engineering company, with very little content and information regarding the company (I literally spent the first month not knowing exactly what they do), while chasing down their employees for whatever information I can scrounge. Few days ago, I presented what I made and he started ""jokingly"" mocking my work, and not letting me speak or explain why I chose that design. I chose a dark gray, white and blue palette, but he refused it saying that blue is outdated even though his logo in entirely blue and I chose blue to go with it. He then went to mock some other design choices I made and the website's structure (remember he gave me nothing to work with), with two other employees laughing at his bad jokes. Then he said he still doesn't have a clear idea on how he wants the website, then went on to show me some websites for inspiration that were designed/structured the same way I did.

&#x200B;

After that, he went on a tirade about how to succeed one must abandon his social life and dedicate all his time for work, and that he's looking for employees to spend days and nights and weekends on work and work from 8 to even midnight non stop, not for employees that work from 8am to 4pm (which was the schedule we agreed on). The cherry on the cake was at the end he said that he gave me an opportunity as an inexperienced developer, and should compensate for the lack of experience by working longer hours and on weekends, and that ""I should say thank you to him for this opportunity"". 

&#x200B;

I talked to a couple of friends about it, some said to confront him immediately and quit if he insists on that mindset, and others said to give him a chance. I need help please.

Edit: I'd like to thank everyone for their help and advice, and apologize if I didn't reply to all of you.",1566673913.0,2019-08-24 15:11:53
972,"Please help me, coworker found out my salary and now the very evident strains of jealously and sabotage are ruining my dream job.",436,9d29vw,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/9d29vw/please_help_me_coworker_found_out_my_salary_and/,266,"Hi CSCQ,

Hope y'all are doing well - I'm trying my best but I'm not.

The past 1.5 years, I've been working super hard at my dream company and have been thoroughly pleased with my team.

Unfortunately, 2 months back, one of my team members got a hold of some HR data and found out my salary.

Gossip spread fast and now all 3 of the team members at my level are visibly acting differently around me. Cold shoulder treatment, ""forgetting"" to invite me to one of our team member's birthday celebration, etc.

They're careful enough to reply sufficiently enough to my inquiries to do my tasks, but all effort and interaction with me now looks at a bare minimum.

I don't know their salaries but I know that at least he knows mine (he came up to me and said, ""Damn dude, you're making $105k?!"") - I asked him how he knew and he avoided that question and instead said, ""Fuck, I'm just so unlucky."" and walked away.

The social stuff is fine. I don't really care if they want to talk to me or not. 

It's the event that transpired today which really pissed me off.

I was assisting a guy with a deployment and was due for a run-of-the-mill meeting, but Jenkins was acting up so I had to step in a few moments late (I was 7 minutes late). 

Unfortunately, at only 4:03 pm (3 minutes after the start of the meeting), one of my seemingly more affected coworkers emailed me to ""remind"" me about the meeting, and CC'd the whole team, the PM and our boss.

> ""Hi $fuckme30, the <weekly-meeting-where-we-talk-about-our-pets-at-home> starts at 4:00pm weekly and we don't know if you had any intentions of showing up. Attendance is mandatory, so please promptly make it to <meeting-room> or promptly let us know you won't be able to attend. Timeliness is pertinent. Thanks!""

(Yes, she said ""promptly"" twice.)

Mind you that this sort of stuff never has been done - especially in situations where others have been late even more including her.

She look like a child in this situation given she's also the same level as me, but I feel this will be the beginning of many problems down the road.

Peer-reviews are going to be done at the end the month and I'm honestly worried about them lying.

I don't and really can't be in a position to leave, but what should I do?",1536144066.0,2018-09-05 06:41:06
973,"Besides ML/DS, what are the most sought after and needed jobs in tech? Are there any roles that aren’t hyped up but are climbing in importance that people should look into?",437,jdjvek,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/jdjvek/besides_mlds_what_are_the_most_sought_after_and/,192,Just curious to see what everyone thinks about this. Seems like so many people are trying to get into ML and data science and the fields are so hyped up so I was wondering what other areas people should consider,1603069369.0,2020-10-18 21:02:49
974,Why is everyone so keen on machine learning?,433,ipc4a6,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ipc4a6/why_is_everyone_so_keen_on_machine_learning/,235,"I'm currently doing my masters and I'm taking all the machine learning + infosec subjects because it's interesting and I've heard it pays well. In every single hackaton, and in non-machine learning subjects, everyone seems to always want to work machine learning into it. These machine learning models tend to be pretty simple variants of off the shelf models on tensorflow. I get the application of ML in some things (NLP, image processing), but do you think most problems can be solved more efficiently with ML than most other algorithms?

From people who work in the field, how much more advanced do you need to get to what we're doing in class? I'm getting quite uncomfortable on wether I'm learning enough to become employable. Is it more you need a phd and cutting edge research to get the real high paying ML jobs?

&#x200B;

Also, do you think there is going to be a surplus of machine learning engineers? Pretty much everyone in my course is trying to do it.",1599669018.0,2020-09-09 12:30:18
975,"No Longer Hirable In Software, What Other Career Options?",441,h82ua9,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/h82ua9/no_longer_hirable_in_software_what_other_career/,296,"I am stuck in a city I don't like, Nashville, TN and lost my business of 15+ years. I had a small dental software business that collapsed after years of struggle and flatlining due to Covid Pandemic.  I will be leaving Nashville and trying to find some place in this crazy world and horrible economy that could have more jobs. Nashville's economy really has gone into toilet due to poor management and the fact the city is starved for tourism which was a huge part of its economy.

I have 20 years of software experience, but it is mostly doing Application development and don't have really any professional web experience, despite spending a couple years studying various web technologies and getting a good feel for them.

A few of recruiters I talked to in Nashville have pretty much come to the consensus that I am not hireable in this city.  They tell me that I need at least 5-10 years of professional web experience to get any type of software job in Nashville.  Nashville does not have a great job market and even worse now with the Pandemic.

I have about 20 years of experience, but it is mostly with develop desktop applications.  I had a dental software business for the last 15+ years that was struggling in the last few years and pretty much tanked with the Pandemic.  So, now I am pretty much just tossed back onto the job market after so many years. The problem is I have not developed any web applications professionally.   Most of my experience is using C#.Net, VB6, C++, Win32 and other technologies, some that are from antiquated frameworks, especially my WinForms UI stuff. I  also do have some database experience.

However, it just doesn't seem to make any recruiters happy and I basically have to lie and say I am an experienced web developer to get any interest.   They seem to disregard my skills of so many years of developing very complex and life critical medical type applications.  It's discouraging.

I have interviewed at Microsoft a while ago and even though I did well in the personal interview I crashed during the whiteboarding which was complex. One interviewer was a PhD from Yale.  I wonder if with my lack of web background , if I should just give up on web development and crunch algorithms/DS, computer science stuff for next year and prepare for one of the larger companies who do seem to hit me up time to time.  I've kept my LinkedIn and resume on low profile because I just don't feel ready for interviews.

I;m also wondering at 42 years old , with some disabilities (bad neck/back, but still can work long enough hours) and the fact I have not been in the software market for so long means I should just throw the towel in and quit software.

Sometimes it just feels overwhelming and I just cannot see myself being hired as a full stack web developer anytime soon.  Seems like they want a massive amount of requirements and experience I don't have.  Also, I need to get more in tuned with corporate and team stuff.  Worked pretty much solo for many years.   Was also thinking of getting into DevOps/SRE (which some say is a career in itself) and other things that may make more desirable on corporate level.  Sadly ,even these jobs seem mostly to want highly experienced people.

I have been spending quite a bit of time studying [ASP.Net](https://ASP.Net) Core, Web Security and ReactJS and Javascript.  I do feel i have a good handle on it, but how and should I lie that I am not a senior web dev, but have many years of experience?  It seems they only want people with 5-10+ years of web experience.

As well, I was learning some Linux and thinking about picking up AWS.. Just takes time.. I would like to start a real life portfolio project, but will have to work a part-time job washing dishes maybe while I do that since I am running out of money.

So, at this point I am wondering, should I:  


A. Throw the towel in and give up on software.  Some say at 42 not having lots of web and corporate experience means your days are finished..  Is there any alternative careers for former software people who are not really hireable as developers anymore?

B. Try to Go to Big Leagues As Back-End/App Developer and study Algorithms, Discrete Mathematics, Coding Puzzles, Whiteboard stuff for next year or two? I do have Cormen book and lots and lots of courses.   I know this is required for the FAANG jobs.  But the interviews are brutal.  Even then I worry about my lack of web experience.

C. Try to somehow pitch myself as a web developer or seek some kind of JUnior Web position and keep studying ReactJS and [ASP.net](https://ASP.net) Core?

D. Go into DevOps/SRE type of career

&#x200B;

Appreciate people's advice here and help.. I am going through rough times... Yes, I do have a LinkedIn profile and even a GitHub page with some open source projects..",1592061832.0,2020-06-13 11:23:52
976,Just want to thank this sub from the bottom of my heart,439,aeeexd,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/aeeexd/just_want_to_thank_this_sub_from_the_bottom_of_my/,60,"Finally got employed full-time for post-grad after 6 months worth of grinding through Leetcode, CTCI, and failed interviews. FYI my major in school isn't CS, so I definitely had difficulty in my initial interviews as my DS/A skills are definitely weaker than those of my CS major peers. My GPA isn't that high either, so I was definitely stressing nonstop.

Got rejected from endless startups and other companies but kept my mental and persisted through an interview cycle at a Big N to be greeted with news that they'd extend me an offer today :)

For those of you still struggling to find employment in this competitive field, it's not over lol. Never think it's over. I thought it was over in October as all of my friends were accepting prestigious internship and full-time offers. Just believe in yourself and don't listen to people who say you'll fail. If you fuck up an interview, take the time to learn what you could have done better and reflect on what you can improve upon. I failed 5 interviews at the 2nd/final rounds before this offer lol. My mental was in the dumps, but I watched endless motivational videos on Instagram, read a bunch of motivational posts on this sub, and stayed on the Leetcode grind (lol cheesy ik) to keep me going. Even if you fuck up, it's never too late to break into this field. Stay on the grind. A lot of the advice/interview tips on this sub have been very helpful, but don't dwell on what's out of your control (post-interview decision). Keep focusing on improvement!

**EDIT:** To prepare for this interview and other tech interviews, I mainly used these resources:

1. Steven S. Skiena's *Algorithm Design Manual*
2. Gayle Laakmann McDowell's *Cracking the Coding Interview, 6th edition*
3. Leetcode

Out of these 3, I would definitely say CTCI and Leetcode are the most important. However, if you feel that your CS background in Data Structures/Algorithms isn't that strong (like I did), I highly highly recommend reading Skiena's *Algorithm Design Manual*. It is a brilliantly written text that gives a high level overview of a lot of important problems in CS and important problem solving concepts and approaches. It really makes you think about how you approach a problem, the importance of stating and clarifying assumptions, and it gives you an arsenal of tools so that you can approach almost any major problem in CS and know what to do with it. It makes you realize the importance of graph and tree problems as well, which came up in around 40% of my interviews. Don't skip the first few War Stories either! They are pretty interesting and give you a good example of how to apply CS to real-world problems. They introduce some pretty common CS problems as well (finding power set, subset sum problem, edit distance problem, etc.)

For practicing questions, do questions in every chapter of CTCI if you have the time, but if you don't have time, then do the questions in the first few chapters (Arrays, Strings, Stacks/Queues, Trees, and DP/Recursion). If you don't have time for even this, then just do Arrays, Strings, and Trees (The problems in the Trees/Graphs chapter are essential and pulled me through the final interviews for this company). Then, spend a lot of time struggling on the questions in the Medium and Hard sections in the back of the book. These questions are very popular and most of them have been ripped to Leetcode as well LOL. Big N will ask a variant of these questions for at least 1-2 of your interviews. I alternated between CTCI and Leetcode on different days based on how I was feeling, but generally started to do more Leetcode closer to the interview date and when I believed my fundamentals were strong enough. Leetcode has all Big N questions sorted by company if you get a premium subscription (which I did, and is very worth). From memory, at least 5 Leetcode questions and their variants have shown up in my interviews. You can sort by question type too (Strings, Arrays, Trees/Graphs, Recursion, DP, Backtracking, etc.), so I think Leetcode is an immensely valuable resource.

Do the top 50 or so questions for the company you are trying to go for and make sure you know the answers well. Focus on medium mostly once you're decent at coming up with easy level solutions in less than 15 mins but make sure to squeeze in the popular hard ones as well (LRU Cache, Serialize Binary Tree, etc.). Know BFS/DFS by heart. Keep doing the popular questions that you've seen before as this pays off a lot in recognizing similar questions in interviews.",1547115875.0,2019-01-10 05:24:35
977,Does anyone else in here feel like they just won't make it?,437,a8jk99,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/a8jk99/does_anyone_else_in_here_feel_like_they_just_wont/,230,"For once, I'm asking not to those that have landed their dream offers, not those that have had the most exciting internships, not those with 6 digit jobs salaries at top tech firms, I'm asking if there are people like me: people in college with lots of side projects, maybe a previous internship experience (not a very exciting one, maybe it was underpaid at a boring small company that didn't have nothing to do with tech, but you took the sacrifice because you could program, learn a few technologies, add it to your resume and hopefully help you land a better internship next summer in this job market full of internships that require previous internship experience), good at coding challenges and white-boarding questions, good GPA, love and do well in your CS classes, and yet.... have received nothing but rejections, for a very long period of time. Not tens, not hundreds, but probably close to or beyond a thousand. Those that have applied to thousands of internships, gone through hundreds of interviews, have even made it to final on-sites a few times, but still haven't been able to land an offer. Those that enjoy being at a top tier CS program but yet pay the price of being surrounded by people who constantly brag about their offers from Google, Microsoft and Facebook, while being rejected from all three and feeling extremely inadequate. Those of us that are extremely scared for the future, who feel like we'll graduate and never land a job in this hyper-competitive (and quite frankly, moderately nepotist) job market, and we'll be jobless with an expensive degree and will never be able to do what we're passionate about? Am I as alone in my situation as I feel I am? Is everyone around me as successful in this field and an I as inadequate as I think? Or are there more of us??? I need to know.

Edit: I'm not really looking to be told that I'm doing something wrong. I've done everything, mock ups, had my resume reviewed by as many people I could find, hacker rank, leet code, cracking the coding interview, etc. I've overanalyzed every interview and every response. I JUST want to know I'm not alone. That there's people out there like me genuinely trying their best but still not succeeding. I'm just very discouraged from watching people seemingly effortlessly land big things while I try so hard for nothing. ",1545499952.0,2018-12-22 12:32:32
978,Senior Dev of 20 years advise to new devs (x-post from /r/learncsharp),442,55taaf,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/55taaf/senior_dev_of_20_years_advise_to_new_devs_xpost/,57,"Hello.
I'm guessing a lot of you are learning C# or any other language and hoping to get a job in the field, or indeed, starting a new job soon as a junior developer.


I have worked in software development for a long time. I am 39 years old and I started work as a Visual Basic developer when I was 19. For the record, I have no formal qualifications in software development, it's all experience for me. Personally I feel that if you have a passion for something then that's the most valuable qualification you can have, and of course a willingness to learn from the experiences that get thrown at you.


I currently work as a Senior Developer for a clothing retail company in the UK. I have also worked for local government, large multinationals like PepsiCo and Unilever (via a sub contractor) and web hosting companies developing automation systems. As it stands I am working purely as a developer but in the past I have also been involved with networking and network architecture.


So I'd like to share a few tips for the new guys. Nothing can be more daunting when moving into a new job, especially where the job requires technical expertise. I suspect many of you are worrying that you might not have the required skill set or that you might let down your company in some way.


The first thing I'd like to say is this, everyone is learning. All the time. There may be people in your company that are really clever and are turned to by others for advise and guidance, but I guarantee they don't know everything and they are constantly learning too. When you start your job you'll be picking things up all the time and it will feel quite hard to take it all in, but don't worry, if you don't know about something, ASK. Ask as many questions as you want. If you are unsure, don't nod your head, get clarification. This is key to confidence. Also it is key to being trusted. Once you are clear on a subject then it's easy to be confident and you'll gain the trust of your colleagues. So make sure you ask plenty of questions.


Don't be afraid to input ideas. You'll find that a lot of development work is actually discussing and working out what to do about a problem or how to go about designing some new software. Get your ideas out there, get feed back. Even if your idea is not adopted, the feedback from your ideas will help you learn. Take it on board and use it to advance your knowledge. Like I said, everyone is learning.
Forget syntax. I defy anyone to know every syntactical nuance in C#. It's impossible so don't even try. We have a wealth of resources at our disposal. Google is one such resource.


Learn some common coding patterns. For example, take a look at the Entity Framework Repository pattern. A very commonly using coding pattern and it's likely you'll encounter it.


Get up to speed with unit testing. It's likely any software company worth their salt will employ a unit testing framework. So get to know some common ones like NUnit.


Submit yourself to the code review. If you've done some coding, make sure you have other developers check it out. Get feedback. Learn.
Adopt to business practices at first, don't try to change them at least not yet. Software companies tend to employ Agile project methodologies. The implementation of Agile can vary from company to company and it can change from time to time. Go with the flow and get to know the process. Submit ideas to help improve it.


For a new developer it's important that the other developers see you as a partner rather than a hindrance. So ensure you are giving feedback as well as receiving it. Show that you are willing to learn and do a good job. Communicate. I've worked with new developers who are just too shy and have ended up doing the wrong thing or produced bad work simply because they didn't ask enough questions or get involved.


You will enjoy being a developer. I still love it after all this time. If you feel that you are falling out of love with your profession, do something that YOU want to do as a side line. Make a new tool, refactor some code, produce something for yourself. Just stay enthused.


I hope this helps.


Edit: I'm really pleased this post has inspired and helped some people here and thanks for the PM messages. It's easier for me to answer then via Skype, so if you'd like to get in contact please PM me your Skype address and I'll add you. Thanks again. I'll try to reply to PMs in the mean time though.",1475613804.0,2016-10-04 16:43:24
979,Front end dev here. What can i do or branch into to secure my future?,435,g4acn0,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/g4acn0/front_end_dev_here_what_can_i_do_or_branch_into/,185,How can I make myself invaluable for the next 10 years? What skills should I be working on? Should I dive into full stack or just get really good at frontend and stay at the cutting edge? Should I get a masters and get into more niche areas like computer vision or just continue to rake in experience and job jump every few years?,1587341884.0,2020-04-19 20:18:04
980,Red flags when searching for jobs?,440,by84mr,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/by84mr/red_flags_when_searching_for_jobs/,197,What indicators do y’all look for when searching for jobs that a company might be a bad place to work? Is there anything a current job seeker should watch out for in job postings or interviews?,1560030407.0,2019-06-08 17:46:47
981,How do you work solidly for 8 hours in an environment where everyone can see your computer?,442,auapg7,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/auapg7/how_do_you_work_solidly_for_8_hours_in_an/,186,"Honestly,

5 days a week and 8 hours a day slogging away on a computer?

Right now I work in a cubicle so I can slack and take breaks.  But those of you in an open concept, do you really work 8 hours non-stop?

It seems ridiculous and impossible.

I take NUMEROUS breaks to text friends and surf reddit/facebook.  It actually improves my performance for when I AM working.

I probably get more like 5 hours done per day.",1551061094.0,2019-02-24 21:18:14
982,On the common advice in this sub to quit at any small inconvenience,437,asnvtz,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/asnvtz/on_the_common_advice_in_this_sub_to_quit_at_any/,127,"Lately I've seen when OP has asked a question regarding some inconvenience or conflict at work, the common advice is to ""lol quit"" or ""just quit"" etc. 
I've career switched into CS from a much less mobile field and I am now working full-time as a software engineer. It feels empowering to know that job hopping can be a great way to advance my career and get new experiences.
However, I don't think quitting should be the first option an engineer thinks of when presented with some conflict at work.
As a SWE you're going to end up interacting with a lot of people who don't get your job entirely. (i.e. managers using git commits to track time). Being able to navigate and communicate these interpersonal office conflicts is invaluable. I think a bigger importance on improving the OP's soft skills with regards to office politics should be emphasized. 
In my previous career I had to deal with many interpersonal conflicts with managers and different stakeholders. I've been more successful than some of my new grad peers just due to the office social skills aspect. 
Learning to stand up for yourself, knowing your worth, and communicating your concerns with your manager in a professional way, will help you so much in the long run. 
On the flip side, being able to see when you've got all the value you can at a company and are ready to move on, is a skill in itself.

What're y'all's thoughts on the advice to quit that is often given out on this sub?",1550695302.0,2019-02-20 15:41:42
983,Can i get fired for being introverted?,434,ac0t0c,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/ac0t0c/can_i_get_fired_for_being_introverted/,184,"I think i do an ok job as a developer, do my tickets on time, don't have a lot of flaws in my code while i'm getting reviewed, most of the times meet deadlines. However i'm sort of a social outcast on my team, i'm a very shy person, they usually hang out and joke around and i'm never part of the conversation, i never get their jokes, the atmosphere around me is always very cringy because of my personality and they always feel uncomfortable around me, i can tell that they don't like me very much. I was wondering if this could eventually be a problem for me at work.",1546511036.0,2019-01-03 05:23:56
984,I find it quite shocking that C++ jobs don't seem to pay as much as JS/Python/Mobile dev,433,8cd4kb,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8cd4kb/i_find_it_quite_shocking_that_c_jobs_dont_seem_to/,269,"I've been an iOS dev for 5 years but I was feeling like I'm getting too tied down in one language/ecosystem so I thought about expanding. Then a C++ job offer came tumbling my way and now I'm thinking of whether to take it or not.

While this job comes with a ~30% pay bump, I went looking around and noticed that C++ jobs typically pay ~70% of what Android/iOS/Node/Django/React job listing say (in the same regions). Go look it up on AngelList, SO Jobs, LinkedIn, pretty much everywhere.

I only know kiddie C++ from college, I always imagined ""real"" C++ (C++ 11/14), given that it's so much more difficult (not difficult per se, just in comparison with) python/Java/Javascript, that it should pay significantly more.

Who would want to work harder on something far more complex for lesser money?

What I'm getting at is, is C++ a viable career option in 2018? 

Yes, I know

> C++ isn't going anywhere

and 

> ""real"" systems where ""performance matters"" like operating systems, firmware, embedded systems, server tech, core machine learning tools, audio/video/graphics/games related stacks etc will continue to use C++ for the foreseeable future

I get all of this, but I'm starting to wonder the actual viability of finding a decent paying job in C++ when the world is practically overflowing with job openings for web/mobile-devs/data scientists etc. I know C++ isn't going anywhere, but why does it not seem to have high(er) paying jobs compared to these?",1523797201.0,2018-04-15 09:00:01
985,The ammount of cheating that goes on in my class is why it's so understandable to me that side projects are important.,436,77fibi,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/77fibi/the_ammount_of_cheating_that_goes_on_in_my_class/,240,"I'm taking CS 2 (OOP) right now and the ammount of people in my class who cannot do simple things like trace errors and make for loops is amazing. I had one guy ask me how I was so good at programming. (I'm not particularly experienced, but I can keep up with the class without cheating) I asked him how he got through the first class and he said that he copied off his friends, which everyone did for projects, and then barely passed his tests which allowed him to transition to the next class. At that point I noticed this whole network of people who were copying off each other. On the one hand, I'm pretty sure that a lot of them will drop out in the harder classes, but I can definitely imagine some of them making it through. This is at a Community College. ",1508459032.0,2017-10-19 20:23:52
986,"Middle aged man in panic, need to learn the basics, where to start?",432,d35quq,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/d35quq/middle_aged_man_in_panic_need_to_learn_the_basics/,271,"Hello,

I’m not too familiar with Reddit but a friend pointed me to this. 
Basically my situation is that I have been working at my current company for over 10 years, we’re mainly a Microsoft stack company so most of the projects are in c#/.NET, my role is Senior Software Developer. 
The owner wanted to retire and sold his company so a much larger company here in the city. They came and did interviews with everyone to see what the skill level was. I did really well in general knowledge and architecture type questions but I totally failed when they asked me to a few array/datastructure problems.  It was on Codility. 

Basically after that they told me I need to drop down from Senior to regular developer, because my skill set doesn’t match up with their expectations from a Senior, this also comes with a drop in salary. 

I tried interviewing with some other companies here but I gave up after they also asked me to do the data structure type of quizzes. I just don’t know enough about it. 
I never had formal education and just rolled with it and learned a lot on the job. I’m a bit startled and have no where to start and be able to pass the interview questions. I’m not sure if anyone can give me some pointers.",1568311847.0,2019-09-12 14:10:47
987,90 % of students in my CS program are hired 6 months before graduation. Salaries are not competitive. How?,437,8o7zfz,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8o7zfz/90_of_students_in_my_cs_program_are_hired_6/,421,"This may come off more as a vent than an actual question, but this stuff irks me to no end. I get green with jealousy reading about my American counterparts who chase their dreams in the Bay Area, honing their interviewing skills and perfecting their resumes for the tech giants. If you work hard and impress the right people, you can cash in big money and live awesome lives. I have no trouble understanding why you get out of bed every morning. The US seems like the greatest country on Earth for ambitious people with hot blood running through their veins.

I, however, I live in Scandinavia and doing my final year in a 5 year CS+MBA degree. The market dynamics here seem bizarre compared to the US. Open up any textbook in labor economics, and you can read plain as day that high labor demand generates higher wages. This force of nature is absent here, and I don't get it.

My MSc program is a good example. We are ~150 students per year. The demand of new graduates from my program is **high**. **9 out of 10** students accept a job offer before Christmas in their final year. **1 out of 5** students accept a job before their final year. Companies are outbidding each other to book days for on-campus recruitment, making our student body a **million dollar business**. Each and every year, we are invited to about **60** 
different restaurant dinners by various recruiters who want to buy us food, wine, beer and liquor and get us talking.

After we are hired, we work 46.33 hours per week on average, and average new grad salary is 66,800 USD. Nationwide average graduate salary for MSc is 52,800 USD, with a ~37.5 hour week average. This makes the hourly wage of my MSc 2.44 % higher than average MSc (for all fields) hourly wage. **However, after you adjust for income tax, my MSc yields a -0,024 % lower hourly wage than average MSc.**

*Where* is this disparity coming from? *How* is it that I live in a country where companies invest so much resources into recruiting us, but so ~~little~~ much less into actually paying us? Is this a known phenomenon to any of you? 

&nbsp;

^^^I've ^^^pondered ^^^it ^^^a ^^^fair ^^^bit ^^^myself, ^^^and ^^^it ^^^always ^^^boils ^^^down ^^^to ^^^that ^^^I ^^^live ^^^in ^^^a ^^^part ^^^of ^^^the ^^^world ^^^where ^^^no ^^^one ^^^have ^^^balls ^^^to ^^^negotiate, ^^^and ^^^where ^^^the ^^^egalitarian ^^^culture ^^^is ^^^so ^^^strong ^^^that ^^^being ^^^paid ^^^well ^^^makes ^^^you ^^^evil.

EDIT: A little anecdote to underpin my narrative of high demand. The application spamming I see on this sub is completely foreign to me. 50 applications and no internships? 100? 200? I've never heard of someone applying to more than 10 companies in a single internship season. We are all hired, every summer. ""Every"" student is fully booked for the next summer by the end of September, and it rarely takes more applications than you can count on one hand. I've sent seven applications in my life, and no, I'm not some kind of super student. I have no personal projects, just an average GPA and my previous internships. This is something you would expect to observe in a hiring market that is on fire.",1528054653.0,2018-06-03 15:37:33
988,Accidently sent my recruiter a kiss emoji ( :* ) instead of a smiley emoji ( :) ),435,72zuvn,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/72zuvn/accidently_sent_my_recruiter_a_kiss_emoji_instead/,234,"I was scheduling my interviews with my recruiter yesterday and I was pretty excited since it was a really cool company. While I sent her my availability, I appended a **:*** instead of a **:)**,  **accidently** with no intentions of flirting with the recruiter, and I just realized it after I re-read it this morning. I'm really worried that she might get the wrong signs from me and think I might be harassing her and wasn't serious about interviewing. This has become really awkward and I'm not sure how she would respond to this. Is there anything I can do to make up for the typo? It fears me that I would get blacklisted or banned from interviewing in the future for this company or am I just overthinking this?

**EDIT:** **I emailed my recruiter yesterday with an apology and saying that it was a typo. I still haven't received any responses yet. It's been exactly 2.5 days since I emailed her the infamous emoticon, this is only increasing the tension.** ",1506631851.0,2017-09-28 16:50:51
989,Back on the leetcode after 4 years...it's awful,435,gxjh9e,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/gxjh9e/back_on_the_leetcode_after_4_yearsits_awful/,322,"I've been promoted 4 times at my company (Bay Area, Large, you'd probably know the name...) and have made it to be a Senior Engineer after joining as an entry level straight out of college. It's time for a switch and I have interviews lined up at a few big names in the next week or two.

I started hitting the leetcode, thinking it can't be that hard...and boy was I wrong. These are tough. I can do most medium in a half hour or so, but only naive solutions (n^2). I'm fairly nervous for the interviews now, and don't think I have given myself enough time to prepare.

I'm also shocked how little I remember/have used most if not all of these techniques in my professional career. Has anyone been in a similar boat? Any advice?",1591442897.0,2020-06-06 07:28:17
990,"I don't like working in CS, but I really liked studying it and coding. What job would best suit me?",435,dfetdb,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/dfetdb/i_dont_like_working_in_cs_but_i_really_liked/,143,"I studied STEM for five years to get a Masters in Computer Science (scholarship), and I've been working now for two years as a Software Developer.

In those two years of working, I've found out that I hate working in the area with a passion.

Oh, I still love writing code and programming. But working in a company: there's something about taking something I love, a hobby, a passion, and seeing it corrupted by company people that just want to use it for money and only care about low-ball budgets and deadlines. 

Working in software development has ended up being completely different to what it was like studying it. The people are different. Instead of being around bright-eyed gee-whiz nerds, I'm surrounded by (snake oil) salesmen and managerial types that love to twist the words said by technical folk. 

I also consider my work unethical and I'm disgusted with myself for what I do. I found a job as a Full Stack Web Developer. Everything is REST APIs these days. And I'm working on web application systems that use REST APIs to on-sell your browsing interactions, so that everywhere you go you can be stalked by big data and machine learning-generated ads of what you just viewed.

I hate my life now, and I can't understand how it turned out this way.

Is it just that I'm in the wrong area? Maybe working for ""The Company"" or Web Development is not for me, although it's where all the jobs and big money are - at least it seems in Australia/NZ.

What sort of CS job would recapture the feel of what it was like in university - coding for coding's sake, and being with like-minded tech nerds pushing each other to be the best?

* Should I be aiming for specific companies for my next job? Are there companies with that sort of culture, like Microsoft, Adobe, Google? 
* Would academia jobs better suit me? But I found, doing postgrad, that it was also heavily bureaucratic (spending more time fighting for grants and gaming paper publications to ""publish or perish"") 
* Are there certain areas of work that would better suit me, e.g. instead of Web Development specializing in Computational Graphics?",1570643619.0,2019-10-09 13:53:39
991,What are some intern dos and don'ts? What makes an intern stand out in your eyes?,436,bc0yyd,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/bc0yyd/what_are_some_intern_dos_and_donts_what_makes_an/,104,"As summer approaches, it gets closer and closer to intern season. I’m sure many of you will be getting a fresh wave of interns in about a month. What is some advice you would give the new interns so that they walk in and get as much out of it as possible while benefiting the company as well?

1. What should they do to prep for their position?
2. What are some common mistakes interns make and should avoid? 
3. What can interns do to stand out among the others?

I myself am going into a new position, as are all of my friends. We got on the topic about what some of us are or aren’t doing to get ready, and what we hope to get out of it. That made me want to ask here to get other opinions and for others in the same position to get some advice maybe they haven't heard.

EDIT: Thanks for the responses!",1555024043.0,2019-04-11 19:07:23
992,A middle-aged PhD without industrial experience hates research and wants out,432,e11s2p,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/e11s2p/a_middleaged_phd_without_industrial_experience/,90,"Hello. I'm in a rather unusual position and in a need of advice. So, I'm in a midst of a 'successful' career in CS research. I did my PhD in quite a theoretical subject that was supposed to be also applied (symbolic logic) but it's not. And will probably never be, at least by me. I passionately hate this job, especially since I started publishing at 'top' conferences and noticed that most of it is really bogus. What I mean is that it's not that hard, given that you have enough math skills, to find a niche that you can explore for years and that has no meaning in a real world.

So, I want out of academia, but due to many commitments this can only happen in \~2 years, when I'm almost 45. I want to plan what to learn in the meantime to maximise my chances of finding a nice job that involves doing something meaningful and hope for some suggestions from you, here. I'm considering two paths: The first would be to learn some of the current software dev techniques and hot languages (I hear Rust is nice) and try to find a job as a software engineer. The other path involves teaching myself the hottt machine learning stuff, in particular reinforcement learning, and looking for a job as an AI guy. I'm fine with both possibilities, but my internal plan selector is broken since childhood (a mild form of OCD) and I can't decide. And, uh, I have no industrial experience apart from academia and teaching. Help?

TL;DR - a middle-aged PhD without industrial experience hates research despite not doing bad and wants to be an engineer.",1574646598.0,2019-11-24 20:49:58
993,"I need to vent: I'm in my late 20s, I'm absolutely terrible at my job and I feel inferior and that I wasted 10 years of my life",430,8u6qx6,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/8u6qx6/i_need_to_vent_im_in_my_late_20s_im_absolutely/,166,"I was never interested in programming or computers beyond gaming as a teenager. My dad is a software developer, he told me to go into it because it's a good career. In my first high school CS course when I was starting out I was failing the course though it eventually gotten much better because of how much effort I put in I sometimes wish I just gave up on programming back then.

So I've always being terrible at programming, but I worked hard and had good grades. I got into the CS program at one of the best North American schools, my parents basically assumed that a good school will make me a good programmer but the truth is deep down inside I always knew I was going to be terrible at it. 

So once I was actually in University things just fall apart, I literally cannot connect lecture material with assignments when it comes to coding. Like when I start doing assignments in Stats or Math or whatever instead of my coding courses I'm actually relieved. The ironic thing is doing the courses that's actually relevant to my career is what I'm actually worst at.

I had internships: at almost every single one of the internships I've being told I would probably be fired if I was a full-timer, I was actually fired from one. 

I'm beginning to come to the conclusion I can't handle complicated problems: I know that people say I should break them down but I just can't. I don't even know when to begin. 

And once I start coding it's like everything just becomes a fog: all the objects and classes starts to mix together. It's like being told to assemble an machine with many components and I don't have the design diagram in my head so I keep jamming components together and getting nowhere. 

I start writing methods which make no sense, or I suddenly start writing methods which are obsolete or does nothing, or I start putting code in classes which make no sense. Or  I start fiddling around with code that has nothing to do with the current problem. Or I dive into solving a problem only to realize it's so incredibly convoluted I can't solve it: and worse yet, it never needed solving because i made a fundamental design flaw 5 steps ago which caused the issue in the first place. I'm afraid to ask for help because the look I get like ""this is such a stupid thing to ask"" and other times it feels I'm asking for help so much that I'm almost getting other people to do the project for me.

Things got better after I graduated (I graduated successfully because I worked 3x more than everybody else did). I actually ended up doing a grad degree in a non-CS mathematical field but I ran into the same problem I did in my undergrad: initially things went really well, but as soon as the problems become complicated I go from top of the class to literally the very bottom.

So after 10 years of struggling since my freshman year, the only thing I've achieved is to be at an entry level developer position in which I'm doing just well enough that I'm not afraid of being fired. 

But even now my boss always comments on how I'm doing things too slow, or how my code sucks. I was literally stuck on something for a week which should have taken a day because I went in the wrong direction and took a deep dive into the wrong direction. Every single time now when my boss asks me ""where are you in this problem"" I die a little inside because I know I'm doing things too slow and I get stuck on things. 

I did a calculation vs inflation the other day, the really scary thing is I realized as a developer I haven't had a real raise in years. 

Meanwhile, all my classmates, including the ones who dropped out of school are working in silicon valley making $100ks/year. They are senior developers or managers. I don't even talk to any of them anymore because how shit I feel.

What prompted me to write this is the fact I've being stuck on a dependency issue in my current project all day and I'll probably get yelled about it in the morning. 

I actually worked in support instead of Developer for a year and actually made more, but the problem is I felt I was learning nothing and its a simple job that's probably going to be automated in the years to come. I want to learn, I want to solve interesting and difficult problems and build my worth as an engineer. But at the same time I feel I have zero aptitude for it and I'm wasting my time. 

I don't see things changing in the future and I have no idea what to do. Everyday now I regret going into this career and wish I had done something else, I believed I had potential for something great going into university and I feel I squandered it.",1530103186.0,2018-06-27 08:39:46
994,Reflections on my last 4 months job hunting,434,f73g3p,cscareerquestions,https://www.reddit.com/r/cscareerquestions/comments/f73g3p/reflections_on_my_last_4_months_job_hunting/,81,"I've been working in the SWE industry for about 3.5 years at a FAANG subsidiary. After feeling like my personal growth has stagnated on my team for some time, I decided to embark on a job hunt around August of 2019, and finally finished my hunt!

Overall, I applied to roughly 10 companies, heard back from 7 of them, and made it to the onsite for 4. I ended the search with 4 offers, all of them from companies in the SF Bay Area. The total compensation is comparable for all 4, ranging from 200K to 280K

__Offer 1__: Public FinTech company

__Offer 2__: Private FinTech company

__Offer 3__: FAANG-sized public company

__Offer 4__: FAANG-sized public company

There were actually many great things I noticed that are trending in the industry as I did these interviews, and I'd like to share with you all my experiences, both positive and negative. They aren't really formatted in any specific order.

__On Studying__

- Leetcode is still by far the best way to prepare, though the large majority of the questions I received for technical screens both over the phone and onsite were design questions that asked me to build an API. For example, a card game, or Pacman, or a class representation of a Universe that has galaxies in a grid system. Even though I prepared for it, there was far less random dynamic programming questions that required you to come up with a trick. I viewed this as a huge positive because a few years ago the only questions I would get asked were DP related or some recursive question traversing trees that I would never implement in real life. I would suggest going on Leetcode and searching for ""Design"" questions which will ask you to program things like a Snake game or a Hit Counter. They're much more useful given my experiences.

- I tried many resources for studying, including Leetcode Premium, Interview Cake, and Grokking the System Design Interview. Of those three, the only one I found worth the money was Leetcode Premium. The discussion forum for most well written questions is quite extensive, which is usually useful enough for figuring out a problem. I ""only"" did about 100 questions, 80 of which were medium difficulty. I find that the problems used by Interview Cake are too simple and unlikely to ever be touched upon in an actual interview. As far as Grokking the System Design Interview, it had the most examples of questions you might be asked (design the Uber backend, for example), but I felt that at some point if you learn enough generic concepts through free online materials, there's nothing that this particular course offers except an aggregation of those public resources. I also bought and read the Elements of Programming Interviews book (which was great), and Designing Data Intensive Applications (also great for supplementing System Designs knowledge).

- System design interviews were something new I encountered this time around and shouldn't be underestimated. There's so much you can talk about when building a system and you're given 50 minutes. I studied extensively focusing on depth for certain categories and relying on my work experience to carry me through designing APIs and talking about specific behavior for services. Generally, the interviews are in my experience very much focused on the data model, and how a specific request from a user (say, making a donation to a charity) is going to be specifically routed through my design, including what data fields are touched and how messages are passed around. I feel that interviewers were impressed with how much I knew here given the amount of experience I have (not trying to brag, just got positive feedback in this regard)

- In terms of the questions I received at interviews, I would say that the most frequent type of question I got was OOP design related, followed by some sort of question that could be solved as a graph traversal (BFS, DFS), followed by DP, followed by string manipulation / sliding window questions. I did not receive any questions that would be considered a Leetcode Hard, but none that would be considered an Easy either.

__On My Overall Experiences__

- Not to be too fatalist, but it does seem like the number of software positions at specifically larger, more well-known companies are dwindling for engineers with less than 5 YOE. Specifically for engineers around the SWE II level, many companies that I interviewed with or found openings at as recently as last year no longer had any availabilities. I'm talking about companies with a decently high bar, like Airbnb or Stripe.

- I dealt with some, but significantly less assholes during this job hunt than in previous years. I hope this is a sign of the industry improving even though my sample size is small, but most people I talked to whether at start ups or big companies were generally happy with their company, and didn't have large egos. Many engineers seemed genuinely interested in knowing the work I was doing for my current company. 

- I had forgotten how fucking exhausting interviewing could get. I scheduled multiple onsites for some two weeks back to back, and it was incredibly draining not only because I had to take time off work, but because generally you're looking at 5-6 hours of interviews where you're assessed and grilled non stop. I had to ask some interviewers for bathroom breaks not because they weren't courteous, but because we used up every single minute in every interview.

__My recommendations__

- If you're seriously looking for a job, I estimated that it took me about 3.5 months to get fully ready for the interview process where I felt seriously confident at the interviews. The first 2.5 months I mostly dicked around, studying maybe 1 hour every 3-4 days. By the last month, when the phone screens were completed and onsites were coming up, I spent most weeknights doing coding questions or reading tech blogs. Do you have to do this in order to get the right job? Hell no. But it really did help me feel confident for every single onsite. I felt like I walked away from all my interviews knowing that I passed them.

- For coding practice I purchased Leetcode Premium and started with the Blind 75 list, which is really great. I used the Elements of Programming Interview book and got through about 30% of it, just doing random questions in chapters I felt weak on, like heaps and DP. I bought the book specifically in Python, since I knew I would be interviewing in the language, and it was helpful because the book teaches you how to use Python standard libs, such as during the heap questions. I should have scheduled interviews with companies I was less excited about earlier, because I failed my earlier phone screens due to nerves and lack of practice.

- For system design, just use [this github repo](https://github.com/donnemartin/system-design-primer). This, plus some googling and reading tech blogs is more than sufficient for passing your system design interviews. I did some mock interviews here with a friend. During system design interviews, really focus on figuring out how a service is SPECIFICALLY routed through your design. Does the client engage with a RESTful API in your backend? Does the backend use a thread pool or message queue? Designing data models was extremely important, and understanding how to scale databses.

__Picking the Job__

- I haven't fully decided yet, but I don't intend on taking the offer with the highest compensation. My current team's culture sucks, and I really want to join a company with a team of engineers I know I would enjoy working with. The company that offered the most money also felt the last personal. I didn't like that for some interviews I didn't meet with the actual team of people that I would be working with, since I feel like that is really important for your day-to-day happiness.

- I feel like the dimensions I rated my offer on included: company size, compensation, interest of product, team / company culture, and perceived interest in engineering work.

For anyone who's interviewing, good luck! I sucked so bad at interviews before my recent job, but I really put in the time and came out confident. It's like the SATs, it sucks to study for it, but there's a system that you can master given enough time and effort.",1582276979.0,2020-02-21 04:22:59
